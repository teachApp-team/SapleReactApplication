import { Base, Type } from "igniteui-react-core";
import { AssigningCategoryStyleEventArgs } from "./AssigningCategoryStyleEventArgs";
import { AssigningCategoryMarkerStyleEventArgs } from "./AssigningCategoryMarkerStyleEventArgs";
import { MarkerSeries } from "./MarkerSeries";
import { Brush } from "igniteui-react-core";
import { AssigningCategoryStyleEventArgsBase } from "./AssigningCategoryStyleEventArgsBase";
import { Series } from "./Series";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { DoubleCollection } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { Shape } from "igniteui-react-core";
import { Marker } from "./Marker";
import { DataContext } from "igniteui-react-core";
import { HighlightingInfo } from "./HighlightingInfo";
import { List$1 } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
/**
 * @hidden
 */
export declare class CategorySeriesRenderManager extends Base {
    static $t: Type;
    ah: Brush;
    ai: Brush;
    l: number;
    an: DoubleCollection;
    ap: PenLineCap;
    j: number;
    k: number;
    i: number;
    h: number;
    ar: PenLineCap;
    aq: PenLineCap;
    al: Brush;
    am: Brush;
    r: number;
    ao: DoubleCollection;
    as: PenLineCap;
    p: number;
    q: number;
    o: number;
    n: number;
    au: PenLineCap;
    at: PenLineCap;
    aj: Brush;
    ak: Brush;
    m: number;
    f: boolean;
    e: boolean;
    af: Brush;
    ag: Brush;
    g: number;
    c: AssigningCategoryStyleEventArgs;
    b: AssigningCategoryMarkerStyleEventArgs;
    d: CategoryAxisBase;
    s: number;
    t: number;
    w(a: MarkerSeries, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[], d: number, e: number): void;
    x(a: Series, b: boolean, c: CategoryAxisBase, d: (orderedStartIndex: number, orderedEndIndex: number) => any[], e: number, f: number): void;
    ae(a: Shape, b: boolean, c: boolean, d: boolean, e: boolean): void;
    ad(a: Marker, b: DataContext): void;
    a(a: number, b: number): number[];
    protected u(a: HighlightingInfo): void;
    protected v(a: HighlightingInfo): void;
    protected y(a: AssigningCategoryStyleEventArgsBase, b: boolean, c: List$1<number[]>, d: number, e: number, f: CategoryAxisBase, g: ScalerParams, h: boolean, i: boolean): void;
    ac(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean, g: boolean): void;
    aa(a: HighlightingInfo, b: boolean, c: boolean): void;
    ab(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean, g: boolean): void;
    z(a: HighlightingInfo, b: boolean, c: boolean): void;
}
