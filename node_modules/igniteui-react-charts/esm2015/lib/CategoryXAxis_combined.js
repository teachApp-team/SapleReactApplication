/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CategoryAxisBase } from "./CategoryAxisBase";
import { DependencyProperty } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Base, Number_$type, typeCast, Array_$type, markType, TypeRegistrar } from "igniteui-react-core";
import { HorizontalAxisLabelPanel } from "./HorizontalAxisLabelPanel";
import { Rect } from "igniteui-react-core";
import { MathUtil } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { NumericScaler } from "./NumericScaler";
import { LinearCategorySnapper } from "./LinearCategorySnapper";
import { NumericYAxis } from "./NumericYAxis";
import { LabelPosition } from "./LabelPosition";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
/**
 * @hidden
 */
export let CategoryXAxis = /*@__PURE__*/ (() => {
    class CategoryXAxis extends CategoryAxisBase {
        constructor() {
            super();
            this.lg = 1;
            this.lf = 1;
            this.k6 = 0;
            this.k7 = 0;
            this.jt = new List$1(Number_$type, 0);
            this.ab = CategoryXAxis.$;
        }
        a2() {
            return new CategoryXAxisView(this);
        }
        gx(a) {
            super.gx(a);
            this.k4 = a;
        }
        get li() {
            return this.lg;
        }
        set li(a) {
            this.lg = a;
        }
        get lh() {
            return this.lf;
        }
        set lh(a) {
            this.lf = a;
        }
        at() {
            if (this.cr) {
                return (TypeRegistrar.create('HorizontalSmartAxisLabelPanel'));
            }
            else {
                return new HorizontalAxisLabelPanel();
            }
        }
        getCategorySize(a, b, c) {
            let d = this.i6(b, c);
            return d.width / (this.j5 * a.width);
        }
        jy(a, b, c) {
            let d = !isNaN_(this.jv) ? MathUtil.b(this.jv, 0, 1) : 0;
            let e = 0;
            if (!isNaN_(this.j2)) {
                e = Math.min(this.j2, 1);
            }
            else {
                e = 0;
            }
            ;
            let f = 1 - 0.5 * d;
            let g = this.j8 == 0 ? 1 : this.j8;
            let h = this.getCategorySize(a, b, c) * f / (g - (g - 1) * e);
            return h;
        }
        getGroupCenter(a, b, c, d) {
            let e = 0.5;
            if (this.j8 > 1) {
                let f = !isNaN_(this.jv) ? MathUtil.b(this.jv, 0, 1) : 0;
                let g = 0;
                if (!isNaN_(this.j2)) {
                    g = Math.min(this.j2, 1);
                }
                let h = 1 - 0.5 * f;
                let i = h / (this.j8 - (this.j8 - 1) * g);
                let j = (h - i) / (this.j8 - 1);
                e = 0.25 * f + 0.5 * i + a * j;
            }
            return this.getCategorySize(b, c, d) * e;
        }
        dl() {
            return this.ld;
        }
        ln(a) {
            let b = this.bh != null ? this.bh.mr : Rect.empty;
            b = b.copy();
            let c = this.i8;
            let d = this.i5();
            let e = new Rect(0, 0, 0, 1, 1);
            let f = new ScalerParams(0, e, e, this.ca, d);
            let g = !b.isEmpty && !c.isEmpty && this.jm != null ? this.jm.indexOf(a) : -1;
            let h = g > -1 ? this.dy(g, f) : NaN;
            if (!isNaN_(h) && this.bh.c0) {
                if (!isNaN_(h)) {
                    if (h < b.left + 0.1 * b.width) {
                        h = h + 0.4 * b.width;
                        b.x = h - 0.5 * b.width;
                    }
                    if (h > b.right - 0.1 * b.width) {
                        h = h - 0.4 * b.width;
                        b.x = h - 0.5 * b.width;
                    }
                }
                this.bh.kn(b, false, true);
            }
        }
        dy(a, b) {
            if (!b.c.isEmpty) {
                let c = this.lc(a, NumericScaler.ac, b.c, this.categoryMode);
                c = (c - b.d.left) / b.d.width;
                c = b.d.left + b.d.width * (c - b.e.left) / b.e.width;
                return c;
            }
            return this.lc(a, b.e, b.d, this.categoryMode);
        }
        k3(a) {
            if (typeCast(List$1.$.specialize(Array_$type), a) !== null) {
                return a.asArray();
            }
            return null;
        }
        gr(a, b, c, d, e) {
            let f;
            let g = e.e;
            let h = e.d;
            let i = e.c;
            let j = e.a;
            let k = !i.isEmpty;
            let l = this.categoryMode == 0 ? this.j5 - 1 : this.j5;
            if (l < 0) {
                l = 0;
            }
            let m = i.left;
            let n = i.width;
            let o = g.left;
            let p = g.width;
            let q = h.left;
            let r = h.width;
            let s = 0;
            let t = 1;
            let u = this.k3(a);
            let v = false;
            if (u != null) {
                v = true;
            }
            let w;
            for (let x = 0; x < b.count; x++) {
                w = b.item(x);
                for (let y = c; y < d; y++) {
                    if (v) {
                        f = u[y];
                    }
                    else {
                        f = a.item(y);
                    }
                    if (k) {
                        let z = l >= 1 ? (f[w]) / (l) : l == 0 ? 0.5 : NaN;
                        if (j) {
                            z = 1 - z;
                        }
                        z = m + n * (z - s) / t;
                        let aa = (z - (o * r)) / p;
                        f[w] = aa;
                    }
                    else {
                        let ab = l >= 1 ? (f[w]) / (l) : l == 0 ? 0.5 : NaN;
                        if (j) {
                            ab = 1 - ab;
                        }
                        ab = q + r * (ab - o) / p;
                        f[w] = ab;
                    }
                }
            }
        }
        dz(a, b, c) {
            if (!b.c.isEmpty) {
                let d = this.lc(a, NumericScaler.ac, b.c, c);
                d = (d - b.d.left) / b.d.width;
                d = b.d.left + b.d.width * (d - b.e.left) / b.e.width;
                return d;
            }
            return this.lc(a, b.e, b.d, c);
        }
        lc(a, b, c, d) {
            let e = d == 0 ? this.j5 - 1 : this.j5;
            if (e < 0) {
                e = 0;
            }
            let f = e >= 1 ? (a) / (e) : e == 0 ? 0.5 : NaN;
            if (this.cb) {
                f = 1 - f;
            }
            return c.left + c.width * (f - b.left) / b.width;
        }
        d1(a, b) {
            if (!b.c.isEmpty) {
                let c = b.e.left + b.e.width * (a - b.d.left) / b.d.width;
                c = (c * b.d.width) + b.d.left;
                c = this.getUnscaledValue3(c, NumericScaler.ac, b.c, this.categoryMode);
                return c;
            }
            return this.getUnscaledValue3(a, b.e, b.d, this.categoryMode);
        }
        d2(a, b, c) {
            if (!b.c.isEmpty) {
                let d = b.e.left + b.e.width * (a - b.d.left) / b.d.width;
                d = (d * b.d.width) + b.d.left;
                d = this.getUnscaledValue3(d, NumericScaler.ac, b.c, c);
                return d;
            }
            return this.getUnscaledValue3(a, b.e, b.d, c);
        }
        getUnscaledValue3(a, b, c, d) {
            let e = b.left + (a - c.left) * b.width / c.width;
            if (this.cb) {
                e = 1 - e;
            }
            let f = d == 0 ? this.j5 - 1 : this.j5;
            if (f < 0) {
                f = 0;
            }
            return e * f;
        }
        lo(a, b) {
            if (a == NaN || b == NaN || this.jm == null || this.jm.count == 0) {
                return;
            }
            let c = a / this.jm.count;
            let d = (b + 1) / this.jm.count;
            this.bh.m6 = new Rect(0, c, this.bh.m6.y, d - c, this.bh.m6.height);
        }
        hc(a) {
            super.hc(a);
            let b = this.bh != null ? this.bh.mr : Rect.empty;
            let c = this.i8;
            let d = this.i3();
            let e = this.i2();
            let f = new ScalerParams(0, b, c, this.ca, d);
            let g = this.a3.ay();
            let h = this.a3.a1();
            let i = this.a3.az();
            let j = this.a3.a0();
            let k = this.a3.e();
            let l = this.a3.f();
            let m = this.a3.g();
            let n = this.jm;
            let o = this.k5();
            this.hj();
            this.gn(g);
            this.gn(h);
            this.gn(i);
            this.gn(j);
            this.cx.clear();
            this.cy.clear();
            this.jt.clear();
            this.a3.at(this, b, c);
            if (b.isEmpty || c.isEmpty) {
                this.bq.count = 0;
                this.bp.count = 0;
                this.bo.count = 0;
            }
            if (this.bq.count == 0 && this.bp.count == 0) {
                this.a3.y();
            }
            if (this.ax != null) {
                this.ax.registerAxis(this);
            }
            if (this.itemsSource == null || o == null || n.count == 0) {
                this.bq.count = 0;
                this.bp.count = 0;
                this.bo.count = 0;
                this.a3.y();
                return;
            }
            if (!b.isEmpty && !c.isEmpty) {
                let p = this.d1(e.left, f);
                let q = this.d1(e.right, f);
                if (this.ca) {
                    p = Math.ceil(p);
                    q = Math.floor(q);
                }
                else {
                    p = Math.floor(p);
                    q = Math.ceil(q);
                }
                let r = c.bottom;
                let s = r - c.top;
                if (this.ah != null) {
                    let t = typeCast(NumericYAxis.$, this.ah);
                    if (t != null) {
                        let u = this.hf(r, s, b, c, d, c.top, c.bottom);
                        r = u.p0;
                        s = u.p1;
                    }
                }
                this.gv(g, r, c, k, true);
                this.a3.ao(s);
                let v = Math.min(p, q);
                let w = Math.max(p, q);
                let x = new LinearCategorySnapper(1, v, w, e.width, this.ld, this.categoryMode, this.eb());
                let y = Math.floor((v - 0) / x.g);
                let z = Math.ceil((w - 0) / x.g);
                this.k8 = x.g;
                if (!isNaN_(y) && !isNaN_(z)) {
                    let aa = truncate(y);
                    let ab = truncate(z);
                    let ac = this.lb(0 + aa * x.g, f);
                    let ad = this.dy(x.g, f);
                    let ae = Math.abs(ad - this.dy(0, f));
                    this.a3.ap(ad);
                    let af = truncate(Math.ceil(e.right));
                    let ag = truncate(Math.floor(e.left));
                    let ah = this.le;
                    let ai = ah > 0 && ah < x.g;
                    let aj = c.right;
                    let ak = this.jt;
                    let al = x.g;
                    let am = truncate(al);
                    let an = this.j8;
                    let ao = this.ca;
                    let ap = this.categoryMode;
                    for (let aq = aa; aq <= ab; ++aq) {
                        let ar = this.lb(0 + (aq + 1) * x.g, f);
                        if (ac <= aj) {
                            if (aq % 2 == 0) {
                                this.hl(h, ac, ar, c);
                            }
                            this.hk(i, ac, c, l, false);
                            ak.add(ac);
                        }
                        if (this.categoryMode != 0 && this.j8 != 0 && this.cl) {
                            if (ai) {
                                let as = ae * this.le;
                                if (this.ca) {
                                    let at = ac;
                                    while (at - as > ar) {
                                        at -= as;
                                        if (Math.abs(at - ar) < 0.0001) {
                                            break;
                                        }
                                        this.hk(j, at, c, m, false);
                                    }
                                }
                                else {
                                    let au = ac;
                                    while (au + as < ar) {
                                        au += as;
                                        if (Math.abs(au - ar) < 0.0001) {
                                            break;
                                        }
                                        this.hk(j, au, c, m, false);
                                    }
                                }
                                this.k9 = this.le;
                            }
                            else {
                                for (let av = 0; av < truncate(x.g); av++) {
                                    for (let aw = 0; aw < this.j8; aw++) {
                                        let ax = this.getGroupCenter(aw, b, c, d);
                                        if (this.ca) {
                                            ax = -ax;
                                        }
                                        let ay = this.dy(av + aq * x.g, f) + ax;
                                        this.hk(j, ay, c, m, false);
                                    }
                                }
                                this.k9 = 0.5;
                            }
                        }
                        let az = this.la(aq * al, ac, ap == 0, f);
                        let a0 = truncate(Math.round(az));
                        if (a0 >= ag && a0 <= af) {
                            let a1 = 0;
                            if (al >= 1) {
                                a1 = aq * truncate(Math.floor(al));
                            }
                            else {
                                if ((aq * al) * 2 % 2 == 0) {
                                    a1 = truncate(Math.floor(aq * al));
                                }
                                else {
                                    a1 = -1;
                                }
                            }
                            if (o != null && a1 < n.count && a1 >= 0) {
                                let a2 = o.getItem(a1);
                                let a3 = this.e8(a2);
                                if (!isNaN_(az) && !isInfinity(az) && a3 != null) {
                                    if ((typeof a3 === 'string') && Base.equalsStatic(a3, "")) {
                                    }
                                    else {
                                        this.cx.add1(a3);
                                        this.cy.add(new LabelPosition(az));
                                    }
                                }
                            }
                        }
                        ac = ar;
                    }
                }
                if ((this.ax == null || this.ax.visibility == 0) && this.ah != null) {
                    if (this.ax != null && (this.ax.location == 4 || this.ax.location == 5)) {
                        this.bh.hu();
                    }
                }
                this.a3.au(this.cx, this.cy);
                this.kt();
            }
        }
        cp() {
            if (this.ci && this.cq) {
                this.ba = this.a9();
            }
            if (this.jm == null) {
                return false;
            }
            let a = this.jm.count;
            if (a != this.lh) {
                let b = new AxisRangeChangedEventArgs(0, 1, 1, this.lh, a);
                this.lh = a;
                this.g6(b);
                return true;
            }
            return false;
        }
        get ld() {
            return this.c(CategoryXAxis.lp);
        }
        set ld(a) {
            this.h(CategoryXAxis.lp, a);
        }
        get k8() {
            return this.k6;
        }
        set k8(a) {
            if (this.k8 != a) {
                let b = this.k6;
                this.k6 = a;
                this.g5("ActualInterval", b, this.k8);
            }
        }
        d9() {
            return this.k8;
        }
        get le() {
            return this.c(CategoryXAxis.lq);
        }
        set le(a) {
            this.h(CategoryXAxis.lq, a);
        }
        get k9() {
            return this.k7;
        }
        set k9(a) {
            if (this.k9 != a) {
                let b = this.k7;
                this.k7 = a;
                this.g5("ActualMinorInterval", b, this.k9);
            }
        }
        jp(a) {
            if (a == null) {
                return false;
            }
            let b = this.bc();
            if (b == null) {
                return false;
            }
            return b.synchronizeHorizontally;
        }
        get_a0() {
            return 0;
        }
        get a0() {
            return this.get_a0();
        }
        k5() {
            return this.jm;
        }
        lb(a, b) {
            return this.dy(a, b);
        }
        la(a, b, c, d) {
            if (!c) {
                let e = this.lb(a + 1, d);
                return (b + e) / 2;
            }
            return b;
        }
        get isVertical() {
            return this.ch;
        }
        j$c(a, b) {
            return this.d1.apply(this, arguments);
        }
        j$b(a, b) {
            return this.dy.apply(this, arguments);
        }
        j$d(a, b, c, d, e) {
            this.gr.apply(this, arguments);
        }
        j$e(a, b, c, d) {
            this.gs.apply(this, arguments);
        }
        j$f(a, b, c, d) {
            this.gt.apply(this, arguments);
        }
        get j$a() {
            return this.ca;
        }
    }
    CategoryXAxis.$t = /*@__PURE__*/ markType(CategoryXAxis, 'CategoryXAxis', CategoryAxisBase.$);
    CategoryXAxis.lp = /*@__PURE__*/ DependencyProperty.i("Interval", Number_$type, CategoryXAxis.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        a.g5("Interval", b.oldValue, b.newValue);
        a.hb(false);
    }));
    CategoryXAxis.lq = /*@__PURE__*/ DependencyProperty.i("MinorInterval", Number_$type, CategoryXAxis.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        (typeCast(CategoryXAxis.$, a)).g5("MinorInterval", b.oldValue, b.newValue);
        (typeCast(CategoryXAxis.$, a)).hb(false);
    }));
    return CategoryXAxis;
})();
/**
 * @hidden
 */
export let CategoryXAxisView = /*@__PURE__*/ (() => {
    class CategoryXAxisView extends CategoryAxisBaseView {
        constructor(a) {
            super(a);
            this.bg = null;
            this.bg = a;
        }
    }
    CategoryXAxisView.$t = /*@__PURE__*/ markType(CategoryXAxisView, 'CategoryXAxisView', CategoryAxisBaseView.$);
    return CategoryXAxisView;
})();
//# sourceMappingURL=CategoryXAxis_combined.js.map
