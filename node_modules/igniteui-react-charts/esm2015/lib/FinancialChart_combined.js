/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { IndicatorPane } from "./IndicatorPane";
import { Base, BaseError, EventArgs, runOn, delegateRemove, delegateCombine, typeCast, fromEnum, EnumUtil, Number_$type, String_$type, enumGetBox, markType, TypeRegistrar, fromEn } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleFinancialPriceSeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { FinancialChartVolumeType_$type } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode_$type } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode_$type } from "./FinancialChartYAxisMode";
import { FinancialChartType_$type } from "./FinancialChartType";
import { NumericYAxis } from "./NumericYAxis";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { FinancialChartZoomSliderType_$type } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartViewModel } from "./FinancialChartViewModel";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerSeries } from "./MarkerSeries";
import { SyncSettings } from "./SyncSettings";
import { SyncManager } from "./SyncManager";
import { FinancialOverlayType_$type } from "./FinancialOverlayType";
import { ArrayExtension } from "igniteui-react-core";
import { FinancialIndicatorType_$type } from "./FinancialIndicatorType";
import { IndicatorDisplayType_$type } from "./IndicatorDisplayType";
import { ITimeRangeSelectorAxis_$type } from "./ITimeRangeSelectorAxis";
import { FinancialChartVisualData } from "./FinancialChartVisualData";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { ScalerParams } from "./ScalerParams";
import { stringReplace, stringJoin, stringIsNullOrEmpty } from "igniteui-react-core";
import { timeSpanFromDays } from "igniteui-react-core";
import { dateMaxValue, dateMinValue } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType_$type } from "igniteui-react-core";
import { FinancialChartIndicatorMenuContext } from "./FinancialChartIndicatorMenuContext";
import { FinancialChartTypePickerContext } from "./FinancialChartTypePickerContext";
import { FinancialChartRangeSelectorContext } from "./FinancialChartRangeSelectorContext";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorView } from "./FinancialChartRangeSelectorView";
/**
 * @hidden
 */
export let FinancialChart = /*@__PURE__*/ (() => {
    class FinancialChart extends XYChart {
        constructor() {
            super();
            this.qr = null;
            this.s9 = null;
            this.s7 = null;
            this.s4 = null;
            this.s6 = null;
            this.s8 = null;
            this.s5 = null;
            this.px = null;
            this.tr = null;
            this.ts = null;
            this.to = null;
            this.tt = null;
            this.tu = null;
            this.tp = null;
            this.tq = null;
            this.rf = null;
            this.sk = 40;
            this.ql = null;
            this.qj = null;
            this.qn = null;
            this.qs = null;
            this.t2 = null;
            this.rb = null;
            this.rz = false;
            this.ry = false;
            this.r4 = false;
            this.rl = false;
            this.tf = 10;
            this.sm = NaN;
            this.so = NaN;
            this.sn = NaN;
            this.sp = 0;
            this.p3 = 0;
            this.p6 = 0;
            this.p8 = 0;
            this.ri = true;
            this.pz = 0;
            this.rj = false;
            this.qd = null;
            this.qf = null;
            this.r6 = null;
            this.rk = true;
            this.rc = null;
            this.qa = 1;
            this.o1 = null;
            this.o2 = null;
            this.o3 = null;
            this.o4 = null;
            this.o6 = null;
            this.o5 = null;
            this.o0 = null;
            this.oz = null;
            this.sl = 1;
            this.sj = 1;
            this.si = 1;
            this.qp = null;
            this.tb = -2147483648;
            this.sh = 2;
            this.te = 3;
            this.tc = 10;
            this.ta = 30;
            this.td = 9;
            this.pu = null;
            this.pv = null;
            this.pq = null;
            this.applyCustomIndicators = null;
            this.xm = null;
            this.sq = 1;
            this.rh = false;
            this.qh = null;
            this.se = dateMinValue();
            this.sd = dateMaxValue();
            this.sb = null;
            this.f6();
            this.sb = new ObservableCollection$1(Base.$, 0);
            if (this.xAxisBreaks != null) {
                let a = this.xAxisBreaks;
                a.collectionChanged = delegateCombine(a.collectionChanged, (a, b) => this.xb());
            }
            this.ww();
        }
        g5(a, b, c) {
            super.g5(a, b, c);
            switch (a) {
                case "ToolbarTemplate":
                case "RangeSelectorTemplate":
                    this.py = new FinancialChartToolbar(this, this.tz);
                    break;
                case "Toolbar":
                    let d = b;
                    if (d != null) {
                        d.chartTypeChanged = delegateRemove(d.chartTypeChanged, runOn(this, this.wk));
                        d.trendLineTypeChanged = delegateRemove(d.trendLineTypeChanged, runOn(this, this.wn));
                        d.volumeTypeChanged = delegateRemove(d.volumeTypeChanged, runOn(this, this.wo));
                        d.l(null);
                    }
                    if (this.py != null) {
                        this.py.ac = this.p5;
                        this.py.ai = this.av;
                        this.py.y = this.p0;
                        this.py.al = this.rw;
                        if (this.s6 != null) {
                            this.py.l(this.s6);
                        }
                        let e = this.py;
                        e.chartTypeChanged = delegateCombine(e.chartTypeChanged, runOn(this, this.wk));
                        ;
                        let f = this.py;
                        f.trendLineTypeChanged = delegateCombine(f.trendLineTypeChanged, runOn(this, this.wn));
                        let g = this.py;
                        g.volumeTypeChanged = delegateCombine(g.volumeTypeChanged, runOn(this, this.wo));
                    }
                    break;
                case "ChartType":
                    if (this.py != null) {
                        this.py.y = this.p0;
                    }
                    break;
                case "VolumeType":
                    if (this.py != null) {
                        this.py.ac = this.p5;
                    }
                    break;
                case "TrendLineType":
                    if (this.py != null) {
                        this.py.ai = this.av;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.py == null) {
                        break;
                    }
                    this.py.al = this.rw;
                    this.setGridRows();
                    break;
            }
        }
        wo(a, b) {
            this.p5 = this.py.ac;
        }
        wn(a, b) {
            this.av = this.py.ai;
        }
        wk(a, b) {
            this.p0 = this.py.y;
        }
        ww() {
            this.qr = new IndicatorPane();
            this.qi = TypeRegistrar.create("FinancialLegend");
        }
        provideGrid(a) {
            this.s9 = a;
            this.xh();
            this.setGridRows();
            if (this.py != null) {
                this.py.bg(a);
            }
        }
        onDocumentClick(a) {
            if (this.py != null) {
                this.py.bl(a);
            }
        }
        getContext() {
            let a = this.py.v();
            let b = new FinancialChartContext();
            b.vm = new FinancialChartViewModel();
            b.vm.toolbar = a;
            b.container = this.di;
            b.toolbarContainer = this.s6;
            b.legendContainer = this.s5;
            b.indicatorsContainer = this.s4;
            b.volumeContainer = this.s7;
            b.zoomContainer = this.s8;
            return b;
        }
        provideContainer(a) {
            let b = a;
            if (b != null) {
                let c = "financialChartMainGrid";
                let d = b.createElement("div");
                d.setStyleProperty("width", "100%");
                d.setStyleProperty("height", "100%");
                if (this.py == null) {
                    this.py = new FinancialChartToolbar(this, this.tz);
                }
                this.py.w.isIndicatorMenuVisible = this.rn && this.ro;
                this.s6 = b.getSubRenderer(d);
                this.py.l(this.s6);
                let e = b.createElement("div");
                e.setStyleProperty("width", "100%");
                e.setStyleProperty("height", "100%");
                let f = b.createElement("div");
                f.setStyleProperty("width", "100%");
                f.setStyleProperty("height", "100%");
                this.s5 = b.getSubRenderer(f);
                let g = b.createElement("div");
                g.setStyleProperty("width", "100%");
                g.setStyleProperty("height", "100%");
                this.s4 = b.getSubRenderer(g);
                let h = b.createElement("div");
                h.setStyleProperty("width", "100%");
                h.setStyleProperty("height", "100%");
                this.s7 = b.getSubRenderer(h);
                let i = b.createElement("div");
                i.setStyleProperty("width", "100%");
                i.setStyleProperty("height", "100%");
                this.s8 = b.getSubRenderer(i);
                a = b.getSubRenderer(e);
            }
            else {
                this.s6 = null;
                if (this.py != null) {
                    this.py.l(null);
                }
                if (this.rg != null) {
                    this.rg.provideContainer(null);
                    this.rg = null;
                }
                if (this.qi != null) {
                    this.qi.provideContainer(null);
                }
            }
            super.provideContainer(a);
            if (b != null) {
                if (this.volumeChart != null) {
                    this.volumeChart.provideContainer(this.s7);
                }
                if (this.qr != null) {
                    this.qr.h(this.s4);
                }
                if (this.zoomSliderChart != null) {
                    this.zoomSliderChart.provideContainer(this.s8);
                    if (a != null) {
                        this.v4();
                    }
                    else {
                        this.rg = null;
                    }
                }
                if (this.qi != null) {
                    this.qi.provideContainer(this.s5);
                }
                this.setGridRows();
            }
        }
        w7(a, b, c) {
            if (a != null) {
                a.provideContainer(null);
            }
            if (b != null) {
                b.provideContainer(c);
            }
            this.setGridRows();
        }
        xl(a, b) {
            this.w7(a, b, this.s8);
            if (b == null) {
                return;
            }
            this.v4();
        }
        v4() {
            if (this.s8 == null) {
                return;
            }
            if (this.rg != null) {
                this.rg.provideContainer(null);
            }
            this.rg = TypeRegistrar.create("ZoomSlider");
            this.rg.provideContainer(this.s8);
            let a = this.rg;
            a.windowRectChanged = delegateCombine(a.windowRectChanged, (a, b) => {
                if (this.dataChart != null) {
                    this.dataChart.m6 = new Rect(0, this.rg.windowRect.left, this.dataChart.mr.top, this.rg.windowRect.width, this.dataChart.mr.height);
                }
            });
            this.v5();
        }
        xj(a, b) {
            this.w7(a, b, this.s7);
        }
        setGridRows() {
            if (this.s9 == null) {
                return;
            }
            let a = new Array(6);
            a[0] = (this.rw ? this.sv : 0) + "px";
            a[1] = this.rs ? "min-content" : "0px";
            a[2] = "auto";
            a[3] = this.indicatorCharts == null || this.indicatorCharts.count == 0 ? "0px" : this.indicatorCharts.count * 150 + "px";
            a[4] = this.volumeChart == null ? "0px" : "100px";
            a[5] = this.zoomSliderChart == null ? "0px" : "100px";
            if (this.rg != null) {
                if (a[5] == "0px") {
                    this.rg.hide();
                }
                else {
                    this.rg.show();
                }
            }
            this.s9.setStyleProperty("-ms-grid-rows", stringReplace(stringJoin(" ", ...a), "auto", "1fr"));
            this.s9.setStyleProperty("grid-template-rows", stringJoin(" ", ...a));
            if (this.di == null) {
                return;
            }
            if (this.dataChart != null) {
                this.dataChart.notifyContainerResized();
            }
            if (this.qr != null) {
                this.qr.f();
            }
            if (this.volumeChart != null) {
                this.volumeChart.notifyContainerResized();
            }
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.notifyContainerResized();
            }
            if (this.rg != null) {
                this.rg.notifySizeChanged();
            }
        }
        gj() {
            super.gj();
            this.il = 3;
            this.nw = 0;
            this.cu = NaN;
            this.cs = 30;
            this.bq = true;
            this.bw = false;
            if (this.dataChart != null) {
                let a = this.dataChart.bn.i.e();
                this.o9 = a.d;
                this.pa = a.e;
                this.o8 = a.d;
                this.xn = this.dataChart.po;
            }
            let b = new BrushCollection();
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "rgba(116, 70, 185, .3)";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "rgba(159, 179, 40, .3)";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "rgba(46, 156, 166, .3)";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "rgba(63, 81, 181, .3)";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "rgba(154, 154, 154, .3)";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "rgba(67, 156, 71, .3)";
                return $ret;
            })()));
            this.pb = b;
            let c = new BrushCollection();
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#7446B9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#9FB328";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#2E9CA6";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#3F51B5";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#9A9A9A";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#439C47";
                return $ret;
            })()));
            this.pc = c;
        }
        w3() {
            if (this.qr != null) {
                this.qr.b = null;
                this.qr.b = this.indicatorCharts;
            }
            this.setGridRows();
        }
        w4() {
            this.setGridRows();
        }
        xd() {
            this.w3();
        }
        v3() {
            if (this.rg == null || this.zoomSliderChart == null || this.dataChart == null || this.dataChart.series.count == 0) {
                return;
            }
            let a = this.di.rootWrapper.width();
            let b = this.dataChart.m5.left + this.dataChart.m5.width;
            let c = this.dataChart.m5.left;
            let d = a - b;
            this.rg.startInset = c - this.rg.trackStartInset;
            this.rg.endInset = d - this.rg.trackEndInset;
            if (this.rg.endInset < 0) {
                let e = this.rg.endInset;
                this.rg.endInset = 0;
                this.dataChart.el += (e * -1);
            }
            if (this.rg.startInset < 0) {
                let f = this.rg.startInset;
                this.rg.startInset = 0;
                this.dataChart.ej += (f * -1);
            }
            this.zoomSliderChart.ej = c;
            this.zoomSliderChart.el = d;
            this.zoomSliderChart.ef = this.rg.barExtent;
        }
        wu() {
            this.v3();
        }
        gg(a) {
            super.gg(a);
            if (a != null) {
                a.ee = 0;
            }
        }
        xo(a) {
            return a.mk();
        }
        xr() {
            return this.s5 == null ? null : this.xq(this.s5.rootWrapper);
        }
        xp(a) {
            if (a == null || a.d == null) {
                return null;
            }
            return this.xq(a.d.rootWrapper);
        }
        xq(a) {
            if (a == null) {
                return null;
            }
            let b = a.getOffset();
            return new Rect(0, b.left, b.top, a.width(), a.height());
        }
        sr() {
            if (this.s9 == null) {
                return NaN;
            }
            let a = this.s9.getOffset();
            return this.s9.width() + (a == null ? 0 : a.left);
        }
        gr(source_, a, b) {
            super.gr(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.hz(source_, a, b);
            }
        }
        gs(source_, a, b) {
            super.gs(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.h0(source_, a, b);
            }
        }
        gq(source_) {
            super.gq(source_);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.hw(source_);
            }
        }
        gu(source_, a, b, c) {
            super.gu(source_, a, b, c);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.h1(source_, a, b, c);
            }
        }
        gm(a, b) {
            super.gm(a, b);
            if (this.rt(a)) {
                a.toolTip = null;
            }
        }
        get py() {
            return this.px;
        }
        set py(a) {
            let b = this.py;
            if (a != b) {
                this.px = a;
                this.g3("Toolbar", b, this.py);
            }
        }
        get ty() {
            return this.tr;
        }
        set ty(a) {
            let b = this.ty;
            if (a != b) {
                this.tr = a;
                this.g3("RangeSelectorTemplate", b, this.ty);
            }
        }
        get tz() {
            return this.ts;
        }
        set tz(a) {
            let b = this.tz;
            if (a != b) {
                this.ts = a;
                this.g3("ToolbarTemplate", b, this.tz);
            }
        }
        get tv() {
            return this.to;
        }
        set tv(a) {
            let b = this.tv;
            if (a != b) {
                this.to = a;
                this.g3("ChartTypePickerTemplate", b, this.tv);
            }
        }
        get t0() {
            return this.tt;
        }
        set t0(a) {
            let b = this.t0;
            if (a != b) {
                this.tt = a;
                this.g3("TrendLineTypePickerTemplate", b, this.t0);
            }
        }
        get t1() {
            return this.tu;
        }
        set t1(a) {
            let b = this.t1;
            if (a != b) {
                this.tu = a;
                this.g3("VolumeTypePickerTemplate", b, this.t1);
            }
        }
        get tw() {
            return this.tp;
        }
        set tw(a) {
            let b = this.tw;
            if (a != b) {
                this.tp = a;
                this.g3("IndicatorMenuTemplate", b, this.tw);
            }
        }
        get tx() {
            return this.tq;
        }
        set tx(a) {
            let b = this.tx;
            if (a != b) {
                this.tq = a;
                this.g3("OverlayPickerTemplate", b, this.tx);
            }
        }
        get rg() {
            return this.rf;
        }
        set rg(a) {
            let b = this.rg;
            if (a != b) {
                this.rf = a;
                this.g3("ZoomSlider", b, this.rg);
            }
        }
        get_cs() {
            return super.get_cs();
        }
        set_cs(a) {
            super.set_cs(a);
        }
        get_bq() {
            return super.get_bq();
        }
        set_bq(a) {
            super.set_bq(a);
        }
        get sv() {
            return this.sk;
        }
        set sv(a) {
            let b = this.sv;
            if (a != b) {
                this.sk = a;
                this.g3("ToolbarHeight", b, this.sv);
            }
        }
        id() {
            return this.xAxis;
        }
        ie() {
            return this.yAxis;
        }
        onAttachedToUI() {
            super.onAttachedToUI();
            if (this.rg != null) {
                this.rg.onAttachedToUI();
            }
        }
        onDetachedFromUI() {
            super.onDetachedFromUI();
            if (this.rg != null) {
                this.rg.onDetachedFromUI();
            }
        }
        u(a) {
            return 20;
        }
        get_b5() {
            return ((() => {
                let $ret = new List$1(DataSeriesType_$type, 0);
                $ret.add(20);
                return $ret;
            })());
        }
        get b5() {
            return this.get_b5();
        }
        get_b4() {
            return ((() => {
                let $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
                $ret.add(new SimpleFinancialPriceSeriesRule());
                $ret.add(new SubCollectionsRule());
                return $ret;
            })());
        }
        get b4() {
            return this.get_b4();
        }
        pk(a) {
            return this.pl(a);
        }
        qy(a) {
            return this.qz(a);
        }
        pj(a) {
            let b = this.pk(0);
            b.name = a;
            return b;
        }
        f3() {
            this.xAxis = this.pj("xAxis");
            this.yAxis = this.qy(0);
            this.yAxis.name = "yAxis";
            this.volumeAxis = this.qy(0);
            this.volumeAxis.name = "volumeAxis";
            this.volumeXAxis = this.pj("volumeXAxis");
            this.r8 = new List$1(NumericYAxis.$, 0);
            this.sa = new List$1(CategoryAxisBase.$, 0);
            this.indicatorAxis = this.qy(0);
            this.indicatorAxis.name = "indicatorAxis";
            this.indicatorXAxis = this.pj("indicatorXAxis_0");
            this.r8.add(this.indicatorAxis);
            this.sa.add(this.indicatorXAxis);
            if (this.xAxis.ax == null) {
                this.xAxis.ax = new AxisLabelSettings();
            }
            if (this.yAxis.ax == null) {
                this.yAxis.ax = new AxisLabelSettings();
            }
            if (this.volumeAxis.ax == null) {
                this.volumeAxis.ax = new AxisLabelSettings();
            }
            if (this.volumeXAxis.ax == null) {
                this.volumeAxis.ax = new AxisLabelSettings();
            }
            if (this.indicatorAxis.ax == null) {
                this.indicatorAxis.ax = new AxisLabelSettings();
            }
            if (this.indicatorXAxis.ax == null) {
                this.indicatorXAxis.ax = new AxisLabelSettings();
            }
            this.zoomSliderAxis = this.qy(0);
            this.zoomSliderAxis.name = "zoomSliderAxis";
            this.zoomSliderXAxis = this.pj("zoomSliderXAxis");
            if (this.zoomSliderAxis.ax == null) {
                this.zoomSliderAxis.ax = new AxisLabelSettings();
            }
            if (this.zoomSliderXAxis.ax == null) {
                this.zoomSliderXAxis.ax = new AxisLabelSettings();
            }
        }
        f1(a, b) {
            let c = typeCast(MarkerSeries.$, a);
            if (c != null) {
                c.l2 = this.ai(a, b);
            }
        }
        hj(a) {
            if (a.suggestedSecondaryAxis == 2) {
                this.yAxis.j0 = true;
                this.yAxis.kn = 10;
            }
        }
        hm() {
            this.yAxis.j0 = this.r1;
            this.yAxis.kn = this.tn;
        }
        p2(a) {
            let b;
            if (this.p0 == 0) {
                if (a == null || a.index > 0 || stringIsNullOrEmpty(a.getMemberPathFor(12))) {
                    b = 4;
                }
                else {
                    b = 2;
                }
            }
            else {
                b = this.p0;
            }
            b = this.p1(b);
            return b;
        }
        p1(a) {
            if ((a == 1 || a == 2)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        qb(a) {
            if ((a == 2 || a == 3)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 5;
            }
            if (a == 5) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 6;
            }
            if (a == 6) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        p4(a) {
            if (a == 2) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 1;
            }
            if (a == 1) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        t9(a) {
            let b = a.getMemberPathFor(14);
            if (stringIsNullOrEmpty(b)) {
                b = a.getMemberPathFor(11);
            }
            return b;
        }
        pl(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createXAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        qz(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createYAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        q5() {
            return this.ar(1);
        }
        q6() {
            return this.ar(0);
        }
        q4() {
            return this.ar(2);
        }
        q7() {
            return this.ar(20);
        }
        get rm() {
            return (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy"));
        }
        get qm() {
            if (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy")) {
                return TypeRegistrar.create("HorizontalAnchoredCategorySeriesProxy");
            }
            else {
                throw new BaseError(1, "horizontal series module is not loaded, but is required.");
            }
        }
        get rp() {
            return (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy"));
        }
        get qk() {
            if (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy")) {
                return TypeRegistrar.create("FinancialPriceSeriesProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get rn() {
            return (TypeRegistrar.isRegistered("IndicatorProxy"));
        }
        get qo() {
            if (TypeRegistrar.isRegistered("IndicatorProxy")) {
                return TypeRegistrar.create("IndicatorProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get ro() {
            return (TypeRegistrar.isRegistered("OverlayProxy"));
        }
        get qt() {
            if (TypeRegistrar.isRegistered("OverlayProxy")) {
                return TypeRegistrar.create("OverlayProxy");
            }
            else {
                throw new BaseError(1, "overlay series module is not loaded, but is required.");
            }
        }
        aq(a, b) {
            let c = this.t9(a);
            switch (this.p2(a)) {
                case 3:
                    let d = this.q5();
                    this.qm.setValueMemberPath(d, c);
                    this.qm.setXAxis(d, this.xAxis);
                    this.qm.setYAxis(d, this.yAxis);
                    this.qm.setCategoryMode(d, 1);
                    return d;
                case 4:
                    let e = this.q6();
                    this.qm.setValueMemberPath(e, c);
                    this.qm.setXAxis(e, this.xAxis);
                    this.qm.setYAxis(e, this.yAxis);
                    this.qm.setCategoryMode(e, 1);
                    return e;
                default:
                case 1:
                case 2:
                    let f = this.q7();
                    this.qk.setOpenMemberPath(f, a.getMemberPathFor(11));
                    this.qk.setHighMemberPath(f, a.getMemberPathFor(12));
                    this.qk.setLowMemberPath(f, a.getMemberPathFor(13));
                    this.qk.setCloseMemberPath(f, a.getMemberPathFor(14));
                    this.qk.setVolumeMemberPath(f, a.getMemberPathFor(15));
                    this.qk.setXAxis(f, this.xAxis);
                    this.qk.setYAxis(f, this.yAxis);
                    this.qk.setDisplayType(f, this.p0 == 1 ? 1 : 0);
                    this.qk.setCategoryMode(f, 1);
                    return f;
            }
        }
        hl() {
            super.hl();
            this.ws(this.xAxis);
            this.xf(false);
            if (this.p5 != 0 && this.volumeChart != null) {
                this.wy();
            }
            this.ws(this.volumeXAxis);
            this.ws(this.indicatorXAxis);
            this.xc();
            this.xe();
            if (this.qc != 0) {
                this.wz();
                this.ws(this.zoomSliderXAxis);
            }
        }
        nk(a, b) {
            super.nk(a, b);
            a(this.volumeXAxis);
            if (this.sa != null) {
                for (let c of fromEnum(this.sa)) {
                    a(c);
                }
            }
            let d = true;
            switch (b) {
                case "XAxisMajorStroke":
                case "XAxisMajorStrokeThickness":
                    d = false;
                    break;
            }
            if (d) {
                a(this.zoomSliderXAxis);
            }
        }
        no(a, b) {
            super.no(a, b);
            if (b) {
                a(this.volumeAxis);
                if (this.r8 != null) {
                    for (let c of fromEnum(this.r8)) {
                        a(c);
                    }
                }
                a(this.zoomSliderAxis);
            }
        }
        nm(a) {
            super.nm(a);
            this.ne(this.volumeXAxis, a);
            this.ne(this.indicatorXAxis, a);
            this.ne(this.zoomSliderXAxis, a);
        }
        nq(a) {
            super.nq(a);
            this.ne(this.volumeAxis, a);
            this.ne(this.indicatorAxis, a);
            this.ne(this.zoomSliderAxis, a);
        }
        np(a) {
            super.np(a);
            this.nd(this.volumeAxis, a);
            this.nd(this.indicatorAxis, a);
            this.nd(this.zoomSliderAxis, a);
        }
        nl(a) {
            super.nl(a);
            this.nd(this.volumeXAxis, a);
            this.nd(this.indicatorXAxis, a);
            this.nd(this.zoomSliderXAxis, a);
        }
        gf(a) {
            super.gf(a);
            if (a == null) {
                return;
            }
            if (a == this.zoomSliderChart) {
                a.nt = a.nv = false;
                a.legend = null;
                if (this.dataChart != null) {
                    a.nb = this.dataChart.nb;
                    a.ne = this.dataChart.ne;
                }
            }
            else {
                SyncManager.d(a, ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = this.u3();
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })()));
                SyncManager.c(a);
            }
            a.bc = 2;
        }
        u3() {
            if (this.t2 == null) {
                FinancialChart.tm++;
                this.t2 = FinancialChart.tm.toString();
            }
            return this.t2;
        }
        we(a, b) {
            this.v0();
            this.wu();
        }
        v0() {
            if (this.yAxis.b1()) {
                return;
            }
            let a = this.yAxis.au.a5;
            if (this.p5 != 0) {
                a = Math.max(a, this.volumeAxis.au.a5);
            }
            for (let b of fromEnum(this.r8)) {
                a = Math.max(a, b.au.a5);
            }
            this.v1(a);
        }
        v1(a) {
            if (this.yAxis.b1()) {
                return;
            }
            this.yAxis.d6 = this.volumeAxis.d6 = a;
            for (let b of fromEnum(this.r8)) {
                b.d6 = a;
            }
            this.zoomSliderAxis.d6 = this.yAxis.d6;
        }
        v6(a) {
            if (this.indicatorCharts == null) {
                return;
            }
            for (let b = 0; b < this.indicatorCharts.count; b++) {
                let c = this.indicatorCharts._inner[b];
                for (let d = 0; d < c.series.count; d++) {
                    a(c.series._inner[d], b);
                }
            }
        }
        v9(a) {
            if (this.volumeChart == null) {
                return;
            }
            for (let b = 0; b < this.volumeChart.series.count; b++) {
                a(this.volumeChart.series._inner[b], b);
            }
        }
        v7(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!this.rt(c)) {
                    continue;
                }
                a(c, b);
            }
        }
        v8(a, b) {
            if (this.dataChart == null) {
                return;
            }
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.rt(d)) {
                    continue;
                }
                let e = this.tg(d, c);
                a(d, e);
            }
            if (b) {
                this.wa(a);
            }
        }
        wa(a) {
            if (this.zoomSliderChart == null) {
                return;
            }
            for (let b = 0; b < this.zoomSliderChart.series.count; b++) {
                a(this.zoomSliderChart.series._inner[b], b);
            }
        }
        tg(a, b) {
            if (a.bq != this.dataChart) {
                return b;
            }
            let c = this.v == null || this.v.dataSeries == null ? 0 : this.v.dataSeries.count;
            let d = this.qg == null ? 0 : this.qg.count;
            return b - (c * d);
        }
        f9(a) {
            super.f9(a);
            this.v9(a);
            this.v6(a);
            this.wa(a);
        }
        get volumeChart() {
            return this.rb;
        }
        set volumeChart(a) {
            let b = this.volumeChart;
            if (a != b) {
                this.rb = a;
                this.g3("VolumeChart", b, this.volumeChart);
            }
        }
        wy() {
            if (this.dataChart == null) {
                return;
            }
            this.volumeChart.series.clear();
            let a = new List$1(Series.$, 0);
            let b = -1;
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.rt(d) || d.cj) {
                    continue;
                }
                b++;
                let e;
                let f = this.p5;
                f = this.p4(f);
                switch (f) {
                    case 2:
                        e = this.q6();
                        break;
                    case 3:
                        e = this.q4();
                        break;
                    default:
                    case 1:
                        e = this.q5();
                        break;
                }
                this.qm.setCategoryMode(e, 1);
                e.name = "volumeSeries_" + b;
                e.itemsSource = d.itemsSource;
                this.qm.setXAxis(e, this.volumeXAxis);
                this.qm.setYAxis(e, this.volumeAxis);
                this.qm.setValueMemberPath(e, this.v != null && this.v.dataSeries != null && this.v.dataSeries.count > b ? this.v.dataSeries._inner[b].getMemberPathFor(15) : null);
                e.fx = d.fx + " Volume";
                e.k6 = ArrayExtension.getModulus$1(Brush.$, this.pd, b);
                e.k9 = ArrayExtension.getModulus$1(Brush.$, this.pe, b);
                e.ey = this.sw;
                a.add(e);
            }
            let g = this.b1("volume", false);
            if (g != null) {
                a.o(g);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.volumeChart.series.add(i);
                this.gk(i, h);
            }
        }
        rq(a) {
            if (!this.rm) {
                return false;
            }
            return this.qm.matchesType(a);
        }
        ru(a) {
            if (!this.rp) {
                return false;
            }
            return this.qk.matchesType(a);
        }
        rr(a) {
            if (!this.rn) {
                return false;
            }
            return this.qo.matchesType(a);
        }
        rt(a) {
            if (!this.ro) {
                return false;
            }
            return this.qt.matchesType(a);
        }
        wx() {
            if (this.dataChart == null) {
                return;
            }
            let a = 0;
            let b = this.qe == null ? 0 : this.qe.count;
            let c = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let d = b + c;
            for (let e = 0; e < d; e++) {
                let f = new List$1(Series.$, 0);
                let g = this.indicatorCharts._inner[e];
                let h = e >= b;
                let i = h ? this.customIndicatorNames._inner[e - b] : EnumUtil.getName(FinancialIndicatorType_$type, this.qe._inner[e]);
                let j = -1;
                for (let k = 0; k < this.dataChart.series.count; k++) {
                    let l = this.dataChart.series._inner[k];
                    if (this.rt(l) || l.cj) {
                        continue;
                    }
                    j++;
                    let m;
                    if (h) {
                        let n = this.q8("Custom");
                        this.qo.handleCustomIndicatorEvent(n, runOn(this, this.wc));
                        m = n;
                    }
                    else {
                        m = this.ra(this.qe._inner[e]);
                    }
                    if (m == null) {
                        continue;
                    }
                    m.name = "indicator_" + a++;
                    this.qo.setXAxis(m, this.sa._inner[e]);
                    this.qo.setYAxis(m, this.r8._inner[e]);
                    m.itemsSource = l.itemsSource;
                    this.qo.setOpenMemberPath(m, this.v.dataSeries._inner[j].getMemberPathFor(11));
                    this.qo.setHighMemberPath(m, this.v.dataSeries._inner[j].getMemberPathFor(12));
                    this.qo.setLowMemberPath(m, this.v.dataSeries._inner[j].getMemberPathFor(13));
                    this.qo.setCloseMemberPath(m, this.v.dataSeries._inner[j].getMemberPathFor(14));
                    this.qo.setVolumeMemberPath(m, this.v.dataSeries._inner[j].getMemberPathFor(15));
                    m.fx = l.fx + " " + i;
                    m.k6 = ArrayExtension.getModulus$1(Brush.$, this.o7, e);
                    m.ey = this.st;
                    if (this.rr(m)) {
                        this.qo.setNegativeBrush(m, ArrayExtension.getModulus$1(Brush.$, this.o8, e));
                        this.qo.setDisplayType(m, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.qq, e));
                    }
                    if (this.ti != -2147483648 && this.rr(m)) {
                        this.qo.setPeriodOverride(m, this.ti);
                    }
                    if (this.rr(m)) {
                        this.qo.setSmoothingPeriod(m, this.tl);
                    }
                    if (this.rr(m)) {
                        this.qo.setSignalPeriod(m, this.tk);
                    }
                    if (this.rr(m)) {
                        this.qo.setShortPeriod(m, this.tj);
                        this.qo.setLongPeriod(m, this.th);
                    }
                    this.gk(m, e);
                    f.add(m);
                }
                let o = this.b1(i, false);
                for (let p = 0; p < f.count; p++) {
                    let q = f._inner[p];
                    g.series.add(q);
                }
                if (o != null) {
                    for (let r = 0; r < o.count; r++) {
                        let s = o._inner[r];
                        g.series.add(s);
                        this.gk(s, r);
                    }
                }
            }
        }
        q8(indicatorName_) {
            return (this.externalObject.createIndicator(indicatorName_ + 'Indicator').i);
        }
        ra(a) {
            return this.q8(EnumUtil.getName(FinancialIndicatorType_$type, a));
        }
        xf(a) {
            if (this.py == null) {
                return;
            }
            let b = this.xAxis;
            if (b.actualMinimumValue > b.actualMaximumValue) {
                return;
            }
            this.py.as = b.actualMinimumValue;
            this.py.ar = b.actualMaximumValue;
            if (a) {
                this.py.au = b.visibleMinimum;
                this.py.at = b.visibleMaximum;
            }
            this.py.bn();
        }
        dj() {
            let a = ((() => {
                let $ret = new FinancialChartVisualData();
                $ret.mainChart = super.dj();
                $ret.volumeChart = this.volumeChart == null ? null : this.volumeChart.og();
                $ret.toolbar = this.py == null ? null : this.py.aj();
                $ret.zoomChart = this.zoomSliderChart == null ? null : this.zoomSliderChart.og();
                return $ret;
            })());
            if (this.indicatorCharts != null) {
                a.indicatorCharts = new List$1(Base.$, 0);
                for (let b of fromEnum(this.indicatorCharts)) {
                    a.indicatorCharts.add1(b.og());
                }
            }
            if (this.dataChart != null) {
                a.mainChartLeft = this.xo(this.dataChart).x;
                a.mainChartTop = this.xo(this.dataChart).y;
            }
            if (this.volumeChart != null) {
                a.volumeChartLeft = this.xo(this.volumeChart).x;
                a.volumeChartTop = this.xo(this.volumeChart).y;
            }
            if (this.zoomSliderChart != null) {
                a.zoomChartLeft = this.xo(this.zoomSliderChart).x;
                a.zoomChartTop = this.xo(this.zoomSliderChart).y;
            }
            if (this.py != null) {
                let c = this.xp(this.py);
                a.toolbarLeft = c.left;
                a.toolbarTop = c.top;
                a.toolbarWidth = c.width;
                a.toolbarHeight = c.height;
            }
            if (this.indicatorCharts != null) {
                a.indicatorChartLefts = new List$1(Number_$type, 0);
                a.indicatorChartTops = new List$1(Number_$type, 0);
                for (let d of fromEnum(this.indicatorCharts)) {
                    a.indicatorChartLefts.add(this.xo(d).x);
                    a.indicatorChartTops.add(this.xo(d).y);
                }
            }
            let e = this.xr();
            a.legendLeft = e.left;
            a.legendTop = e.top;
            a.legendWidth = e.width;
            a.legendHeight = e.height;
            a.legend = this.qi == null ? null : this.qi.exportVisualData();
            return a;
        }
        t7() {
            let a = this.dj();
            a.scaleByViewport();
            return a.serialize();
        }
        q9(overlayName_) {
            return (this.externalObject.createOverlay(overlayName_ + 'Overlay').i);
        }
        xe() {
            if (this.dataChart == null) {
                return;
            }
            let a = new List$1(Series.$, 0);
            for (let b of fromEnum(this.dataChart.series)) {
                if (this.rt(b)) {
                    a.add(b);
                }
            }
            for (let c of fromEnum(a)) {
                this.dataChart.series.remove(c);
            }
            if (this.qg == null) {
                return;
            }
            let d = new List$1(Series.$, 0);
            let e = -1;
            for (let f = 0; f < this.dataChart.series.count; f++) {
                let g = this.dataChart.series._inner[f];
                if (this.rt(g) || g.cj) {
                    continue;
                }
                e++;
                for (let h = 0; h < this.qg.count; h++) {
                    let i = this.qg._inner[h];
                    let j;
                    switch (i) {
                        case 1:
                            j = this.q9(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                        default:
                        case 0:
                            j = this.q9(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                    }
                    j.name = g.name + "_" + EnumUtil.getName(FinancialOverlayType_$type, i);
                    this.qt.setXAxis(j, this.xAxis);
                    this.qt.setYAxis(j, this.yAxis);
                    j.itemsSource = g.itemsSource;
                    let k = e * this.qg.count + h;
                    j.k6 = ArrayExtension.getModulus$1(Brush.$, this.pb, k);
                    j.k9 = ArrayExtension.getModulus$1(Brush.$, this.pc, k);
                    j.ey = this.su;
                    j.fx = g.fx + " " + EnumUtil.getName(FinancialOverlayType_$type, i);
                    let l = g;
                    if (l == null) {
                        continue;
                    }
                    let m = this.v.dataSeries._inner[e];
                    this.qt.setOpenMemberPath(j, m.getMemberPathFor(11));
                    this.qt.setHighMemberPath(j, m.getMemberPathFor(12));
                    this.qt.setLowMemberPath(j, m.getMemberPathFor(13));
                    this.qt.setCloseMemberPath(j, m.getMemberPathFor(14));
                    this.qt.setVolumeMemberPath(j, m.getMemberPathFor(15));
                    d.add(j);
                }
            }
            let n = new Array(this.dataChart.series.count);
            this.dataChart.series.copyTo(n, 0);
            this.dataChart.skipDataCleanup = true;
            this.dataChart.series.clear();
            this.dataChart.skipDataCleanup = false;
            for (let o = 0; o < n.length; o++) {
                n[o].fh = -1;
            }
            d.o(n);
            for (let p = 0; p < d.count; p++) {
                let q = d._inner[p];
                this.dataChart.series.add(q);
                this.gk(q, p);
            }
        }
        xc() {
            if (this.rz) {
                return;
            }
            this.rz = true;
            if (this.indicatorCharts != null) {
                let a = this.indicatorCharts;
                this.indicatorCharts = null;
                for (let b of fromEnum(a)) {
                    this.wt(b);
                }
            }
            if ((this.qe == null || this.qe.count == 0) && (this.customIndicatorNames == null || this.customIndicatorNames.count == 0)) {
                this.indicatorCharts = null;
                if (this.r8 != null) {
                    this.r8.clear();
                }
                if (this.sa != null) {
                    this.sa.clear();
                }
                this.w3();
                this.xd();
                this.rz = false;
                return;
            }
            if (this.indicatorCharts == null) {
                this.indicatorCharts = new List$1(XamDataChart.$, 0);
            }
            this.indicatorCharts.clear();
            this.r8.clear();
            this.sa.clear();
            let c = this.qe == null ? 0 : this.qe.count;
            let d = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let e = c + d;
            for (let f = 0; f < e; f++) {
                let g = new XamDataChart();
                this.indicatorCharts.add(g);
                this.wr(g);
                let h = f >= c;
                g.gr = h ? this.customIndicatorNames._inner[f - c] : EnumUtil.getName(FinancialIndicatorType_$type, this.qe._inner[f]);
                if (this.indicatorAxis != null) {
                    let i;
                    let j;
                    if (f == 0) {
                        i = this.indicatorAxis;
                        j = this.indicatorXAxis;
                    }
                    else {
                        i = new NumericYAxis();
                        if (!this.indicatorXAxis.b7) {
                            j = this.pk(0);
                        }
                        else {
                            j = this.pk(1);
                        }
                    }
                    j.name = "indicatorXAxis_" + f;
                    i.name = "indicatorAxis_" + f;
                    g.axes.add(i);
                    g.axes.add(j);
                    this.r8.add(i);
                    this.sa.add(j);
                    if (this.bh) {
                        this.nh(i);
                    }
                    if (this.bh) {
                        this.nf(j);
                    }
                }
            }
            this.wx();
            this.w3();
            if (this.py != null) {
                this.py.ae = this.qe;
            }
            this.v2();
            this.xd();
            this.rz = false;
        }
        gc() {
            super.gc();
            this.nf(this.xAxis);
            this.nf(this.volumeXAxis);
            if (this.sa != null) {
                for (let a of fromEnum(this.sa)) {
                    this.nf(a);
                }
            }
            this.nh(this.yAxis);
            this.nh(this.volumeAxis);
            if (this.r8 != null) {
                for (let b of fromEnum(this.r8)) {
                    this.nh(b);
                }
            }
            this.nf(this.zoomSliderXAxis);
            this.nh(this.zoomSliderAxis);
        }
        get_bv() {
            return !this.rx;
        }
        get r3() {
            return (this.externalObject._dynamicContent);
        }
        xk(a, b) {
            this.w6(a, b);
            this.v2();
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                this.zoomSliderChart.axes.add(this.zoomSliderXAxis);
            }
            this.wz();
            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
            this.w4();
            this.xl(a, b);
        }
        wz() {
            if (this.dataChart == null || this.zoomSliderChart == null) {
                return;
            }
            this.zoomSliderChart.series.clear();
            let a = new List$1(Series.$, 0);
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (this.rt(c) || c.cj) {
                    continue;
                }
                let d;
                let e = this.qc;
                e = this.qb(e);
                let f = this.tg(c, b);
                if (e == 1) {
                    switch (this.p2(this.v != null && this.v.dataSeries != null && this.v.dataSeries.count > f ? this.v.dataSeries._inner[f] : null)) {
                        case 1:
                            e = 2;
                            break;
                        case 2:
                            e = 3;
                            break;
                        case 3:
                            e = 4;
                            break;
                        case 4:
                            e = 5;
                            break;
                    }
                }
                switch (e) {
                    case 2:
                        d = this.q7();
                        this.qk.setDisplayType(d, 1);
                        break;
                    case 3:
                        d = this.q7();
                        this.qk.setDisplayType(d, 0);
                        break;
                    case 5:
                        d = this.q6();
                        break;
                    case 6:
                        d = this.q4();
                        break;
                    default:
                    case 4:
                        d = this.q5();
                        break;
                }
                let g = this.v != null && this.v.dataSeries != null && this.v.dataSeries.count > f ? this.v.dataSeries._inner[f] : null;
                if (d.cl && !d.cr) {
                    this.qm.setCategoryMode(d, 1);
                    this.qm.setXAxis(d, this.zoomSliderXAxis);
                    this.qm.setYAxis(d, this.zoomSliderAxis);
                    this.qm.setValueMemberPath(d, g == null ? null : this.t9(g));
                }
                else if (d.cr) {
                    this.qk.setCategoryMode(d, 1);
                    this.qk.setXAxis(d, this.zoomSliderXAxis);
                    this.qk.setYAxis(d, this.zoomSliderAxis);
                    if (g != null) {
                        this.qk.setOpenMemberPath(d, g.getMemberPathFor(11));
                        this.qk.setHighMemberPath(d, g.getMemberPathFor(12));
                        this.qk.setLowMemberPath(d, g.getMemberPathFor(13));
                        this.qk.setCloseMemberPath(d, g.getMemberPathFor(14));
                        this.qk.setVolumeMemberPath(d, g.getMemberPathFor(15));
                    }
                }
                d.name = "zoomSliderSeries_" + f;
                d.itemsSource = c.itemsSource;
                d.fx = c.fx;
                a.add(d);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.zoomSliderChart.series.add(i);
                this.gk(i, h);
            }
        }
        gz(a, b, c) {
            super.gz(a, b, c);
            if (a == null || !b) {
                return;
            }
            let d = true;
            let e = true;
            switch (c) {
                case "Brushes":
                case "Outlines":
                    d = e = false;
                    break;
            }
            if (this.indicatorCharts != null && d) {
                for (let f of fromEnum(this.indicatorCharts)) {
                    a(f);
                }
            }
            if (this.volumeChart != null && e) {
                a(this.volumeChart);
            }
            if (this.zoomSliderChart != null) {
                a(this.zoomSliderChart);
            }
        }
        wc(a, b) {
            let c = b;
            let d = a;
            let e = -1;
            if (this.indicatorCharts != null) {
                e = this.indicatorCharts.indexOf(d.bq);
            }
            e -= this.qe == null ? 0 : this.qe.count;
            if (this.applyCustomIndicators != null) {
                this.applyCustomIndicators(this, new FinancialChartCustomIndicatorArgs(c, d, e));
            }
        }
        w8(a, b, c) {
            if (a != null) {
                if (b != null) {
                    a.axes.remove(b);
                }
                a.axes.add(c);
            }
            if (this.bh) {
                this.nf(c);
            }
        }
        get r2() {
            return TypeRegistrar.isRegistered("IgxZoomSliderComponent");
        }
        wd(a, b) {
            this.xc();
        }
        rv(a, b) {
            if (b <= (0)) {
                return false;
            }
            switch (a) {
                case 5: return true;
                case 4:
                case 3: return b >= timeSpanFromDays(365);
                case 2: return b >= timeSpanFromDays(180);
                case 1: return b >= timeSpanFromDays(90);
                case 0: return b >= timeSpanFromDays(30);
            }
            return false;
        }
        w2() {
            let a = this.pw != null ? this.pw : new FinancialChartRangeSelectorOptionCollection(1, [5, 4, 3, 2, 1, 0]);
            let b = new FinancialChartRangeSelectorOptionCollection(0);
            let c = this.xAxis;
            let d = +(c.actualMaximumValue) - +(c.actualMinimumValue);
            for (let e of fromEnum(a)) {
                if (this.rv(e, d)) {
                    b.add(e);
                }
            }
            this.pv = b;
            if (this.py != null) {
                this.py.u = this.pv;
            }
        }
        wh(a, b) {
            this.w2();
        }
        wm(a, b) {
            this.qg = this.py.ag;
        }
        wl(a, b) {
            this.qe = this.py.ae;
        }
        wf(a, b) {
            this.xc();
        }
        wg(a, b) {
            this.xe();
        }
        wq(a, b) {
            let c = a;
            if (c.be == null) {
                return;
            }
            if (this.rx) {
                this.w1(c.be);
            }
        }
        wt(a) {
            SyncManager.e(a);
            a.axes.clear();
            a.series.clear();
            a.gridAreaRectChanged = delegateRemove(a.gridAreaRectChanged, runOn(this, this.we));
            a.provideContainer(null);
            if (this.volumeChart == null && this.indicatorCharts == null) {
                this.yAxis.d6 = this.volumeAxis.d6 = this.indicatorAxis.d6 = 0;
                this.xAxis.ax.visibility = this.ox;
            }
        }
        wr(a) {
            let b = a != this.zoomSliderChart;
            if (b) {
                if (this.dataChart != null) {
                    a.m6 = new Rect(0, this.dataChart.mr.x, a.m6.y, this.dataChart.mr.width, a.m6.height);
                }
                let c = ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = "one";
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })());
                SyncManager.d(a, c);
                SyncManager.c(a);
            }
            a.gridAreaRectChanged = delegateCombine(a.gridAreaRectChanged, runOn(this, this.we));
            this.ge(a);
        }
        v2() {
            if (this.indicatorCharts != null || this.volumeChart != null) {
                this.nd(this.xAxis, (a) => a.visibility = 1);
            }
            for (let a = 0; a < this.sa.count; a++) {
                let b = this.sa._inner[a];
                let c = a < this.sa.count - 1 || this.volumeChart != null;
                this.nd(b, (d) => d.visibility = c ? 1 : 0);
            }
        }
        w6(a, b) {
            if (a != null) {
                this.wt(a);
            }
            if (b != null) {
                this.wr(b);
            }
        }
        xi(a, b) {
            this.w6(a, b);
            this.v2();
            if (this.volumeChart != null) {
                if (this.volumeAxis != null) {
                    this.volumeChart.axes.add(this.volumeAxis);
                    this.volumeChart.axes.add(this.volumeXAxis);
                }
                this.wy();
                this.volumeXAxis.itemsSource = this.xAxis.itemsSource;
            }
            this.xj(a, b);
        }
        wi(a, b) {
            this.xg();
        }
        xg() {
            if (this.py == null || +(this.py.au) == +(dateMaxValue()) || +(this.py.at) == +(dateMinValue()) || this.dataChart == null) {
                return;
            }
            let a = this.xAxis;
            let b = a.getWindowRectForSelection(this.py.au, this.py.at);
            if (b.width == 0 || isNaN_(b.width) || isInfinity(b.width)) {
                return;
            }
            this.ry = true;
            this.dataChart.m6 = new Rect(0, b.left, this.dataChart.m6.top, b.width, this.dataChart.m6.height);
            if (this.rg != null) {
                this.rg.windowRect = this.dataChart.mr;
            }
            if (this.rx) {
                this.w1(this.dataChart);
            }
            this.ry = false;
        }
        wp(a, b) {
            this.w2();
            this.xf(!this.ry);
        }
        wb(a, b) {
            if (!this.ry) {
                if (this.rx) {
                    this.w1(a);
                }
                let c = false;
                let d = this.g8(() => this.xf(true), c);
                c = d.p1;
                if (this.rg != null) {
                    this.rg.windowRect = this.dataChart.mr;
                }
            }
        }
        xa(a, b, c, d) {
            if (a == null || b == null) {
                return;
            }
            if (c != -1) {
                this.ry = true;
                a.m6 = new Rect(0, d, a.mr.top, c, a.mr.height);
                this.ry = false;
            }
            let e = 1.7976931348623157E+308;
            let f = -1.7976931348623157E+308;
            let g = new Rect(0, 0, 0, 1, 1);
            let h = new ScalerParams(0, g, g, this.yAxis.ca, a.mv);
            for (let i of fromEnum(a.series)) {
                h.b = i.eh();
                let j = i.ao();
                let k = j == null || j.c == 1.7976931348623157E+308 || isNaN_(j.c);
                if (k) {
                    continue;
                }
                let l = b.dy(j.c, h);
                let m = b.dy(j.b, h);
                f = Math.max(f, l);
                e = Math.min(e, m);
            }
            let n = a.mr.width;
            if (c != -1) {
                n = c;
            }
            let o = a.mr.left;
            if (d != -1) {
                o = d;
            }
            if (e == 1.7976931348623157E+308 || f == -1.7976931348623157E+308 || isNaN_(e) || isNaN_(f)) {
                return;
            }
            this.ry = true;
            let p = new Rect(0, o, e, n, f - e);
            a.m6 = p;
            this.ry = false;
        }
        w9(a) {
            if (a == null) {
                return;
            }
            if (a == this.dataChart) {
                this.xa(this.dataChart, this.yAxis, -1, -1);
                if (this.volumeChart != null) {
                    this.xa(this.volumeChart, this.volumeAxis, this.dataChart.mr.width, this.dataChart.mr.left);
                }
            }
            else if (a == this.volumeChart) {
                this.xa(this.volumeChart, this.volumeAxis, -1, -1);
                this.xa(this.dataChart, this.yAxis, this.volumeChart.mr.width, this.volumeChart.mr.left);
            }
        }
        w1(a) {
            this.g7(() => this.w9(a));
        }
        wj(a, b) {
            if (this.rx) {
                this.w1(a);
            }
        }
        xh() {
            if (!this.r3) {
                return;
            }
            this.v5();
            if (this.qc == 0) {
                this.zoomSliderChart = null;
            }
            else if (this.zoomSliderChart == null) {
                this.zoomSliderChart = ((() => {
                    let $ret = new XamDataChart();
                    $ret.name = "ZoomSliderChart";
                    return $ret;
                })());
            }
            else {
                this.wz();
            }
        }
        v5() {
            let container_ = this.s8.rootWrapper.getNativeElement();
            let containerParent_ = container_.parentElement;
            if (this.rg != null && containerParent_ != null && !this.r4) {
                this.r4 = true;
                if (TypeRegistrar.isRegistered("IgxZoomSliderComponent")) {
                    let z_ = this.rg;
                    let f_ = this.externalObject;
                    let sliderComponent_ = TypeRegistrar.get("IgxZoomSliderComponent");
                    let sliderInstance_ = TypeRegistrar.create("IgxZoomSliderComponent");
                    sliderInstance_._implementation = z_;
                    sliderComponent_._staticStyling(container_, sliderInstance_, f_);
                }
            }
        }
        xb() {
            if (this.p7 != 1) {
                return;
            }
            this.nj((a) => {
                let b;
                b = a.breaks;
                b.clear();
                if (this.xAxisBreaks == null) {
                    return;
                }
                for (let c of fromEnum(this.xAxisBreaks)) {
                    b.add(c);
                }
            });
        }
        hq(a, b, c) {
            super.hq(a, b, c);
            if (this.v.dataSeries.count > 0) {
                if (this.p7 == 1 && stringIsNullOrEmpty(this.ea)) {
                    this.ac.setXMemberPath(a, c.getMemberPathFor(17));
                }
                if (stringIsNullOrEmpty(this.ec)) {
                    this.ac.setYMemberPath(a, this.t9(c));
                }
                if (stringIsNullOrEmpty(this.d6)) {
                    this.ac.setLabelMemberPath(a, this.t9(c));
                }
                if (stringIsNullOrEmpty(this.d3)) {
                    this.ac.setContentMemberPath(a, this.t9(c));
                }
            }
        }
        nf(a) {
            super.nf(a);
            let b = a;
            this.ws(b);
            if (a.be != null) {
                for (let c of fromEnum(a.be.series)) {
                    if (this.rq(c)) {
                        this.qm.setXAxis(c, b);
                    }
                    else if (this.ru(c)) {
                        this.qk.setXAxis(c, b);
                    }
                    else if (this.rr(c)) {
                        this.qo.setXAxis(c, b);
                    }
                    else if (this.rt(c)) {
                        this.qt.setXAxis(c, b);
                    }
                }
            }
            let d = a == this.zoomSliderXAxis;
            if (d) {
                a.ir = this.xn;
                a.d5 = this.s3;
                this.nd(a, (e) => e.visibility = 1);
            }
            let e = a;
            e.minimumValue = this.sg;
            e.maximumValue = this.sf;
        }
        nh(a) {
            super.nh(a);
            if (a.be != null && a == this.yAxis) {
                for (let b of fromEnum(a.be.series)) {
                    if (this.rq(b)) {
                        this.qm.setYAxis(b, this.yAxis);
                    }
                    else if (this.ru(b)) {
                        this.qk.setYAxis(b, this.yAxis);
                    }
                    else if (this.rr(b)) {
                        this.qo.setYAxis(b, this.yAxis);
                    }
                    else if (this.rt(b)) {
                        this.qt.setYAxis(b, this.yAxis);
                    }
                }
            }
            a.jv = this.r0;
            a.kj = this.s1;
            a.ki = this.s0;
            if (a == this.yAxis) {
                a.kf = this.sz;
            }
            let c = a == this.zoomSliderAxis;
            if (c) {
                this.nd(a, (d) => d.visibility = 1);
            }
        }
        ws(a) {
            a.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
            a.e9 = XYChart.k3(a, this.v.dataSeries);
            if (this.v.dataSeries.count > 0) {
                let b = this.v.dataSeries._inner[0].getMemberPathFor(17);
                a.g1(b);
            }
        }
        gk(a, b) {
            super.gk(a, b);
            if (a == null) {
                return;
            }
            let c = this.dataChart != null && this.dataChart.series.contains(a);
            if (c && a.cz) {
                a.jj(this.o9 != null ? ArrayExtension.getModulus$1(Brush.$, this.o9, b) : null, this.pa != null ? ArrayExtension.getModulus$1(Brush.$, this.pa, b) : null);
            }
            let d = this.zoomSliderChart == a.bq;
            let e = this.rr(a);
            if (this.rt(a)) {
                a.k6 = this.pb != null ? ArrayExtension.getModulus$1(Brush.$, this.pb, b) : null;
                a.k9 = this.pc != null ? ArrayExtension.getModulus$1(Brush.$, this.pc, b) : null;
                a.ey = this.su;
            }
            else if (e) {
                a.k6 = this.o7 != null ? ArrayExtension.getModulus$1(Brush.$, this.o7, b) : null;
                a.ey = this.st;
            }
            else if (!a.cj && (c || d)) {
                a.k6 = this.j != null ? ArrayExtension.getModulus$1(Brush.$, this.j, b) : null;
                a.k9 = this.n != null ? ArrayExtension.getModulus$1(Brush.$, this.n, b) : null;
            }
            let f = this.volumeChart != null && this.volumeChart == a.bq;
            if (f) {
                a.ey = this.sw;
            }
            a.legend = d || f || e || !a.isUsableInLegend ? null : this.legend != null ? this.legend : this.rs ? this.qi : null;
        }
        g3(a, b, c) {
            super.g3(a, b, c);
            switch (a) {
                case "YAxisIsLogarithmic":
                    this.yAxis.j0 = this.r1;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.j0 = this.r1;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.j0 = this.r1;
                    }
                    break;
                case "YAxisLogarithmBase":
                    this.yAxis.kn = this.tn;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.kn = this.tn;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.kn = this.tn;
                    }
                    break;
                case "VolumeType":
                    let d = EnumUtil.getEnumValue(FinancialChartVolumeType_$type, b);
                    if (this.p5 == 0) {
                        this.volumeChart = null;
                    }
                    else if (this.volumeChart == null) {
                        this.volumeChart = ((() => {
                            let $ret = new XamDataChart();
                            $ret.name = "VolumeChart";
                            return $ret;
                        })());
                    }
                    else {
                        this.wy();
                    }
                    break;
                case "VolumeChart":
                    this.xi(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "DataChart":
                    if (typeCast(XamDataChart.$, b) !== null) {
                        let e = b;
                        e.gridAreaRectChanged = delegateRemove(e.gridAreaRectChanged, runOn(this, this.we));
                        e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, runOn(this, this.wb));
                        e.seriesDataUpdated = delegateRemove(e.seriesDataUpdated, runOn(this, this.wj));
                    }
                    if (this.dataChart != null) {
                        let f = this.dataChart;
                        f.gridAreaRectChanged = delegateCombine(f.gridAreaRectChanged, runOn(this, this.we));
                        let g = this.dataChart;
                        g.actualWindowRectChanged = delegateCombine(g.actualWindowRectChanged, runOn(this, this.wb));
                        let h = this.dataChart;
                        h.seriesDataUpdated = delegateCombine(h.seriesDataUpdated, runOn(this, this.wj));
                    }
                    this.xh();
                    break;
                case "XAxisMode":
                    this.xAxis = this.pk(this.p7);
                    this.xAxis.name = "xAxis";
                    this.volumeXAxis = this.pk(this.p7);
                    this.volumeXAxis.name = "volumeXAxis";
                    this.indicatorXAxis = this.pk(this.p7);
                    this.indicatorXAxis.name = "indicatorXAxis_0";
                    this.zoomSliderXAxis = this.pk(this.p7);
                    this.zoomSliderXAxis.name = "zoomSliderXAxis";
                    this.nd(this.zoomSliderXAxis, (i) => i.visibility = 1);
                    this.v2();
                    if (this.p7 == 1) {
                        this.xb();
                    }
                    break;
                case "YAxisMode":
                    this.yAxis = this.qy(this.p9);
                    this.yAxis.name = "yAxis";
                    this.zoomSliderAxis = this.qy(this.p9);
                    this.zoomSliderAxis.name = "zoomSliderAxis";
                    this.volumeAxis = this.qy(this.p9);
                    this.volumeAxis.name = "volumeAxis";
                    break;
                case "Toolbar":
                    let i = typeCast(FinancialChartToolbar.$, b);
                    if (i != null) {
                        i.rangeChanged = delegateRemove(i.rangeChanged, runOn(this, this.wi));
                        i.indicatorTypesChanged = delegateRemove(i.indicatorTypesChanged, runOn(this, this.wl));
                        i.overlayTypesChanged = delegateRemove(i.overlayTypesChanged, runOn(this, this.wm));
                    }
                    if (this.py != null) {
                        this.py.ae = this.qe;
                        this.py.ag = this.qg;
                        this.py.u = this.pv;
                        this.xf(true);
                        let j = this.py;
                        j.rangeChanged = delegateCombine(j.rangeChanged, runOn(this, this.wi));
                        let k = this.py;
                        k.indicatorTypesChanged = delegateCombine(k.indicatorTypesChanged, runOn(this, this.wl));
                        let l = this.py;
                        l.overlayTypesChanged = delegateCombine(l.overlayTypesChanged, runOn(this, this.wm));
                    }
                    break;
                case "XAxis":
                    let m = typeCast(CategoryAxisBase.$, b);
                    if (m != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(m);
                        }
                    }
                    let n = typeCast(ITimeRangeSelectorAxis_$type, b);
                    if (n != null) {
                        n.visibleRangeChanged = delegateRemove(n.visibleRangeChanged, runOn(this, this.wp));
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.xAxis);
                    }
                    if (this.bh) {
                        this.nf(this.xAxis);
                        this.f7();
                    }
                    this.xf(false);
                    this.xg();
                    this.w2();
                    let o = this.xAxis;
                    o.visibleRangeChanged = delegateCombine(o.visibleRangeChanged, runOn(this, this.wp));
                    break;
                case "ChartType":
                    this.hl();
                    break;
                case "VolumeXAxis":
                    this.w8(this.volumeChart, typeCast(Axis.$, b), this.volumeXAxis);
                    break;
                case "ZoomSliderXAxis":
                    this.w8(this.zoomSliderChart, typeCast(Axis.$, b), this.zoomSliderXAxis);
                    break;
                case "IndicatorXAxis":
                    this.xc();
                    break;
                case "YAxis":
                    let p = typeCast(NumericYAxis.$, b);
                    if (p != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(p);
                        }
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.yAxis);
                    }
                    if (this.bh) {
                        this.nh(this.yAxis);
                        this.nh(this.yAxis);
                    }
                    let q = this.yAxis;
                    q.rangeChanged = delegateCombine(q.rangeChanged, runOn(this, this.wq));
                    break;
                case "VolumeAxis":
                    let r = typeCast(Axis.$, b);
                    if (this.volumeChart != null && r != null) {
                        this.volumeChart.axes.remove(r);
                    }
                    if (this.volumeChart != null && this.volumeAxis != null) {
                        this.volumeChart.axes.add(this.volumeAxis);
                        this.wy();
                    }
                    if (this.bh) {
                        this.nh(this.volumeAxis);
                    }
                    let s = this.volumeAxis;
                    s.rangeChanged = delegateCombine(s.rangeChanged, runOn(this, this.wq));
                    break;
                case "IndicatorAxis":
                    if (this.indicatorCharts != null) {
                        for (let t = 0; t < this.indicatorCharts.count; t++) {
                            let u = this.indicatorCharts._inner[t];
                            let v = new List$1(Axis.$, 0);
                            for (let w of fromEnum(u.axes)) {
                                if (typeCast(NumericYAxis.$, w) !== null) {
                                    v.add(w);
                                }
                            }
                            for (let x of fromEnum(v)) {
                                u.axes.remove(x);
                            }
                            let y = null;
                            if (t == 0) {
                                y = this.indicatorAxis;
                            }
                            else if (this.p9 == 1) {
                                y = this.qy(this.p9);
                            }
                            else if (typeCast(NumericYAxis.$, this.indicatorAxis) !== null) {
                                y = new NumericYAxis();
                            }
                            if (y != null) {
                                u.axes.add(y);
                            }
                            if (this.bh) {
                                this.nh(y);
                            }
                        }
                    }
                    break;
                case "IsWindowSyncedToVisibleRange":
                    if (this.dataChart != null) {
                        this.dataChart.nv = this.bw && this.bv;
                    }
                    if (this.volumeChart != null) {
                        this.volumeChart.nv = this.bw && this.bv;
                    }
                    if (this.rx) {
                        this.w9(this.dataChart);
                    }
                    else {
                        this.volumeChart.oe = 1;
                    }
                    break;
                case "IndicatorTypes":
                    let z = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), b);
                    if (z != null) {
                        z.collectionChanged = delegateRemove(z.collectionChanged, runOn(this, this.wf));
                    }
                    let aa = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), c);
                    if (aa != null) {
                        aa.collectionChanged = delegateCombine(aa.collectionChanged, runOn(this, this.wf));
                    }
                    this.xc();
                    break;
                case "OverlayTypes":
                    let ab = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), b);
                    if (ab != null) {
                        ab.collectionChanged = delegateRemove(ab.collectionChanged, runOn(this, this.wg));
                    }
                    let ac = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), c);
                    if (ac != null) {
                        ac.collectionChanged = delegateCombine(ac.collectionChanged, runOn(this, this.wg));
                    }
                    this.xe();
                    break;
                case "YAxisAbbreviateLargeNumbers":
                    this.nn((ad) => ad.jv = this.r0);
                    break;
                case "YAxisMinimumValue":
                    this.no((ad) => ad.kj = this.s1, false);
                    break;
                case "YAxisMaximumValue":
                    this.no((ad) => ad.ki = this.s0, false);
                    break;
                case "YAxisInterval":
                    this.no((ad) => ad.kf = this.sz, false);
                    break;
                case "ZoomSliderType":
                    this.xh();
                    break;
                case "ZoomSliderChart":
                    if (!this.r2) {
                        return;
                    }
                    this.xk(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "NegativeBrushes":
                case "NegativeOutlines":
                    this.v8((ad, ae) => {
                        if (ad.cz) {
                            ad.jj(this.o9 != null ? ArrayExtension.getModulus$1(Brush.$, this.o9, ae) : null, this.pa != null ? ArrayExtension.getModulus$1(Brush.$, this.pa, ae) : null);
                        }
                    }, true);
                    break;
                case "OverlayBrushes":
                    this.f9((ad, ae) => {
                        if (!(this.rt(ad))) {
                            return;
                        }
                        ad.k6 = this.pb != null ? ArrayExtension.getModulus$1(Brush.$, this.pb, ae) : null;
                    });
                    break;
                case "OverlayOutlines":
                    this.f9((ad, ae) => {
                        if (!(this.rt(ad))) {
                            return;
                        }
                        ad.k9 = this.pc != null ? ArrayExtension.getModulus$1(Brush.$, this.pc, ae) : null;
                    });
                    break;
                case "OverlayThickness":
                    this.f9((ad, ae) => {
                        if (!(this.rt(ad))) {
                            return;
                        }
                        ad.ey = this.su;
                    });
                    break;
                case "VolumeBrushes":
                    this.v9((ad, ae) => ad.k6 = ArrayExtension.getModulus$1(Brush.$, this.pd, ae));
                    break;
                case "VolumeOutlines":
                    this.v9((ad, ae) => ad.k9 = ArrayExtension.getModulus$1(Brush.$, this.pe, ae));
                    break;
                case "VolumeThickness":
                    this.v9((ad, ae) => ad.ey = this.sw);
                    break;
                case "IndicatorNegativeBrushes":
                    this.v6((ad, ae) => this.qo.setNegativeBrush(ad, ArrayExtension.getModulus$1(Brush.$, this.o8, ae)));
                    break;
                case "IndicatorBrushes":
                    this.v6((ad, ae) => ad.k6 = ArrayExtension.getModulus$1(Brush.$, this.o7, ae));
                    break;
                case "IndicatorThickness":
                    this.v6((ad, ae) => ad.ey = this.st);
                    break;
                case "IndicatorDisplayTypes":
                    this.v6((ad, ae) => this.qo.setDisplayType(ad, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.qq, ae)));
                    break;
                case "IndicatorPeriod":
                    this.v6((ad, ae) => {
                        if (this.ti == -2147483648 || !(this.rr(ad))) {
                            return;
                        }
                        this.qo.setPeriodOverride(ad, this.ti);
                    });
                    break;
                case "IndicatorMultiplier":
                    this.v6((ad, ae) => {
                        if (!(this.rt(ad))) {
                            return;
                        }
                        this.qt.setMultiplier(ad, this.ss);
                    });
                    break;
                case "IndicatorSmoothingPeriod":
                    this.v6((ad, ae) => {
                        if (!(this.rr(ad))) {
                            return;
                        }
                        this.qo.setSmoothingPeriod(ad, this.tl);
                    });
                    break;
                case "IndicatorShortPeriod":
                    this.v6((ad, ae) => {
                        if (!(this.rr(ad))) {
                            return;
                        }
                        this.qo.setShortPeriod(ad, this.tj);
                    });
                    break;
                case "IndicatorLongPeriod":
                    this.v6((ad, ae) => {
                        if (!(this.rr(ad))) {
                            return;
                        }
                        this.qo.setLongPeriod(ad, this.th);
                    });
                    break;
                case "IndicatorSignalPeriod":
                    this.v6((ad, ae) => {
                        if (!(this.rr(ad))) {
                            return;
                        }
                        this.qo.setSignalPeriod(ad, this.tk);
                    });
                    break;
                case "RangeSelectorOptions":
                    let ad = typeCast(FinancialChartRangeSelectorOptionCollection.$, b);
                    if (ad != null) {
                        ad.collectionChanged = delegateRemove(ad.collectionChanged, runOn(this, this.wh));
                    }
                    if (this.pw != null) {
                        let ae = this.pw;
                        ae.collectionChanged = delegateCombine(ae.collectionChanged, runOn(this, this.wh));
                    }
                    this.w2();
                    break;
                case "CustomIndicatorNames":
                    let af = typeCast(ObservableCollection$1.$.specialize(String_$type), b);
                    if (af != null) {
                        af.collectionChanged = delegateRemove(af.collectionChanged, runOn(this, this.wd));
                    }
                    if (this.customIndicatorNames != null) {
                        let ag = this.customIndicatorNames;
                        ag.collectionChanged = delegateCombine(ag.collectionChanged, runOn(this, this.wd));
                    }
                    this.xc();
                    break;
                case "Legend":
                    if (this.zoomSliderChart != null) {
                        this.zoomSliderChart.legend = null;
                    }
                    break;
                case "Brushes":
                    this.v8((ah, ai) => ah.k6 = this.j != null ? ArrayExtension.getModulus$1(Brush.$, this.j, ai) : null, true);
                    break;
                case "Outlines":
                    this.v8((ah, ai) => ah.k9 = this.n != null ? ArrayExtension.getModulus$1(Brush.$, this.n, ai) : null, true);
                    break;
                case "XAxisLabelVisibility":
                    if (this.ox == 0 && this.zoomSliderXAxis != null) {
                        this.nd(this.zoomSliderXAxis, (ah) => ah.visibility = 1);
                    }
                    this.v2();
                    break;
                case "YAxisLabelVisibility":
                    if (this.oy != 0 || this.zoomSliderAxis == null) {
                        break;
                    }
                    this.nd(this.zoomSliderAxis, (ah) => ah.visibility = 1);
                    break;
                case "ZoomSliderXAxisMajorStroke":
                    this.zoomSliderXAxis.ir = this.xn;
                    break;
                case "ZoomSliderXAxisMajorStrokeThickness":
                    this.zoomSliderXAxis.d5 = this.s3;
                    break;
                case "FinancialChartLegend":
                case "IsLegendVisible":
                    let ah = this.rs && this.legend == null;
                    {
                        let ai = (aj, ak) => {
                            if (aj.isUsableInLegend) {
                                aj.legend = ah ? this.qi : null;
                            }
                        };
                        this.v8(ai, false);
                        this.v7(ai);
                    }
                    break;
                case "ZoomSliderAxis":
                    let aj = typeCast(Axis.$, b);
                    if (aj != null && this.zoomSliderChart != null) {
                        this.zoomSliderChart.axes.remove(aj);
                    }
                    if (this.zoomSliderAxis != null) {
                        if (this.zoomSliderChart != null) {
                            this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                            this.wz();
                            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
                        }
                        if (this.bh) {
                            this.nh(this.zoomSliderAxis);
                        }
                        this.nd(this.zoomSliderAxis, (ak) => ak.visibility = 1);
                    }
                    break;
                case "XAxisMinimumValue":
                    this.nj((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.minimumValue = this.sg;
                        }
                    });
                    break;
                case "XAxisMaximumValue":
                    this.nj((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.maximumValue = this.sf;
                        }
                    });
                    break;
            }
        }
        get r1() {
            return this.rl;
        }
        set r1(a) {
            let b = this.r1;
            if (a != b) {
                this.rl = a;
                this.g3("YAxisIsLogarithmic", b, this.r1);
            }
        }
        get tn() {
            return this.tf;
        }
        set tn(a) {
            let b = this.tn;
            if (a != b) {
                this.tf = a;
                this.g3("YAxisLogarithmBase", b, this.tn);
            }
        }
        get sz() {
            return this.sm;
        }
        set sz(a) {
            let b = this.sz;
            if (a != b) {
                this.sm = a;
                this.g3("YAxisInterval", b, this.sz);
            }
        }
        get s1() {
            return this.so;
        }
        set s1(a) {
            let b = this.s1;
            if (a != b) {
                this.so = a;
                this.g3("YAxisMinimumValue", b, this.s1);
            }
        }
        get s0() {
            return this.sn;
        }
        set s0(a) {
            let b = this.s0;
            if (a != b) {
                this.sn = a;
                this.g3("YAxisMaximumValue", b, this.s0);
            }
        }
        get s2() {
            return this.sp;
        }
        set s2(a) {
            let b = this.s2;
            if (a != b) {
                this.sp = a;
                this.g3("YAxisMinorInterval", b, this.s2);
            }
        }
        get sy() {
            return this.yAxis.kb;
        }
        get sx() {
            return this.yAxis.ka;
        }
        get p5() {
            return this.p3;
        }
        set p5(a) {
            let b = this.p5;
            if (a != b) {
                this.p3 = a;
                this.g3("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.p5));
            }
        }
        get p7() {
            return this.p6;
        }
        set p7(a) {
            let b = this.p7;
            if (a != b) {
                this.p6 = a;
                this.g3("XAxisMode", enumGetBox(FinancialChartXAxisMode_$type, b), enumGetBox(FinancialChartXAxisMode_$type, this.p7));
            }
        }
        get p9() {
            return this.p8;
        }
        set p9(a) {
            let b = this.p9;
            if (a != b) {
                this.p8 = a;
                this.g3("YAxisMode", enumGetBox(FinancialChartYAxisMode_$type, b), enumGetBox(FinancialChartYAxisMode_$type, this.p9));
            }
        }
        get rw() {
            return this.ri;
        }
        set rw(a) {
            let b = this.rw;
            if (a != b) {
                this.ri = a;
                this.g3("IsToolbarVisible", b, this.rw);
            }
        }
        get p0() {
            return this.pz;
        }
        set p0(a) {
            let b = this.p0;
            if (a != b) {
                this.pz = a;
                this.g3("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.p0));
            }
        }
        get_nw() {
            return super.get_nw();
        }
        set_nw(a) {
            super.set_nw(a);
        }
        get rx() {
            return this.rj;
        }
        set rx(a) {
            let b = this.rx;
            if (a != b) {
                this.rj = a;
                this.g3("IsWindowSyncedToVisibleRange", b, this.rx);
            }
        }
        get qe() {
            return this.qd;
        }
        set qe(a) {
            let b = this.qe;
            if (a != b) {
                this.qd = a;
                this.g3("IndicatorTypes", b, this.qe);
            }
        }
        get qg() {
            return this.qf;
        }
        set qg(a) {
            let b = this.qg;
            if (a != b) {
                this.qf = a;
                this.g3("OverlayTypes", b, this.qg);
            }
        }
        get indicatorCharts() {
            return this.r6;
        }
        set indicatorCharts(a) {
            let b = this.indicatorCharts;
            if (a != b) {
                this.r6 = a;
                this.g3("IndicatorCharts", b, this.indicatorCharts);
            }
        }
        get r0() {
            return this.rk;
        }
        set r0(a) {
            let b = this.r0;
            if (a != b) {
                this.rk = a;
                this.g3("YAxisAbbreviateLargeNumbers", b, this.r0);
            }
        }
        get_cu() {
            return super.get_cu();
        }
        set_cu(a) {
            super.set_cu(a);
        }
        get_il() {
            return super.get_il();
        }
        set_il(a) {
            super.set_il(a);
        }
        get zoomSliderChart() {
            return this.rc;
        }
        set zoomSliderChart(a) {
            let b = this.zoomSliderChart;
            if (a != b) {
                this.rc = a;
                this.g3("ZoomSliderChart", b, this.zoomSliderChart);
            }
        }
        get zoomSliderAxis() {
            return this.qx;
        }
        set zoomSliderAxis(a) {
            let b = this.zoomSliderAxis;
            if (a != b) {
                this.qx = a;
                this.g3("ZoomSliderAxis", b, this.zoomSliderAxis);
            }
        }
        get zoomSliderXAxis() {
            return this.pi;
        }
        set zoomSliderXAxis(a) {
            let b = this.zoomSliderXAxis;
            if (a != b) {
                this.pi = a;
                this.g3("ZoomSliderXAxis", b, this.zoomSliderXAxis);
            }
        }
        get qc() {
            return this.qa;
        }
        set qc(a) {
            let b = this.qc;
            if (a != b) {
                this.qa = a;
                this.g3("ZoomSliderType", enumGetBox(FinancialChartZoomSliderType_$type, b), enumGetBox(FinancialChartZoomSliderType_$type, this.qc));
            }
        }
        get o9() {
            return this.o1;
        }
        set o9(a) {
            let b = this.o9;
            if (a != b) {
                this.o1 = a;
                this.g3("NegativeBrushes", b, this.o9);
            }
        }
        get pa() {
            return this.o2;
        }
        set pa(a) {
            let b = this.pa;
            if (a != b) {
                this.o2 = a;
                this.g3("NegativeOutlines", b, this.pa);
            }
        }
        get pb() {
            return this.o3;
        }
        set pb(a) {
            let b = this.pb;
            if (a != b) {
                this.o3 = a;
                this.g3("OverlayBrushes", b, this.pb);
            }
        }
        get pc() {
            return this.o4;
        }
        set pc(a) {
            let b = this.pc;
            if (a != b) {
                this.o4 = a;
                this.g3("OverlayOutlines", b, this.pc);
            }
        }
        get pe() {
            return this.o6;
        }
        set pe(a) {
            let b = this.pe;
            if (a != b) {
                this.o6 = a;
                this.g3("VolumeOutlines", b, this.pe);
            }
        }
        get pd() {
            return this.o5;
        }
        set pd(a) {
            let b = this.pd;
            if (a != b) {
                this.o5 = a;
                this.g3("VolumeBrushes", b, this.pd);
            }
        }
        get o8() {
            return this.o0;
        }
        set o8(a) {
            let b = this.o8;
            if (a != b) {
                this.o0 = a;
                this.g3("IndicatorNegativeBrushes", b, this.o8);
            }
        }
        get o7() {
            return this.oz;
        }
        set o7(a) {
            let b = this.o7;
            if (a != b) {
                this.oz = a;
                this.g3("IndicatorBrushes", b, this.o7);
            }
        }
        get sw() {
            return this.sl;
        }
        set sw(a) {
            let b = this.sw;
            if (a != b) {
                this.sl = a;
                this.g3("VolumeThickness", b, this.sw);
            }
        }
        get su() {
            return this.sj;
        }
        set su(a) {
            let b = this.su;
            if (a != b) {
                this.sj = a;
                this.g3("OverlayThickness", b, this.su);
            }
        }
        get st() {
            return this.si;
        }
        set st(a) {
            let b = this.st;
            if (a != b) {
                this.si = a;
                this.g3("IndicatorThickness", b, this.st);
            }
        }
        get qq() {
            return this.qp;
        }
        set qq(a) {
            let b = this.qq;
            if (a != b) {
                this.qp = a;
                this.g3("IndicatorDisplayTypes", b, this.qq);
            }
        }
        get ti() {
            return this.tb;
        }
        set ti(a) {
            let b = this.ti;
            if (a != b) {
                this.tb = a;
                this.g3("IndicatorPeriod", b, this.ti);
            }
        }
        get ss() {
            return this.sh;
        }
        set ss(a) {
            let b = this.ss;
            if (a != b) {
                this.sh = a;
                this.g3("IndicatorMultiplier", b, this.ss);
            }
        }
        get tl() {
            return this.te;
        }
        set tl(a) {
            let b = this.tl;
            if (a != b) {
                this.te = a;
                this.g3("IndicatorSmoothingPeriod", b, this.tl);
            }
        }
        get tj() {
            return this.tc;
        }
        set tj(a) {
            let b = this.tj;
            if (a != b) {
                this.tc = a;
                this.g3("IndicatorShortPeriod", b, this.tj);
            }
        }
        get th() {
            return this.ta;
        }
        set th(a) {
            let b = this.th;
            if (a != b) {
                this.ta = a;
                this.g3("IndicatorLongPeriod", b, this.th);
            }
        }
        get tk() {
            return this.td;
        }
        set tk(a) {
            let b = this.tk;
            if (a != b) {
                this.td = a;
                this.g3("IndicatorSignalPeriod", b, this.tk);
            }
        }
        get pw() {
            return this.pu;
        }
        set pw(a) {
            let b = this.pw;
            if (a != b) {
                this.pu = a;
                this.g3("RangeSelectorOptions", b, this.pw);
            }
        }
        get customIndicatorNames() {
            return this.pq;
        }
        set customIndicatorNames(a) {
            let b = this.pq;
            if (a != b) {
                this.pq = a;
                this.g3("CustomIndicatorNames", b, this.customIndicatorNames);
            }
        }
        get_bw() {
            return super.get_bw();
        }
        set_bw(a) {
            super.set_bw(a);
        }
        get xn() {
            return this.xm;
        }
        set xn(a) {
            let b = this.xn;
            if (a != b) {
                this.xm = a;
                this.g3("ZoomSliderXAxisMajorStroke", b, this.xn);
            }
        }
        get s3() {
            return this.sq;
        }
        set s3(a) {
            let b = this.s3;
            if (a != b) {
                this.sq = a;
                this.g3("ZoomSliderXAxisMajorStrokeThickness", b, this.s3);
            }
        }
        get rs() {
            return this.rh;
        }
        set rs(a) {
            let b = this.rs;
            if (a != b) {
                this.rh = a;
                this.g3("IsLegendVisible", b, this.rs);
            }
        }
        get qi() {
            return this.qh;
        }
        set qi(a) {
            let b = this.qi;
            if (a != b) {
                this.qh = a;
                this.g3("FinancialChartLegend", b, this.qi);
            }
        }
        get xAxis() {
            return this.ph;
        }
        set xAxis(a) {
            let b = this.xAxis;
            if (a != b) {
                this.ph = a;
                this.g3("XAxis", b, this.xAxis);
            }
        }
        get yAxis() {
            return this.qw;
        }
        set yAxis(a) {
            let b = this.yAxis;
            if (a != b) {
                this.qw = a;
                this.g3("YAxis", b, this.yAxis);
            }
        }
        get volumeAxis() {
            return this.qv;
        }
        set volumeAxis(a) {
            let b = this.volumeAxis;
            if (a != b) {
                this.qv = a;
                this.g3("VolumeAxis", b, this.volumeAxis);
            }
        }
        get volumeXAxis() {
            return this.pg;
        }
        set volumeXAxis(a) {
            let b = this.volumeXAxis;
            if (a != b) {
                this.pg = a;
                this.g3("VolumeXAxis", b, this.volumeXAxis);
            }
        }
        get indicatorAxis() {
            return this.qu;
        }
        set indicatorAxis(a) {
            let b = this.indicatorAxis;
            if (a != b) {
                this.qu = a;
                this.g3("IndicatorAxis", b, this.indicatorAxis);
            }
        }
        get indicatorXAxis() {
            return this.pf;
        }
        set indicatorXAxis(a) {
            let b = this.indicatorXAxis;
            if (a != b) {
                this.pf = a;
                this.g3("IndicatorXAxis", b, this.indicatorXAxis);
            }
        }
        get r8() {
            return this.r5;
        }
        set r8(a) {
            let b = this.r8;
            if (a != b) {
                this.r5 = a;
                this.g3("IndicatorAxes", b, this.r8);
            }
        }
        get sa() {
            return this.r7;
        }
        set sa(a) {
            let b = this.sa;
            if (a != b) {
                this.r7 = a;
                this.g3("IndicatorXAxes", b, this.sa);
            }
        }
        get sg() {
            return this.se;
        }
        set sg(a) {
            let b = this.sg;
            if (+a != +b) {
                this.se = a;
                this.g3("XAxisMinimumValue", b, this.sg);
            }
        }
        get sf() {
            return this.sd;
        }
        set sf(a) {
            let b = this.sf;
            if (+a != +b) {
                this.sd = a;
                this.g3("XAxisMaximumValue", b, this.sf);
            }
        }
        get xAxisBreaks() {
            return this.sb;
        }
    }
    FinancialChart.$t = /*@__PURE__*/ markType(FinancialChart, 'FinancialChart', XYChart.$);
    FinancialChart.tm = 0;
    return FinancialChart;
})();
/**
 * @hidden
 */
export let FinancialChartToolbar = /*@__PURE__*/ (() => {
    class FinancialChartToolbar extends TemplatedHtmlControl {
        constructor(a, b) {
            super("financialChartToolbar", b, "");
            this.o = null;
            this.r = null;
            this.z = null;
            this.p = null;
            this.w = null;
            this.aq = dateMaxValue();
            this.ap = dateMinValue();
            this.ao = dateMaxValue();
            this.an = dateMinValue();
            this.rangeChanged = null;
            this.chartTypeChanged = null;
            this.trendLineTypeChanged = null;
            this.volumeTypeChanged = null;
            this.indicatorTypesChanged = null;
            this.overlayTypesChanged = null;
            this.x = 0;
            this.ah = 0;
            this.ab = 0;
            this.ad = null;
            this.af = null;
            this.t = null;
            this.ak = false;
            this.o = a;
            this.w = new FinancialChartToolbarViewModel();
            this.s = new FinancialChartRangeSelector(a != null ? a.ty : null);
            this.aa = new FinancialChartTypePicker(a != null ? a.tv : null);
            this.q = new FinancialChartIndicatorMenu(1, a != null ? a.tw : null);
        }
        bg(a) {
            let b = a.querySelectorAll(".financialChartToolbarArea");
            if (b != null && b.length > 0) {
                this.g = b[0];
                if (!this.al) {
                    this.g.hide();
                }
            }
            let c = a.querySelectorAll(".financialChartIndicatorMenu");
            if (c != null && c.length > 0) {
                this.q.g = c[0];
            }
            let d = a.querySelectorAll(".financialChartRangeSelector");
            if (d != null && d.length > 0) {
                this.s.g = d[0];
            }
            let e = a.querySelectorAll(".financialChartTypePicker");
            if (e != null && e.length > 0) {
                this.aa.g = e[0];
            }
        }
        bl(a) {
            this.q.u(a);
            this.aa.u(a);
        }
        get s() {
            return this.r;
        }
        set s(a) {
            let b = this.s;
            if (a != b) {
                this.r = a;
                this.bm("RangeSelector", b, this.s);
            }
        }
        get aa() {
            return this.z;
        }
        set aa(a) {
            let b = this.aa;
            if (a != b) {
                this.z = a;
                this.bm("ChartTypePicker", b, this.aa);
            }
        }
        get q() {
            return this.p;
        }
        set q(a) {
            let b = this.q;
            if (a != b) {
                this.p = a;
                this.bm("IndicatorMenu", b, this.q);
            }
        }
        bm(a, b, c) {
            switch (a) {
                case "RangeStart":
                    if (this.s != null) {
                        this.s.t = this.as;
                    }
                    break;
                case "RangeEnd":
                    if (this.s != null) {
                        this.s.s = this.ar;
                    }
                    break;
                case "SelectionStart":
                    if (this.s != null) {
                        this.s.v = this.au;
                    }
                    break;
                case "SelectionEnd":
                    if (this.s != null) {
                        this.s.u = this.at;
                    }
                    break;
                case "RangeSelector":
                    let d = b;
                    if (d != null) {
                        d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.bj));
                    }
                    if (this.s != null) {
                        this.s.t = this.as;
                        this.s.s = this.ar;
                        this.s.o = this.u;
                        this.s.v = this.au;
                        this.s.u = this.at;
                        let e = this.s;
                        e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.bj));
                    }
                    break;
                case "ChartTypePicker":
                    let f = b;
                    if (f != null) {
                        f.selectionChanged = delegateRemove(f.selectionChanged, runOn(this, this.bi));
                    }
                    if (this.aa != null) {
                        this.aa.w = this.y;
                        let g = this.aa;
                        g.selectionChanged = delegateCombine(g.selectionChanged, runOn(this, this.bi));
                    }
                    break;
                case "ChartType":
                    if (this.aa != null) {
                        this.aa.w = this.y;
                    }
                    break;
                case "RangeSelectorOptions":
                    if (this.s != null) {
                        this.s.o = this.u;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.g == null) {
                        break;
                    }
                    if (this.al) {
                        this.g.show();
                    }
                    else {
                        this.g.hide();
                    }
                    break;
                case "IndicatorMenu":
                    let h = typeCast(FinancialChartIndicatorMenu.$, b);
                    if (h != null) {
                        h.selectionChanged = delegateRemove(h.selectionChanged, runOn(this, this.bh));
                    }
                    if (this.q != null) {
                        let i = this.q;
                        i.selectionChanged = delegateCombine(i.selectionChanged, runOn(this, this.bh));
                    }
                    break;
                case "IndicatorTypes":
                    if (this.indicatorTypesChanged != null) {
                        this.indicatorTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "OverlayTypes":
                    if (this.overlayTypesChanged != null) {
                        this.overlayTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "TrendLineType":
                    if (this.trendLineTypeChanged != null) {
                        this.trendLineTypeChanged(this, EventArgs.empty);
                    }
                    break;
                case "VolumeType":
                    if (this.volumeTypeChanged != null) {
                        this.volumeTypeChanged(this, EventArgs.empty);
                    }
                    break;
            }
        }
        bh(a, b) {
            this.ag = this.q.z;
            this.ae = this.q.y;
            this.ai = this.q.aa;
            this.ac = this.q.x;
        }
        bi(a, b) {
            this.y = this.aa.w;
            if (this.chartTypeChanged != null) {
                this.chartTypeChanged(this, b);
            }
        }
        bj(a, b) {
            this.au = this.s.v;
            this.at = this.s.u;
            if (this.rangeChanged != null) {
                this.rangeChanged(this, b);
            }
        }
        v() {
            let a = new FinancialChartToolbarContext();
            a.container = this.d;
            a.vm = this.w;
            a.vm.financialChartIndicatorMenu = ((() => {
                let $ret = new FinancialChartIndicatorMenuContext();
                $ret.vm = this.q.p;
                return $ret;
            })());
            a.vm.financialChartTypePicker = ((() => {
                let $ret = new FinancialChartTypePickerContext();
                $ret.vm = this.aa.p;
                return $ret;
            })());
            a.vm.financialChartRangeSelector = ((() => {
                let $ret = new FinancialChartRangeSelectorContext();
                $ret.vm = this.s.q;
                return $ret;
            })());
            return a;
        }
        l(a) {
            super.l(a);
            if (a == null) {
                return;
            }
            this.bk();
        }
        bk() {
        }
        get au() {
            return this.aq;
        }
        set au(a) {
            let b = this.au;
            if (+a != +b) {
                this.aq = a;
                this.bm("SelectionStart", b, this.au);
            }
        }
        get at() {
            return this.ap;
        }
        set at(a) {
            let b = this.at;
            if (+a != +b) {
                this.ap = a;
                this.bm("SelectionEnd", b, this.at);
            }
        }
        get as() {
            return this.ao;
        }
        set as(a) {
            let b = this.as;
            if (+a != +b) {
                this.ao = a;
                this.bm("RangeStart", b, this.as);
            }
        }
        get ar() {
            return this.an;
        }
        set ar(a) {
            let b = this.ar;
            if (+a != +b) {
                this.an = a;
                this.bm("RangeEnd", b, this.ar);
            }
        }
        bn() {
            if (this.s != null) {
                this.s.ab();
            }
        }
        get y() {
            return this.x;
        }
        set y(a) {
            let b = this.y;
            if (a != b) {
                this.x = a;
                this.bm("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.y));
            }
        }
        get ai() {
            return this.ah;
        }
        set ai(a) {
            let b = this.ai;
            if (a != b) {
                this.ah = a;
                this.bm("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.ai));
            }
        }
        get ac() {
            return this.ab;
        }
        set ac(a) {
            let b = this.ac;
            if (a != b) {
                this.ab = a;
                this.bm("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.ac));
            }
        }
        get ae() {
            return this.ad;
        }
        set ae(a) {
            let b = this.ae;
            if (!FinancialChartToolbar.am(b, a)) {
                this.ad = a;
                this.bm("IndicatorTypes", b, this.ae);
            }
        }
        get ag() {
            return this.af;
        }
        set ag(a) {
            let b = this.ag;
            if (!FinancialChartToolbar.am(b, a)) {
                this.af = a;
                this.bm("OverlayTypes", b, this.ag);
            }
        }
        static am(a, b) {
            if (a == b) {
                return true;
            }
            if ((a == null && b != null) || (a != null && b == null)) {
                return false;
            }
            if (a.count != b.count) {
                return false;
            }
            for (let c of fromEn(a)) {
                if (!b.contains(c)) {
                    return false;
                }
            }
            return true;
        }
        aj() {
            return ((() => {
                let $ret = new FinancialChartToolbarVisualData();
                $ret.rangeSelector = this.s == null ? null : this.s.r();
                return $ret;
            })());
        }
        get u() {
            return this.t;
        }
        set u(a) {
            let b = this.u;
            if (a != b) {
                this.t = a;
                this.bm("RangeSelectorOptions", b, this.u);
            }
        }
        get al() {
            return this.ak;
        }
        set al(a) {
            let b = this.al;
            if (a != b) {
                this.ak = a;
                this.bm("IsToolbarVisible", b, this.al);
            }
        }
    }
    FinancialChartToolbar.$t = /*@__PURE__*/ markType(FinancialChartToolbar, 'FinancialChartToolbar', TemplatedHtmlControl.$);
    return FinancialChartToolbar;
})();
/**
 * @hidden
 */
export let FinancialChartRangeSelector = /*@__PURE__*/ (() => {
    class FinancialChartRangeSelector extends TemplatedHtmlControl {
        constructor(a) {
            super("financialChartRangeSelector", a, "");
            this.q = null;
            this.rangeChanged = null;
            this.p = null;
            this.p = new FinancialChartRangeSelectorView();
            this.q = new FinancialChartRangeSelectorViewModel();
            this.q.onRangeChanged = runOn(this, this.z);
        }
        get v() {
            return this.q.selectionStart;
        }
        set v(a) {
            this.q.selectionStart = a;
        }
        get u() {
            return this.q.selectionEnd;
        }
        set u(a) {
            this.q.selectionEnd = a;
        }
        get t() {
            return this.q.rangeStart;
        }
        set t(a) {
            this.q.rangeStart = a;
        }
        get s() {
            return this.q.rangeEnd;
        }
        set s(a) {
            this.q.rangeEnd = a;
        }
        ab() {
            if (this.q.onPropertiesChanged()) {
                this.p.e(this.q);
            }
        }
        l(a) {
            super.l(a);
            this.p.d(this.d, this.q);
        }
        z() {
            if (this.rangeChanged != null) {
                this.rangeChanged(this, EventArgs.empty);
            }
        }
        r() {
            return this.p.c(this.g);
        }
        get o() {
            return this.q.options;
        }
        set o(a) {
            let b = !FinancialChartToolbar.am(this.q.options, a);
            if (b) {
                this.q.options = a;
                this.aa();
            }
        }
        aa() {
            if (this.q != null) {
                this.q.af();
            }
            if (this.p != null) {
                this.p.g(this.o);
            }
        }
    }
    FinancialChartRangeSelector.$t = /*@__PURE__*/ markType(FinancialChartRangeSelector, 'FinancialChartRangeSelector', TemplatedHtmlControl.$);
    FinancialChartRangeSelector.x = 0;
    return FinancialChartRangeSelector;
})();
//# sourceMappingURL=FinancialChart_combined.js.map
