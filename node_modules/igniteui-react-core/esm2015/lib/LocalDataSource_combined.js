/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseDataSource } from "./BaseDataSource";
import { Base, typeCast, Array_$type, Number_$type, fromEnum, markType } from "./type";
import { RearrangedListView } from "./RearrangedListView";
import { DataSourcePropertiesComparer } from "./DataSourcePropertiesComparer";
import { List$1 } from "./List$1";
import { DataSourceExecutionContext } from "./DataSourceExecutionContext";
import { DataSourceLocalDataProvider } from "./DataSourceLocalDataProvider";
import { DataSourceSpecialRow } from "./DataSourceSpecialRow";
import { ISupportsDataChangeNotifications_$type } from "./ISupportsDataChangeNotifications";
import { TransactionType, TransactionType_$type } from "./TransactionType";
import { ISupportsExpansionChangeNotifications_$type } from "./ISupportsExpansionChangeNotifications";
/**
 * @hidden
 */
export let LocalDataSource = /*@__PURE__*/ (() => {
    class LocalDataSource extends BaseDataSource {
        constructor() {
            super();
            this.cr = null;
            this.cq = null;
            this.dr = null;
            this.cw = null;
            this.c0 = null;
            this.c2 = null;
            this.cy = null;
            this.dc = new List$1(Array_$type, 0);
            this.c3 = false;
            this.cp = null;
            this.dk = -1;
            this.dd = -1;
            this.dm = -1;
            this.df = -1;
            this.dn = -1;
            this.dg = -1;
            this.dl = -1;
            this.de = -1;
            this.dq = -1;
            this.dp = -1;
            this.di = -1;
            this.dh = -1;
            this.dj = -1;
            this.executionContext = new DataSourceExecutionContext();
            this.t.l = false;
        }
        get_actualBaseDataProvider() {
            return this.actualDataProvider;
        }
        get actualBaseDataProvider() {
            return this.get_actualBaseDataProvider();
        }
        get dataProvider() {
            return this.cr;
        }
        set dataProvider(a) {
            let b = this.cr;
            this.cr = a;
            if (b != this.cr) {
                this.onPropertyUpdated("DataProvider", b, this.cr);
            }
        }
        get actualDataProvider() {
            if (this.cq == null) {
                this.actualDataProvider = this.resolveDataProvider();
            }
            return this.cq;
        }
        set actualDataProvider(a) {
            let b = this.cq;
            this.cq = a;
            if (b != this.cq) {
                this.onPropertyUpdated("ActualDataProvider", b, this.cq);
            }
        }
        get dataSource() {
            return this.dr;
        }
        set dataSource(a) {
            let b = this.dr;
            this.dr = a;
            if (b != this.dr) {
                this.onPropertyUpdated("ItemsSource", b, this.dr);
            }
        }
        canInitialize() {
            let a = super.canInitialize();
            if (!a) {
                return false;
            }
            return this.dataSource != null;
        }
        get cx() {
            return this.cw;
        }
        set cx(a) {
            this.cw = a;
            this.actualDataProvider = this.resolveDataProvider();
        }
        resolveDataProvider() {
            let provider_ = new DataSourceLocalDataProvider();
            provider_.executionContext = new DataSourceExecutionContext();
            return provider_;
        }
        propertyUpdatedOverride(a, b, c) {
            super.propertyUpdatedOverride(a, b, c);
            switch (a) {
                case "DataProvider":
                    this.actualDataProvider = this.dataProvider;
                    break;
                case "ActualDataProvider":
                    if (this.actualDataProvider != null) {
                        this.actualDataProvider.dataSource = this.dataSource;
                        this.actualSchema = this.actualDataProvider.actualSchema;
                        this.actualCount = this.resolveFullCount(this.actualDataProvider.actualCount);
                    }
                    this.queueAutoRefresh();
                    break;
                case "ItemsSource":
                    if (this.actualDataProvider != null) {
                        this.actualDataProvider.dataSource = this.dataSource;
                        this.actualSchema = this.actualDataProvider.actualSchema;
                        this.actualCount = this.resolveFullCount(this.actualDataProvider.actualCount);
                    }
                    this.queueAutoRefresh();
                    break;
            }
        }
        getItemAtIndex(a) {
            if (this.c0 != null && this.c0.a6 != null) {
                return this.c0.a6.item(a);
            }
            else {
                return this.actualDataProvider.getItemAtIndex(a);
            }
        }
        getItemPropertyAtIndex(a, b) {
            let c;
            if (this.c0 != null) {
                c = this.c0.a6.item(a);
            }
            else {
                c = this.actualDataProvider.getItemAtIndex(a);
            }
            let item_ = c;
            if ((item_ != null && item_.$$isSpecialRow !== undefined)) {
                return this.getSpecialRowItemValue(c, b);
            }
            if (this.ao()) {
                let d = this.al(c, b);
                if (d) {
                    let e = this.ax(c, b);
                    return e;
                }
            }
            return this.actualDataProvider.getItemValue(c, b);
        }
        cv() {
            return this.actualDataProvider;
        }
        c5() {
            return this.dc != null && this.dc.count > 0;
        }
        refreshInternalOverride() {
            super.refreshInternalOverride();
            if (this.actualDataProvider != null) {
                if (this.c6() || this.c7() || this.c8() || this.c9() || this.c5()) {
                    if (this.c0 == null) {
                        if (this.c2 == null) {
                            this.c2 = new LocalDataSourceViewUpdateNotifier(this);
                        }
                        this.c0 = new RearrangedListView(this.actualDataProvider);
                        this.c0.ab = this.c2;
                        this.c0.ad = new LocalDataSourceViewExpansionNotifier(this);
                    }
                    this.ensureComparables(this.actualDataProvider.actualSchema);
                    this.c0.av = this.shouldEmitSectionHeaders && this.an;
                    this.c0.au = this.shouldEmitSectionFooters && this.an;
                    this.c0.aw = this.shouldEmitShiftedRows;
                    this.c0.cb(this.dc);
                    this.c0.a2 = this.db();
                    this.c0.a1 = this.da();
                    this.c0.p = this.cz();
                    this.c0.ae = this.groupDescriptions;
                    this.c0.af = this.sortDescriptions;
                    this.c0.ag = this.summaryDescriptions;
                    this.c0.l = this.summaryScope;
                    this.c0.am = this.includeSummaryRowsInSection;
                    this.c0.as = this.isSectionSummaryRowsAtBottom;
                    this.c0.j = this.sectionHeaderDisplayMode;
                    this.c0.m = this;
                    this.c0.ap = this.groupDescriptions != null && this.groupDescriptions.k.count > 0;
                    this.c0.t = this.c1();
                    this.c0.b6();
                    this.actualSchema = this.actualDataProvider.actualSchema;
                    this.actualCount = this.c0.a6.count;
                }
                else {
                    let a = this.cv();
                    this.actualSchema = this.actualDataProvider.actualSchema;
                    if (a != null) {
                        this.actualCount = a.actualCount;
                    }
                    else {
                        this.actualCount = 0;
                    }
                    if (this.c0 != null) {
                        this.c0.ab = null;
                        this.c0 = null;
                        this.onBroadcastClearItems();
                    }
                }
            }
            else {
                this.actualCount = 0;
                this.actualSchema = null;
            }
        }
        get_isItemIndexLookupSupported() {
            return true;
        }
        get_isKeyIndexLookupSupported() {
            return true;
        }
        indexOfItem(a) {
            if (this.c0 != null) {
                return this.c0.a6.indexOf(a);
            }
            if (this.actualDataProvider != null && this.actualDataProvider.isItemIndexLookupSupported) {
                return this.actualDataProvider.indexOfItem(a);
            }
            if (this.actualDataProvider != null) {
                let b = this.actualDataProvider.actualCount;
                let c;
                for (let d = 0; d < b; d++) {
                    c = this.actualDataProvider.getItemAtIndex(d);
                    if (this.c4(c, a)) {
                        return d;
                    }
                }
            }
            return -1;
        }
        c4(a, b) {
            if (a == null && b == null) {
                return true;
            }
            if (a == null || b == null) {
                return false;
            }
            return Base.equalsStatic(a, b);
        }
        indexOfKey(a) {
            let b = this.actualPrimaryKey;
            if (b == null || b.length < 1 || this.actualBaseDataProvider == null) {
                return this.indexOfItem(a[0]);
            }
            let c = this.cz();
            let d;
            if (this.c0 != null) {
                let e = this.c0.a6.count;
                for (let f = 0; f < e; f++) {
                    d = this.c0.a6.item(f);
                    if (typeCast(DataSourceSpecialRow.$, d) !== null) {
                        let g = d;
                        if (g.rowType == 1 && !this.isSectionContentVisible && this.isSectionHeaderNormalRow) {
                            if (c.i(d, a) == 0) {
                                return f;
                            }
                        }
                    }
                    else if (c.i(d, a) == 0) {
                        return f;
                    }
                }
                return -1;
            }
            if (this.actualDataProvider != null && this.actualDataProvider.isKeyIndexLookupSupported) {
                return this.actualDataProvider.indexOfKey(a);
            }
            if (this.actualDataProvider != null) {
                let h = this.actualDataProvider.actualCount;
                for (let i = 0; i < h; i++) {
                    d = this.actualDataProvider.getItemAtIndex(i);
                    if (c.i(d, a) == 0) {
                        return i;
                    }
                }
            }
            return -1;
        }
        onActualPrimaryKeyChangedOverrride(a, b) {
            super.onActualPrimaryKeyChangedOverrride(a, b);
            this.cy = null;
        }
        cz() {
            if (this.cy != null) {
                return this.cy;
            }
            if (this.actualPrimaryKey == null) {
                this.cy = new DataSourcePropertiesComparer(null, null, null, this);
                return this.cy;
            }
            let a = new Array(this.actualPrimaryKey.length);
            for (let b = 0; b < a.length; b++) {
                a[b] = 0;
            }
            this.cy = new DataSourcePropertiesComparer(this.actualPrimaryKey, a, this.d, this);
            return this.cy;
        }
        c1() {
            if (this.filterExpressions.j.count == 0) {
                return null;
            }
            let a = this.actualDataProvider;
            let b = this.actualDataProvider.actualSchema;
            let c = this.filterExpressions.j;
            let d = (e) => {
                for (let f = 0; f < c.count; f++) {
                    if (!c.item(f).match(e, a, b)) {
                        return false;
                    }
                }
                return true;
            };
            return d;
        }
        db() {
            let a = 0;
            if (this.sortDescriptions.k.count == 0 && (this.groupDescriptions == null || this.groupDescriptions.k.count == 0)) {
                return null;
            }
            a = this.sortDescriptions.k.count;
            if (this.groupDescriptions != null) {
                a += this.groupDescriptions.k.count;
            }
            let b = new Array(a);
            let c = new Array(a);
            let d = 0;
            if (this.groupDescriptions != null) {
                for (let e = 0; e < this.groupDescriptions.k.count; e++) {
                    b[e] = this.groupDescriptions.k.item(e).propertyName;
                    c[e] = this.groupDescriptions.k.item(e).direction;
                    d++;
                }
            }
            for (let f = 0; f < this.sortDescriptions.k.count; f++) {
                b[f + d] = this.sortDescriptions.k.item(f).propertyName;
                c[f + d] = this.sortDescriptions.k.item(f).direction;
            }
            return new DataSourcePropertiesComparer(b, c, this.d, this);
        }
        da() {
            if (this.groupDescriptions == null || this.groupDescriptions.k.count < 1) {
                return null;
            }
            let a = 0;
            a = this.groupDescriptions.k.count;
            let b = new Array(a);
            let c = new Array(a);
            if (this.groupDescriptions != null) {
                for (let d = 0; d < this.groupDescriptions.k.count; d++) {
                    b[d] = this.groupDescriptions.k.item(d).propertyName;
                    c[d] = this.groupDescriptions.k.item(d).direction;
                }
            }
            return new DataSourcePropertiesComparer(b, c, this.d, this);
        }
        c7() {
            if (this.groupDescriptions == null || this.groupDescriptions.k.count < 1) {
                return false;
            }
            if (this.actualDataProvider == null) {
                return false;
            }
            if (this.actualDataProvider.isGroupingSupported) {
                return false;
            }
            return true;
        }
        c8() {
            if (this.sortDescriptions == null || this.sortDescriptions.k.count < 1) {
                return false;
            }
            if (this.actualDataProvider == null) {
                return false;
            }
            if (this.actualDataProvider.isSortingSupported) {
                return false;
            }
            return true;
        }
        c6() {
            return this.filterExpressions != null && this.filterExpressions.j.count > 0;
        }
        c9() {
            if (this.summaryDescriptions == null || this.summaryDescriptions.k.count < 1) {
                return false;
            }
            return true;
        }
        onClearItemsOverride() {
            if (this.c0 != null) {
                this.c0.notifyClearItems();
                this.queueAutoRefresh();
            }
            else {
                super.onClearItemsOverride();
            }
        }
        onSetItemOverride(a, b, c) {
            if (this.c0 != null) {
                this.c0.notifySetItem(a, b, c);
            }
            else {
                super.onSetItemOverride(a, b, c);
            }
        }
        onInsertItemOverride(a, b) {
            if (this.c0 != null) {
                this.c0.notifyInsertItem(a, b);
            }
            else {
                super.onInsertItemOverride(a, b);
            }
        }
        onRemoveItemOverride(a, b) {
            if (this.c0 != null) {
                this.c0.notifyRemoveItem(a, b);
            }
            else {
                super.onRemoveItemOverride(a, b);
            }
        }
        dw() {
            this.actualCount = this.c0.a6.count;
            this.onBroadcastClearItems();
        }
        dz(a, b, c) {
            this.actualCount = this.c0.a6.count;
            this.onBroadcastSetItem(a, b, c);
        }
        dx(a, b) {
            this.actualCount = this.c0.a6.count;
            this.onBroadcastInsertItem(a, b);
        }
        dy(a, b) {
            this.actualCount = this.c0.a6.count;
            this.onBroadcastRemoveItem(a, b);
        }
        pinRow(a) {
            super.pinRow(a);
            this.dk = -1;
            this.dd = -1;
            if (this.c0 != null) {
                this.dc.add(a);
                this.c0.b5(a);
            }
            else {
                this.dc.add(a);
                this.queueAutoRefresh();
            }
        }
        unpinRow(a) {
            super.unpinRow(a);
            let b = this.cz();
            if (this.c0 != null) {
                for (let c = this.dc.count - 1; c >= 0; c--) {
                    let d = this.dc._inner[c];
                    if (d.length != a.length) {
                        continue;
                    }
                    if (b.h(d, a) == 0) {
                        this.dc.removeAt(c);
                        this.c0.cc(d);
                    }
                }
            }
            else {
                for (let e = this.dc.count - 1; e >= 0; e--) {
                    let f = this.dc._inner[e];
                    if (f.length != a.length) {
                        continue;
                    }
                    if (b.h(f, a) == 0) {
                        this.dc.removeAt(e);
                    }
                }
                this.queueAutoRefresh();
            }
            this.dk = -1;
            this.dd = -1;
        }
        clearPinnedRows() {
            for (let a = this.dc.count - 1; a >= 0; a--) {
                this.unpinRow(this.dc._inner[a]);
            }
        }
        isRowPinned(a) {
            if (this.c0 == null) {
                return false;
            }
            let b = this.getItemAtIndex(a);
            if (b == null) {
                return false;
            }
            let item_ = b;
            if ((item_ != null && item_.$$isSpecialRow !== undefined)) {
                if (item_.rowType == 3) {
                    return true;
                }
            }
            let c = this.cz();
            let d;
            if (this.actualPrimaryKey == null) {
                d = new Array(1);
                d[0] = b;
            }
            else {
                let e = this.actualPrimaryKey;
                let f = e.length;
                d = new Array(f);
                for (let g = 0; g < f; g++) {
                    d[g] = this.getItemProperty(b, e[g]);
                }
            }
            for (let h = 0; h < this.dc.count; h++) {
                if (c.h(this.dc._inner[h], d) == 0) {
                    return true;
                }
            }
            return false;
        }
        get_isSortingSupported() {
            if (this.externalDataSource != null && !this.c3) {
                this.c3 = true;
                let a = this.externalDataSource.isSortingSupportedOverride;
                this.c3 = false;
                return a;
            }
            return true;
        }
        get_isFilteringSupported() {
            if (this.externalDataSource != null && !this.c3) {
                this.c3 = true;
                let a = this.externalDataSource.isFilteringSupportedOverride;
                this.c3 = false;
                return a;
            }
            return true;
        }
        get_isGroupingSupported() {
            if (this.externalDataSource != null && !this.c3) {
                this.c3 = true;
                let a = this.externalDataSource.isGroupingSupportedOverride;
                this.c3 = false;
                return a;
            }
            return true;
        }
        getStickyRowPriority(a) {
            let b = this.getRowType(a);
            switch (b) {
                case 1: return 100 - this.getRowLevel(a);
                case 2: return 99 - this.getRowLevel(a);
                case 3:
                case 5: return 2;
                case 4: return 3;
            }
            return 1;
        }
        getStickyRowsInRange(a, b) {
            if (this.c0 == null || ((this.groupDescriptions == null || this.groupDescriptions.k.count == 0) && (this.summaryDescriptions == null || this.summaryDescriptions.k.count == 0) && !this.c5())) {
                return null;
            }
            let c = null;
            let d = null;
            if (this.c0.a5.count == 1) {
                c = this.c0.a5._inner[0];
                d = this.c0.a5._inner[0];
            }
            else {
                c = this.c0.w(a);
                if (c != null) {
                    while (c.z != -1) {
                        c = this.c0.a5._inner[c.z];
                    }
                }
                d = this.c0.w(b);
                if (b >= this.c0.a6.count - this.c0.bk) {
                    d = this.c0.v();
                }
            }
            if (c == null || d == null) {
                return null;
            }
            if (c.ae == this.dk && c.aa == this.dm && c.af == this.dn && c.ad == this.dl && c.ah == this.dq && c.ag == this.dp && d.ae == this.dd && d.aa == this.df && d.af == this.dg && d.ad == this.de && d.ah == this.di && d.ag == this.dh && this.c0.bk == this.dj) {
                return this.cp;
            }
            this.dk = c.ae;
            this.dd = d.ae;
            this.dm = c.aa;
            this.df = d.aa;
            this.dn = c.af;
            this.dg = d.af;
            this.dl = c.ad;
            this.de = d.ad;
            this.dq = c.ah;
            this.dp = c.ag;
            this.di = d.ah;
            this.dh = d.ag;
            this.dj = this.c0.bk;
            if (this.c0.a5.count == 1) {
                this.dd = d.ad;
            }
            let e = 0;
            if (this.shouldEmitSectionHeaders && this.an) {
                e = 1;
            }
            let f = this.c0.ba();
            let g = new List$1(Number_$type, 0);
            for (let h = c.ae; h <= d.ae; h++) {
                let i = this.c0.a5._inner[h];
                let j = this.c0.a5._inner[h].c.length;
                let k = this.c0.a5._inner[h].v();
                if (this.shouldEmitSectionHeaders && this.an) {
                    for (let l = 0; l < j; l++) {
                        if (this.c0.a5._inner[h].a[l] != null) {
                            let m = i.af + i.b[l];
                            g.add(m);
                            if (this.summaryScope == 0 || this.summaryScope == 2) {
                                if (i.c[l] && this.includeSummaryRowsInSection && !this.isSectionSummaryRowsAtBottom) {
                                    for (let n = 0; n < f; n++) {
                                        g.add(m + 1 + n);
                                    }
                                }
                            }
                        }
                        if (!this.c0.a5._inner[h].c[l]) {
                            break;
                        }
                    }
                }
                if (this.c0.a5._inner[h].p) {
                    if (this.shouldEmitShiftedRows) {
                        for (let o = 0; o < this.c0.a5._inner[h].aa; o++) {
                            g.add(this.c0.a5._inner[h].af + this.c0.a5._inner[h].ah + o + k);
                        }
                    }
                }
                if (this.summaryScope == 0 || this.summaryScope == 2) {
                    if (this.includeSummaryRowsInSection && this.isSectionSummaryRowsAtBottom) {
                        for (let p = this.c0.a5._inner[h].ag - 1; p >= 0; p--) {
                            if (this.shouldEmitSectionFooters) {
                                g.add(this.c0.a5._inner[h].ad - k - p);
                            }
                            else {
                                g.add(this.c0.a5._inner[h].ad - p);
                            }
                        }
                    }
                }
                if (this.shouldEmitSectionFooters && this.an) {
                    for (let q = j - 1; q >= 0; q--) {
                        if (!this.c0.a5._inner[h].c[q]) {
                            break;
                        }
                        g.add(this.c0.a5._inner[h].ad - q);
                    }
                }
            }
            for (let r = this.c0.a6.count - this.c0.bk; r < this.c0.a6.count; r++) {
                g.add(r);
            }
            this.cp = g.toArray();
            return this.cp;
        }
        isExclusivelySticky(a) {
            let b = this.getRowType(a);
            return b == 1 || b == 2 || b == 4 || (this.isSectionSummaryRowsAtBottom && b == 5);
        }
        getRowType(a) {
            if (a < 0) {
                return 0;
            }
            let b = this.getItemAtIndex(a);
            let item_ = b;
            if ((item_ != null && item_.$$isSpecialRow !== undefined)) {
                let c = b.rowType;
                if (this.isSectionHeaderNormalRow && c == 1) {
                    return 0;
                }
                return c;
            }
            return 0;
        }
        setIsRowExpandedAtIndex(a, b) {
            if (this.isSectionCollapsable && this.c0 != null && this.c0.a6.count > 0 && this.c0.a6.count > a) {
                this.c0.ca(a, b);
            }
        }
        getIsRowExpandedAtIndex(a) {
            if (this.c0 != null && this.c0.a6.count > 0 && this.c0.a6.count > a) {
                return this.c0.ak(a);
            }
            return true;
        }
        getRowLevel(a) {
            if (a < 0) {
                return 0;
            }
            let b = this.getItemAtIndex(a);
            let item_ = b;
            if ((item_ != null && item_.$$isSpecialRow !== undefined)) {
                return b.level;
            }
            if (this.sectionHeaderDisplayMode == 1) {
                return this.groupDescriptions.k.count;
            }
            else if (this.groupDescriptions.k.count > 0) {
                return 1;
            }
            return 0;
        }
        getRootSummaryRowCount() {
            if (this.c0 != null) {
                return this.c0.bk;
            }
            return 0;
        }
        getRootSummaryResults() {
            if (this.c0 != null) {
                return this.c0.i;
            }
            return null;
        }
        getSectionSummaryResults(a) {
            if (this.c0 != null && this.c0.a5.count > 0 && a >= 0 && a < this.c0.a5.count) {
                return this.c0.a5._inner[a].i;
            }
            return null;
        }
        clone() {
            let a = new LocalDataSource();
            a.dataSource = this.dataSource;
            super.cloneProperties(a);
            return a;
        }
        ao() {
            return !this.isReadOnly && this.actualBaseDataProvider != null && this.t != null;
        }
        ci(a, b) {
            if (a == 5) {
                let c = new List$1(TransactionType_$type, 0);
                let d = new List$1(Base.$, 0);
                let e = b;
                let f = e.a;
                for (let g = 0; g < f.length; g++) {
                    if (f[g].transactionType == 1) {
                        let h = f[g].id;
                        let i = this.indexOfKey(h);
                        if (i > -1) {
                            let j = this.getItemAtIndex(i);
                            let k = f[g].value;
                            for (let l of fromEnum(k)) {
                                this.actualDataProvider.setItemValue(j, l.key, l.value);
                            }
                            this.onBroadcastSetItem(i, j, j);
                            d.add1(j);
                            c.add(1);
                            if (this.dc.count > 0) {
                                let m = this.cz();
                                for (let n = 0; n < this.dc.count; n++) {
                                    if (m.h(this.dc._inner[n], h) == 0) {
                                        let o = this.getStickyRows();
                                        for (let p = 0; p < o.length; p++) {
                                            let q = o[p];
                                            let r = typeCast(DataSourceSpecialRow.$, this.c0.a6.item(q));
                                            if (r != null && r.rowType == 3 && r.targetRow == j) {
                                                this.onBroadcastSetItem(q, r, r);
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else if (f[g].transactionType == TransactionType.Delete) {
                        let s = f[g].id;
                        let t = this.indexOfKey(s);
                        if (t > -1) {
                            let u = this.getItemAtIndex(t);
                            this.actualDataProvider.removeItem(u);
                            this.notifyRemoveItem(t, u);
                            d.add1(u);
                            c.add(TransactionType.Delete);
                        }
                    }
                    else if (f[g].transactionType == 0) {
                        let v = f[g].id[0];
                        if (f[g].value != null) {
                            let w = f[g].value;
                            for (let x of fromEnum(w)) {
                                this.actualDataProvider.setItemValue(v, x.key, x.value);
                            }
                        }
                        this.actualDataProvider.addItem(v);
                        d.add1(v);
                        c.add(0);
                    }
                }
                if (f.length > 0) {
                    this.bu(e.id, this.getAggregatedChanges(e.id));
                }
            }
        }
    }
    LocalDataSource.$t = /*@__PURE__*/ markType(LocalDataSource, 'LocalDataSource', BaseDataSource.$);
    return LocalDataSource;
})();
/**
 * @hidden
 */
export let LocalDataSourceViewUpdateNotifier = /*@__PURE__*/ (() => {
    class LocalDataSourceViewUpdateNotifier extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        notifyClearItems() {
            this.a.dw();
        }
        notifyInsertItem(a, b) {
            this.a.dx(a, b);
        }
        notifyRemoveItem(a, b) {
            this.a.dy(a, b);
        }
        notifySetItem(a, b, c) {
            this.a.dz(a, b, c);
        }
    }
    LocalDataSourceViewUpdateNotifier.$t = /*@__PURE__*/ markType(LocalDataSourceViewUpdateNotifier, 'LocalDataSourceViewUpdateNotifier', Base.$, [ISupportsDataChangeNotifications_$type]);
    return LocalDataSourceViewUpdateNotifier;
})();
/**
 * @hidden
 */
export let LocalDataSourceViewExpansionNotifier = /*@__PURE__*/ (() => {
    class LocalDataSourceViewExpansionNotifier extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        notifyRowExpansionChanged(a, b, c) {
            this.a.onRowExpansionChanged(a, b, c);
        }
    }
    LocalDataSourceViewExpansionNotifier.$t = /*@__PURE__*/ markType(LocalDataSourceViewExpansionNotifier, 'LocalDataSourceViewExpansionNotifier', Base.$, [ISupportsExpansionChangeNotifications_$type]);
    return LocalDataSourceViewExpansionNotifier;
})();
//# sourceMappingURL=LocalDataSource_combined.js.map
