import * as React from 'react';
import { CategoryChart } from './CategoryChart';
import { CategoryChartType } from './CategoryChartType';
import { CategorySeriesMarkerCollisionAvoidance } from './CategorySeriesMarkerCollisionAvoidance';
import { CategoryTransitionInMode } from './CategoryTransitionInMode';
import { TransitionInSpeedType } from './TransitionInSpeedType';
import { IgrXYChart, IIgrXYChartProps } from './igr-xy-chart';
import { DataSeriesType } from "igniteui-react-core";
export declare const IgxCategoryChartComponent_PROVIDERS: any[];
/**
 * Represents a chart with an ordinal X-axis and a numeric Y-axis.
*
* **Ignite UI for React Category Chart** - [Documentation](https://www.infragistics.com/products/ignite-ui-react/react/components/CategoryChart.html)
*
* The Ignite UI Category Chart is a lightweight, highly performant chart. It can be easily configured to display category data using an extremely simple and intuitive API. All you need to do is provide your data to the chart and it will take care of everything else.
*
* Example:
*
* ```ts
* <IgrCategoryChart
* 	dataSource={this.state.data} />
* ```
*/
export declare class IgrCategoryChart extends IgrXYChart<IIgrCategoryChartProps> {
    private _container;
    private _height;
    private _width;
    private _initialized;
    private _elRef;
    height: string;
    width: string;
    protected _tooltipRef(t: any): void;
    private _getMainRef;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (ref: any) => void;
        children: any[];
    }, any>;
    constructor(props: IIgrCategoryChartProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    private _wrapper;
    protected createImplementation(): CategoryChart;
    readonly i: CategoryChart;
    protected createSeriesComponent(type: string): any;
    protected createSeries(type: DataSeriesType): any;
    private _chart;
    private _dataSource;
    dataSource: Array<any>;
    bindData(): void;
    private _defaultTooltips;
    initializeContent(): void;
    private _activeTooltips;
    private _activeTooltipElements;
    private _currentTooltips;
    private _uniqueTooltipId;
    private createTooltip;
    private _ensureTooltipCreated;
    private _createXAxis;
    private _createYAxis;
    private _ensureDefaultTooltip;
    private _onDefaultTooltipsReady;
    private _updateTooltipState;
    /**
 * Gets or sets the duration used for animating series plots when the chart is loading into view
*
* `transitionInDuration` controls the length of time taken by the transition-in animation.  Try setting it to 2 seconds:
*
* ```ts
* <IgrCategoryChart
* 	dataSource={this.state.data}
* 	transitionInDuration={2000} />
* ```
*/
    transitionInDuration: number;
    /**
     * Gets or sets the easing function used for animating series plots when the chart is loading into view
     * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
    */
    transitionInEasingFunction: (time: number) => number;
    /**
     * Gets or sets the type of chart series to generate from the data.
    *
    * The `chartType` property determines the type of data series to display.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" />
    * ```
    */
    chartType: CategoryChartType;
    /**
     * Gets or sets the behavior for markers in each series which are placed too close together for the current view, resulting in a collision.
    *
    * `markerCollisionAvoidance` controls the technique the chart uses to avoid overlapping markers.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	 markerCollisionAvoidance="none" />
    * ```
    */
    markerCollisionAvoidance: CategorySeriesMarkerCollisionAvoidance;
    /**
     * Gets or sets whether animation of series plots is enabled when the chart is loading into view
    *
    * Set `isTransitionInEnabled` to true if you want your chart series to animate into position when the chart is loading into view.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	 isTransitionInEnabled ="true" />
    * ```
    */
    isTransitionInEnabled: boolean;
    /**
     * Gets or sets the method that determines how to animate series plots when the chart is loading into view
    *
    * `transitionInMode` controls the direction of the transition-in animation.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	CategoryTransitionInMode="accordionfromRight" />
    * ```
    */
    transitionInMode: CategoryTransitionInMode;
    /**
     * Gets or sets the arrival speed used for animating series plots when the chart is loading into view
    *
    * `transitionInSpeedType` controls the speed of the transition-in animation.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	 transitionInSpeedType="indexScaled" >
    * </IgrCategoryChart>
    * ```
    */
    transitionInSpeedType: TransitionInSpeedType;
    /**
     * Gets or sets the frequency of displayed labels along the X-axis.
     * Gets or sets the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
    *
    * `xAxisInterval` determines how often to show a label, tickmark, and/or gridline along the x-axis.  Set this property to _n_ to display a label every _nth_ item.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	xAxisInterval={3} />
    * ```
    */
    xAxisInterval: number;
    /**
     * Gets or sets the frequency of displayed minor lines along the X-axis.
     * Gets or sets the set value is a factor that determines how the minor lines will be displayed.
    *
    * `xAxisMinorInterval` determines how often to show a minor gridline along the x-axis.  This property is relevant only when the displayed series is a type with grouping, like column series.
    *
    * `xAxisMinorInterval` is expressed as a number between 0 and 1, representing the frequency of the interval.  To display minor gridlines representing 10ths of an item width, set `xAxisMinorInterval` to 0.1.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	xAxisMinorInterval={0.1}
    *     xAxisMinorStroke="green"
    *     xAxisMinorStrokeThickness={1} />
    * ```
    */
    xAxisMinorInterval: number;
    /**
     * Gets or sets the amount of space between adjacent categories for the X-axis.
     * The gap is silently clamped to the range [0, 1] when used.
    *
    * Use the `xAxisGap` property to configure the spacing between items on the x-axis.  This property is relevant only when the displayed series is a type with item spacing, like column series.
    *
    * An `xAxisGap` of 0 allocates no space between items.  An `xAxisGap` of 1 allocates a space between items equal to the width of one item.
    *
    * To set the item spacing to 75% the width of one item, set the `xAxisGap` to 0.75, as in this code:
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	 xAxisGap={0.75} />
    * ```
    */
    xAxisGap: number;
    /**
     * Gets or sets the amount of overlap between adjacent categories for the X-axis.
     * Gets or sets the overlap is silently clamped to the range [-1, 1] when used.
    *
    * Use the `xAxisOverlap` property to configure the spacing between items on the x-axis.  This property is relevant only when the displayed series is a type with item spacing, like column series.
    *
    * An `xAxisOverlap` of 0 places grouped items adjacent to each other.  An `xAxisOverlap` of 1 places grouped items in the same axis space, completely overlapping.  An `xAxisOverlap` of -1 places a space between grouped items equal to the width of one item.
    *
    * To place grouped items with 75% overlap, set the `xAxisOverlap` to 0.75, as in this code:
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	xAxisOverlap={0} />
    * ```
    */
    xAxisOverlap: number;
    /**
     * Gets or sets the distance between each label and grid line along the Y-axis.
    *
    * `yAxisInterval` determines how often to show a label, tickmark, and/or gridline along the y-axis.  Set this property to a number less than the numeric range of the y-axis.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	yAxisInterval={10} />
    * ```
    */
    yAxisInterval: number;
    /**
     * Gets or sets whether the Y-axis should use a logarithmic scale instead of a linear one.
     * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
    *
    * Set `yAxisIsLogarithmic` to true if you want the y-axis to be a logarithmic scale.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	yAxisIsLogarithmic="true" />
    * ```
    */
    yAxisIsLogarithmic: boolean;
    /**
     * Gets or sets the base value to use in the log function when mapping the position of data items along the Y-axis.
     * This property is effective only when YAxisIsLogarithmic is true.
    *
    * When `yAxisIsLogarithmic` is true, `yAxisLogarithmBase` sets the logarithm base of the y-axis scale.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	yAxisIsLogarithmic="true"
    *     yAxisLogarithmBase={2} />
    * ```
    */
    yAxisLogarithmBase: number;
    /**
     * Gets or sets the data value corresponding to the minimum value of the Y-axis.
    *
    * `yAxisMaximumValue` determines the minimum of the y-axis.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	yAxisMinimumValue={42} />
    * ```
    */
    yAxisMinimumValue: number;
    /**
     * Gets or sets the data value corresponding to the maximum value of the Y-axis.
    *
    * `yAxisMaximumValue` determines the maximum of the y-axis.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	yAxisMaximumValue={150} />
    * ```
    */
    yAxisMaximumValue: number;
    /**
     * Gets or sets the frequency of displayed minor lines along the Y-axis.
    *
    * `yAxisMinorInterval` determines how often to show a minor gridline along the y-axis.  Set this property to a number less than the y-axis interval.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	yAxisMinorInterval={2}
    *     yAxisMinorStroke="green"
    *     yAxisMinorStrokeThickness={1} >
    * </IgrCategoryChart>
    * ```
    */
    yAxisMinorInterval: number;
    /**
     * Gets the current minimum value for the X-axis.
    */
    readonly xAxisActualMinimum: number;
    /**
     * Gets the current maximum value for the X-axis.
    */
    readonly xAxisActualMaximum: number;
    /**
     * Gets the current minimum value for the Y-axis.
    */
    readonly yAxisActualMinimum: number;
    /**
     * Gets the current maximum value for the Y-axis.
    */
    readonly yAxisActualMaximum: number;
    /**
     * Gets or sets the palette used for coloring negative items of Waterfall chart type.
    *
    * `negativeBrushes` controls the brushes used by the chart for negative data, when the `chartType` is one that supports negative brushes.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	negativeBrushes="#ff0000, #cc0000, #aa0000" />
    * ```
    */
    negativeBrushes: string[];
    /**
     * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.
    *
    * `negativeOutlines` controls the outlines used by the chart for negative data, when the `chartType` is one that supports negative brushes.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	negativeOutlines="#0000ff, #0000cc, #0000aa" />
    * ```
    */
    negativeOutlines: string[];
    /**
     * Gets or sets whether the large numbers on the Y-axis labels are abbreviated.
    *
    * To abbreviate on the y-axis using formats like "1K" or "1M," set `yAxisAbbreviateLargeNumbers` to true.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	yAxisAbbreviateLargeNumbers="true" >
    * </IgrCategoryChart>
    * ```
    */
    yAxisAbbreviateLargeNumbers: boolean;
    /**
     * Gets or sets whether the category should be highlighted when hovered
    */
    isCategoryHighlightingEnabled: boolean;
    /**
     * Gets or sets whether the item should be highlighted when hovered
    */
    isItemHighlightingEnabled: boolean;
    /**
 * Export serialized visual data.

*/
    exportSerializedVisualData(): string;
    getCurrentXAxisActualMinimum(): number;
    getCurrentYAxisActualMinimum(): number;
    getCurrentXAxisActualMaximum(): number;
    getCurrentYAxisActualMaximum(): number;
}
export interface IIgrCategoryChartProps extends IIgrXYChartProps {
    width?: string;
    height?: string;
    /**
  * Gets or sets the data for the chart to use. This can be overriden at the series and axis level.
  */
    dataSource?: any[];
    /**
 * Gets or sets the duration used for animating series plots when the chart is loading into view
*
* `transitionInDuration` controls the length of time taken by the transition-in animation.  Try setting it to 2 seconds:
*
* ```ts
* <IgrCategoryChart
* 	dataSource={this.state.data}
* 	transitionInDuration={2000} />
* ```
*/
    transitionInDuration?: number | string;
    /**
     * Gets or sets the easing function used for animating series plots when the chart is loading into view
     * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
    */
    transitionInEasingFunction?: (time: number) => number;
    /**
     * Gets or sets the type of chart series to generate from the data.
    *
    * The `chartType` property determines the type of data series to display.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" />
    * ```
    */
    chartType?: CategoryChartType | string;
    /**
     * Gets or sets the behavior for markers in each series which are placed too close together for the current view, resulting in a collision.
    *
    * `markerCollisionAvoidance` controls the technique the chart uses to avoid overlapping markers.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	 markerCollisionAvoidance="none" />
    * ```
    */
    markerCollisionAvoidance?: CategorySeriesMarkerCollisionAvoidance | string;
    /**
     * Gets or sets whether animation of series plots is enabled when the chart is loading into view
    *
    * Set `isTransitionInEnabled` to true if you want your chart series to animate into position when the chart is loading into view.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	 isTransitionInEnabled ="true" />
    * ```
    */
    isTransitionInEnabled?: boolean | string;
    /**
     * Gets or sets the method that determines how to animate series plots when the chart is loading into view
    *
    * `transitionInMode` controls the direction of the transition-in animation.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	CategoryTransitionInMode="accordionfromRight" />
    * ```
    */
    transitionInMode?: CategoryTransitionInMode | string;
    /**
     * Gets or sets the arrival speed used for animating series plots when the chart is loading into view
    *
    * `transitionInSpeedType` controls the speed of the transition-in animation.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	 transitionInSpeedType="indexScaled" >
    * </IgrCategoryChart>
    * ```
    */
    transitionInSpeedType?: TransitionInSpeedType | string;
    /**
     * Gets or sets the frequency of displayed labels along the X-axis.
     * Gets or sets the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
    *
    * `xAxisInterval` determines how often to show a label, tickmark, and/or gridline along the x-axis.  Set this property to _n_ to display a label every _nth_ item.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	xAxisInterval={3} />
    * ```
    */
    xAxisInterval?: number | string;
    /**
     * Gets or sets the frequency of displayed minor lines along the X-axis.
     * Gets or sets the set value is a factor that determines how the minor lines will be displayed.
    *
    * `xAxisMinorInterval` determines how often to show a minor gridline along the x-axis.  This property is relevant only when the displayed series is a type with grouping, like column series.
    *
    * `xAxisMinorInterval` is expressed as a number between 0 and 1, representing the frequency of the interval.  To display minor gridlines representing 10ths of an item width, set `xAxisMinorInterval` to 0.1.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	xAxisMinorInterval={0.1}
    *     xAxisMinorStroke="green"
    *     xAxisMinorStrokeThickness={1} />
    * ```
    */
    xAxisMinorInterval?: number | string;
    /**
     * Gets or sets the amount of space between adjacent categories for the X-axis.
     * The gap is silently clamped to the range [0, 1] when used.
    *
    * Use the `xAxisGap` property to configure the spacing between items on the x-axis.  This property is relevant only when the displayed series is a type with item spacing, like column series.
    *
    * An `xAxisGap` of 0 allocates no space between items.  An `xAxisGap` of 1 allocates a space between items equal to the width of one item.
    *
    * To set the item spacing to 75% the width of one item, set the `xAxisGap` to 0.75, as in this code:
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	 xAxisGap={0.75} />
    * ```
    */
    xAxisGap?: number | string;
    /**
     * Gets or sets the amount of overlap between adjacent categories for the X-axis.
     * Gets or sets the overlap is silently clamped to the range [-1, 1] when used.
    *
    * Use the `xAxisOverlap` property to configure the spacing between items on the x-axis.  This property is relevant only when the displayed series is a type with item spacing, like column series.
    *
    * An `xAxisOverlap` of 0 places grouped items adjacent to each other.  An `xAxisOverlap` of 1 places grouped items in the same axis space, completely overlapping.  An `xAxisOverlap` of -1 places a space between grouped items equal to the width of one item.
    *
    * To place grouped items with 75% overlap, set the `xAxisOverlap` to 0.75, as in this code:
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	xAxisOverlap={0} />
    * ```
    */
    xAxisOverlap?: number | string;
    /**
     * Gets or sets the distance between each label and grid line along the Y-axis.
    *
    * `yAxisInterval` determines how often to show a label, tickmark, and/or gridline along the y-axis.  Set this property to a number less than the numeric range of the y-axis.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	yAxisInterval={10} />
    * ```
    */
    yAxisInterval?: number | string;
    /**
     * Gets or sets whether the Y-axis should use a logarithmic scale instead of a linear one.
     * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
    *
    * Set `yAxisIsLogarithmic` to true if you want the y-axis to be a logarithmic scale.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	yAxisIsLogarithmic="true" />
    * ```
    */
    yAxisIsLogarithmic?: boolean | string;
    /**
     * Gets or sets the base value to use in the log function when mapping the position of data items along the Y-axis.
     * This property is effective only when YAxisIsLogarithmic is true.
    *
    * When `yAxisIsLogarithmic` is true, `yAxisLogarithmBase` sets the logarithm base of the y-axis scale.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	yAxisIsLogarithmic="true"
    *     yAxisLogarithmBase={2} />
    * ```
    */
    yAxisLogarithmBase?: number | string;
    /**
     * Gets or sets the data value corresponding to the minimum value of the Y-axis.
    *
    * `yAxisMaximumValue` determines the minimum of the y-axis.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	yAxisMinimumValue={42} />
    * ```
    */
    yAxisMinimumValue?: number | string;
    /**
     * Gets or sets the data value corresponding to the maximum value of the Y-axis.
    *
    * `yAxisMaximumValue` determines the maximum of the y-axis.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	yAxisMaximumValue={150} />
    * ```
    */
    yAxisMaximumValue?: number | string;
    /**
     * Gets or sets the frequency of displayed minor lines along the Y-axis.
    *
    * `yAxisMinorInterval` determines how often to show a minor gridline along the y-axis.  Set this property to a number less than the y-axis interval.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	yAxisMinorInterval={2}
    *     yAxisMinorStroke="green"
    *     yAxisMinorStrokeThickness={1} >
    * </IgrCategoryChart>
    * ```
    */
    yAxisMinorInterval?: number | string;
    /**
     * Gets or sets the palette used for coloring negative items of Waterfall chart type.
    *
    * `negativeBrushes` controls the brushes used by the chart for negative data, when the `chartType` is one that supports negative brushes.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	negativeBrushes="#ff0000, #cc0000, #aa0000" />
    * ```
    */
    negativeBrushes?: string[] | string;
    /**
     * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.
    *
    * `negativeOutlines` controls the outlines used by the chart for negative data, when the `chartType` is one that supports negative brushes.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	negativeOutlines="#0000ff, #0000cc, #0000aa" />
    * ```
    */
    negativeOutlines?: string[] | string;
    /**
     * Gets or sets whether the large numbers on the Y-axis labels are abbreviated.
    *
    * To abbreviate on the y-axis using formats like "1K" or "1M," set `yAxisAbbreviateLargeNumbers` to true.
    *
    * ```ts
    * <IgrCategoryChart
    * 	dataSource={this.state.data}
    * 	yAxisAbbreviateLargeNumbers="true" >
    * </IgrCategoryChart>
    * ```
    */
    yAxisAbbreviateLargeNumbers?: boolean | string;
    /**
     * Gets or sets whether the category should be highlighted when hovered
    */
    isCategoryHighlightingEnabled?: boolean | string;
    /**
     * Gets or sets whether the item should be highlighted when hovered
    */
    isItemHighlightingEnabled?: boolean | string;
}
