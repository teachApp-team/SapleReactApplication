/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AxisLabelPanelBase } from "./AxisLabelPanelBase";
import { Boolean_$type, typeCast, markType, Point_$type, typeGetValue, fromEnum, runOn, Number_$type, markDep } from "igniteui-react-core";
import { AxisLabelPanelBaseView } from "./AxisLabelPanelBaseView";
import { Rect } from "igniteui-react-core";
import { Extensions } from "igniteui-react-core";
import { Axis } from "./Axis";
import { List$1 } from "igniteui-react-core";
import { LabelPosition } from "./LabelPosition";
import { XamDataChart } from "./XamDataChart";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { IAngleScaler_$type } from "./IAngleScaler";
import { CategoryAxisRenderer } from "./CategoryAxisRenderer";
import { DependencyProperty } from "igniteui-react-core";
import { PolarAxisRenderingManager } from "./PolarAxisRenderingManager";
import { AxisLabelManager } from "./AxisLabelManager";
import { ViewportUtils } from "./ViewportUtils";
import { RadialAxisRenderingParameters } from "./RadialAxisRenderingParameters";
import { CategoryTickmarkValues } from "./CategoryTickmarkValues";
import { MathUtil } from "igniteui-react-core";
import { SeriesViewer } from "./SeriesViewer";
import { ScalerParams } from "./ScalerParams";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { LineGeometry } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { RangeInfo } from "./RangeInfo";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { NumericAxisBase } from "./NumericAxisBase";
import { LogarithmicTickmarkValues } from "./LogarithmicTickmarkValues";
import { PolarAxisRenderingParameters } from "./PolarAxisRenderingParameters";
import { RadialAxisLabelPanel } from "./RadialAxisLabelPanel";
import { LinearTickmarkValues } from "./LinearTickmarkValues";
import { IPolarRadialRenderingParameters_$type } from "./IPolarRadialRenderingParameters";
import { PathGeometry } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { ArcSegment } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
import { NumericAxisBaseView } from "./NumericAxisBaseView";
/**
 * @hidden
 */
export let AngleAxisLabelPanel = /*@__PURE__*/ (() => {
    class AngleAxisLabelPanel extends AxisLabelPanelBase {
        constructor() {
            super();
            this.ct = false;
            this.cz = null;
            this.cx = 0;
            this.cu = 0;
            this.cw = 0;
            this.cv = 0;
        }
        ad() {
            return new AngleAxisLabelPanelView(this);
        }
        b8(a) {
            super.b8(a);
            this.cs = a;
        }
        ao(a, b) {
            if (!Extensions.b(b)) {
                return false;
            }
            if (this.ac == null || this.ac.i8.isEmpty) {
                return super.ao(a, b);
            }
            return true;
        }
        ay() {
            let a = new List$1(Rect.$, 0);
            let b = new List$1(Boolean_$type, 0);
            if (this.a3.count != this.a2.count) {
                return a;
            }
            this.cs.ay(a, b);
            let c = false;
            this.am = this.al(a, b);
            if (!this.ac.b1()) {
                c = true;
                this.a9 = this.cx / 2;
                this.a9 = this.a9 + this.cy();
            }
            else {
                c = true;
                this.cs.ac();
            }
            if (c) {
                for (let d = 0; d < a.count; d++) {
                    let e = this.a3._inner[d];
                    let f = this.a2._inner[d];
                    let g = a._inner[d];
                    let h = this.cz(f.c);
                    let i = h.x - this.bc(e) / 2;
                    let j = h.y - this.bb(e) / 2;
                    g.x = i;
                    g.y = j;
                    a._inner[d] = g;
                }
            }
            return a;
        }
        cy() {
            let a;
            let b;
            b = this.ac;
            a = null;
            if (b != null) {
                a = typeCast(XamDataChart.$, b.bh);
            }
            if (a == null || b == null) {
                return 0;
            }
            let c = new List$1(Axis.$, 0);
            for (let d = 0; d < a.axes.count; d++) {
                let e = a.axes._inner[d];
                if ((typeCast(NumericAngleAxis.$, e) !== null || typeCast(CategoryAngleAxis.$, e) !== null) && typeCast(AngleAxisLabelPanel.$, e.au) !== null && e.au.a3.count > 0 && (!e.b1()) && !e.b0() && (e.ah == null || this.ac.ah == null || e.ah.lq == b.ah.lq)) {
                    c.add(e);
                }
            }
            let f = c.indexOf(b);
            if (f == -1) {
                return 0;
            }
            let g = 0;
            let h = 5;
            if (f == 0) {
                g += h;
            }
            else {
                g += c._inner[f - 1].au.a9;
                g += c._inner[f].au.a9 * 2 + h;
            }
            return g;
        }
        ah() {
            return 4;
        }
        as(a) {
            return a == 4 || a == 5;
        }
    }
    AngleAxisLabelPanel.$t = /*@__PURE__*/ markType(AngleAxisLabelPanel, 'AngleAxisLabelPanel', AxisLabelPanelBase.$);
    return AngleAxisLabelPanel;
})();
/**
 * @hidden
 */
export let CategoryAngleAxis = /*@__PURE__*/ (() => {
    class CategoryAngleAxis extends CategoryAxisBase {
        constructor() {
            super();
            this.k9 = null;
            this.k6 = null;
            this.la = false;
            this.le = NaN;
            this.k7 = null;
            this.lf = 0;
            this.lc = 0;
            this.ld = 0;
            this.lq = 1;
            this.ab = CategoryAngleAxis.$;
            this.k6 = this.k5();
            this.k9 = new PolarAxisRenderingManager();
        }
        a2() {
            return new CategoryAngleAxisView(this);
        }
        gx(a) {
            super.gx(a);
            this.k4 = a;
        }
        get_b2() {
            return true;
        }
        at() {
            let a = new AngleAxisLabelPanel();
            a.cz = (b) => {
                let c = this.bh != null ? this.bh.mr : Rect.empty;
                let d = !c.isEmpty ? this.i8 : Rect.empty;
                return this.l3(b, { $type: Point_$type, x: 0.5, y: 0.5 }, c, d, this.au.a9);
            };
            return a;
        }
        lo(a) {
            return Math.round(a * Math.pow(10, 10)) / Math.pow(10, 10);
        }
        k5() {
            let a = ((() => {
                let $ret = new AxisLabelManager();
                $ret.a = this;
                $ret.f = this.cy;
                $ret.e = this.cx;
                $ret.b = this.au;
                return $ret;
            })());
            if (this.ax != null) {
                this.ax.registerAxis(this);
            }
            let b = new CategoryAxisRenderer(a);
            b.u = () => {
                let c = this.a3.ay();
                let d = this.a3.a1();
                let e = this.a3.az();
                let f = this.a3.a0();
                this.hj();
                this.gn(c);
                this.gn(d);
                this.gn(e);
                this.gn(f);
            };
            b.o = (c, d) => !d.isEmpty && !c.isEmpty && this.k8 != null;
            b.d = (c, d, e, f) => this.k3(c, d, e, f);
            b.v = () => {
                if (!this.la) {
                    this.la = true;
                    this.k8.cn();
                    this.la = false;
                }
            };
            b.g = (c) => {
                let d = typeGetValue(c);
                if (d > this.jm.count - 1) {
                    d -= this.jm.count;
                }
                let e = this.jm.item(d);
                return this.e8(e);
            };
            b.b.c = (c) => {
                if ((this.ax == null || this.ax.visibility == 0) && this.k8 != null && this.le != c) {
                    let d = typeCast(XamDataChart.$, this.bh);
                    if (d == null) {
                        return;
                    }
                    this.le = c;
                    this.au.a8 = c;
                    d.hu();
                    for (let e of fromEnum(d.axes)) {
                        if (e != this && typeCast(AngleAxisLabelPanel.$, e.au) !== null) {
                            e.a3.ad();
                        }
                    }
                }
            };
            b.k = (c, d, e) => {
                let f = typeCast(RadialAxisRenderingParameters.$, c);
                this.k9.m(d, e, c.z, c.aa, f.minLength, f.maxLength, f.center);
            };
            b.l = (c, d, e, f) => {
                let g = typeCast(RadialAxisRenderingParameters.$, c);
                this.k9.n(d, e, f, g.z, c.aa, g.minLength, g.maxLength, g.center);
            };
            b.m = (c, d) => this.getScaledAngle(d);
            b.q = (c, d) => {
                if (this.lo(d - this.lf) < 0) {
                    return false;
                }
                if (this.lo(d - this.lf - (2 * Math.PI)) > 0) {
                    return false;
                }
                return true;
            };
            b.j = (c) => {
                let d = typeCast(RadialAxisRenderingParameters.$, c);
                if (d.e == d.k._inner[0]) {
                    this.k9.i(c.t, c.n, c.z, c.aa, d.center, d.minAngle, d.maxAngle);
                }
            };
            b.e = (c) => {
                c.n = this.li();
                c.r = c.n;
            };
            b.p = (c, d, e) => {
                let f = typeCast(RadialAxisRenderingParameters.$, c);
                if (e) {
                    return false;
                }
                let g = this.l3(d, f.center, c.aa, c.z, 0);
                if (g.x < c.z.right && g.x >= c.z.left && g.y < c.z.bottom && g.y >= c.z.top) {
                    return true;
                }
                return false;
            };
            b.a = (c, d, e, f) => {
                let g = c.y;
                let h = new ScalerParams(0, c.aa, c.z, this.ca, g);
                let i = d;
                if (this.categoryMode != 0) {
                    let j = (e * f) + 1;
                    j = Math.min(j, this.j5);
                    let k = this.dy(j, h);
                    i = (d + k) / 2;
                }
                return i;
            };
            b.f = runOn(this, this.getGroupCenter);
            b.i = runOn(this, this.ll);
            return b;
        }
        l3(a, b, c, d, e) {
            let f = this.li();
            let g = ViewportUtils.b(e, c, d);
            if (this.ax != null && (this.ax.c == 5 || this.ax.c == 1)) {
                g *= -1;
            }
            let h = b.x + (f + g) * Math.cos(a);
            let i = b.y + (f + g) * Math.sin(a);
            h = ViewportUtils.c(h, c, d);
            i = ViewportUtils.f(i, c, d);
            return { $type: Point_$type, x: h, y: i };
        }
        li() {
            if (this.k8 == null) {
                return 0;
            }
            if (!this.b0()) {
                return this.k8.lv();
            }
            else {
                return this.k8.lw((this.e4));
            }
        }
        k3(a, b, c, d) {
            if (this.jm == null) {
                return null;
            }
            let e = new RadialAxisRenderingParameters();
            let f = this.jm.count - 1;
            let g = this.a3.ay();
            let h = this.a3.a1();
            let i = this.a3.az();
            let j = this.a3.a0();
            e.t = g;
            e.w = h;
            e.u = i;
            e.v = j;
            e.l = f;
            e.m = 0;
            e.h = false;
            e.z = a;
            e.y = c;
            e.x = d;
            e.aa = b;
            e.g = this.lb();
            e.p = this.lm;
            e.o = this.eb();
            e.q = this.ln;
            e.s = this.e9;
            let k = this.k9.f(b);
            let l = this.k9.g(b);
            let m = 0.5 * this.k8.lq;
            let n = 0.5 * this.k8.lp;
            let o = k;
            let p = l;
            let q = this.k8.lv();
            if (isNaN_(q) || isInfinity(q)) {
                return null;
            }
            if (p >= m) {
                p = q;
            }
            if (o < n) {
                o = n;
            }
            let r = a.width;
            this.k9.k(b, e, 0, this.jm.count, this.ca, runOn(this, this.getUnscaledAngle), r);
            let s = { $type: Point_$type, x: 0.5, y: 0.5 };
            e.center = s;
            e.maxLength = p;
            e.minLength = o;
            e.effectiveMaximum = q;
            e.ae = this.jm.count;
            e.ab = this.categoryMode;
            e.ad = true;
            e.ac = this.ca;
            e.af = this.j8;
            e.f = new CategoryTickmarkValues();
            e.j = this.cl;
            return e;
        }
        getMinMaxAngle(a, b, c) {
            let d = this.k9.l(a, b, c);
            b = d.p1;
            c = d.p2;
            return {
                p1: b,
                p2: c
            };
        }
        ac() {
            super.ac();
            this.hb(false);
        }
        get k8() {
            if (this.k7 != null) {
                return this.k7;
            }
            let a = typeCast(XamDataChart.$, this.bh);
            if (a != null) {
                for (let b = 0; b < a.axes.count; b++) {
                    if (typeCast(NumericRadiusAxis.$, a.axes._inner[b]) !== null) {
                        return a.axes._inner[b];
                    }
                }
            }
            return this.k7;
        }
        set k8(a) {
            this.k7 = a;
        }
        ai() {
            return this.k8;
        }
        getCategorySize(a, b, c) {
            return 2 * Math.PI / this.j5;
        }
        jy(a, b, c) {
            let d = !isNaN_(this.jv) ? MathUtil.b(this.jv, 0, 1) : 0;
            let e = 0;
            if (!isNaN_(this.j2)) {
                e = Math.min(this.j2, 1);
            }
            let f = 1 - 0.5 * d;
            return this.getCategorySize(a, b, c) * f / (this.j8 - (this.j8 - 1) * e);
        }
        getGroupCenter(a, b, c, d) {
            let e = 0.5;
            if (this.j8 > 1) {
                let f = !isNaN_(this.jv) ? MathUtil.b(this.jv, 0, 1) : 0;
                let g = 0;
                if (!isNaN_(this.j2)) {
                    g = Math.min(this.j2, 1);
                }
                let h = 1 - 0.5 * f;
                let i = h / (this.j8 - (this.j8 - 1) * g);
                let j = (h - i) / (this.j8 - 1);
                e = 0.25 * f + 0.5 * i + a * j;
            }
            return this.getCategorySize(b, c, d) * e;
        }
        ll(a) {
            let b = 0.5;
            if (this.j8 > 1) {
                let c = !isNaN_(this.jv) ? MathUtil.b(this.jv, 0, 1) : 0;
                let d = 0;
                if (!isNaN_(this.j2)) {
                    d = Math.min(this.j2, 1);
                }
                let e = 1 - 0.5 * c;
                let f = e / (this.j8 - (this.j8 - 1) * d);
                let g = (e - f) / (this.j8 - 1);
                b = 0.25 * c + 0.5 * f + a * g;
            }
            return b;
        }
        hc(a) {
            super.hc(a);
            let b = this.bh != null ? this.bh.mr : Rect.empty;
            let c = !b.isEmpty ? this.i8 : Rect.empty;
            let d = this.i3();
            let e = this.i2();
            let f = this.k6.c(a, c, b, d, e);
            if (f != null) {
                this.lg = f.f.m;
                this.lh = f.f.l;
            }
        }
        lk(a, b) {
            let c;
            let d;
            let e = this.k9.l(b, c, d);
            c = e.p1;
            d = e.p2;
            if (c == 0) {
                if (this.ca) {
                    return this.j5;
                }
                else {
                    return 0;
                }
            }
            let f = this.getUnscaledAngle(c);
            if (f < 0 || f > this.j5) {
                f = this.getUnscaledAngle(c + Math.PI * 2);
            }
            return f;
        }
        lj(a, b) {
            let c;
            let d;
            let e = this.k9.l(b, c, d);
            c = e.p1;
            d = e.p2;
            if (d > Math.PI * 2) {
                d = d - Math.PI * 2;
            }
            if (d == Math.PI * 2) {
                if (this.ca) {
                    return 0;
                }
                else {
                    return this.j5;
                }
            }
            let f = this.getUnscaledAngle(d);
            if (f < 0 || f > this.j5) {
                f = this.getUnscaledAngle(d + Math.PI * 2);
            }
            return f;
        }
        getScaledAngle(a) {
            let b = this.j5;
            let c = b >= 2 ? (a) / (b) : b == 1 ? 0.5 : NaN;
            if (this.cb) {
                c = 1 - c;
            }
            return (c * 2 * Math.PI) + this.lf;
        }
        getUnscaledAngle(a) {
            if (a < this.lf) {
                a += 2 * Math.PI;
            }
            let b = (a - this.lf) / (2 * Math.PI);
            if (this.ca) {
                b = 1 - b;
            }
            return b * (this.j5);
        }
        dy(a, b) {
            return this.getScaledAngle(a);
        }
        d1(a, b) {
            return this.getUnscaledAngle(a);
        }
        gz(a, b, c, d) {
            super.gz(a, b, c, d);
            let e = typeCast(XamDataChart.$, this.bh);
            switch (b) {
                case "CrossingAxis":
                    let f = typeCast(NumericRadiusAxis.$, d);
                    this.lz(f);
                    if (f != null) {
                        f.l5(this);
                    }
                    this.ci = true;
                    this.hb(false);
                    break;
                case CategoryAngleAxis.$$p[0]:
                    this.lf = this.lp;
                    while (this.lf < 0) {
                        this.lf += 360;
                    }
                    while (this.lf >= 360) {
                        this.lf -= 360;
                    }
                    this.lf = (this.lf * Math.PI) / 180;
                    this.ci = true;
                    this.hb(false);
                    for (let g of fromEnum(this.cz)) {
                        g.je(false);
                        g.il();
                    }
                    break;
                case "Label":
                    if (e != null) {
                        for (let h of fromEnum(e.axes)) {
                            h.ci = true;
                            h.ha();
                        }
                    }
                    break;
                case "CrossingValue":
                    if (e != null) {
                        for (let i of fromEnum(e.axes)) {
                            if (typeCast(NumericAngleAxis.$, i) !== null || typeCast(CategoryAngleAxis.$, i) !== null) {
                                i.ci = true;
                                i.ha();
                            }
                        }
                    }
                    break;
                case "LabelSettings":
                    this.k6 = this.k5();
                    this.lx();
                    this.ci = true;
                    this.hb(false);
                    break;
            }
        }
        lx() {
            this.le = NaN;
        }
        lz(a) {
            this.k8 = a;
        }
        get lm() {
            return this.c(CategoryAngleAxis.l0);
        }
        set lm(a) {
            this.h(CategoryAngleAxis.l0, a);
        }
        get lg() {
            return this.lc;
        }
        set lg(a) {
            if (this.lg != a) {
                let b = this.lc;
                this.lc = a;
                this.g5("ActualInterval", b, this.lg);
            }
        }
        d9() {
            return this.lg;
        }
        get ln() {
            return this.c(CategoryAngleAxis.l1);
        }
        set ln(a) {
            this.h(CategoryAngleAxis.l1, a);
        }
        get lh() {
            return this.ld;
        }
        set lh(a) {
            if (this.lh != a) {
                let b = this.ld;
                this.ld = a;
                this.g5("ActualMinorInterval", b, this.lh);
            }
        }
        lb() {
            return false;
        }
        get_a0() {
            return 2;
        }
        get a0() {
            return this.get_a0();
        }
        cp() {
            if (this.ci && this.cq) {
                this.ba = this.a9();
            }
            if (this.jm == null) {
                return false;
            }
            let a = this.jm.count;
            if (a != this.lr) {
                let b = new AxisRangeChangedEventArgs(0, 1, 1, this.lr, a);
                this.lr = a;
                this.g6(b);
                return true;
            }
            return false;
        }
        get lr() {
            return this.lq;
        }
        set lr(a) {
            this.lq = a;
        }
        i0(a, b, c, d = null, e = null) {
            let f = typeCast(RadialAxisRenderingParameters.$, this.k6.d(c, b, d, e));
            if (f == null) {
                return null;
            }
            let g = Math.cos(a);
            let h = Math.sin(a);
            let i = f.center.x + g * f.minLength;
            let j = f.center.y + h * f.minLength;
            let k = f.center.x + g * f.maxLength;
            let l = f.center.y + h * f.maxLength;
            i = ViewportUtils.c(i, b, c);
            j = ViewportUtils.f(j, b, c);
            k = ViewportUtils.c(k, b, c);
            l = ViewportUtils.f(l, b, c);
            let m = new LineGeometry();
            m.d = { $type: Point_$type, x: i, y: j };
            m.c = { $type: Point_$type, x: k, y: l };
            return m;
        }
        get isVertical() {
            return this.ch;
        }
        j$c(a, b) {
            return this.d1.apply(this, arguments);
        }
        j$b(a, b) {
            return this.dy.apply(this, arguments);
        }
        j$d(a, b, c, d, e) {
            this.gr.apply(this, arguments);
        }
        j$e(a, b, c, d) {
            this.gs.apply(this, arguments);
        }
        j$f(a, b, c, d) {
            this.gt.apply(this, arguments);
        }
        get j$a() {
            return this.ca;
        }
    }
    CategoryAngleAxis.$t = /*@__PURE__*/ markType(CategoryAngleAxis, 'CategoryAngleAxis', CategoryAxisBase.$, [IAngleScaler_$type]);
    CategoryAngleAxis.l0 = /*@__PURE__*/ DependencyProperty.i("Interval", Number_$type, CategoryAngleAxis.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        a.g5("Interval", b.oldValue, b.newValue);
        a.hb(false);
    }));
    CategoryAngleAxis.l1 = /*@__PURE__*/ DependencyProperty.i("MinorInterval", Number_$type, CategoryAngleAxis.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        (typeCast(CategoryAngleAxis.$, a)).g5("MinorInterval", b.oldValue, b.newValue);
        (typeCast(CategoryAngleAxis.$, a)).hb(false);
    }));
    CategoryAngleAxis.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CategoryAngleAxis, 'g5', ['StartAngleOffset:lp:l2', [1, 0]]);
    return CategoryAngleAxis;
})();
/**
 * @hidden
 */
export let NumericAngleAxis = /*@__PURE__*/ (() => {
    class NumericAngleAxis extends NumericAxisBase {
        constructor() {
            super();
            this.lm = null;
            this.ln = false;
            this.lo = NaN;
            this.lp = 0;
            this.lk = null;
            this.ab = NumericAngleAxis.$;
            this.lm = new PolarAxisRenderingManager();
            this.jm = this.jk();
        }
        a2() {
            return new NumericAngleAxisView(this);
        }
        gx(a) {
            super.gx(a);
            this.lj = a;
        }
        get_b2() {
            return true;
        }
        at() {
            let a = new AngleAxisLabelPanel();
            a.cz = (b) => {
                let c = this.bh != null ? this.bh.mr : Rect.empty;
                let d = !c.isEmpty ? this.i8 : Rect.empty;
                return this.lz(b, { $type: Point_$type, x: 0.5, y: 0.5 }, c, d, this.au.a9);
            };
            return a;
        }
        lq() {
            if (this.ll == null) {
                return 0;
            }
            if (!this.b0()) {
                return this.ll.lv();
            }
            else {
                return this.ll.lw((this.e4));
            }
        }
        ls(a) {
            return Math.round(a * Math.pow(10, 10)) / Math.pow(10, 10);
        }
        jk() {
            let a = super.jk();
            a.b.c = (b) => {
                if ((this.ax == null || this.ax.visibility == 0) && this.ll != null && this.lo != b) {
                    let c = typeCast(XamDataChart.$, this.bh);
                    if (c == null) {
                        return;
                    }
                    this.lo = b;
                    this.au.a8 = b;
                    c.hu();
                    for (let d of fromEnum(c.axes)) {
                        if (d != this && typeCast(AngleAxisLabelPanel.$, d.au) !== null) {
                            d.a3.ad();
                        }
                    }
                }
            };
            a.e = (b) => {
                b.n = this.lq();
                b.r = b.n;
            };
            a.j = (b) => {
                let c = typeCast(PolarAxisRenderingParameters.$, b);
                if (c.e == c.k._inner[0]) {
                    this.lm.i(b.t, b.n, b.z, b.aa, c.center, c.minAngle, c.maxAngle);
                }
            };
            a.k = (b, c, d) => {
                let e = typeCast(PolarAxisRenderingParameters.$, b);
                this.lm.m(c, d, b.z, b.aa, e.minLength, e.maxLength, e.center);
            };
            a.l = (b, c, d, e) => {
                let f = typeCast(PolarAxisRenderingParameters.$, b);
                this.lm.n(c, d, e, f.z, b.aa, f.minLength, f.maxLength, f.center);
            };
            a.d = (b, c, d, e) => {
                let f = typeCast(PolarAxisRenderingParameters.$, this.jn(b, c, d, e));
                return f;
            };
            a.v = () => {
                if (!this.ln) {
                    this.ln = true;
                    this.ll.cn();
                    this.ln = false;
                }
            };
            a.m = (b, c) => this.getScaledAngle(c);
            a.o = (b, c) => !c.isEmpty && !b.isEmpty && this.ll != null;
            a.q = (b, c) => {
                if (this.ls(c - this.lp) < 0) {
                    return false;
                }
                if (this.ls(c - this.lp - (2 * Math.PI)) > 0) {
                    return false;
                }
                return true;
            };
            a.p = (b, c, d) => {
                let e = typeCast(PolarAxisRenderingParameters.$, b);
                let f = this.lz(this.getScaledAngle(e.l), e.center, b.aa, b.z, 0);
                let g = this.lz(c, e.center, b.aa, b.z, 0);
                if (d && MathUtil.e(f.x - g.x, f.y - g.y) < 2) {
                    return false;
                }
                if (g.x < b.z.right && g.x >= b.z.left && g.y < b.z.bottom && g.y >= b.z.top) {
                    return true;
                }
                return false;
            };
            a.r = (b, c, d, e) => {
                if (c < b.m && typeCast(LogarithmicTickmarkValues.$, b.f) !== null) {
                    return b.m;
                }
                else if (c > b.l && (typeCast(LogarithmicTickmarkValues.$, b.f) !== null || b.h)) {
                    return b.l;
                }
                return c;
            };
            return a;
        }
        lz(a, b, c, d, e) {
            let f = this.lq();
            let g = ViewportUtils.b(e, c, d);
            if (this.ax != null && (this.ax.c == 5 || this.ax.c == 1)) {
                g *= -1;
            }
            let h = b.x + (f + g) * Math.cos(a);
            let i = b.y + (f + g) * Math.sin(a);
            h = ViewportUtils.c(h, c, d);
            i = ViewportUtils.f(i, c, d);
            return { $type: Point_$type, x: h, y: i };
        }
        dy(a, b) {
            return this.getScaledAngle(a);
        }
        getScaledAngle1(a, b, c) {
            let d = 0;
            if (b) {
                d = (Math.log(a) - this.kh) / (this.kg - this.kh);
            }
            else {
                d = (a - this.kb) / (this.ka - this.kb);
            }
            if (c) {
                d = 1 - d;
            }
            return (d * 2 * Math.PI) + this.lp;
        }
        getScaledAngle(a) {
            return this.getScaledAngle1(a, this.j1, this.cb);
        }
        d1(a, b) {
            return this.getUnscaledAngle(a);
        }
        getUnscaledAngle(a) {
            let b = (a - this.lp) / (2 * Math.PI);
            if (this.ca) {
                b = 1 - b;
            }
            if (this.j1) {
                return Math.exp(b * (this.kg - this.kh) + this.kh);
            }
            else {
                return this.kb + b * (this.ka - this.kb);
            }
        }
        gz(a, b, c, d) {
            super.gz(a, b, c, d);
            let e = typeCast(XamDataChart.$, this.bh);
            switch (b) {
                case "CrossingAxis":
                    let f = typeCast(NumericRadiusAxis.$, d);
                    this.lx(f);
                    if (f != null) {
                        f.l5(this);
                    }
                    this.hb(false);
                    break;
                case NumericAngleAxis.$$p[0]:
                    this.lp = this.lt;
                    while (this.lp < 0) {
                        this.lp += 360;
                    }
                    while (this.lp >= 360) {
                        this.lp -= 360;
                    }
                    this.lp = (this.lt * Math.PI) / 180;
                    this.hb(false);
                    for (let g of fromEnum(this.cw())) {
                        g.je(false);
                        g.il();
                    }
                    break;
                case "Label":
                    if (e != null) {
                        for (let h of fromEnum(e.axes)) {
                            h.ha();
                        }
                    }
                    break;
                case "CrossingValue":
                    if (e != null) {
                        for (let i of fromEnum(e.axes)) {
                            if (typeCast(NumericAngleAxis.$, i) !== null || typeCast(CategoryAngleAxis.$, i) !== null) {
                                i.ha();
                            }
                        }
                    }
                    break;
                case "LabelSettings":
                    this.jm = this.jk();
                    this.lv();
                    this.ci = true;
                    this.hb(false);
                    break;
            }
        }
        lv() {
            this.lo = NaN;
        }
        jo() {
            return new PolarAxisRenderingParameters();
        }
        jn(a, b, c, d) {
            let e = typeCast(PolarAxisRenderingParameters.$, super.jn(a, b, c, d));
            let f = this.lm.f(b);
            let g = this.lm.g(b);
            let h = 0.5 * this.ll.lq;
            let i = 0.5 * this.ll.lp;
            let j = f;
            let k = g;
            let l = this.ll.lv();
            if (isNaN_(l) || isInfinity(l)) {
                return null;
            }
            if (k >= h) {
                k = l;
            }
            if (j < i) {
                j = i;
            }
            let m = a.width;
            this.lm.k(b, e, this.kb, this.ka, this.ca, runOn(this, this.getUnscaledAngle), m);
            let n = { $type: Point_$type, x: 0.5, y: 0.5 };
            e.center = n;
            e.maxLength = k;
            e.minLength = j;
            e.effectiveMaximum = l;
            return e;
        }
        getMinMaxAngle(a, b, c) {
            let d = this.lm.l(a, b, c);
            b = d.p1;
            c = d.p2;
            return {
                p1: b,
                p2: c
            };
        }
        hc(a) {
            super.hc(a);
            let b = this.bh != null ? this.bh.mr : Rect.empty;
            let c = !b.isEmpty ? this.i8 : Rect.empty;
            let d = this.i3();
            let e = this.i2();
            let f = this.jm.c(a, c, b, d, e);
            if (f != null) {
                this.j9 = f.f.m;
                this.kc = f.f.l;
            }
        }
        get ll() {
            if (this.lk != null) {
                return this.lk;
            }
            let a = typeCast(XamDataChart.$, this.bh);
            if (a != null) {
                for (let b = 0; b < a.axes.count; b++) {
                    if (a.axes._inner[b].ce) {
                        return a.axes._inner[b];
                    }
                }
            }
            return this.lk;
        }
        set ll(a) {
            this.lk = a;
        }
        ai() {
            return this.ll;
        }
        lx(a) {
            this.ll = a;
        }
        hm(a, b) {
            super.hm(a, b);
            if (b.height != a.height || b.width != a.width) {
                this.cn();
            }
        }
        get_a0() {
            return 2;
        }
        get a0() {
            return this.get_a0();
        }
        i0(a, b, c, d = null, e = null) {
            if (this.ll == null) {
                return null;
            }
            let f = typeCast(PolarAxisRenderingParameters.$, this.jn(c, b, d, e));
            if (f == null) {
                return null;
            }
            let g = Math.cos(a);
            let h = Math.sin(a);
            let i = f.center.x + g * f.minLength;
            let j = f.center.y + h * f.minLength;
            let k = f.center.x + g * f.maxLength;
            let l = f.center.y + h * f.maxLength;
            i = ViewportUtils.c(i, b, c);
            j = ViewportUtils.f(j, b, c);
            k = ViewportUtils.c(k, b, c);
            l = ViewportUtils.f(l, b, c);
            let m = new LineGeometry();
            m.d = { $type: Point_$type, x: i, y: j };
            m.c = { $type: Point_$type, x: k, y: l };
            return m;
        }
    }
    NumericAngleAxis.$t = /*@__PURE__*/ markType(NumericAngleAxis, 'NumericAngleAxis', NumericAxisBase.$, [IAngleScaler_$type]);
    NumericAngleAxis.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, NumericAngleAxis, 'g5', ['StartAngleOffset:lt:ly', [1, 0]]);
    return NumericAngleAxis;
})();
/**
 * @hidden
 */
export let NumericRadiusAxis = /*@__PURE__*/ (() => {
    class NumericRadiusAxis extends NumericAxisBase {
        constructor() {
            super();
            this.lm = null;
            this.ln = false;
            this.lo = NaN;
            this.lq = 0;
            this.lp = 0;
            this.ls = 0;
            this.lj = null;
            this.ab = NumericRadiusAxis.$;
            this.lq = this.l0;
            this.lp = this.lz;
            this.lm = new PolarAxisRenderingManager();
            this.jm = this.jk();
        }
        a2() {
            return new NumericRadiusAxisView(this);
        }
        gx(a) {
            super.gx(a);
            this.ll = a;
        }
        get_ce() {
            return true;
        }
        dx() {
            let a = this.lq;
            let b = this.lp;
            let c = Math.min(this.lu(), this.lt()) * (a - b) / 2;
            c = Math.max(c, 14);
            return c;
        }
        lu() {
            return this.i8.width;
        }
        lt() {
            return this.i8.height;
        }
        at() {
            return new RadialAxisLabelPanel();
        }
        lr(a) {
            if (a == null) {
                return 0;
            }
            return a;
        }
        jk() {
            let a = super.jk();
            a.b.c = (b) => {
                if ((this.ax == null || this.ax.visibility == 0) && this.lk != null) {
                    if ((this.ax == null || (this.ax.c == 4 || this.ax.c == 5)) && this.lo != b) {
                        this.lo = b;
                        this.au.a8 = b;
                        this.bh.hu();
                    }
                }
            };
            a.k = (b, c, d) => {
                let e = typeCast(PolarAxisRenderingParameters.$, b);
                this.lm.i(c, d, e.z, e.aa, e.center, e.minAngle, e.maxAngle);
            };
            a.l = (b, c, d, e) => {
                if (d == e) {
                    return;
                }
                let f = typeCast(PolarAxisRenderingParameters.$, b);
                this.lm.j(c, d, e, f.z, f.aa, f.center, f.minAngle, f.maxAngle);
            };
            a.m = (b, c) => this.lw(c);
            a.q = (b, c) => {
                let d = typeCast(PolarAxisRenderingParameters.$, b);
                return c <= d.effectiveMaximum;
            };
            a.n = (b, c) => {
                let d = typeCast(PolarAxisRenderingParameters.$, b);
                return c <= d.effectiveMaximum;
            };
            a.j = (b) => {
                let c = typeCast(PolarAxisRenderingParameters.$, b);
                this.lm.m(b.t, c.crossingAngleRadians, b.z, b.aa, c.minLength, c.maxLength, c.center);
            };
            a.e = (b) => {
                b.n = this.ax == null || (this.ax.c == 4 || this.ax.c == 0) ? b.z.top : b.z.bottom;
                b.r = b.n;
                let c = typeCast(PolarAxisRenderingParameters.$, b);
                c.crossingAngleRadians = (this.lr(this.e4) * Math.PI) / 180;
                if (this.ax == null || (this.ax.c == 4 || this.ax.c == 5)) {
                    c.n = ViewportUtils.f(0.5, c.aa, c.z) - b.z.top;
                    c.r = c.n;
                    let d = typeCast(RadialAxisLabelPanel.$, this.au);
                    if (d != null) {
                        let e = 0;
                        if (this.ax != null && this.ax.c == 4) {
                            e = 1;
                        }
                        d.dh = { $type: Point_$type, x: ViewportUtils.c(0.5, c.aa, c.z), y: e };
                        d.de = c.crossingAngleRadians;
                    }
                }
            };
            a.p = (b, c, d) => {
                let e = typeCast(PolarAxisRenderingParameters.$, b);
                if (this.lk == null) {
                    return false;
                }
                if (c > e.effectiveMaximum) {
                    return false;
                }
                let f = false;
                f = this.ax == null || (this.ax.c == 4 || this.ax.c == 5);
                let g = 0;
                if (f) {
                    g = this.ls;
                }
                let h = e.center.x + c * Math.cos(g);
                let i = e.center.y + c * Math.sin(g);
                h = ViewportUtils.c(h, e.aa, e.z);
                i = ViewportUtils.f(i, e.aa, e.z);
                if (h <= b.z.right && h >= b.z.left && ((i <= b.z.bottom && i >= b.z.top) || !f)) {
                    return true;
                }
                return false;
            };
            a.h = (b, c) => {
                let d = typeCast(PolarAxisRenderingParameters.$, b);
                return new LabelPosition(ViewportUtils.c(d.center.x + c, d.aa, d.z));
            };
            a.r = (b, c, d, e) => {
                if (c < b.m) {
                    return b.m;
                }
                else if (c > b.l) {
                    return b.l;
                }
                return c;
            };
            return a;
        }
        dy(a, b) {
            return this.lw(a);
        }
        lx(a, b, c, d, e) {
            let f = 0;
            if (b) {
                if (a <= 0) {
                    f = (Math.log(this.kb) - this.kh) / (this.kg - this.kh);
                }
                else {
                    f = (Math.log(a) - this.kh) / (this.kg - this.kh);
                }
            }
            else {
                f = (a - this.kb) / (this.ka - this.kb);
            }
            if (c) {
                f = 1 - f;
            }
            f = e + (f * (d - e));
            f /= 2;
            return f;
        }
        lw(a) {
            return this.lx(a, this.j1, this.cb, this.lq, this.lp);
        }
        ly(a) {
            let b = a * 2;
            b = (b - this.lp) / (this.lq - this.lp);
            if (this.ca) {
                b = 1 - b;
            }
            if (this.j1) {
                return Math.exp(b * (this.kg - this.kh) + this.kh);
            }
            else {
                return this.kb + b * (this.ka - this.kb);
            }
        }
        d1(a, b) {
            return this.ly(a);
        }
        gz(a, b, c, d) {
            switch (b) {
                case "CrossingValue":
                    this.ls = this.lr(this.e4) * Math.PI / 180;
                    break;
            }
            super.gz(a, b, c, d);
            switch (b) {
                case NumericRadiusAxis.$$p[1]:
                    this.lq = this.l0;
                    if (this.lq < 0) {
                        this.lq = 0.1;
                    }
                    if (this.lq > 1) {
                        this.lq = 1;
                    }
                    if (this.lp >= this.lq) {
                        this.lp = this.lq - 0.01;
                        if (this.lp < 0) {
                            this.lp = 0;
                            this.lq = 0.01;
                        }
                    }
                    this.ci = true;
                    this.hb(false);
                    if (this.lk != null) {
                        this.lk.ha();
                    }
                    for (let e of fromEnum(this.cw())) {
                        e.je(false);
                    }
                    break;
                case NumericRadiusAxis.$$p[0]:
                    this.lp = this.lz;
                    if (this.lp < 0) {
                        this.lp = 0.1;
                    }
                    if (this.lp > 1) {
                        this.lp = 1;
                    }
                    if (this.lp >= this.lq) {
                        this.lp = this.lq - 0.01;
                        if (this.lp < 0) {
                            this.lp = 0;
                            this.lq = 0.01;
                        }
                    }
                    this.ci = true;
                    this.hb(false);
                    if (this.lk != null) {
                        this.lk.ha();
                    }
                    for (let f of fromEnum(this.cw())) {
                        f.dl = true;
                        f.je(false);
                    }
                    if (this.bh != null) {
                        this.bh.h2();
                    }
                    break;
                case "CrossingAxis":
                    let g = typeCast(NumericAngleAxis.$, d);
                    let h = typeCast(CategoryAngleAxis.$, d);
                    if (g == null && h == null) {
                        this.l5(null);
                    }
                    if (g != null) {
                        this.l5(g);
                        g.lx(this);
                    }
                    if (h != null) {
                        this.l5(h);
                        h.lz(this);
                    }
                    this.ci = true;
                    this.hb(false);
                    break;
                case "IsInverted":
                    if (this.lk != null) {
                        this.lk.ci = true;
                        this.lk.hb(false);
                    }
                    break;
            }
        }
        l5(a) {
            this.lk = a;
        }
        get lk() {
            if (this.lj != null) {
                return this.lj;
            }
            let a = typeCast(XamDataChart.$, this.bh);
            if (a != null) {
                for (let b = 0; b < a.axes.count; b++) {
                    if (typeCast(NumericAngleAxis.$, a.axes._inner[b]) !== null || typeCast(CategoryAngleAxis.$, a.axes._inner[b]) !== null) {
                        return a.axes._inner[b];
                    }
                }
            }
            return this.lj;
        }
        set lk(a) {
            this.lj = a;
        }
        ai() {
            return this.lk;
        }
        jo() {
            return new PolarAxisRenderingParameters();
        }
        jn(a, b, c, d) {
            let e = typeCast(PolarAxisRenderingParameters.$, super.jn(a, b, c, d));
            let f = this.lm.f(b);
            let g = this.lm.g(b);
            let h = 0.5 * this.lq;
            let i = 0.5 * this.lp;
            let j, k;
            if (Rect.l_op_Equality(b, SeriesViewer.m2)) {
                k = this.ka;
                j = this.kb;
            }
            else {
                k = Math.min(g, h);
                j = this.ly(f);
                k = this.ly(k);
                let l = this.l6(a, b, j, k);
                j = l.p2;
                k = l.p3;
            }
            let m = { $type: Point_$type, x: 0.5, y: 0.5 };
            let n = f;
            let o = g;
            let p = Math.min(a.width, a.height) * (this.lq - this.lp) / 2;
            e.center = m;
            let q = Math.max(o, n);
            let r = Math.min(n, o);
            e.maxLength = q;
            e.minLength = r;
            let s = Math.min(j, k);
            let t = Math.max(j, k);
            if (s < this.kb) {
                s = this.kb;
            }
            if (t > this.ka) {
                t = this.ka;
            }
            this.ke = s;
            this.kd = t;
            e.k.add(((() => {
                let $ret = new RangeInfo();
                $ret.d = s;
                $ret.c = t;
                $ret.b = p;
                return $ret;
            })()));
            let u = typeCast(IAngleScaler_$type, this.lk);
            if (u != null) {
                let v;
                let w;
                let x = u.getMinMaxAngle(b, v, w);
                v = x.p1;
                w = x.p2;
                e.minAngle = Math.min(v, w);
                e.maxAngle = Math.max(v, w);
            }
            let y = this.lv();
            if (o >= h) {
                o = y;
            }
            if (n < i) {
                n = i;
            }
            e.minLength = n;
            e.maxLength = o;
            e.effectiveMaximum = y;
            e.f = this.jr;
            let z = typeCast(LinearTickmarkValues.$, e.f);
            if (z != null) {
                z.y = this.l1(m, e.minLength, e.maxLength, b, a);
            }
            return e;
        }
        l6(a, b, c, d) {
            let e = { $type: Point_$type, x: 0.5, y: 0.5 };
            let f = 0;
            if (this.ca) {
                f = this.lw(this.kb);
            }
            else {
                f = this.lw(this.ka);
            }
            let g = 0;
            if (this.e4 != null) {
                g = this.ls;
            }
            let h = e.x + f * Math.cos(g);
            let i = e.y + f * Math.sin(g);
            e.x = ViewportUtils.c(e.x, b, a);
            e.y = ViewportUtils.f(e.y, b, a);
            h = ViewportUtils.c(h, b, a);
            i = ViewportUtils.f(i, b, a);
            if (h >= a.left && h <= a.right && i >= a.top && i <= a.bottom) {
                if (this.ca) {
                    d = this.kb;
                }
                else {
                    d = this.ka;
                }
            }
            if (e.x >= a.left && e.x <= a.right && e.y >= a.top && e.y <= a.bottom) {
                if (this.ca) {
                    c = this.ka;
                }
                else {
                    c = this.kb;
                }
            }
            return {
                p2: c,
                p3: d
            };
        }
        l1(a, b, c, d, e) {
            let f = ViewportUtils.d(c - b, d, e);
            let g = f / Math.min(e.width, e.height);
            if (g > 0.7) {
                return 10;
            }
            return 5;
        }
        lv() {
            let a = 0;
            if (!this.ca) {
                a = this.lw(this.ka);
            }
            else {
                a = this.lw(this.kb);
            }
            return a;
        }
        k9(a) {
            if (this.lk != null) {
                this.lk.ha();
            }
        }
        hc(a) {
            super.hc(a);
            let b = this.bh != null ? this.bh.mr : Rect.empty;
            let c = !b.isEmpty ? this.i8 : Rect.empty;
            let d = this.i3();
            let e = this.i2();
            let f = this.jm.c(a, c, b, d, e);
            if (f != null) {
                this.j9 = f.f.m;
                this.kc = f.f.l;
            }
        }
        hm(a, b) {
            super.hm(a, b);
            if (b.height != a.height || b.width != a.width) {
                this.cn();
            }
        }
        l4(a, b, c, d, e) {
            let f = typeCast(IPolarRadialRenderingParameters_$type, this.jn(b, c, d, e));
            if (f == null) {
                return;
            }
            this.lm.j(a.d, f.minLength, f.maxLength, b, c, f.center, f.minAngle, f.maxAngle);
        }
        get_a0() {
            return 3;
        }
        get a0() {
            return this.get_a0();
        }
        i0(a, b, c, d = null, e = null) {
            let f = typeCast(PolarAxisRenderingParameters.$, this.jn(c, b, d, e));
            let g = a;
            let h = new PathGeometry();
            let i = ViewportUtils.d(g, b, c);
            let j = ViewportUtils.g(g, b, c);
            if (i <= 0 || j <= 0) {
                return null;
            }
            let k = ViewportUtils.c(f.center.x, b, c);
            let l = ViewportUtils.f(f.center.y, b, c);
            if (f.maxAngle - f.minAngle < Math.PI && f.maxAngle - f.minAngle > 0) {
                let m = { $type: Point_$type, x: ViewportUtils.c(f.center.x + g * Math.cos(f.minAngle), b, c), y: ViewportUtils.f(f.center.y + g * Math.sin(f.minAngle), b, c) };
                let n = { $type: Point_$type, x: ViewportUtils.c(f.center.x + g * Math.cos(f.maxAngle), b, c), y: ViewportUtils.f(f.center.y + g * Math.sin(f.maxAngle), b, c) };
                let o = new PathFigure();
                o._startPoint = m;
                o._isClosed = false;
                o._segments.add(((() => {
                    let $ret = new ArcSegment();
                    $ret.b = false;
                    $ret.e = n;
                    $ret.f = new Size(1, i, j);
                    $ret.d = 1;
                    return $ret;
                })()));
                h.c.add(o);
            }
            else {
                let p = new PathFigure();
                p._startPoint = { $type: Point_$type, x: k, y: l - j };
                p._isClosed = true;
                p._segments.add(((() => {
                    let $ret = new ArcSegment();
                    $ret.b = false;
                    $ret.e = { $type: Point_$type, x: k, y: l + j };
                    $ret.f = new Size(1, i, j);
                    $ret.d = 1;
                    return $ret;
                })()));
                p._segments.add(((() => {
                    let $ret = new ArcSegment();
                    $ret.b = false;
                    $ret.e = { $type: Point_$type, x: k, y: l - j };
                    $ret.f = new Size(1, i, j);
                    $ret.d = 1;
                    return $ret;
                })()));
                h.c.add(p);
            }
            return h;
        }
    }
    NumericRadiusAxis.$t = /*@__PURE__*/ markType(NumericRadiusAxis, 'NumericRadiusAxis', NumericAxisBase.$);
    NumericRadiusAxis.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, NumericRadiusAxis, 'g5', ['InnerRadiusExtentScale:lz:l7', [1, 0], 'RadiusExtentScale:l0:l8', [1, 0.75]]);
    return NumericRadiusAxis;
})();
/**
 * @hidden
 */
export let AngleAxisLabelPanelView = /*@__PURE__*/ (() => {
    class AngleAxisLabelPanelView extends AxisLabelPanelBaseView {
        constructor(a) {
            super(a);
            this.ax = null;
            this.ax = a;
        }
        am() {
            super.am();
            this.ax.ct = true;
        }
        ay(a, b) {
            this.ax.cx = -1.7976931348623157E+308;
            this.ax.cu = -1.7976931348623157E+308;
            this.ax.cw = -1.7976931348623157E+308;
            this.ax.cv = -1.7976931348623157E+308;
            for (let c = 0; c < this.a.a3.count; c++) {
                let d = this.a.a3._inner[c];
                let e = this.a.a2._inner[c];
                let f = e.a;
                let g = this.ax.cz(e.c);
                let h = this.m(d);
                let i = this.l(d);
                let j = h + this.p() + this.q();
                let k = i + this.r() + this.o();
                let l = g.x - j / 2;
                let m = g.y - k / 2;
                this.ax.cw = Math.max(h, this.ax.cw);
                this.ax.cv = Math.max(i, this.ax.cv);
                this.ax.cx = Math.max(j, this.ax.cx);
                this.ax.cu = Math.max(k, this.ax.cu);
                let n = new Rect(0, l, m, j, k);
                a.add(n);
                b.add(f);
            }
        }
        o() {
            return 0;
        }
        p() {
            return 0;
        }
        q() {
            return 0;
        }
        r() {
            return 0;
        }
    }
    AngleAxisLabelPanelView.$t = /*@__PURE__*/ markType(AngleAxisLabelPanelView, 'AngleAxisLabelPanelView', AxisLabelPanelBaseView.$);
    return AngleAxisLabelPanelView;
})();
/**
 * @hidden
 */
export let CategoryAngleAxisView = /*@__PURE__*/ (() => {
    class CategoryAngleAxisView extends CategoryAxisBaseView {
        constructor(a) {
            super(a);
            this.bg = null;
            this.bg = a;
        }
    }
    CategoryAngleAxisView.$t = /*@__PURE__*/ markType(CategoryAngleAxisView, 'CategoryAngleAxisView', CategoryAxisBaseView.$);
    return CategoryAngleAxisView;
})();
/**
 * @hidden
 */
export let NumericAngleAxisView = /*@__PURE__*/ (() => {
    class NumericAngleAxisView extends NumericAxisBaseView {
        constructor(a) {
            super(a);
            this.bg = null;
            this.bg = a;
        }
    }
    NumericAngleAxisView.$t = /*@__PURE__*/ markType(NumericAngleAxisView, 'NumericAngleAxisView', NumericAxisBaseView.$);
    return NumericAngleAxisView;
})();
/**
 * @hidden
 */
export let NumericRadiusAxisView = /*@__PURE__*/ (() => {
    class NumericRadiusAxisView extends NumericAxisBaseView {
        constructor(a) {
            super(a);
            this.bg = null;
            this.bg = a;
        }
    }
    NumericRadiusAxisView.$t = /*@__PURE__*/ markType(NumericRadiusAxisView, 'NumericRadiusAxisView', NumericAxisBaseView.$);
    return NumericRadiusAxisView;
})();
//# sourceMappingURL=AngleAxisLabelPanel_combined.js.map
