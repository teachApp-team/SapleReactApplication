/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { AxisLabelPanelBase } from "./AxisLabelPanelBase";
import { Boolean_$type, typeCast, markType, Point_$type, typeGetValue, fromEnum, runOn, Number_$type, markDep } from "igniteui-react-core";
import { AxisLabelPanelBaseView } from "./AxisLabelPanelBaseView";
import { Rect } from "igniteui-react-core";
import { Extensions } from "igniteui-react-core";
import { Axis } from "./Axis";
import { List$1 } from "igniteui-react-core";
import { LabelPosition } from "./LabelPosition";
import { XamDataChart } from "./XamDataChart";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { IAngleScaler_$type } from "./IAngleScaler";
import { CategoryAxisRenderer } from "./CategoryAxisRenderer";
import { DependencyProperty } from "igniteui-react-core";
import { PolarAxisRenderingManager } from "./PolarAxisRenderingManager";
import { AxisLabelManager } from "./AxisLabelManager";
import { ViewportUtils } from "./ViewportUtils";
import { RadialAxisRenderingParameters } from "./RadialAxisRenderingParameters";
import { CategoryTickmarkValues } from "./CategoryTickmarkValues";
import { MathUtil } from "igniteui-react-core";
import { SeriesViewer } from "./SeriesViewer";
import { ScalerParams } from "./ScalerParams";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { LineGeometry } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { RangeInfo } from "./RangeInfo";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { NumericAxisBase } from "./NumericAxisBase";
import { LogarithmicTickmarkValues } from "./LogarithmicTickmarkValues";
import { PolarAxisRenderingParameters } from "./PolarAxisRenderingParameters";
import { RadialAxisLabelPanel } from "./RadialAxisLabelPanel";
import { LinearTickmarkValues } from "./LinearTickmarkValues";
import { IPolarRadialRenderingParameters_$type } from "./IPolarRadialRenderingParameters";
import { PathGeometry } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { ArcSegment } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
import { NumericAxisBaseView } from "./NumericAxisBaseView";
/**
 * @hidden
 */
var AngleAxisLabelPanel = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(AngleAxisLabelPanel, _super);
    function AngleAxisLabelPanel() {
        var _this = _super.call(this) || this;
        _this.ct = false;
        _this.cz = null;
        _this.cx = 0;
        _this.cu = 0;
        _this.cw = 0;
        _this.cv = 0;
        return _this;
    }
    AngleAxisLabelPanel.prototype.ad = function () {
        return new AngleAxisLabelPanelView(this);
    };
    AngleAxisLabelPanel.prototype.b8 = function (a) {
        _super.prototype.b8.call(this, a);
        this.cs = a;
    };
    AngleAxisLabelPanel.prototype.ao = function (a, b) {
        if (!Extensions.b(b)) {
            return false;
        }
        if (this.ac == null || this.ac.i8.isEmpty) {
            return _super.prototype.ao.call(this, a, b);
        }
        return true;
    };
    AngleAxisLabelPanel.prototype.ay = function () {
        var a = new List$1(Rect.$, 0);
        var b = new List$1(Boolean_$type, 0);
        if (this.a3.count != this.a2.count) {
            return a;
        }
        this.cs.ay(a, b);
        var c = false;
        this.am = this.al(a, b);
        if (!this.ac.b1()) {
            c = true;
            this.a9 = this.cx / 2;
            this.a9 = this.a9 + this.cy();
        }
        else {
            c = true;
            this.cs.ac();
        }
        if (c) {
            for (var d = 0; d < a.count; d++) {
                var e = this.a3._inner[d];
                var f = this.a2._inner[d];
                var g = a._inner[d];
                var h = this.cz(f.c);
                var i = h.x - this.bc(e) / 2;
                var j = h.y - this.bb(e) / 2;
                g.x = i;
                g.y = j;
                a._inner[d] = g;
            }
        }
        return a;
    };
    AngleAxisLabelPanel.prototype.cy = function () {
        var a;
        var b;
        b = this.ac;
        a = null;
        if (b != null) {
            a = typeCast(XamDataChart.$, b.bh);
        }
        if (a == null || b == null) {
            return 0;
        }
        var c = new List$1(Axis.$, 0);
        for (var d = 0; d < a.axes.count; d++) {
            var e = a.axes._inner[d];
            if ((typeCast(NumericAngleAxis.$, e) !== null || typeCast(CategoryAngleAxis.$, e) !== null) && typeCast(AngleAxisLabelPanel.$, e.au) !== null && e.au.a3.count > 0 && (!e.b1()) && !e.b0() && (e.ah == null || this.ac.ah == null || e.ah.lq == b.ah.lq)) {
                c.add(e);
            }
        }
        var f = c.indexOf(b);
        if (f == -1) {
            return 0;
        }
        var g = 0;
        var h = 5;
        if (f == 0) {
            g += h;
        }
        else {
            g += c._inner[f - 1].au.a9;
            g += c._inner[f].au.a9 * 2 + h;
        }
        return g;
    };
    AngleAxisLabelPanel.prototype.ah = function () {
        return 4;
    };
    AngleAxisLabelPanel.prototype.as = function (a) {
        return a == 4 || a == 5;
    };
    AngleAxisLabelPanel.$t = markType(AngleAxisLabelPanel, 'AngleAxisLabelPanel', AxisLabelPanelBase.$);
    return AngleAxisLabelPanel;
}(AxisLabelPanelBase));
export { AngleAxisLabelPanel };
/**
 * @hidden
 */
var CategoryAngleAxis = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(CategoryAngleAxis, _super);
    function CategoryAngleAxis() {
        var _this = _super.call(this) || this;
        _this.k9 = null;
        _this.k6 = null;
        _this.la = false;
        _this.le = NaN;
        _this.k7 = null;
        _this.lf = 0;
        _this.lc = 0;
        _this.ld = 0;
        _this.lq = 1;
        _this.ab = CategoryAngleAxis.$;
        _this.k6 = _this.k5();
        _this.k9 = new PolarAxisRenderingManager();
        return _this;
    }
    CategoryAngleAxis.prototype.a2 = function () {
        return new CategoryAngleAxisView(this);
    };
    CategoryAngleAxis.prototype.gx = function (a) {
        _super.prototype.gx.call(this, a);
        this.k4 = a;
    };
    CategoryAngleAxis.prototype.get_b2 = function () {
        return true;
    };
    CategoryAngleAxis.prototype.at = function () {
        var _this = this;
        var a = new AngleAxisLabelPanel();
        a.cz = function (b) {
            var c = _this.bh != null ? _this.bh.mr : Rect.empty;
            var d = !c.isEmpty ? _this.i8 : Rect.empty;
            return _this.l3(b, { $type: Point_$type, x: 0.5, y: 0.5 }, c, d, _this.au.a9);
        };
        return a;
    };
    CategoryAngleAxis.prototype.lo = function (a) {
        return Math.round(a * Math.pow(10, 10)) / Math.pow(10, 10);
    };
    CategoryAngleAxis.prototype.k5 = function () {
        var _this = this;
        var a = ((function () {
            var $ret = new AxisLabelManager();
            $ret.a = _this;
            $ret.f = _this.cy;
            $ret.e = _this.cx;
            $ret.b = _this.au;
            return $ret;
        })());
        if (this.ax != null) {
            this.ax.registerAxis(this);
        }
        var b = new CategoryAxisRenderer(a);
        b.u = function () {
            var c = _this.a3.ay();
            var d = _this.a3.a1();
            var e = _this.a3.az();
            var f = _this.a3.a0();
            _this.hj();
            _this.gn(c);
            _this.gn(d);
            _this.gn(e);
            _this.gn(f);
        };
        b.o = function (c, d) { return !d.isEmpty && !c.isEmpty && _this.k8 != null; };
        b.d = function (c, d, e, f) { return _this.k3(c, d, e, f); };
        b.v = function () {
            if (!_this.la) {
                _this.la = true;
                _this.k8.cn();
                _this.la = false;
            }
        };
        b.g = function (c) {
            var d = typeGetValue(c);
            if (d > _this.jm.count - 1) {
                d -= _this.jm.count;
            }
            var e = _this.jm.item(d);
            return _this.e8(e);
        };
        b.b.c = function (c) {
            var e_1, _a;
            if ((_this.ax == null || _this.ax.visibility == 0) && _this.k8 != null && _this.le != c) {
                var d = typeCast(XamDataChart.$, _this.bh);
                if (d == null) {
                    return;
                }
                _this.le = c;
                _this.au.a8 = c;
                d.hu();
                try {
                    for (var _b = tslib_1.__values(fromEnum(d.axes)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var e = _c.value;
                        if (e != _this && typeCast(AngleAxisLabelPanel.$, e.au) !== null) {
                            e.a3.ad();
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            }
        };
        b.k = function (c, d, e) {
            var f = typeCast(RadialAxisRenderingParameters.$, c);
            _this.k9.m(d, e, c.z, c.aa, f.minLength, f.maxLength, f.center);
        };
        b.l = function (c, d, e, f) {
            var g = typeCast(RadialAxisRenderingParameters.$, c);
            _this.k9.n(d, e, f, g.z, c.aa, g.minLength, g.maxLength, g.center);
        };
        b.m = function (c, d) { return _this.getScaledAngle(d); };
        b.q = function (c, d) {
            if (_this.lo(d - _this.lf) < 0) {
                return false;
            }
            if (_this.lo(d - _this.lf - (2 * Math.PI)) > 0) {
                return false;
            }
            return true;
        };
        b.j = function (c) {
            var d = typeCast(RadialAxisRenderingParameters.$, c);
            if (d.e == d.k._inner[0]) {
                _this.k9.i(c.t, c.n, c.z, c.aa, d.center, d.minAngle, d.maxAngle);
            }
        };
        b.e = function (c) {
            c.n = _this.li();
            c.r = c.n;
        };
        b.p = function (c, d, e) {
            var f = typeCast(RadialAxisRenderingParameters.$, c);
            if (e) {
                return false;
            }
            var g = _this.l3(d, f.center, c.aa, c.z, 0);
            if (g.x < c.z.right && g.x >= c.z.left && g.y < c.z.bottom && g.y >= c.z.top) {
                return true;
            }
            return false;
        };
        b.a = function (c, d, e, f) {
            var g = c.y;
            var h = new ScalerParams(0, c.aa, c.z, _this.ca, g);
            var i = d;
            if (_this.categoryMode != 0) {
                var j = (e * f) + 1;
                j = Math.min(j, _this.j5);
                var k = _this.dy(j, h);
                i = (d + k) / 2;
            }
            return i;
        };
        b.f = runOn(this, this.getGroupCenter);
        b.i = runOn(this, this.ll);
        return b;
    };
    CategoryAngleAxis.prototype.l3 = function (a, b, c, d, e) {
        var f = this.li();
        var g = ViewportUtils.b(e, c, d);
        if (this.ax != null && (this.ax.c == 5 || this.ax.c == 1)) {
            g *= -1;
        }
        var h = b.x + (f + g) * Math.cos(a);
        var i = b.y + (f + g) * Math.sin(a);
        h = ViewportUtils.c(h, c, d);
        i = ViewportUtils.f(i, c, d);
        return { $type: Point_$type, x: h, y: i };
    };
    CategoryAngleAxis.prototype.li = function () {
        if (this.k8 == null) {
            return 0;
        }
        if (!this.b0()) {
            return this.k8.lv();
        }
        else {
            return this.k8.lw((this.e4));
        }
    };
    CategoryAngleAxis.prototype.k3 = function (a, b, c, d) {
        if (this.jm == null) {
            return null;
        }
        var e = new RadialAxisRenderingParameters();
        var f = this.jm.count - 1;
        var g = this.a3.ay();
        var h = this.a3.a1();
        var i = this.a3.az();
        var j = this.a3.a0();
        e.t = g;
        e.w = h;
        e.u = i;
        e.v = j;
        e.l = f;
        e.m = 0;
        e.h = false;
        e.z = a;
        e.y = c;
        e.x = d;
        e.aa = b;
        e.g = this.lb();
        e.p = this.lm;
        e.o = this.eb();
        e.q = this.ln;
        e.s = this.e9;
        var k = this.k9.f(b);
        var l = this.k9.g(b);
        var m = 0.5 * this.k8.lq;
        var n = 0.5 * this.k8.lp;
        var o = k;
        var p = l;
        var q = this.k8.lv();
        if (isNaN_(q) || isInfinity(q)) {
            return null;
        }
        if (p >= m) {
            p = q;
        }
        if (o < n) {
            o = n;
        }
        var r = a.width;
        this.k9.k(b, e, 0, this.jm.count, this.ca, runOn(this, this.getUnscaledAngle), r);
        var s = { $type: Point_$type, x: 0.5, y: 0.5 };
        e.center = s;
        e.maxLength = p;
        e.minLength = o;
        e.effectiveMaximum = q;
        e.ae = this.jm.count;
        e.ab = this.categoryMode;
        e.ad = true;
        e.ac = this.ca;
        e.af = this.j8;
        e.f = new CategoryTickmarkValues();
        e.j = this.cl;
        return e;
    };
    CategoryAngleAxis.prototype.getMinMaxAngle = function (a, b, c) {
        var d = this.k9.l(a, b, c);
        b = d.p1;
        c = d.p2;
        return {
            p1: b,
            p2: c
        };
    };
    CategoryAngleAxis.prototype.ac = function () {
        _super.prototype.ac.call(this);
        this.hb(false);
    };
    Object.defineProperty(CategoryAngleAxis.prototype, "k8", {
        get: function () {
            if (this.k7 != null) {
                return this.k7;
            }
            var a = typeCast(XamDataChart.$, this.bh);
            if (a != null) {
                for (var b = 0; b < a.axes.count; b++) {
                    if (typeCast(NumericRadiusAxis.$, a.axes._inner[b]) !== null) {
                        return a.axes._inner[b];
                    }
                }
            }
            return this.k7;
        },
        set: function (a) {
            this.k7 = a;
        },
        enumerable: true,
        configurable: true
    });
    CategoryAngleAxis.prototype.ai = function () {
        return this.k8;
    };
    CategoryAngleAxis.prototype.getCategorySize = function (a, b, c) {
        return 2 * Math.PI / this.j5;
    };
    CategoryAngleAxis.prototype.jy = function (a, b, c) {
        var d = !isNaN_(this.jv) ? MathUtil.b(this.jv, 0, 1) : 0;
        var e = 0;
        if (!isNaN_(this.j2)) {
            e = Math.min(this.j2, 1);
        }
        var f = 1 - 0.5 * d;
        return this.getCategorySize(a, b, c) * f / (this.j8 - (this.j8 - 1) * e);
    };
    CategoryAngleAxis.prototype.getGroupCenter = function (a, b, c, d) {
        var e = 0.5;
        if (this.j8 > 1) {
            var f = !isNaN_(this.jv) ? MathUtil.b(this.jv, 0, 1) : 0;
            var g = 0;
            if (!isNaN_(this.j2)) {
                g = Math.min(this.j2, 1);
            }
            var h = 1 - 0.5 * f;
            var i = h / (this.j8 - (this.j8 - 1) * g);
            var j = (h - i) / (this.j8 - 1);
            e = 0.25 * f + 0.5 * i + a * j;
        }
        return this.getCategorySize(b, c, d) * e;
    };
    CategoryAngleAxis.prototype.ll = function (a) {
        var b = 0.5;
        if (this.j8 > 1) {
            var c = !isNaN_(this.jv) ? MathUtil.b(this.jv, 0, 1) : 0;
            var d = 0;
            if (!isNaN_(this.j2)) {
                d = Math.min(this.j2, 1);
            }
            var e = 1 - 0.5 * c;
            var f = e / (this.j8 - (this.j8 - 1) * d);
            var g = (e - f) / (this.j8 - 1);
            b = 0.25 * c + 0.5 * f + a * g;
        }
        return b;
    };
    CategoryAngleAxis.prototype.hc = function (a) {
        _super.prototype.hc.call(this, a);
        var b = this.bh != null ? this.bh.mr : Rect.empty;
        var c = !b.isEmpty ? this.i8 : Rect.empty;
        var d = this.i3();
        var e = this.i2();
        var f = this.k6.c(a, c, b, d, e);
        if (f != null) {
            this.lg = f.f.m;
            this.lh = f.f.l;
        }
    };
    CategoryAngleAxis.prototype.lk = function (a, b) {
        var c;
        var d;
        var e = this.k9.l(b, c, d);
        c = e.p1;
        d = e.p2;
        if (c == 0) {
            if (this.ca) {
                return this.j5;
            }
            else {
                return 0;
            }
        }
        var f = this.getUnscaledAngle(c);
        if (f < 0 || f > this.j5) {
            f = this.getUnscaledAngle(c + Math.PI * 2);
        }
        return f;
    };
    CategoryAngleAxis.prototype.lj = function (a, b) {
        var c;
        var d;
        var e = this.k9.l(b, c, d);
        c = e.p1;
        d = e.p2;
        if (d > Math.PI * 2) {
            d = d - Math.PI * 2;
        }
        if (d == Math.PI * 2) {
            if (this.ca) {
                return 0;
            }
            else {
                return this.j5;
            }
        }
        var f = this.getUnscaledAngle(d);
        if (f < 0 || f > this.j5) {
            f = this.getUnscaledAngle(d + Math.PI * 2);
        }
        return f;
    };
    CategoryAngleAxis.prototype.getScaledAngle = function (a) {
        var b = this.j5;
        var c = b >= 2 ? (a) / (b) : b == 1 ? 0.5 : NaN;
        if (this.cb) {
            c = 1 - c;
        }
        return (c * 2 * Math.PI) + this.lf;
    };
    CategoryAngleAxis.prototype.getUnscaledAngle = function (a) {
        if (a < this.lf) {
            a += 2 * Math.PI;
        }
        var b = (a - this.lf) / (2 * Math.PI);
        if (this.ca) {
            b = 1 - b;
        }
        return b * (this.j5);
    };
    CategoryAngleAxis.prototype.dy = function (a, b) {
        return this.getScaledAngle(a);
    };
    CategoryAngleAxis.prototype.d1 = function (a, b) {
        return this.getUnscaledAngle(a);
    };
    CategoryAngleAxis.prototype.gz = function (a, b, c, d) {
        var e_2, _a, e_3, _b, e_4, _c;
        _super.prototype.gz.call(this, a, b, c, d);
        var e = typeCast(XamDataChart.$, this.bh);
        switch (b) {
            case "CrossingAxis":
                var f = typeCast(NumericRadiusAxis.$, d);
                this.lz(f);
                if (f != null) {
                    f.l5(this);
                }
                this.ci = true;
                this.hb(false);
                break;
            case CategoryAngleAxis.$$p[0]:
                this.lf = this.lp;
                while (this.lf < 0) {
                    this.lf += 360;
                }
                while (this.lf >= 360) {
                    this.lf -= 360;
                }
                this.lf = (this.lf * Math.PI) / 180;
                this.ci = true;
                this.hb(false);
                try {
                    for (var _d = tslib_1.__values(fromEnum(this.cz)), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var g = _e.value;
                        g.je(false);
                        g.il();
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_e && !_e.done && (_a = _d.return))
                            _a.call(_d);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                break;
            case "Label":
                if (e != null) {
                    try {
                        for (var _f = tslib_1.__values(fromEnum(e.axes)), _g = _f.next(); !_g.done; _g = _f.next()) {
                            var h = _g.value;
                            h.ci = true;
                            h.ha();
                        }
                    }
                    catch (e_3_1) {
                        e_3 = { error: e_3_1 };
                    }
                    finally {
                        try {
                            if (_g && !_g.done && (_b = _f.return))
                                _b.call(_f);
                        }
                        finally {
                            if (e_3)
                                throw e_3.error;
                        }
                    }
                }
                break;
            case "CrossingValue":
                if (e != null) {
                    try {
                        for (var _h = tslib_1.__values(fromEnum(e.axes)), _j = _h.next(); !_j.done; _j = _h.next()) {
                            var i = _j.value;
                            if (typeCast(NumericAngleAxis.$, i) !== null || typeCast(CategoryAngleAxis.$, i) !== null) {
                                i.ci = true;
                                i.ha();
                            }
                        }
                    }
                    catch (e_4_1) {
                        e_4 = { error: e_4_1 };
                    }
                    finally {
                        try {
                            if (_j && !_j.done && (_c = _h.return))
                                _c.call(_h);
                        }
                        finally {
                            if (e_4)
                                throw e_4.error;
                        }
                    }
                }
                break;
            case "LabelSettings":
                this.k6 = this.k5();
                this.lx();
                this.ci = true;
                this.hb(false);
                break;
        }
    };
    CategoryAngleAxis.prototype.lx = function () {
        this.le = NaN;
    };
    CategoryAngleAxis.prototype.lz = function (a) {
        this.k8 = a;
    };
    Object.defineProperty(CategoryAngleAxis.prototype, "lm", {
        get: function () {
            return this.c(CategoryAngleAxis.l0);
        },
        set: function (a) {
            this.h(CategoryAngleAxis.l0, a);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryAngleAxis.prototype, "lg", {
        get: function () {
            return this.lc;
        },
        set: function (a) {
            if (this.lg != a) {
                var b = this.lc;
                this.lc = a;
                this.g5("ActualInterval", b, this.lg);
            }
        },
        enumerable: true,
        configurable: true
    });
    CategoryAngleAxis.prototype.d9 = function () {
        return this.lg;
    };
    Object.defineProperty(CategoryAngleAxis.prototype, "ln", {
        get: function () {
            return this.c(CategoryAngleAxis.l1);
        },
        set: function (a) {
            this.h(CategoryAngleAxis.l1, a);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoryAngleAxis.prototype, "lh", {
        get: function () {
            return this.ld;
        },
        set: function (a) {
            if (this.lh != a) {
                var b = this.ld;
                this.ld = a;
                this.g5("ActualMinorInterval", b, this.lh);
            }
        },
        enumerable: true,
        configurable: true
    });
    CategoryAngleAxis.prototype.lb = function () {
        return false;
    };
    CategoryAngleAxis.prototype.get_a0 = function () {
        return 2;
    };
    Object.defineProperty(CategoryAngleAxis.prototype, "a0", {
        get: function () {
            return this.get_a0();
        },
        enumerable: true,
        configurable: true
    });
    CategoryAngleAxis.prototype.cp = function () {
        if (this.ci && this.cq) {
            this.ba = this.a9();
        }
        if (this.jm == null) {
            return false;
        }
        var a = this.jm.count;
        if (a != this.lr) {
            var b = new AxisRangeChangedEventArgs(0, 1, 1, this.lr, a);
            this.lr = a;
            this.g6(b);
            return true;
        }
        return false;
    };
    Object.defineProperty(CategoryAngleAxis.prototype, "lr", {
        get: function () {
            return this.lq;
        },
        set: function (a) {
            this.lq = a;
        },
        enumerable: true,
        configurable: true
    });
    CategoryAngleAxis.prototype.i0 = function (a, b, c, d, e) {
        if (d === void 0) {
            d = null;
        }
        if (e === void 0) {
            e = null;
        }
        var f = typeCast(RadialAxisRenderingParameters.$, this.k6.d(c, b, d, e));
        if (f == null) {
            return null;
        }
        var g = Math.cos(a);
        var h = Math.sin(a);
        var i = f.center.x + g * f.minLength;
        var j = f.center.y + h * f.minLength;
        var k = f.center.x + g * f.maxLength;
        var l = f.center.y + h * f.maxLength;
        i = ViewportUtils.c(i, b, c);
        j = ViewportUtils.f(j, b, c);
        k = ViewportUtils.c(k, b, c);
        l = ViewportUtils.f(l, b, c);
        var m = new LineGeometry();
        m.d = { $type: Point_$type, x: i, y: j };
        m.c = { $type: Point_$type, x: k, y: l };
        return m;
    };
    Object.defineProperty(CategoryAngleAxis.prototype, "isVertical", {
        get: function () {
            return this.ch;
        },
        enumerable: true,
        configurable: true
    });
    CategoryAngleAxis.prototype.j$c = function (a, b) {
        return this.d1.apply(this, arguments);
    };
    CategoryAngleAxis.prototype.j$b = function (a, b) {
        return this.dy.apply(this, arguments);
    };
    CategoryAngleAxis.prototype.j$d = function (a, b, c, d, e) {
        this.gr.apply(this, arguments);
    };
    CategoryAngleAxis.prototype.j$e = function (a, b, c, d) {
        this.gs.apply(this, arguments);
    };
    CategoryAngleAxis.prototype.j$f = function (a, b, c, d) {
        this.gt.apply(this, arguments);
    };
    Object.defineProperty(CategoryAngleAxis.prototype, "j$a", {
        get: function () {
            return this.ca;
        },
        enumerable: true,
        configurable: true
    });
    CategoryAngleAxis.$t = markType(CategoryAngleAxis, 'CategoryAngleAxis', CategoryAxisBase.$, [IAngleScaler_$type]);
    CategoryAngleAxis.l0 = DependencyProperty.i("Interval", Number_$type, CategoryAngleAxis.$, new PropertyMetadata(2, NaN, function (a, b) {
        a.g5("Interval", b.oldValue, b.newValue);
        a.hb(false);
    }));
    CategoryAngleAxis.l1 = DependencyProperty.i("MinorInterval", Number_$type, CategoryAngleAxis.$, new PropertyMetadata(2, NaN, function (a, b) {
        (typeCast(CategoryAngleAxis.$, a)).g5("MinorInterval", b.oldValue, b.newValue);
        (typeCast(CategoryAngleAxis.$, a)).hb(false);
    }));
    CategoryAngleAxis.$$p = markDep(DependencyProperty, PropertyMetadata, CategoryAngleAxis, 'g5', ['StartAngleOffset:lp:l2', [1, 0]]);
    return CategoryAngleAxis;
}(CategoryAxisBase));
export { CategoryAngleAxis };
/**
 * @hidden
 */
var NumericAngleAxis = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(NumericAngleAxis, _super);
    function NumericAngleAxis() {
        var _this = _super.call(this) || this;
        _this.lm = null;
        _this.ln = false;
        _this.lo = NaN;
        _this.lp = 0;
        _this.lk = null;
        _this.ab = NumericAngleAxis.$;
        _this.lm = new PolarAxisRenderingManager();
        _this.jm = _this.jk();
        return _this;
    }
    NumericAngleAxis.prototype.a2 = function () {
        return new NumericAngleAxisView(this);
    };
    NumericAngleAxis.prototype.gx = function (a) {
        _super.prototype.gx.call(this, a);
        this.lj = a;
    };
    NumericAngleAxis.prototype.get_b2 = function () {
        return true;
    };
    NumericAngleAxis.prototype.at = function () {
        var _this = this;
        var a = new AngleAxisLabelPanel();
        a.cz = function (b) {
            var c = _this.bh != null ? _this.bh.mr : Rect.empty;
            var d = !c.isEmpty ? _this.i8 : Rect.empty;
            return _this.lz(b, { $type: Point_$type, x: 0.5, y: 0.5 }, c, d, _this.au.a9);
        };
        return a;
    };
    NumericAngleAxis.prototype.lq = function () {
        if (this.ll == null) {
            return 0;
        }
        if (!this.b0()) {
            return this.ll.lv();
        }
        else {
            return this.ll.lw((this.e4));
        }
    };
    NumericAngleAxis.prototype.ls = function (a) {
        return Math.round(a * Math.pow(10, 10)) / Math.pow(10, 10);
    };
    NumericAngleAxis.prototype.jk = function () {
        var _this = this;
        var a = _super.prototype.jk.call(this);
        a.b.c = function (b) {
            var e_5, _a;
            if ((_this.ax == null || _this.ax.visibility == 0) && _this.ll != null && _this.lo != b) {
                var c = typeCast(XamDataChart.$, _this.bh);
                if (c == null) {
                    return;
                }
                _this.lo = b;
                _this.au.a8 = b;
                c.hu();
                try {
                    for (var _b = tslib_1.__values(fromEnum(c.axes)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var d = _c.value;
                        if (d != _this && typeCast(AngleAxisLabelPanel.$, d.au) !== null) {
                            d.a3.ad();
                        }
                    }
                }
                catch (e_5_1) {
                    e_5 = { error: e_5_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_5)
                            throw e_5.error;
                    }
                }
            }
        };
        a.e = function (b) {
            b.n = _this.lq();
            b.r = b.n;
        };
        a.j = function (b) {
            var c = typeCast(PolarAxisRenderingParameters.$, b);
            if (c.e == c.k._inner[0]) {
                _this.lm.i(b.t, b.n, b.z, b.aa, c.center, c.minAngle, c.maxAngle);
            }
        };
        a.k = function (b, c, d) {
            var e = typeCast(PolarAxisRenderingParameters.$, b);
            _this.lm.m(c, d, b.z, b.aa, e.minLength, e.maxLength, e.center);
        };
        a.l = function (b, c, d, e) {
            var f = typeCast(PolarAxisRenderingParameters.$, b);
            _this.lm.n(c, d, e, f.z, b.aa, f.minLength, f.maxLength, f.center);
        };
        a.d = function (b, c, d, e) {
            var f = typeCast(PolarAxisRenderingParameters.$, _this.jn(b, c, d, e));
            return f;
        };
        a.v = function () {
            if (!_this.ln) {
                _this.ln = true;
                _this.ll.cn();
                _this.ln = false;
            }
        };
        a.m = function (b, c) { return _this.getScaledAngle(c); };
        a.o = function (b, c) { return !c.isEmpty && !b.isEmpty && _this.ll != null; };
        a.q = function (b, c) {
            if (_this.ls(c - _this.lp) < 0) {
                return false;
            }
            if (_this.ls(c - _this.lp - (2 * Math.PI)) > 0) {
                return false;
            }
            return true;
        };
        a.p = function (b, c, d) {
            var e = typeCast(PolarAxisRenderingParameters.$, b);
            var f = _this.lz(_this.getScaledAngle(e.l), e.center, b.aa, b.z, 0);
            var g = _this.lz(c, e.center, b.aa, b.z, 0);
            if (d && MathUtil.e(f.x - g.x, f.y - g.y) < 2) {
                return false;
            }
            if (g.x < b.z.right && g.x >= b.z.left && g.y < b.z.bottom && g.y >= b.z.top) {
                return true;
            }
            return false;
        };
        a.r = function (b, c, d, e) {
            if (c < b.m && typeCast(LogarithmicTickmarkValues.$, b.f) !== null) {
                return b.m;
            }
            else if (c > b.l && (typeCast(LogarithmicTickmarkValues.$, b.f) !== null || b.h)) {
                return b.l;
            }
            return c;
        };
        return a;
    };
    NumericAngleAxis.prototype.lz = function (a, b, c, d, e) {
        var f = this.lq();
        var g = ViewportUtils.b(e, c, d);
        if (this.ax != null && (this.ax.c == 5 || this.ax.c == 1)) {
            g *= -1;
        }
        var h = b.x + (f + g) * Math.cos(a);
        var i = b.y + (f + g) * Math.sin(a);
        h = ViewportUtils.c(h, c, d);
        i = ViewportUtils.f(i, c, d);
        return { $type: Point_$type, x: h, y: i };
    };
    NumericAngleAxis.prototype.dy = function (a, b) {
        return this.getScaledAngle(a);
    };
    NumericAngleAxis.prototype.getScaledAngle1 = function (a, b, c) {
        var d = 0;
        if (b) {
            d = (Math.log(a) - this.kh) / (this.kg - this.kh);
        }
        else {
            d = (a - this.kb) / (this.ka - this.kb);
        }
        if (c) {
            d = 1 - d;
        }
        return (d * 2 * Math.PI) + this.lp;
    };
    NumericAngleAxis.prototype.getScaledAngle = function (a) {
        return this.getScaledAngle1(a, this.j1, this.cb);
    };
    NumericAngleAxis.prototype.d1 = function (a, b) {
        return this.getUnscaledAngle(a);
    };
    NumericAngleAxis.prototype.getUnscaledAngle = function (a) {
        var b = (a - this.lp) / (2 * Math.PI);
        if (this.ca) {
            b = 1 - b;
        }
        if (this.j1) {
            return Math.exp(b * (this.kg - this.kh) + this.kh);
        }
        else {
            return this.kb + b * (this.ka - this.kb);
        }
    };
    NumericAngleAxis.prototype.gz = function (a, b, c, d) {
        var e_6, _a, e_7, _b, e_8, _c;
        _super.prototype.gz.call(this, a, b, c, d);
        var e = typeCast(XamDataChart.$, this.bh);
        switch (b) {
            case "CrossingAxis":
                var f = typeCast(NumericRadiusAxis.$, d);
                this.lx(f);
                if (f != null) {
                    f.l5(this);
                }
                this.hb(false);
                break;
            case NumericAngleAxis.$$p[0]:
                this.lp = this.lt;
                while (this.lp < 0) {
                    this.lp += 360;
                }
                while (this.lp >= 360) {
                    this.lp -= 360;
                }
                this.lp = (this.lt * Math.PI) / 180;
                this.hb(false);
                try {
                    for (var _d = tslib_1.__values(fromEnum(this.cw())), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var g = _e.value;
                        g.je(false);
                        g.il();
                    }
                }
                catch (e_6_1) {
                    e_6 = { error: e_6_1 };
                }
                finally {
                    try {
                        if (_e && !_e.done && (_a = _d.return))
                            _a.call(_d);
                    }
                    finally {
                        if (e_6)
                            throw e_6.error;
                    }
                }
                break;
            case "Label":
                if (e != null) {
                    try {
                        for (var _f = tslib_1.__values(fromEnum(e.axes)), _g = _f.next(); !_g.done; _g = _f.next()) {
                            var h = _g.value;
                            h.ha();
                        }
                    }
                    catch (e_7_1) {
                        e_7 = { error: e_7_1 };
                    }
                    finally {
                        try {
                            if (_g && !_g.done && (_b = _f.return))
                                _b.call(_f);
                        }
                        finally {
                            if (e_7)
                                throw e_7.error;
                        }
                    }
                }
                break;
            case "CrossingValue":
                if (e != null) {
                    try {
                        for (var _h = tslib_1.__values(fromEnum(e.axes)), _j = _h.next(); !_j.done; _j = _h.next()) {
                            var i = _j.value;
                            if (typeCast(NumericAngleAxis.$, i) !== null || typeCast(CategoryAngleAxis.$, i) !== null) {
                                i.ha();
                            }
                        }
                    }
                    catch (e_8_1) {
                        e_8 = { error: e_8_1 };
                    }
                    finally {
                        try {
                            if (_j && !_j.done && (_c = _h.return))
                                _c.call(_h);
                        }
                        finally {
                            if (e_8)
                                throw e_8.error;
                        }
                    }
                }
                break;
            case "LabelSettings":
                this.jm = this.jk();
                this.lv();
                this.ci = true;
                this.hb(false);
                break;
        }
    };
    NumericAngleAxis.prototype.lv = function () {
        this.lo = NaN;
    };
    NumericAngleAxis.prototype.jo = function () {
        return new PolarAxisRenderingParameters();
    };
    NumericAngleAxis.prototype.jn = function (a, b, c, d) {
        var e = typeCast(PolarAxisRenderingParameters.$, _super.prototype.jn.call(this, a, b, c, d));
        var f = this.lm.f(b);
        var g = this.lm.g(b);
        var h = 0.5 * this.ll.lq;
        var i = 0.5 * this.ll.lp;
        var j = f;
        var k = g;
        var l = this.ll.lv();
        if (isNaN_(l) || isInfinity(l)) {
            return null;
        }
        if (k >= h) {
            k = l;
        }
        if (j < i) {
            j = i;
        }
        var m = a.width;
        this.lm.k(b, e, this.kb, this.ka, this.ca, runOn(this, this.getUnscaledAngle), m);
        var n = { $type: Point_$type, x: 0.5, y: 0.5 };
        e.center = n;
        e.maxLength = k;
        e.minLength = j;
        e.effectiveMaximum = l;
        return e;
    };
    NumericAngleAxis.prototype.getMinMaxAngle = function (a, b, c) {
        var d = this.lm.l(a, b, c);
        b = d.p1;
        c = d.p2;
        return {
            p1: b,
            p2: c
        };
    };
    NumericAngleAxis.prototype.hc = function (a) {
        _super.prototype.hc.call(this, a);
        var b = this.bh != null ? this.bh.mr : Rect.empty;
        var c = !b.isEmpty ? this.i8 : Rect.empty;
        var d = this.i3();
        var e = this.i2();
        var f = this.jm.c(a, c, b, d, e);
        if (f != null) {
            this.j9 = f.f.m;
            this.kc = f.f.l;
        }
    };
    Object.defineProperty(NumericAngleAxis.prototype, "ll", {
        get: function () {
            if (this.lk != null) {
                return this.lk;
            }
            var a = typeCast(XamDataChart.$, this.bh);
            if (a != null) {
                for (var b = 0; b < a.axes.count; b++) {
                    if (a.axes._inner[b].ce) {
                        return a.axes._inner[b];
                    }
                }
            }
            return this.lk;
        },
        set: function (a) {
            this.lk = a;
        },
        enumerable: true,
        configurable: true
    });
    NumericAngleAxis.prototype.ai = function () {
        return this.ll;
    };
    NumericAngleAxis.prototype.lx = function (a) {
        this.ll = a;
    };
    NumericAngleAxis.prototype.hm = function (a, b) {
        _super.prototype.hm.call(this, a, b);
        if (b.height != a.height || b.width != a.width) {
            this.cn();
        }
    };
    NumericAngleAxis.prototype.get_a0 = function () {
        return 2;
    };
    Object.defineProperty(NumericAngleAxis.prototype, "a0", {
        get: function () {
            return this.get_a0();
        },
        enumerable: true,
        configurable: true
    });
    NumericAngleAxis.prototype.i0 = function (a, b, c, d, e) {
        if (d === void 0) {
            d = null;
        }
        if (e === void 0) {
            e = null;
        }
        if (this.ll == null) {
            return null;
        }
        var f = typeCast(PolarAxisRenderingParameters.$, this.jn(c, b, d, e));
        if (f == null) {
            return null;
        }
        var g = Math.cos(a);
        var h = Math.sin(a);
        var i = f.center.x + g * f.minLength;
        var j = f.center.y + h * f.minLength;
        var k = f.center.x + g * f.maxLength;
        var l = f.center.y + h * f.maxLength;
        i = ViewportUtils.c(i, b, c);
        j = ViewportUtils.f(j, b, c);
        k = ViewportUtils.c(k, b, c);
        l = ViewportUtils.f(l, b, c);
        var m = new LineGeometry();
        m.d = { $type: Point_$type, x: i, y: j };
        m.c = { $type: Point_$type, x: k, y: l };
        return m;
    };
    NumericAngleAxis.$t = markType(NumericAngleAxis, 'NumericAngleAxis', NumericAxisBase.$, [IAngleScaler_$type]);
    NumericAngleAxis.$$p = markDep(DependencyProperty, PropertyMetadata, NumericAngleAxis, 'g5', ['StartAngleOffset:lt:ly', [1, 0]]);
    return NumericAngleAxis;
}(NumericAxisBase));
export { NumericAngleAxis };
/**
 * @hidden
 */
var NumericRadiusAxis = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(NumericRadiusAxis, _super);
    function NumericRadiusAxis() {
        var _this = _super.call(this) || this;
        _this.lm = null;
        _this.ln = false;
        _this.lo = NaN;
        _this.lq = 0;
        _this.lp = 0;
        _this.ls = 0;
        _this.lj = null;
        _this.ab = NumericRadiusAxis.$;
        _this.lq = _this.l0;
        _this.lp = _this.lz;
        _this.lm = new PolarAxisRenderingManager();
        _this.jm = _this.jk();
        return _this;
    }
    NumericRadiusAxis.prototype.a2 = function () {
        return new NumericRadiusAxisView(this);
    };
    NumericRadiusAxis.prototype.gx = function (a) {
        _super.prototype.gx.call(this, a);
        this.ll = a;
    };
    NumericRadiusAxis.prototype.get_ce = function () {
        return true;
    };
    NumericRadiusAxis.prototype.dx = function () {
        var a = this.lq;
        var b = this.lp;
        var c = Math.min(this.lu(), this.lt()) * (a - b) / 2;
        c = Math.max(c, 14);
        return c;
    };
    NumericRadiusAxis.prototype.lu = function () {
        return this.i8.width;
    };
    NumericRadiusAxis.prototype.lt = function () {
        return this.i8.height;
    };
    NumericRadiusAxis.prototype.at = function () {
        return new RadialAxisLabelPanel();
    };
    NumericRadiusAxis.prototype.lr = function (a) {
        if (a == null) {
            return 0;
        }
        return a;
    };
    NumericRadiusAxis.prototype.jk = function () {
        var _this = this;
        var a = _super.prototype.jk.call(this);
        a.b.c = function (b) {
            if ((_this.ax == null || _this.ax.visibility == 0) && _this.lk != null) {
                if ((_this.ax == null || (_this.ax.c == 4 || _this.ax.c == 5)) && _this.lo != b) {
                    _this.lo = b;
                    _this.au.a8 = b;
                    _this.bh.hu();
                }
            }
        };
        a.k = function (b, c, d) {
            var e = typeCast(PolarAxisRenderingParameters.$, b);
            _this.lm.i(c, d, e.z, e.aa, e.center, e.minAngle, e.maxAngle);
        };
        a.l = function (b, c, d, e) {
            if (d == e) {
                return;
            }
            var f = typeCast(PolarAxisRenderingParameters.$, b);
            _this.lm.j(c, d, e, f.z, f.aa, f.center, f.minAngle, f.maxAngle);
        };
        a.m = function (b, c) { return _this.lw(c); };
        a.q = function (b, c) {
            var d = typeCast(PolarAxisRenderingParameters.$, b);
            return c <= d.effectiveMaximum;
        };
        a.n = function (b, c) {
            var d = typeCast(PolarAxisRenderingParameters.$, b);
            return c <= d.effectiveMaximum;
        };
        a.j = function (b) {
            var c = typeCast(PolarAxisRenderingParameters.$, b);
            _this.lm.m(b.t, c.crossingAngleRadians, b.z, b.aa, c.minLength, c.maxLength, c.center);
        };
        a.e = function (b) {
            b.n = _this.ax == null || (_this.ax.c == 4 || _this.ax.c == 0) ? b.z.top : b.z.bottom;
            b.r = b.n;
            var c = typeCast(PolarAxisRenderingParameters.$, b);
            c.crossingAngleRadians = (_this.lr(_this.e4) * Math.PI) / 180;
            if (_this.ax == null || (_this.ax.c == 4 || _this.ax.c == 5)) {
                c.n = ViewportUtils.f(0.5, c.aa, c.z) - b.z.top;
                c.r = c.n;
                var d = typeCast(RadialAxisLabelPanel.$, _this.au);
                if (d != null) {
                    var e = 0;
                    if (_this.ax != null && _this.ax.c == 4) {
                        e = 1;
                    }
                    d.dh = { $type: Point_$type, x: ViewportUtils.c(0.5, c.aa, c.z), y: e };
                    d.de = c.crossingAngleRadians;
                }
            }
        };
        a.p = function (b, c, d) {
            var e = typeCast(PolarAxisRenderingParameters.$, b);
            if (_this.lk == null) {
                return false;
            }
            if (c > e.effectiveMaximum) {
                return false;
            }
            var f = false;
            f = _this.ax == null || (_this.ax.c == 4 || _this.ax.c == 5);
            var g = 0;
            if (f) {
                g = _this.ls;
            }
            var h = e.center.x + c * Math.cos(g);
            var i = e.center.y + c * Math.sin(g);
            h = ViewportUtils.c(h, e.aa, e.z);
            i = ViewportUtils.f(i, e.aa, e.z);
            if (h <= b.z.right && h >= b.z.left && ((i <= b.z.bottom && i >= b.z.top) || !f)) {
                return true;
            }
            return false;
        };
        a.h = function (b, c) {
            var d = typeCast(PolarAxisRenderingParameters.$, b);
            return new LabelPosition(ViewportUtils.c(d.center.x + c, d.aa, d.z));
        };
        a.r = function (b, c, d, e) {
            if (c < b.m) {
                return b.m;
            }
            else if (c > b.l) {
                return b.l;
            }
            return c;
        };
        return a;
    };
    NumericRadiusAxis.prototype.dy = function (a, b) {
        return this.lw(a);
    };
    NumericRadiusAxis.prototype.lx = function (a, b, c, d, e) {
        var f = 0;
        if (b) {
            if (a <= 0) {
                f = (Math.log(this.kb) - this.kh) / (this.kg - this.kh);
            }
            else {
                f = (Math.log(a) - this.kh) / (this.kg - this.kh);
            }
        }
        else {
            f = (a - this.kb) / (this.ka - this.kb);
        }
        if (c) {
            f = 1 - f;
        }
        f = e + (f * (d - e));
        f /= 2;
        return f;
    };
    NumericRadiusAxis.prototype.lw = function (a) {
        return this.lx(a, this.j1, this.cb, this.lq, this.lp);
    };
    NumericRadiusAxis.prototype.ly = function (a) {
        var b = a * 2;
        b = (b - this.lp) / (this.lq - this.lp);
        if (this.ca) {
            b = 1 - b;
        }
        if (this.j1) {
            return Math.exp(b * (this.kg - this.kh) + this.kh);
        }
        else {
            return this.kb + b * (this.ka - this.kb);
        }
    };
    NumericRadiusAxis.prototype.d1 = function (a, b) {
        return this.ly(a);
    };
    NumericRadiusAxis.prototype.gz = function (a, b, c, d) {
        var e_9, _a, e_10, _b;
        switch (b) {
            case "CrossingValue":
                this.ls = this.lr(this.e4) * Math.PI / 180;
                break;
        }
        _super.prototype.gz.call(this, a, b, c, d);
        switch (b) {
            case NumericRadiusAxis.$$p[1]:
                this.lq = this.l0;
                if (this.lq < 0) {
                    this.lq = 0.1;
                }
                if (this.lq > 1) {
                    this.lq = 1;
                }
                if (this.lp >= this.lq) {
                    this.lp = this.lq - 0.01;
                    if (this.lp < 0) {
                        this.lp = 0;
                        this.lq = 0.01;
                    }
                }
                this.ci = true;
                this.hb(false);
                if (this.lk != null) {
                    this.lk.ha();
                }
                try {
                    for (var _c = tslib_1.__values(fromEnum(this.cw())), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var e = _d.value;
                        e.je(false);
                    }
                }
                catch (e_9_1) {
                    e_9 = { error: e_9_1 };
                }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return))
                            _a.call(_c);
                    }
                    finally {
                        if (e_9)
                            throw e_9.error;
                    }
                }
                break;
            case NumericRadiusAxis.$$p[0]:
                this.lp = this.lz;
                if (this.lp < 0) {
                    this.lp = 0.1;
                }
                if (this.lp > 1) {
                    this.lp = 1;
                }
                if (this.lp >= this.lq) {
                    this.lp = this.lq - 0.01;
                    if (this.lp < 0) {
                        this.lp = 0;
                        this.lq = 0.01;
                    }
                }
                this.ci = true;
                this.hb(false);
                if (this.lk != null) {
                    this.lk.ha();
                }
                try {
                    for (var _e = tslib_1.__values(fromEnum(this.cw())), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var f = _f.value;
                        f.dl = true;
                        f.je(false);
                    }
                }
                catch (e_10_1) {
                    e_10 = { error: e_10_1 };
                }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return))
                            _b.call(_e);
                    }
                    finally {
                        if (e_10)
                            throw e_10.error;
                    }
                }
                if (this.bh != null) {
                    this.bh.h2();
                }
                break;
            case "CrossingAxis":
                var g = typeCast(NumericAngleAxis.$, d);
                var h = typeCast(CategoryAngleAxis.$, d);
                if (g == null && h == null) {
                    this.l5(null);
                }
                if (g != null) {
                    this.l5(g);
                    g.lx(this);
                }
                if (h != null) {
                    this.l5(h);
                    h.lz(this);
                }
                this.ci = true;
                this.hb(false);
                break;
            case "IsInverted":
                if (this.lk != null) {
                    this.lk.ci = true;
                    this.lk.hb(false);
                }
                break;
        }
    };
    NumericRadiusAxis.prototype.l5 = function (a) {
        this.lk = a;
    };
    Object.defineProperty(NumericRadiusAxis.prototype, "lk", {
        get: function () {
            if (this.lj != null) {
                return this.lj;
            }
            var a = typeCast(XamDataChart.$, this.bh);
            if (a != null) {
                for (var b = 0; b < a.axes.count; b++) {
                    if (typeCast(NumericAngleAxis.$, a.axes._inner[b]) !== null || typeCast(CategoryAngleAxis.$, a.axes._inner[b]) !== null) {
                        return a.axes._inner[b];
                    }
                }
            }
            return this.lj;
        },
        set: function (a) {
            this.lj = a;
        },
        enumerable: true,
        configurable: true
    });
    NumericRadiusAxis.prototype.ai = function () {
        return this.lk;
    };
    NumericRadiusAxis.prototype.jo = function () {
        return new PolarAxisRenderingParameters();
    };
    NumericRadiusAxis.prototype.jn = function (a, b, c, d) {
        var e = typeCast(PolarAxisRenderingParameters.$, _super.prototype.jn.call(this, a, b, c, d));
        var f = this.lm.f(b);
        var g = this.lm.g(b);
        var h = 0.5 * this.lq;
        var i = 0.5 * this.lp;
        var j, k;
        if (Rect.l_op_Equality(b, SeriesViewer.m2)) {
            k = this.ka;
            j = this.kb;
        }
        else {
            k = Math.min(g, h);
            j = this.ly(f);
            k = this.ly(k);
            var l = this.l6(a, b, j, k);
            j = l.p2;
            k = l.p3;
        }
        var m = { $type: Point_$type, x: 0.5, y: 0.5 };
        var n = f;
        var o = g;
        var p = Math.min(a.width, a.height) * (this.lq - this.lp) / 2;
        e.center = m;
        var q = Math.max(o, n);
        var r = Math.min(n, o);
        e.maxLength = q;
        e.minLength = r;
        var s = Math.min(j, k);
        var t = Math.max(j, k);
        if (s < this.kb) {
            s = this.kb;
        }
        if (t > this.ka) {
            t = this.ka;
        }
        this.ke = s;
        this.kd = t;
        e.k.add(((function () {
            var $ret = new RangeInfo();
            $ret.d = s;
            $ret.c = t;
            $ret.b = p;
            return $ret;
        })()));
        var u = typeCast(IAngleScaler_$type, this.lk);
        if (u != null) {
            var v = void 0;
            var w = void 0;
            var x = u.getMinMaxAngle(b, v, w);
            v = x.p1;
            w = x.p2;
            e.minAngle = Math.min(v, w);
            e.maxAngle = Math.max(v, w);
        }
        var y = this.lv();
        if (o >= h) {
            o = y;
        }
        if (n < i) {
            n = i;
        }
        e.minLength = n;
        e.maxLength = o;
        e.effectiveMaximum = y;
        e.f = this.jr;
        var z = typeCast(LinearTickmarkValues.$, e.f);
        if (z != null) {
            z.y = this.l1(m, e.minLength, e.maxLength, b, a);
        }
        return e;
    };
    NumericRadiusAxis.prototype.l6 = function (a, b, c, d) {
        var e = { $type: Point_$type, x: 0.5, y: 0.5 };
        var f = 0;
        if (this.ca) {
            f = this.lw(this.kb);
        }
        else {
            f = this.lw(this.ka);
        }
        var g = 0;
        if (this.e4 != null) {
            g = this.ls;
        }
        var h = e.x + f * Math.cos(g);
        var i = e.y + f * Math.sin(g);
        e.x = ViewportUtils.c(e.x, b, a);
        e.y = ViewportUtils.f(e.y, b, a);
        h = ViewportUtils.c(h, b, a);
        i = ViewportUtils.f(i, b, a);
        if (h >= a.left && h <= a.right && i >= a.top && i <= a.bottom) {
            if (this.ca) {
                d = this.kb;
            }
            else {
                d = this.ka;
            }
        }
        if (e.x >= a.left && e.x <= a.right && e.y >= a.top && e.y <= a.bottom) {
            if (this.ca) {
                c = this.ka;
            }
            else {
                c = this.kb;
            }
        }
        return {
            p2: c,
            p3: d
        };
    };
    NumericRadiusAxis.prototype.l1 = function (a, b, c, d, e) {
        var f = ViewportUtils.d(c - b, d, e);
        var g = f / Math.min(e.width, e.height);
        if (g > 0.7) {
            return 10;
        }
        return 5;
    };
    NumericRadiusAxis.prototype.lv = function () {
        var a = 0;
        if (!this.ca) {
            a = this.lw(this.ka);
        }
        else {
            a = this.lw(this.kb);
        }
        return a;
    };
    NumericRadiusAxis.prototype.k9 = function (a) {
        if (this.lk != null) {
            this.lk.ha();
        }
    };
    NumericRadiusAxis.prototype.hc = function (a) {
        _super.prototype.hc.call(this, a);
        var b = this.bh != null ? this.bh.mr : Rect.empty;
        var c = !b.isEmpty ? this.i8 : Rect.empty;
        var d = this.i3();
        var e = this.i2();
        var f = this.jm.c(a, c, b, d, e);
        if (f != null) {
            this.j9 = f.f.m;
            this.kc = f.f.l;
        }
    };
    NumericRadiusAxis.prototype.hm = function (a, b) {
        _super.prototype.hm.call(this, a, b);
        if (b.height != a.height || b.width != a.width) {
            this.cn();
        }
    };
    NumericRadiusAxis.prototype.l4 = function (a, b, c, d, e) {
        var f = typeCast(IPolarRadialRenderingParameters_$type, this.jn(b, c, d, e));
        if (f == null) {
            return;
        }
        this.lm.j(a.d, f.minLength, f.maxLength, b, c, f.center, f.minAngle, f.maxAngle);
    };
    NumericRadiusAxis.prototype.get_a0 = function () {
        return 3;
    };
    Object.defineProperty(NumericRadiusAxis.prototype, "a0", {
        get: function () {
            return this.get_a0();
        },
        enumerable: true,
        configurable: true
    });
    NumericRadiusAxis.prototype.i0 = function (a, b, c, d, e) {
        if (d === void 0) {
            d = null;
        }
        if (e === void 0) {
            e = null;
        }
        var f = typeCast(PolarAxisRenderingParameters.$, this.jn(c, b, d, e));
        var g = a;
        var h = new PathGeometry();
        var i = ViewportUtils.d(g, b, c);
        var j = ViewportUtils.g(g, b, c);
        if (i <= 0 || j <= 0) {
            return null;
        }
        var k = ViewportUtils.c(f.center.x, b, c);
        var l = ViewportUtils.f(f.center.y, b, c);
        if (f.maxAngle - f.minAngle < Math.PI && f.maxAngle - f.minAngle > 0) {
            var m = { $type: Point_$type, x: ViewportUtils.c(f.center.x + g * Math.cos(f.minAngle), b, c), y: ViewportUtils.f(f.center.y + g * Math.sin(f.minAngle), b, c) };
            var n_1 = { $type: Point_$type, x: ViewportUtils.c(f.center.x + g * Math.cos(f.maxAngle), b, c), y: ViewportUtils.f(f.center.y + g * Math.sin(f.maxAngle), b, c) };
            var o = new PathFigure();
            o._startPoint = m;
            o._isClosed = false;
            o._segments.add(((function () {
                var $ret = new ArcSegment();
                $ret.b = false;
                $ret.e = n_1;
                $ret.f = new Size(1, i, j);
                $ret.d = 1;
                return $ret;
            })()));
            h.c.add(o);
        }
        else {
            var p = new PathFigure();
            p._startPoint = { $type: Point_$type, x: k, y: l - j };
            p._isClosed = true;
            p._segments.add(((function () {
                var $ret = new ArcSegment();
                $ret.b = false;
                $ret.e = { $type: Point_$type, x: k, y: l + j };
                $ret.f = new Size(1, i, j);
                $ret.d = 1;
                return $ret;
            })()));
            p._segments.add(((function () {
                var $ret = new ArcSegment();
                $ret.b = false;
                $ret.e = { $type: Point_$type, x: k, y: l - j };
                $ret.f = new Size(1, i, j);
                $ret.d = 1;
                return $ret;
            })()));
            h.c.add(p);
        }
        return h;
    };
    NumericRadiusAxis.$t = markType(NumericRadiusAxis, 'NumericRadiusAxis', NumericAxisBase.$);
    NumericRadiusAxis.$$p = markDep(DependencyProperty, PropertyMetadata, NumericRadiusAxis, 'g5', ['InnerRadiusExtentScale:lz:l7', [1, 0], 'RadiusExtentScale:l0:l8', [1, 0.75]]);
    return NumericRadiusAxis;
}(NumericAxisBase));
export { NumericRadiusAxis };
/**
 * @hidden
 */
var AngleAxisLabelPanelView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(AngleAxisLabelPanelView, _super);
    function AngleAxisLabelPanelView(a) {
        var _this = _super.call(this, a) || this;
        _this.ax = null;
        _this.ax = a;
        return _this;
    }
    AngleAxisLabelPanelView.prototype.am = function () {
        _super.prototype.am.call(this);
        this.ax.ct = true;
    };
    AngleAxisLabelPanelView.prototype.ay = function (a, b) {
        this.ax.cx = -1.7976931348623157E+308;
        this.ax.cu = -1.7976931348623157E+308;
        this.ax.cw = -1.7976931348623157E+308;
        this.ax.cv = -1.7976931348623157E+308;
        for (var c = 0; c < this.a.a3.count; c++) {
            var d = this.a.a3._inner[c];
            var e = this.a.a2._inner[c];
            var f = e.a;
            var g = this.ax.cz(e.c);
            var h = this.m(d);
            var i = this.l(d);
            var j = h + this.p() + this.q();
            var k = i + this.r() + this.o();
            var l = g.x - j / 2;
            var m = g.y - k / 2;
            this.ax.cw = Math.max(h, this.ax.cw);
            this.ax.cv = Math.max(i, this.ax.cv);
            this.ax.cx = Math.max(j, this.ax.cx);
            this.ax.cu = Math.max(k, this.ax.cu);
            var n = new Rect(0, l, m, j, k);
            a.add(n);
            b.add(f);
        }
    };
    AngleAxisLabelPanelView.prototype.o = function () {
        return 0;
    };
    AngleAxisLabelPanelView.prototype.p = function () {
        return 0;
    };
    AngleAxisLabelPanelView.prototype.q = function () {
        return 0;
    };
    AngleAxisLabelPanelView.prototype.r = function () {
        return 0;
    };
    AngleAxisLabelPanelView.$t = markType(AngleAxisLabelPanelView, 'AngleAxisLabelPanelView', AxisLabelPanelBaseView.$);
    return AngleAxisLabelPanelView;
}(AxisLabelPanelBaseView));
export { AngleAxisLabelPanelView };
/**
 * @hidden
 */
var CategoryAngleAxisView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(CategoryAngleAxisView, _super);
    function CategoryAngleAxisView(a) {
        var _this = _super.call(this, a) || this;
        _this.bg = null;
        _this.bg = a;
        return _this;
    }
    CategoryAngleAxisView.$t = markType(CategoryAngleAxisView, 'CategoryAngleAxisView', CategoryAxisBaseView.$);
    return CategoryAngleAxisView;
}(CategoryAxisBaseView));
export { CategoryAngleAxisView };
/**
 * @hidden
 */
var NumericAngleAxisView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(NumericAngleAxisView, _super);
    function NumericAngleAxisView(a) {
        var _this = _super.call(this, a) || this;
        _this.bg = null;
        _this.bg = a;
        return _this;
    }
    NumericAngleAxisView.$t = markType(NumericAngleAxisView, 'NumericAngleAxisView', NumericAxisBaseView.$);
    return NumericAngleAxisView;
}(NumericAxisBaseView));
export { NumericAngleAxisView };
/**
 * @hidden
 */
var NumericRadiusAxisView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(NumericRadiusAxisView, _super);
    function NumericRadiusAxisView(a) {
        var _this = _super.call(this, a) || this;
        _this.bg = null;
        _this.bg = a;
        return _this;
    }
    NumericRadiusAxisView.$t = markType(NumericRadiusAxisView, 'NumericRadiusAxisView', NumericAxisBaseView.$);
    return NumericRadiusAxisView;
}(NumericAxisBaseView));
export { NumericRadiusAxisView };
//# sourceMappingURL=AngleAxisLabelPanel_combined.js.map
