import { CategorySeries } from "./CategorySeries";
import { IIsCategoryBased } from "./IIsCategoryBased";
import { IHasSingleValueCategory } from "./IHasSingleValueCategory";
import { IHasCategoryTrendline } from "./IHasCategoryTrendline";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { IAnchoredCategorySeriesInteractionManager } from "./IAnchoredCategorySeriesInteractionManager";
import { Type, Point } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { CategoryMode } from "./CategoryMode";
import { ICategoryScaler } from "./ICategoryScaler";
import { IScaler } from "./IScaler";
import { IBucketizer } from "./IBucketizer";
import { CategorySeriesView } from "./CategorySeriesView";
import { IPreparesCategoryTrendline } from "./IPreparesCategoryTrendline";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { ConsolidatedItemHitTestBehavior } from "./ConsolidatedItemHitTestBehavior";
import { SeriesView } from "./SeriesView";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { List$1 } from "igniteui-react-core";
import { ITrendLineManager } from "./ITrendLineManager";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { AxisRange } from "./AxisRange";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { PointCollection } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { IDetectsCollisions } from "./IDetectsCollisions";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class AnchoredCategorySeries extends CategorySeries implements IIsCategoryBased, IHasSingleValueCategory, IHasCategoryTrendline, ITrendLineSeries {
    static $t: Type;
    private o6;
    readonly o7: IAnchoredCategorySeriesInteractionManager;
    o2: AnchoredCategorySeriesView;
    getHostReferenceValue(): number;
    protected bf(): SeriesView;
    iv(a: SeriesView): void;
    pa: boolean;
    constructor();
    ph: string;
    fs(a: any, b: string): any;
    valueColumn: IFastItemColumn$1<number>;
    private o8;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    pz: Brush;
    static readonly po: DependencyProperty;
    trendLineThickness: number;
    p1: PenLineCap;
    p0: DoubleCollection;
    trendLinePeriod: number;
    pc: number;
    c9(a: any): boolean;
    protected oz(a: number, b: number, c: Axis): any[];
    protected i0(a: any, b: string, c: any, d: any): void;
    an(a: Axis): AxisRange;
    protected hz(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected oa(): number;
    pb(a: CategorySeriesView): number;
    pm(a: PointCollection, b: number, c: CategorySeriesView): void;
    o0(a: List$1<number[]>, b: number, c: Rect, d: Rect): Clipper;
    o1(a: List$1<number[]>, b: number, c: Rect, d: Rect, e: boolean): Clipper;
    dw(a: Rect, b: Rect, c: SeriesView): boolean;
    hw(a: boolean, b: SeriesView): void;
    op(a: CategoryFrame, b: CategorySeriesView): void;
    os(a: CategoryFrame, b: CategorySeriesView): void;
    o3: CategoryFrame;
    jd(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    pj(a: CategoryFrame, b: CategorySeriesView): void;
    protected jp(): void;
    fv(a: any, b: Point): any;
    readonly currentCategoryMode: CategoryMode;
    readonly scaler: ICategoryScaler;
    readonly yScaler: IScaler;
    readonly bucketizer: IBucketizer;
    readonly currentMode2Index: number;
    provideCollisionDetector(): IDetectsCollisions;
    readonly trendlinePreparer: IPreparesCategoryTrendline;
    protected pd: string;
    abstract pk(a: Axis): void;
    abstract pl(a: Axis): void;
    protected h5(a: any): void;
    o4: CategorySeriesMarkerCollisionAvoidance;
    fp(a: Point): any;
    o5: ConsolidatedItemHitTestBehavior;
    readonly mayContainUnknowns: boolean;
    eh(): number;
    ao(): AxisRange;
    private pn;
    readonly useHighMarkerFidelity: boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AnchoredCategoryBucketCalculator extends CategoryBucketCalculator {
    static $t: Type;
    constructor(a: AnchoredCategorySeriesView);
    protected i: AnchoredCategorySeriesView;
    getBucketWithoutUnknowns(a: number): number[];
    getBucket(a: number): number[];
    private h;
    private j;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare class AnchoredCategorySeriesView extends CategorySeriesView {
    static $t: Type;
    cw: AnchoredCategorySeries;
    constructor(a: AnchoredCategorySeries);
    private cx;
    cy: ITrendLineManager;
    readonly cz: boolean;
    c3(): void;
    c1(): void;
    c0(): void;
    co(): CategoryBucketCalculator;
    c2(): void;
    c4(): void;
    c5(a: number): Rect;
    protected a2(a: RenderingContext, b: boolean): void;
    getDefaultTooltipTemplate(): string;
}
