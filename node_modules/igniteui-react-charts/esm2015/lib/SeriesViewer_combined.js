/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Control } from "igniteui-react-core";
import { INotifyPropertyChanged_$type, Type, Base, EventArgs, PropertyChangedEventArgs, IEnumerable_$type, callStaticConstructors, Point_$type, delegateCombine, runOn, delegateRemove, fromEnum, fromEn, typeCast, Boolean_$type, Number_$type, typeGetValue, enumGetBox, toEnum, String_$type, markType, markDep, PointUtil, TypeRegistrar, Delegate_$type, Array_$type } from "igniteui-react-core";
import { ILegendOwner_$type } from "igniteui-react-core";
import { IInternalLegendOwner_$type } from "igniteui-react-core";
import { SRProvider } from "igniteui-react-core";
import { DVContainer } from "igniteui-react-core";
import { DoubleAnimator } from "igniteui-react-core";
import { IChartLegend_$type } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { DependencyObject } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { ChartHitTestMode_$type } from "./ChartHitTestMode";
import { InteractionState_$type } from "igniteui-react-core";
import { WindowResponse_$type } from "./WindowResponse";
import { Visibility_$type } from "igniteui-react-core";
import { SeriesViewerComponentsFromView } from "./SeriesViewerComponentsFromView";
import { Brush } from "igniteui-react-core";
import { ModifierKeys_$type } from "igniteui-react-core";
import { DataTemplate } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { CanvasRenderScheduler } from "igniteui-react-core";
import { SyncSettings } from "./SyncSettings";
import { PropertyMetadata } from "igniteui-react-core";
import { SeriesViewerComponentsForView } from "./SeriesViewerComponentsForView";
import { Dictionary$2 } from "igniteui-react-core";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { NotifyCollectionChangedEventArgs } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { FrameworkElement } from "igniteui-react-core";
import { MouseEventArgs } from "igniteui-react-core";
import { MouseButtonEventArgs } from "igniteui-react-core";
import { RectChangedEventArgs } from "igniteui-react-core";
import { MathUtil } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { RefreshCompletedEventArgs } from "./RefreshCompletedEventArgs";
import { Thickness } from "igniteui-react-core";
import { AxisTitlePosition_$type } from "./AxisTitlePosition";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { CoercionInfo } from "./CoercionInfo";
import { Tuple$2 } from "igniteui-react-core";
import { FastItemsSource } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
import { ChartContentType_$type } from "./ChartContentType";
import { defaultDVDateParse, dateNow } from "igniteui-react-core";
import { isNaN_, isInfinity, logBase, log10, truncate } from "igniteui-react-core";
import { stringIsNullOrEmpty, stringEmpty } from "igniteui-react-core";
import { ISchedulableRender_$type } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { Line } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { ITileZoomTile_$type } from "./ITileZoomTile";
import { RenderSurface } from "./RenderSurface";
import { PathFigureCollection } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { LineSegment } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { GeometryGroup } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { LabelPanelsArrangeState } from "./LabelPanelsArrangeState";
import { MarkerTemplates } from "./MarkerTemplates";
import { DataTemplateRenderInfo } from "igniteui-react-core";
import { DataTemplateMeasureInfo } from "igniteui-react-core";
import { AxisLabelsLocation_$type } from "./AxisLabelsLocation";
import { IProvidesViewport_$type } from "./IProvidesViewport";
import { ArgumentNullException } from "igniteui-react-core";
import { DomWrapper_$type } from "igniteui-react-core";
import { PointerTooltipStyle } from "./PointerTooltipStyle";
import { CanvasViewRenderer } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { DefaultPaletteInfo } from "./DefaultPaletteInfo";
import { CssGradientUtil } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { LinearNumericSnapper } from "./LinearNumericSnapper";
import { AxisAnnotationCollection } from "./AxisAnnotationCollection";
import { VerticalAlignment_$type } from "igniteui-react-core";
import { Canvas } from "igniteui-react-core";
import { IFastItemsSourceProvider_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { LabelPosition } from "./LabelPosition";
import { BindingFormatter } from "igniteui-react-core";
import { LabelFontHeuristics } from "./LabelFontHeuristics";
import { Pool$1 } from "igniteui-react-core";
import { AxisComponentsFromView } from "./AxisComponentsFromView";
import { FastReflectionHelper } from "igniteui-react-core";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { RectangleGeometry } from "igniteui-react-core";
import { PathRenderingInfo } from "./PathRenderingInfo";
import { LineGeometry } from "igniteui-react-core";
import { BrushUtilCore } from "igniteui-react-core";
import { RenderRequestedEventArgs } from "./RenderRequestedEventArgs";
import { ScalerParams } from "./ScalerParams";
import { CategoryMode_$type } from "./CategoryMode";
import { GridMode_$type } from "./GridMode";
import { Panel } from "igniteui-react-core";
import { RectUtil } from "igniteui-react-core";
import { TickmarkValues } from "./TickmarkValues";
import { RotateTransform } from "igniteui-react-core";
import { TransformGroup } from "igniteui-react-core";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { AngleSimplifier } from "igniteui-react-core";
import { TranslateTransform } from "igniteui-react-core";
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { LogarithmicTickmarkValues } from "./LogarithmicTickmarkValues";
import { LinearTickmarkValues } from "./LinearTickmarkValues";
import { TickmarkValuesInitializationParameters } from "./TickmarkValuesInitializationParameters";
import { CategoryAxisRenderingParameters } from "./CategoryAxisRenderingParameters";
import { NumberAbbreviatorFactory } from "./NumberAbbreviatorFactory";
import { HighlightingState } from "./HighlightingState";
import { Marker } from "./Marker";
import { ContentControl } from "igniteui-react-core";
import { ILegendSeries_$type } from "igniteui-react-core";
import { ILegendTemplateProvider_$type } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { TransitionInSpeedType_$type } from "./TransitionInSpeedType";
import { SeriesHitTestMode_$type } from "./SeriesHitTestMode";
import { Binding } from "igniteui-react-core";
import { SeriesComponentsForView } from "./SeriesComponentsForView";
import { SeriesComponentsFromView } from "./SeriesComponentsFromView";
import { MarkerType_$type } from "./MarkerType";
import { Style } from "igniteui-react-core";
import { FastItemsSourceReference } from "igniteui-react-core";
import { stringFormat } from "igniteui-react-core";
import { EasingFunctions } from "igniteui-react-core";
import { DataTemplatePassInfo } from "igniteui-react-core";
/**
 * @hidden
 */
export let SeriesViewer = /*@__PURE__*/ (() => {
    class SeriesViewer extends Control {
        constructor() {
            super();
            this._widget = null;
            this.bn = null;
            this.by = null;
            this.a0 = null;
            this.bh = null;
            this.a3 = new SeriesCollection();
            this._skipDataCleanup = false;
            this.bo = null;
            this.al = null;
            this.mi = null;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.seriesCursorMouseMove = null;
            this.seriesMouseLeftButtonDown = null;
            this.seriesMouseLeftButtonUp = null;
            this.seriesMouseMove = null;
            this.seriesMouseEnter = null;
            this.seriesMouseLeave = null;
            this.mq = Rect.empty;
            this.mo = Rect.empty;
            this.b1 = true;
            this.mn = null;
            this.cb = false;
            this.ez = 30;
            this.a5 = new SeriesViewerComponentsForView();
            this.an = 0;
            this.am = 1;
            this.seriesAnimating = null;
            this.b3 = false;
            this.bf = 0;
            this.b7 = false;
            this.ch = false;
            this.b2 = false;
            this.g1 = null;
            this.b8 = false;
            this.windowRectChanged = null;
            this.sizeChanged = null;
            this.cn = false;
            this.actualWindowRectChanged = null;
            this.gridAreaRectChanged = null;
            this.cj = false;
            this._syncChannel = null;
            this.a7 = null;
            this.cm = false;
            this.di = false;
            this.e1 = 0;
            this.b9 = false;
            this.dg = false;
            this.mp = Rect.empty;
            this.dn = new Date();
            this.dk = false;
            this.refreshCompleted = null;
            this.fc = null;
            this.fb = null;
            this.l4 = null;
            this.l3 = null;
            this.d7 = NaN;
            this.d5 = NaN;
            this.d6 = NaN;
            this.d4 = NaN;
            this.d3 = NaN;
            this.d1 = NaN;
            this.d2 = NaN;
            this.d0 = NaN;
            this.e9 = null;
            this.ah = null;
            this.ai = null;
            this.ag = null;
            this.b6 = false;
            this.b0 = false;
            this._syncSettings = null;
            this.destroyed = false;
            this.e7 = null;
            this.dl = new Dictionary$2(String_$type, Base.$, 0);
            this.c6 = false;
            this.d8 = NaN;
            this.dx = NaN;
            this.dz = NaN;
            this.dv = NaN;
            this.du = 20;
            this.dt = NaN;
            this.b4 = true;
            this.dy = NaN;
            this.dw = NaN;
            this.fa = null;
            this.dq = 1;
            this.dp = NaN;
            this.mm = null;
            this.dr = 0;
            this.ds = 0;
            this.ky = null;
            this.ar = null;
            this.cq = false;
            this.cr = false;
            this.co = false;
            this.b5 = false;
            this.e0 = 0;
            this.cf = false;
            this.ct = false;
            this.seriesDataUpdated = null;
            DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
            DVContainer.instance.registerIfLoaded("InteractivityFactoryManager");
            DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
            this.mm = Rect.empty;
            this.mi = { $type: Point_$type, x: NaN, y: NaN };
            this.dn = dateNow();
            this.cq = false;
            this.cr = false;
            this.ah = new CanvasRenderScheduler();
            this.ai = new CanvasRenderScheduler();
            this.ag = new CanvasRenderScheduler();
            SeriesViewer.m2 = new Rect(0, 0, 0, 1, 1);
            this.syncSettings = ((() => {
                let $ret = new SyncSettings();
                $ret.synchronizeHorizontally = true;
                $ret.synchronizeVertically = true;
                return $ret;
            })());
            this.bn = this.bm();
            this.i2(this.bn);
            this.bn.cy();
            this.kc();
            this.hr();
            this.actualSyncLink = new SyncLink();
            this.kj(null, this.actualSyncLink);
            this.al = new ChartContentManager(this);
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.je(a, b.propertyName, b.oldValue, b.newValue));
            let a = this.series;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.j3));
            let b = this.series;
            b.collectionResetting = delegateCombine(b.collectionResetting, runOn(this, this.j4));
            this.bo = new DoubleAnimator(0, 1, this.e5);
            let c = this.bo;
            c.propertyChanged = delegateCombine(c.propertyChanged, runOn(this, this.hq));
            this.bn.bv();
            this.ht();
            this.hs();
        }
        get widget() {
            return this._widget;
        }
        set widget(a) {
            this._widget = a;
        }
        static staticInit() {
            SeriesViewer.m2 = new Rect(0, 0, 0, 1, 1);
        }
        get bz() {
            if (this.by == null) {
                this.by = new SRProvider(this.bn.i.ae);
            }
            return this.by;
        }
        get a1() {
            if (this.a0 == null) {
                this.a0 = DVContainer.instance.createInstance(ISeriesViewerInteractionManager_$type, () => this.bz.n);
            }
            return this.a0;
        }
        get cv() {
            return DVContainer.instance.checkLoaded("InteractivityFactoryManager");
        }
        hr() {
            if (this.bh != null && this.bi == null) {
                let a = this.bi;
                a.thumbnailSizeChanged = delegateRemove(a.thumbnailSizeChanged, runOn(this, this.ja));
            }
            if (this.bi != null) {
                let b = this.bi;
                b.thumbnailSizeChanged = delegateCombine(b.thumbnailSizeChanged, runOn(this, this.ja));
            }
            if (this.fa != null) {
                this.bi.backgroundImageUri = this.fa;
            }
            if (this.bi != null) {
                this.bi.initializeScalingRatio(this.ea);
            }
            if (this.bh == null && this.bi != null) {
                this.h3();
            }
            this.bh = this.bi;
        }
        ja(a, b) {
            this.bi.surfaceIsDirty = true;
            for (let c of fromEnum(this.series)) {
                c.dl = true;
            }
        }
        hs() {
            this.bn.ci();
            if (this.bi != null) {
                this.bi.initializeScalingRatio(this.ea);
            }
        }
        get series() {
            return this.a3;
        }
        j3(a, b) {
            this.cf = this.cl();
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    c.bn = null;
                    c.bs = null;
                    this.jx(c);
                    this.bn.dr(c);
                }
            }
            if (b.newItems != null) {
                for (let d of fromEn(b.newItems)) {
                    if (!this.bn.ao(d)) {
                        this.kd(d);
                        this.bn.bn(d);
                        d.bs = this;
                        d.bn = this.actualSyncLink;
                        d.js();
                    }
                }
            }
            this.h2();
            this.ih();
        }
        get skipDataCleanup() {
            return this._skipDataCleanup;
        }
        set skipDataCleanup(a) {
            this._skipDataCleanup = a;
        }
        jx(a) {
            if (!this.skipDataCleanup) {
                if (typeCast(Series.$, a) !== null) {
                    a.itemsSource = null;
                }
                else if (typeCast(CategoryAxisBase.$, a) !== null) {
                    a.itemsSource = null;
                }
            }
            this.jz(a.name, true);
        }
        j4(a, b) {
            this.cf = this.cl();
            for (let c of fromEnum(this.series)) {
                c.bn = null;
                c.bs = null;
                this.jx(c);
                this.bn.dr(c);
            }
        }
        hv(a, b, c, d) {
            let e = this.m5;
            let f = e.width;
            let g = e.height;
            let h = f / g;
            let i = a / b;
            if (isNaN_(h)) {
                return {
                    p0: a,
                    p1: b
                };
            }
            if (isNaN_(i) || c || d || Math.abs(h - i) > 0.0001) {
                if (c && d) {
                    if (a > b) {
                        b = a / h;
                    }
                    else {
                        a = b * h;
                    }
                }
                else if (c) {
                    b = a / h;
                }
                else {
                    a = b * h;
                }
            }
            if (b > 1) {
                let j = 1 / b;
                b = 1;
                a = a * j;
            }
            if (a > 1) {
                let k = 1 / a;
                a = 1;
                b = b * k;
            }
            return {
                p0: a,
                p1: b
            };
        }
        cl() {
            return false;
        }
        get cs() {
            return this.a0 != null;
        }
        get az() {
            return this.a1.f$b;
        }
        hq(a, b) {
            this.kf(this.bo.o);
        }
        kf(a) {
            let b = this.az.tick(a);
            if (a == 1 && b && this.bo.r > 0) {
                this.bo.v();
            }
            let c = this.az.dirtySeries;
            for (let d = 0; d < c.count; d++) {
                let e = c._inner[d];
                e.iy();
            }
            if (!b) {
                this.bo.w();
            }
        }
        hp() {
            this.bn.ce();
            this.ho();
            for (let a = 0; a < this.series.count; a++) {
                if (this.series._inner[a].cj) {
                }
            }
        }
        l7(a) {
            return null;
        }
        md(a) {
            return null;
        }
        mb(a) {
            return null;
        }
        mc(a) {
            return null;
        }
        get mj() {
            return this.mi;
        }
        set mj(a) {
            if (PointUtil.notEquals(this.mi, a)) {
                let b = this.mi;
                this.mi = a;
                this.ji("CrosshairPoint", b, this.mi);
            }
        }
        get cu() {
            return this.bg == 1 || this.bg == 2;
        }
        get legend() {
            return this.c(SeriesViewer.lb);
        }
        set legend(a) {
            this.h(SeriesViewer.lb, a);
        }
        get cd() {
            return this.c(SeriesViewer.k0);
        }
        set cd(a) {
            this.h(SeriesViewer.k0, a);
        }
        ji(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        ij() {
            this.ik(this.series);
        }
        ik(a) {
            for (let b of fromEn(a)) {
                let c = b.aw;
                if (c == null) {
                    continue;
                }
                let d = b.jx;
                if (d == null) {
                    continue;
                }
                if (c.containsChild(d)) {
                    c.removeChild(d);
                }
                if (!c.containsChild(d) && b.l0 != 1) {
                    c.addChildInOrder(d, b);
                }
            }
        }
        iu(a, b, c) {
            this.jn(a, b, typeCast(MouseEventArgs.$, c));
        }
        iy(a, b, c) {
            this.jr(a, b, typeCast(MouseEventArgs.$, c));
        }
        iv(a, b, c) {
            this.jo(a, b, typeCast(MouseEventArgs.$, c));
        }
        iw(a, b, c) {
            this.jp(a, b, typeCast(MouseButtonEventArgs.$, c));
        }
        ix(a, b, c) {
            let d = typeCast(MouseButtonEventArgs.$, c);
            if (d != null) {
                this.jq(a, b, typeCast(MouseButtonEventArgs.$, c));
            }
        }
        iz(a, b, c) {
        }
        i0(a, b, c) {
        }
        jl(a, b) {
            if (this.seriesCursorMouseMove != null && this.ch) {
                this.seriesCursorMouseMove(this, new ChartCursorEventArgs(this, a, b));
            }
        }
        jp(a, b, c) {
            if (this.seriesMouseLeftButtonDown != null) {
                this.seriesMouseLeftButtonDown(this, new DataChartMouseButtonEventArgs(this, a, b, c));
            }
        }
        jq(a, b, c) {
            if (this.seriesMouseLeftButtonUp != null) {
                this.seriesMouseLeftButtonUp(this, new DataChartMouseButtonEventArgs(this, a, b, c));
            }
        }
        jr(a, b, c) {
            if (this.seriesMouseMove != null) {
                this.seriesMouseMove(this, new ChartMouseEventArgs(this, a, b, c));
            }
        }
        jn(a, b, c) {
            if (this.seriesMouseEnter != null) {
                this.seriesMouseEnter(this, new ChartMouseEventArgs(this, a, b, c));
            }
        }
        jo(a, b, c) {
            if (this.seriesMouseLeave != null) {
                this.seriesMouseLeave(this, new ChartMouseEventArgs(this, a, b, c));
            }
        }
        get_m5() {
            return this.mq;
        }
        get m5() {
            return this.get_m5();
        }
        get mv() {
            return this.mo;
        }
        set mv(a) {
            this.mo = a;
        }
        m0(a, b, c) {
            let d = c;
            let e = b;
            let f = (d.left - e.left) / e.width;
            let g = (d.top - e.top) / e.height;
            let h = (d.right - e.left) / e.width;
            let i = (d.bottom - e.top) / e.height;
            f = a.left + f * a.width;
            g = a.top + g * a.height;
            h = a.left + h * a.width;
            i = a.top + i * a.height;
            return new Rect(0, f, g, h - f, i - g);
        }
        get_mu() {
            if (this.b1) {
                this.b1 = false;
                let a = this.my(this.m5, this.mv, this.mr);
                this.mn = a;
            }
            return this.mn;
        }
        get mu() {
            return this.get_mu();
        }
        my(a, b, c) {
            let d = b;
            let e = c;
            let f = a;
            if (f.isEmpty) {
                return Rect.empty;
            }
            if (d.isEmpty) {
                return a;
            }
            let g = (d.left - f.left) / f.width;
            let h = (d.right - f.left) / f.width;
            let i = (d.top - f.top) / f.height;
            let j = (d.bottom - f.top) / f.height;
            g = f.left + (g - e.left) / e.width * f.width;
            h = f.left + (h - e.left) / e.width * f.width;
            i = f.top + (i - e.top) / e.height * f.height;
            j = f.top + (j - e.top) / e.height * f.height;
            let k = new Rect(0, g, i, h - g, j - i);
            k.intersect(f);
            return k;
        }
        mt(a) {
            this.b1 = true;
            return Rect.empty;
        }
        mz() {
            return this.m5;
        }
        kb(a) {
            a.i8 = this.m5;
        }
        get e2() {
            return this.ez;
        }
        set e2(a) {
            this.ez = a;
        }
        jd(a, b) {
            if (!b.isEmpty) {
                this.mq = b;
                this.mo = this.mt(this.mq);
                this.bn.ej(this.mq);
            }
            if (this.cl()) {
                if (this.actualSyncLink != null) {
                    this.km(this.mr, false);
                }
            }
            this.it(a, b);
        }
        a6() {
            return this.a5;
        }
        get ap() {
            return this.an;
        }
        set ap(a) {
            let b = this.an;
            this.an = a;
            if (b != this.an) {
                this.ji("ContentHitTestMode", enumGetBox(ChartHitTestMode_$type, b), enumGetBox(ChartHitTestMode_$type, this.an));
            }
        }
        jt() {
            this.ao = this.aq();
        }
        aq() {
            if (!this.cv) {
                return 1;
            }
            return this.a1.f$a(this);
        }
        get ao() {
            return this.am;
        }
        set ao(a) {
            let b = this.am;
            this.am = a;
            if (b != this.am) {
                this.ji("ActualContentHitTestMode", enumGetBox(ChartHitTestMode_$type, b), enumGetBox(ChartHitTestMode_$type, this.am));
            }
        }
        jk(a) {
            if (this.seriesAnimating != null) {
                this.seriesAnimating(a);
            }
        }
        c2() {
            return this.c3() || this.c4();
        }
        onDetachedFromUI() {
            this.bn.cw();
            SyncManager.e(this);
        }
        onAttachedToUI() {
            this.bn.cq();
            SyncManager.c(this);
        }
        get bg() {
            return this.bf;
        }
        set bg(a) {
            if (this.bg != a) {
                this.bf = a;
                if (this.cv) {
                    this.a1.f$ae(this);
                }
            }
        }
        im(a) {
            this.hg(this.ml(a));
        }
        io(a) {
            this.hg({ $type: Point_$type, x: NaN, y: NaN });
        }
        c9(a, b) {
            return this.a1.f$e(this, a, b);
        }
        ib(a) {
            this.a1.f$n(this, a);
        }
        c8(a) {
            return this.a1.f$d(this, a);
        }
        get ce() {
            return this.b2;
        }
        set ce(a) {
            this.b2 = a;
        }
        get_cw() {
            return this.cf || this.dh();
        }
        get cw() {
            return this.get_cw();
        }
        id(a) {
            this.a1.f$p(this, a);
        }
        get ck() {
            return this.b2;
        }
        is(a) {
            this.a1.f$ac(this, a);
        }
        ie(a, b) {
            this.a1.f$q(this, a, b);
        }
        ic(a) {
            this.a1.f$o(this, a);
        }
        get da() {
            return this.b7;
        }
        set da(a) {
            this.b7 = a;
        }
        i8() {
            this.a1.f$aj(this);
        }
        ir(a) {
            this.a1.f$ab(this, a);
        }
        i9(a, b, c, d) {
            this.a1.f$ak(this, a, b, c, d);
        }
        iq(a) {
            this.a1.f$aa(this, a);
        }
        i5(a, b, c, d) {
            this.a1.f$ag(this, a, b, c, d);
        }
        il(a) {
            this.a1.f$x(this, a);
        }
        ip(a) {
            this.a1.f$z(this, a);
        }
        ig(a) {
            this.a1.f$r(this, a);
        }
        i4(a, b, c, d) {
            this.a1.f$af(this, a, b, c, d);
        }
        ii(a) {
            this.bn.ec(a.height);
        }
        ho() {
            if (this.b2) {
                this.hg({ $type: Point_$type, x: NaN, y: NaN });
                this.bn.cb();
            }
            this.b2 = false;
        }
        h8(a, b) {
            this.a1.f$m(this, a, b);
        }
        bd(a) {
            let b = this.bn.j != null && this.bn.j.ai ? this.be : this.bc;
            if (b != 3) {
                return b;
            }
            return this.bn.k(a);
        }
        i7() {
            this.a1.f$ai(this);
        }
        i6() {
            this.a1.f$ah(this);
        }
        j8() {
            this.a1.f$am(this);
        }
        hk() {
            this.a1.f$j(this);
        }
        hf() {
            this.he();
        }
        he() {
            if (this.cv) {
                this.a1.f$g(this);
            }
        }
        jb() {
        }
        jw() {
        }
        ju() {
            for (let a = 0; a < this.series.count; a++) {
                this.series._inner[a].je(false);
            }
            this.hn(false, false);
        }
        h7(a, b) {
            this.a1.f$l(this, a, b);
        }
        get df() {
            return this.b8;
        }
        set df(a) {
            this.b8 = a;
        }
        h6(a, b) {
            this.a1.f$k(this, a, b);
        }
        kk(a, b) {
            if (b.propertyName == SyncSettings.$$p[0]) {
                SyncManager.b(this, b.oldValue, b.newValue);
            }
        }
        kj(a, b) {
            if (a != null) {
                a.ab.remove(this);
                a.propertyUpdated = delegateRemove(a.propertyUpdated, this.propertyUpdated);
            }
            if (b != null) {
                b.ab.add(this);
                b.propertyUpdated = delegateCombine(b.propertyUpdated, this.propertyUpdated);
            }
            for (let c of fromEnum(this.series)) {
                c.bn = this.actualSyncLink;
                c.bs = this;
            }
        }
        hg(a) {
            this.actualSyncLink.ak(this, a);
        }
        km(a, b) {
            this.kn(a, b, !b);
        }
        kn(a, b, c) {
            if (!b) {
                this.actualSyncLink.ap(this, a, c);
            }
            else {
                if (!this.c3() && !this.c4()) {
                    return;
                }
                let d = !a.isEmpty && !isNaN_(a.x) && !isNaN_(a.y) && !isNaN_(a.width) && !isNaN_(a.height);
                let e = a;
                if (d && !this.c3()) {
                    e = new Rect(0, 0, a.y, 1, a.height);
                }
                if (d && !this.c4()) {
                    e = new Rect(0, a.x, 0, a.width, 1);
                }
                this.actualSyncLink.ao(this, e);
            }
        }
        jc(a, b) {
            if (!b) {
                this.actualSyncLink.al(this, a);
            }
            else {
                if (!this.c3() && !this.c4()) {
                    return;
                }
                let c = !a.isEmpty && !isNaN_(a.x) && !isNaN_(a.y) && !isNaN_(a.width) && !isNaN_(a.height);
                let d = a;
                if (c && !this.c3()) {
                    d = new Rect(0, 0, a.y, 1, a.height);
                }
                if (c && !this.c4()) {
                    d = new Rect(0, a.x, 0, a.width, 1);
                }
                this.actualSyncLink.al(this, d);
            }
        }
        get c0() {
            return this.actualSyncLink != null;
        }
        *_dm() {
            if (this.actualSyncLink == null) {
                return undefined;
            }
            for (let a of fromEnum(this.actualSyncLink.ag)) {
                yield a;
            }
        }
        dm() {
            return toEnum(() => this._dm());
        }
        ml(a) {
            let b = this.m5;
            let c = this.mr.left + this.mr.width * a.x / b.width;
            let d = this.mr.top + this.mr.height * a.y / b.height;
            return { $type: Point_$type, x: c, y: d };
        }
        m4(a) {
            let b = this.m5;
            let c = this.mr.left + this.mr.width * a.left / b.width;
            let d = this.mr.top + this.mr.height * a.top / b.height;
            let e = this.mr.left + this.mr.width * a.right / b.width;
            let f = this.mr.top + this.mr.height * a.bottom / b.height;
            return new Rect(0, c, d, e - c, f - d);
        }
        js(a, b) {
            if (this.windowRectChanged != null && Rect.l_op_Inequality(a, b)) {
                this.windowRectChanged(this, new RectChangedEventArgs(a, b));
            }
        }
        i3(a, b) {
            this.js(a, b);
        }
        i1(a, b) {
            if (this.sizeChanged != null && Size.l_op_Inequality(a, b)) {
                this.sizeChanged(this, new RectChangedEventArgs(new Rect(1, 0, 0, a), new Rect(1, 0, 0, b)));
            }
        }
        dc(a, b) {
            if (a.width != b.width || a.height != b.height || a.x != b.x || a.y != b.y) {
                return true;
            }
            return false;
        }
        jg(a, b) {
            if (this.actualWindowRectChanged != null && this.dc(a, b)) {
                this.actualWindowRectChanged(this, new RectChangedEventArgs(a, b));
            }
        }
        j2() {
            this.bn.dv();
        }
        jh(a, b) {
            if (this.gridAreaRectChanged != null && Rect.l_op_Inequality(a, b)) {
                this.gridAreaRectChanged(this, new RectChangedEventArgs(a, b));
            }
        }
        get_cx() {
            return false;
        }
        get cx() {
            return this.get_cx();
        }
        it(a, b) {
            this.jh(a, b);
            if (this.cv) {
                this.a1.f$al(this);
            }
            if (this.cx && (Rect.l_op_Equality(a, null) || a.isEmpty || a.width == 0 || a.height == 0)) {
                this.km(this.m6, false);
            }
            else {
                this.ht();
            }
        }
        get syncChannel() {
            return this._syncChannel;
        }
        set syncChannel(a) {
            this._syncChannel = a;
        }
        get actualSyncLink() {
            return this.a7;
        }
        set actualSyncLink(a) {
            let b = this.a7;
            this.a7 = a;
            this.ji("ActualSyncLink", b, this.a7);
        }
        hu() {
            this.bn.dw();
        }
        get bi() {
            return this.bn.h().a;
        }
        kg(a) {
            if (this.bi != null) {
                this.bi.mobileMode = a;
            }
        }
        cg() {
            return this.bg == 0 && !this.b7 && !this.b8;
        }
        cc() {
            if (this.actualSyncLink != null && this.actualSyncLink.ag.count > 0) {
                let a = true;
                a = this.cg();
                if (!a) {
                    return false;
                }
                for (let b = 0; b < this.actualSyncLink.ag.count; b++) {
                    if (!this.actualSyncLink.ag.item(b).cg()) {
                        return false;
                    }
                }
                return true;
            }
            else {
                return this.cg();
            }
        }
        notifyCrosshairUpdate() {
        }
        kl(a, b) {
            let c = this.ex;
            this.m6 = new Rect(0, this.eb, this.ec, MathUtil.b(a, c, 1), MathUtil.b(b, c, 1));
        }
        eg() {
            return 1;
        }
        eh() {
            return 1;
        }
        je(a, b, c, d) {
            switch (b) {
                case SeriesViewer.$$p[25]:
                    this.bn.dc();
                    break;
                case SeriesViewer.$$p[22]:
                    this.bn.dc();
                    break;
                case "ActualContentHitTestMode":
                    this.h4();
                    break;
                case "ContentHitTestMode":
                    this.jt();
                    break;
                case SeriesViewer.$$p[24]:
                    this.bn.da(c, d);
                    this.bn.dc();
                    break;
                case SeriesViewer.$$p[21]:
                    this.bn.c6(c, d);
                    this.bn.dc();
                    break;
                case "TitleTextStyle":
                case "TitleTextColor":
                case "SubtitleTextStyle":
                case "SubtitleTextColor":
                case "TitleTopMargin":
                case "TitleLeftMargin":
                case "TitleRightMargin":
                case "TitleBottomMargin":
                case "SubtitleTopMargin":
                case "SubtitleLeftMargin":
                case "SubtitleRightMargin":
                case "SubtitleBottomMargin":
                    this.bn.dc();
                    break;
                case "PixelScalingRatio":
                    if (isNaN_(DeviceUtils.a(this.ek))) {
                        this.hs();
                    }
                    else {
                        this.ea = DeviceUtils.a(this.ek);
                    }
                    break;
                case "InteractionPixelScalingRatio":
                    this.d9 = this.ei;
                    break;
                case "ActualPixelScalingRatio":
                    this.bn.di();
                    break;
                case SeriesViewer.$$p[9]:
                    this.bn.cj();
                    break;
                case "ActualSyncLink":
                    this.kj(typeCast(SyncLink.$, c), typeCast(SyncLink.$, d));
                    break;
                case SeriesViewer.$$p[2]:
                    if (!this.cm) {
                        this.di = true;
                    }
                    if (this.m9 == 0) {
                        this.ch = true;
                    }
                    else {
                        this.ch = this.ca;
                    }
                    if (this.cv) {
                        this.a1.f$al(this);
                    }
                    break;
                case "CrosshairPoint":
                    if (this.cv) {
                        this.a1.f$al(this);
                    }
                    this.notifyCrosshairUpdate();
                    break;
                case SeriesViewer.$$p[31]:
                    if (this.actualSyncLink != null) {
                        this.e1++;
                        this.km(d, false);
                        this.e1--;
                    }
                    if (!this.m6.equals1(c) && this.e1 == 0) {
                        this.i3(c, this.m6);
                    }
                    this.ht();
                    break;
                case SeriesViewer.$$p[28]:
                    this.eb = this.ev;
                    break;
                case SeriesViewer.$$p[29]:
                    this.ec = this.ew;
                    break;
                case "ActualWindowPositionVertical":
                case "ActualWindowPositionHorizontal":
                    if (!this.dg) {
                        this.kl(this.eg(), this.eh());
                    }
                    break;
                case SeriesViewer.$$p[10]:
                    this.bn.cz();
                    break;
                case SeriesViewer.$$p[8]:
                    this.bo.r = this.e5;
                    break;
                case SeriesViewer.$$p[11]:
                    this.ki();
                    break;
                case "ActualWindowRect":
                    this.b1 = true;
                    if (!Base.equalsStatic(d, c)) {
                        this.ha();
                    }
                    if (d.width == 1 && d.height == 1 && c.isEmpty) {
                        this.dk = true;
                    }
                    this.jg(c, d);
                    break;
                case SeriesViewer.$$p[15]:
                    this.bn.c4(d);
                    break;
                case SeriesViewer.$$p[27]:
                    this.cb = this.dj;
                    break;
                case SeriesViewer.$$p[33]:
                    this.e2 = this.e6;
                    this.he();
                    break;
                case SeriesViewer.$$p[17]:
                    this.a1.f$ad(this);
                    break;
            }
        }
        ki() {
            this.b9 = this.na == 0;
            this.bn.dh();
            this.kh();
            this.bn.ef();
            this.hu();
        }
        h4() {
            this.bn.cp();
        }
        kh() {
            if (this.bi == null) {
                return;
            }
            this.bi.isZoomable = this.c2();
        }
        get m1() {
            return this.mp;
        }
        set m1(a) {
            let b = this.mp;
            this.mp = a;
            if (this.mp.isEmpty) {
                this.bn.cd();
            }
            else {
                this.bn.eg(this.m5, this.m3(this.m1));
                this.bn.d5();
                this.ji("PreviewRect", b, this.mp);
            }
        }
        ka() {
            this.eb = this.mr.x;
            this.ec = this.mr.y;
        }
        ha() {
            this.dk = false;
            this.dn = dateNow();
            if (this.cs) {
                this.az.clear();
            }
            if (this.bo.f()) {
                this.bo.w();
            }
            let a = this.dg;
            this.dg = true;
            this.ka();
            this.dg = a;
            this.bn.ce();
            this.bn.ei(this.mr);
        }
        m3(a) {
            if (this.m5.isEmpty) {
                return Rect.empty;
            }
            let b = this.m5;
            let c = b.left + (b.width * (a.left - this.mr.left) / this.mr.width);
            let d = b.top + (b.height * (a.top - this.mr.top) / this.mr.height);
            let e = b.left + (b.width * (a.right - this.mr.left) / this.mr.width);
            let f = b.top + (b.height * (a.bottom - this.mr.top) / this.mr.height);
            return new Rect(0, c, d, e - c, f - d);
        }
        jj() {
            if (this.refreshCompleted != null && !this.destroyed) {
                this.refreshCompleted(this, new RefreshCompletedEventArgs());
            }
        }
        i2(a) {
            this.kh();
        }
        get gy() {
            return this.fc;
        }
        set gy(a) {
            let b = this.fc;
            this.fc = a;
            this.ji("TitleTextStyle", b, a);
        }
        get gm() {
            return this.fb;
        }
        set gm(a) {
            let b = this.fb;
            this.fb = a;
            this.ji("SubtitleTextStyle", b, a);
        }
        get mh() {
            return this.l4;
        }
        set mh(a) {
            let b = this.l4;
            this.l4 = a;
            this.ji("TitleTextColor", b, a);
        }
        get mg() {
            return this.l3;
        }
        set mg(a) {
            let b = this.l3;
            this.l3 = a;
            this.ji("SubtitleTextColor", b, a);
        }
        get et() {
            return this.d7;
        }
        set et(a) {
            let b = this.d7;
            this.d7 = a;
            this.ji("TitleTopMargin", b, a);
        }
        get er() {
            return this.d5;
        }
        set er(a) {
            let b = this.d5;
            this.d5 = a;
            this.ji("TitleLeftMargin", b, a);
        }
        get es() {
            return this.d6;
        }
        set es(a) {
            let b = this.d6;
            this.d6 = a;
            this.ji("TitleRightMargin", b, a);
        }
        get eq() {
            return this.d4;
        }
        set eq(a) {
            let b = this.d4;
            this.d4 = a;
            this.ji("TitleBottomMargin", b, a);
        }
        get ep() {
            return this.d3;
        }
        set ep(a) {
            let b = this.d3;
            this.d3 = a;
            this.ji("SubtitleTopMargin", b, a);
        }
        get en() {
            return this.d1;
        }
        set en(a) {
            let b = this.d1;
            this.d1 = a;
            this.ji("SubtitleLeftMargin", b, a);
        }
        get eo() {
            return this.d2;
        }
        set eo(a) {
            let b = this.d2;
            this.d2 = a;
            this.ji("SubtitleRightMargin", b, a);
        }
        get em() {
            return this.d0;
        }
        set em(a) {
            let b = this.d0;
            this.d0 = a;
            this.ji("SubtitleBottomMargin", b, a);
        }
        m7() {
            return this.bn.e9();
        }
        m8() {
            return this.bn.fa();
        }
        aj(a) {
            return this.bn.c(a);
        }
        ak(a) {
            return this.bn.d(a);
        }
        getFontHeight() {
            return this.bn.a7;
        }
        provideContainer(a) {
            this.bn.cu(a);
        }
        h9(a, b) {
            this.bn.cv(a, b);
        }
        notifyContainerResized() {
            this.bn.co();
        }
        mw() {
            return this.bn.e3();
        }
        hl() {
            this.bn.b2();
        }
        mk() {
            return this.bn.e0();
        }
        bq() {
            return this.bn.r();
        }
        bp() {
            return this.bn.o();
        }
        l8() {
            return this.bn.es();
        }
        l9() {
            return this.bn.ev();
        }
        hc(a) {
            this.bn.bn(a);
        }
        jy(a) {
            this.bn.dr(a);
        }
        get c7() {
            return this.b6;
        }
        set c7(a) {
            let b = this.b6;
            this.b6 = a;
            if (b != this.b6) {
                this.bn.cl(this.b6);
            }
        }
        get ca() {
            return this.b0;
        }
        set ca(a) {
            let b = this.b0;
            this.b0 = a;
            if (b != this.b0) {
                this.bn.bi(this.b0);
            }
        }
        get syncSettings() {
            return this._syncSettings;
        }
        set syncSettings(a) {
            this._syncSettings = a;
        }
        hb(a) {
            this.bn.bl(a);
        }
        j0(a) {
            this.bn.ds(a);
        }
        h1(source_, a, b, c) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let d = this.actualSyncLink.ae(source_);
            if (d == null) {
                return;
            }
            d.handleCollectionChanged(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
        }
        hw(source_) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let a = this.actualSyncLink.ae(source_);
            if (a == null) {
                return;
            }
            a.handleCollectionChanged(new NotifyCollectionChangedEventArgs(0, 4));
        }
        hz(source_, a, b) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let c = this.actualSyncLink.ae(source_);
            if (c == null) {
                return;
            }
            c.handleCollectionChanged(new NotifyCollectionChangedEventArgs(1, 0, b, a));
        }
        h0(source_, a, b) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let c = this.actualSyncLink.ae(source_);
            if (c == null) {
                return;
            }
            c.handleCollectionChanged(new NotifyCollectionChangedEventArgs(1, 1, b, a));
        }
        destroy() {
            this.destroyed = true;
            let a = new List$1(Series.$, 0);
            for (let b = 0; b < this.series.count; b++) {
                a.add(this.series._inner[b]);
            }
            for (let c = 0; c < a.count; c++) {
                if (a._inner[c].bi != null) {
                    a._inner[c].bi.ag();
                }
                this.series.remove(a._inner[c]);
                this.jz(a._inner[c].name, true);
                a._inner[c].itemsSource = null;
                a._inner[c].i1(null, null);
            }
            this.hj();
            this.j1();
            this.onDetachedFromUI();
            this.bn.cu(null);
        }
        hj() {
        }
        j7(source_) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            this.e7 = source_;
            this.ke();
        }
        j1() {
            this.e7 = null;
            this.ke();
        }
        j6(a, source_) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            if (stringIsNullOrEmpty(a) == false) {
                if (!this.dl.containsKey(a)) {
                    this.dl.addItem(a, source_);
                }
                else {
                    this.dl.item(a, source_);
                }
            }
            this.ke();
        }
        jz(a, b) {
            if (stringIsNullOrEmpty(a) == false) {
                if (this.dl.containsKey(a)) {
                    this.dl.removeItem(a);
                }
            }
            if (!b) {
                this.ke();
            }
        }
        j5(a, b) {
            if (a.itemsSource != b) {
                a.itemsSource = b;
            }
        }
        kd(a) {
            if (!this.c6) {
                return;
            }
            if (typeCast(Series.$, a) !== null) {
                let b = a;
                if (this.dl.containsKey(b.name)) {
                    let c = this.dl.item(b.name);
                    this.j5(b, c);
                }
                else {
                    this.j5(b, this.e7);
                }
            }
            if (typeCast(CategoryAxisBase.$, a) !== null) {
                let d = a;
                if (this.dl.containsKey(d.name)) {
                    let e = this.dl.item(d.name);
                    if (d.itemsSource != e) {
                        d.itemsSource = e;
                    }
                }
                else {
                    if (d.itemsSource != this.e7) {
                        d.itemsSource = this.e7;
                    }
                }
            }
        }
        ke() {
            if (!this.c6) {
                return;
            }
            for (let a of fromEnum(this.series)) {
                this.kd(a);
            }
        }
        get eu() {
            return this.d8;
        }
        set eu(a) {
            this.d8 = a;
            this.hu();
        }
        get ej() {
            return this.dx;
        }
        set ej(a) {
            this.dx = a;
            this.hu();
        }
        get el() {
            return this.dz;
        }
        set el(a) {
            this.dz = a;
            this.hu();
        }
        get ef() {
            return this.dv;
        }
        set ef(a) {
            this.dv = a;
            this.hu();
        }
        get ee() {
            return this.du;
        }
        set ee(a) {
            this.du = a;
            this.hu();
        }
        get ed() {
            return this.dt;
        }
        set ed(a) {
            this.dt = a;
            this.hu();
        }
        dd() {
            return false;
        }
        get cp() {
            return this.b4;
        }
        set cp(a) {
            let b = this.b4;
            this.b4 = a;
            this.ji("IsAntiAliasingEnabledDuringInteraction", b, this.b4);
        }
        get ek() {
            return this.dy;
        }
        set ek(a) {
            let b = this.dy;
            this.dy = a;
            this.ji("PixelScalingRatio", b, this.dy);
        }
        get ei() {
            return this.dw;
        }
        set ei(a) {
            let b = this.dw;
            this.dw = a;
            this.ji("InteractionPixelScalingRatio", b, this.dw);
        }
        static bb(a, b) {
            let c = new CoercionInfo();
            c.b = a;
            c.a = null;
            let d = FastItemsSource.f(a);
            if (d.d == null) {
                return c;
            }
            if (b != null) {
                let methods_ = b;
                let key_ = d.d;
                let val_ = null;
                if (typeof methods_[key_] != 'undefined') {
                    val_ = methods_[key_];
                }
                ;
                c.b = d.c;
                c.a = val_;
            }
            else if (d.d == "defaultDateParse") {
                let e = defaultDVDateParse;
                c.b = d.c;
                c.a = e;
            }
            return c;
        }
        get f2() {
            return this.fa;
        }
        set f2(a) {
            this.fa = a;
            if (this.bi == null) {
                return;
            }
            this.bi.backgroundImageUri = this.fa;
        }
        get ea() {
            return this.dq;
        }
        set ea(a) {
            let b = this.dq;
            this.dq = a;
            this.ji("ActualPixelScalingRatio", b, this.dq);
        }
        get d9() {
            return this.dp;
        }
        set d9(a) {
            let b = this.dp;
            this.dp = a;
            this.ji("ActualInteractionPixelScalingRatio", b, this.dp);
        }
        get mr() {
            return this.mm;
        }
        set mr(a) {
            let b = Rect.l_op_Inequality(this.mm, a);
            if (b) {
                let c = this.mm;
                this.mm = a;
                this.ji("ActualWindowRect", c, a);
            }
        }
        mx() {
            return this.mr;
        }
        ht() {
            this.mr = this.ms();
        }
        ms() {
            return new Rect(0, Math.min(1, Math.max(0, this.m6.left)), Math.min(1, Math.max(0, this.m6.top)), Math.min(1, Math.max(0, this.m6.width)), Math.min(1, Math.max(0, this.m6.height)));
        }
        e8(a, b) {
            return this.bn.bh(a, b);
        }
        get eb() {
            return this.dr;
        }
        set eb(a) {
            let b = this.dr;
            this.dr = a;
            this.ji("ActualWindowPositionHorizontal", b, this.dr);
        }
        get ec() {
            return this.ds;
        }
        set ec(a) {
            let b = this.ds;
            this.ds = a;
            this.ji("ActualWindowPositionVertical", b, this.ds);
        }
        h3() {
            if (this.b9 && this.bi != null) {
                this.bi.surfaceIsDirty = true;
                this.bi.doRefresh(false);
            }
            this.hf();
        }
        h2() {
            if (this.b9 && this.bi != null) {
                this.bi.surfaceIsDirty = true;
                this.bi.doRefresh(false);
            }
            this.hf();
        }
        flush() {
            this.hn(true, true);
        }
        hn(a, b) {
            this.al.x();
            if (a) {
                this.bn.b3();
                this.al.x();
            }
            this.ah.i();
            if (b) {
                this.bn.a.i();
            }
            this.dk = true;
        }
        dh() {
            return false;
        }
        jv(a, b) {
            if (this.ky != null) {
                this.j9(this.ky);
                this.ky = null;
                this.ar = null;
            }
            this.ky = a;
            this.ar = this.al.k(2, a, b);
        }
        j9(a) {
            this.al.ac(2, a);
            this.ky = null;
            this.ar = null;
        }
        hh() {
            this.al.ab(2, this.ky, this.ar, false);
        }
        ih() {
            let a = false;
            let b = false;
            let c = false;
            for (let d = 0; d < this.series.count; d++) {
                let e = this.series._inner[d];
                if (e.cm) {
                    a = true;
                }
                if (e.cn) {
                    b = true;
                }
                if (e.cj) {
                    c = true;
                }
            }
            this.cq = a;
            this.cr = b;
            this.co = c;
        }
        get c1() {
            return this.b9;
        }
        hd() {
            this.bn.bo();
            for (let a = 0; a < this.series.count; a++) {
                this.series._inner[a].ip();
            }
        }
        c5() {
            return this.bn.ak();
        }
        e4() {
            let a = this.e0;
            this.e0++;
            return a;
        }
        bt() {
            if (this.gy == null) {
                return null;
            }
            return FontUtil.toFontInfo(this.bn.i.ae, this.gy);
        }
        bs() {
            if (this.gm == null) {
                return null;
            }
            return FontUtil.toFontInfo(this.bn.i.ae, this.gm);
        }
        kc() {
            let a = false;
            a = this.ca;
            this.cm = true;
            this.ch = (a && !this.di) || this.m9 == 0;
            this.cm = false;
        }
        jm() {
            if (this.seriesDataUpdated != null) {
                this.seriesDataUpdated(this, EventArgs.empty);
            }
        }
    }
    SeriesViewer.$t = /*@__PURE__*/ markType(SeriesViewer, 'SeriesViewer', Control.$, [INotifyPropertyChanged_$type, ILegendOwner_$type, IInternalLegendOwner_$type]);
    SeriesViewer.lb = /*@__PURE__*/ DependencyProperty.i("Legend", IChartLegend_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.ji("Legend", b.oldValue, b.newValue);
    }));
    SeriesViewer.k0 = /*@__PURE__*/ DependencyProperty.i("AnimateSeriesWhenAxisRangeChanges", Boolean_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, false, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.ji("AnimateSeriesWhenAxisRangeChanges", b.oldValue, b.newValue);
    }));
    SeriesViewer.m2 = Rect.empty;
    SeriesViewer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, SeriesViewer, 'ji', ['ActualPlotAreaBorderBrush:l5:kz', [Brush.$, null], 'CircleMarkerTemplate:ko:k1', [DataTemplate.$, null], 'CrosshairVisibility:m9:k2', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'DefaultInteraction:bc:k3', [InteractionState_$type, /*@__PURE__*/ enumGetBox(InteractionState_$type, 3)], 'DiamondMarkerTemplate:kp:k4', [DataTemplate.$, null], 'DragModifier:l1:k5', [ModifierKeys_$type, /*@__PURE__*/ enumGetBox(ModifierKeys_$type, 2)], 'HexagonMarkerTemplate:kq:k6', [DataTemplate.$, null], 'HexagramMarkerTemplate:kr:k7', [DataTemplate.$, null], 'HighlightingTransitionDuration:e5:k8', [1, 300], 'IsPagePanningAllowed:cy:k9', [0, true], 'IsSurfaceInteractionDisabled:cz:la', [0, false], 'OverviewPlusDetailPaneVisibility:na:lc', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 1)], 'PanModifier:l2:ld', [ModifierKeys_$type, /*@__PURE__*/ enumGetBox(ModifierKeys_$type, 4)], 'PentagonMarkerTemplate:ks:le', [DataTemplate.$, null], 'PentagramMarkerTemplate:kt:lf', [DataTemplate.$, null], 'PlotAreaBackground:me:lg', [Brush.$, null], 'PlotAreaBorderBrush:mf:lh', [Brush.$, null], 'PreferHigherResolutionTiles:db:li', [0, false], 'PyramidMarkerTemplate:ku:lj', [DataTemplate.$, null], 'RightButtonDefaultInteraction:be:lk', [InteractionState_$type, /*@__PURE__*/ enumGetBox(InteractionState_$type, 3)], 'SquareMarkerTemplate:kv:ll', [DataTemplate.$, null], 'SubtitleHorizontalAlignment:lz:lm', [HorizontalAlignment_$type, /*@__PURE__*/ enumGetBox(HorizontalAlignment_$type, 1)], 'Subtitle:gf:ln', [2, null], 'TetragramMarkerTemplate:kw:lo', [DataTemplate.$, null], 'TitleHorizontalAlignment:l0:lp', [HorizontalAlignment_$type, /*@__PURE__*/ enumGetBox(HorizontalAlignment_$type, 1)], 'Title:gr:lq', [2, null], 'TriangleMarkerTemplate:kx:lr', [DataTemplate.$, null], 'UseTiledZooming:dj:ls', [0, false], 'WindowPositionHorizontal:ev:lt', [1, NaN], 'WindowPositionVertical:ew:lu', [1, NaN], 'WindowRectMinWidth:ex:lv', [1, 0.0001], 'WindowRect:m6:lw', [Rect.$, /*@__PURE__*/ new Rect(0, 0, 0, 1, 1)], 'WindowResponse:ba:lx', [WindowResponse_$type, /*@__PURE__*/ enumGetBox(WindowResponse_$type, 1)], 'ZoomTileCacheSize:e6:ly', [1, 30]]);
    return SeriesViewer;
})();
/**
 * @hidden
 */
export let SeriesViewerView = /*@__PURE__*/ (() => {
    class SeriesViewerView extends Base {
        constructor(a) {
            super();
            this.n = null;
            this.a = null;
            this.l = null;
            this.m = null;
            this.f = null;
            this.b = null;
            this.ag = false;
            this.e8 = null;
            this.e7 = null;
            this.e6 = null;
            this.e5 = null;
            this.g = new SeriesViewerComponentsFromView();
            this.i = null;
            this.u = null;
            this.x = null;
            this.w = null;
            this.v = null;
            this.al = false;
            this.am = false;
            this.bg = null;
            this.j = null;
            this.a7 = 0;
            this.a6 = 0;
            this.a5 = 0;
            this.e1 = Rect.empty;
            this.ah = false;
            this.az = 0;
            this.ax = 0;
            this.ay = 0;
            this.aw = 0;
            this.ai = true;
            this.y = false;
            this.a0 = NaN;
            this.e2 = Rect.empty;
            this.z = false;
            this.ad = false;
            this.ac = false;
            this.at = false;
            this.el = null;
            this.ek = null;
            this.ab = false;
            this.aa = false;
            this.ae = true;
            this.av = null;
            this.ap = false;
            this.be = 0;
            this.af = true;
            this.a6 = 0;
            this.a5 = 0;
            this.n = a;
            this.n.mj = { $type: Point_$type, x: NaN, y: NaN };
            this.n.ba = 1;
            this.i = new SeriesViewerViewManager(this);
            this.e5 = ((() => {
                let $ret = new Line();
                $ret.visibility = 1;
                return $ret;
            })());
            this.e6 = ((() => {
                let $ret = new Line();
                $ret.visibility = 1;
                return $ret;
            })());
        }
        ci() {
            this.i.a9();
        }
        cy() {
            this.n.cm = true;
            this.n.m9 = 1;
            this.n.cm = false;
            this.e7 = new Path();
            this.e8 = new Rectangle();
            this.e8._visibility = 1;
            this.dz();
            this.f = new SeriesCollection();
            this.b = new AxisCollection();
            this.a = new CanvasRenderScheduler();
            this.a.l(this);
            this.a.e.add(this.n.ai);
            if (this.n.na == 0) {
                this.ch();
            }
            let a = this.n;
            a.windowRectChanged = delegateCombine(a.windowRectChanged, runOn(this, this.cn));
            let b = this.n;
            b.gridAreaRectChanged = delegateCombine(b.gridAreaRectChanged, runOn(this, this.cm));
            this.m = new OverviewPlusDetailViewportHost(this);
            this.dh();
        }
        ch() {
            if (this.l == null) {
                this.l = this.i.g();
            }
            this.n.bi.provideContext(this.x);
            this.n.bi.provideContainer(this.bg);
            this.n.bi.provideEventSource(this.j);
            this.l.world = new Rect(0, 0, 0, 1, 1);
            this.l.window = this.n.m6;
            this.l.surfaceViewer = TypeRegistrar.create("SeriesViewerSurfaceViewer", this.n, this);
            this.l.viewScheduler = this.a;
            this.ef();
            let a = this.l;
            a.windowChanging = delegateCombine(a.windowChanging, runOn(this, this.dg));
            let b = this.l;
            b.windowChanged = delegateCombine(b.windowChanged, runOn(this, this.df));
        }
        dg(a, b) {
            let c = b.newValue;
            if (this.l != null) {
                c = this.l.changeRect(b.oldValue, b.newValue, this.n.c3(), this.n.c4(), this.l.world);
            }
            if (c.isEmpty) {
                this.l.window = b.oldValue;
            }
            else if (!c.equals1(b.newValue)) {
                this.l.window = c;
            }
            if (this.n.ba == 1) {
                let d = this.n.m5.width / this.n.m5.height;
                c = new Rect(0, c.left / d, c.top, c.width / d, c.height);
                this.n.m6 = c;
            }
        }
        df(a, b) {
            let c = b.newValue;
            if (this.l != null) {
                c = this.l.changeRect(b.oldValue, b.newValue, this.n.c3(), this.n.c4(), this.l.world);
            }
            if (c.isEmpty) {
                c = b.oldValue;
            }
            else if (!c.equals1(b.newValue)) {
                this.l.window = c;
            }
            let d = this.n.m5.width / this.n.m5.height;
            c = new Rect(0, c.left / d, c.top, c.width / d, c.height);
            this.n.m6 = c;
        }
        ef() {
            if (this.l == null) {
                return;
            }
            if (this.n.na != 0) {
                return;
            }
            let a = 1;
            if (this.n.m5.isEmpty == false) {
                a = this.n.m5.width / this.n.m5.height;
            }
            let b = this.l.world;
            let c = new Rect(0, 0, 0, a, 1);
            this.l.world = c;
            if (b.width != c.width || b.height != c.height || b.x != c.x || b.y != c.y) {
                this.l.surfaceViewer.isDirty = true;
            }
            this.l.window = new Rect(0, this.n.m6.left * a, this.n.m6.top, this.n.m6.width * a, this.n.m6.height);
        }
        cn(a, b) {
            this.ef();
        }
        cm(a, b) {
            this.ef();
        }
        b5(a, b, c) {
            let d = true;
            for (let e of fromEnum(this.n.series)) {
                if (d && e.dl) {
                    d = false;
                    c.a.k(0, 0, a, b);
                }
                e.jg(new Rect(0, 0, 0, a, b), c);
            }
        }
        dy() {
            this.i.bl();
        }
        b7() {
        }
        d0() {
            this.i.bm();
        }
        ce() {
            for (let a = 0; a < this.n.series.count; a++) {
                this.n.series._inner[a].bi.am();
            }
        }
        b6() {
        }
        b8() {
        }
        dr(a) {
            let b = this.f.indexOf(a);
            if (b >= 0) {
                this.f.removeAt(b);
            }
            if (a.isStacked) {
                a.h8((c) => {
                    c.bs = null;
                    b = this.f.indexOf(c);
                    if (b >= 0) {
                        this.f.removeAt(b);
                    }
                    return true;
                });
            }
            this.n.jt();
            a.i1(null, null);
            this.c5();
        }
        c5() {
            if (this.n.destroyed) {
                return;
            }
            if (this.f.count == 0) {
                if (this.w != null && Rect.l_op_Inequality(this.n.m5, null) && !this.n.m5.isEmpty) {
                    if (this.n.ea != 1) {
                        this.w.z();
                        this.w.aa(this.n.ea, this.n.ea);
                    }
                    this.w.k(this.n.m5.left, this.n.m5.top, this.n.m5.width, this.n.m5.height);
                    if (this.n.ea != 1) {
                        this.w.y();
                    }
                }
            }
            this.n.ah.n();
        }
        ao(a) {
            a.iw(a.bi.br, this.e1);
            return this.f.contains(a);
        }
        get as() {
            return this.ag;
        }
        set as(a) {
            this.ag = a;
        }
        bn(a) {
            if (!this.f.contains(a)) {
                this.f.add(a);
                if (a.isStacked) {
                    a.h8((b) => {
                        this.f.add(b);
                        return true;
                    });
                }
                this.n.jt();
            }
            a.i1(this.w, this.v);
            this.n.hu();
        }
        dl(a) {
            this.v = a;
            for (let b = 0; b < this.f.count; b++) {
                this.f._inner[b].i1(this.w, this.v);
            }
            for (let c = 0; c < this.b.count; c++) {
                this.b._inner[c].g0(this.w, this.v);
            }
        }
        bv() {
        }
        br() {
            this.b9();
            this.ce();
        }
        b9() {
            this.e8._visibility = 1;
            this.ck();
        }
        b4() {
        }
        dj() {
        }
        d1() {
            this.e8._visibility = 0;
            this.ck();
        }
        d9(a) {
            this.e8.o = a.top + this.n.m5.top;
            this.e8.n = a.left + this.n.m5.left;
            this.e8.width = a.width;
            this.e8.height = a.height;
            this.e8._stroke = this.i.b2();
            this.e8._fill = null;
            this.e8.ac = 0.5;
            this.ck();
        }
        bu() {
        }
        c8() {
        }
        eh(a, b, c, d) {
            this.e6.ak = a;
            this.e6.am = b;
            this.e6.al = c;
            this.e6.an = d;
            this.ck();
        }
        d6() {
            this.e6._visibility = 0;
            this.ck();
        }
        cf() {
            if (this.e6._visibility == 0) {
                this.e6._visibility = 1;
                this.ck();
            }
        }
        ea(a, b, c, d) {
            this.e5.ak = a;
            this.e5.am = b;
            this.e5.al = c;
            this.e5.an = d;
            this.ck();
        }
        d2() {
            this.e5._visibility = 0;
            this.ck();
        }
        ca() {
            if (this.e5._visibility == 0) {
                this.e5._visibility = 1;
                this.ck();
            }
        }
        cd() {
            this.e7._visibility = 1;
            this.ck();
        }
        ey(a) {
            let b = new PathFigureCollection();
            let c = new PathFigure();
            c._isClosed = true;
            c._startPoint = { $type: Point_$type, x: a.left, y: a.top };
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.top }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.top }));
            b.add(c);
            return b;
        }
        ez(a) {
            let b = new PathFigureCollection();
            let c = new PathFigure();
            c._isClosed = true;
            c._startPoint = { $type: Point_$type, x: a.left, y: a.top };
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.top }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.top }));
            b.add(c);
            return b;
        }
        eg(a, b) {
            b.intersect(a);
            let c = new PathGeometry();
            c.c = this.ez(a);
            let d = new PathGeometry();
            d.c = this.ey(b);
            let e = new GeometryGroup();
            e.d.add(c);
            e.d.add(d);
            this.e7.ak = e;
            this.e7._fill = this.i.b2();
            this.e7._opacity = 0.1;
            this.ck();
        }
        d5() {
            this.e7._visibility = 0;
            this.ck();
        }
        ei(a) {
        }
        dp(a) {
            let b = this.b.indexOf(a);
            this.b.removeAt(b);
            a.g0(null, null);
            this.dw();
            this.n.jz(a.name, true);
        }
        dq(a) {
        }
        bm(a) {
            if (!this.b.contains(a)) {
                this.b.add(a);
            }
            a.g0(this.w, this.v);
            this.dw();
        }
        bj(a) {
        }
        h() {
            this.g.a = this.l;
            return this.g;
        }
        static au(a) {
            let b = a.bs.series;
            let c = new List$1(Series.$, 0);
            for (let d = 0; d < b.count; d++) {
                c.add(b._inner[d]);
                if (b._inner[d].isStacked) {
                    b._inner[d].h8((e) => {
                        c.add(e);
                        return true;
                    });
                }
            }
            return c;
        }
        dv() {
            this.n.m6 = new Rect(0, 0, 0, 1, 1);
        }
        cu(a) {
            if (a == this.bg) {
                return;
            }
            if (a == null) {
                if (this.j != null) {
                    this.j.aq();
                }
                this.i.bf(null);
                this.u = null;
                this.x = null;
                this.w = null;
                this.v = null;
                this.j = null;
                if (this.n.bi != null) {
                    this.n.bi.provideContext(null);
                    this.n.bi.provideContainer(null);
                    this.n.bi.provideEventSource(null);
                }
                return;
            }
            this.bg = a;
            if (this.as) {
                this.a.e.add(this.n.ah);
            }
            this.i.bf(a);
            this.u = this.i.t;
            this.x = this.i.w;
            this.w = this.i.v;
            this.v = this.i.u;
            this.al = false;
            try {
                this.al = (window.navigator.msPointerEnabled && MSGesture !== undefined);
            }
            catch (b) {
            }
            this.am = false;
            try {
                this.am = (window.navigator.pointerEnabled);
            }
            catch (c) {
            }
            if (this.al || this.am) {
                this.at = true;
            }
            this.j = this.i.f;
            if (this.j != null) {
                this.j.bf = this.n.m5;
                this.j.ak = runOn(this, this.aq);
                let d = this.j;
                d.onContactCompleted = delegateCombine(d.onContactCompleted, runOn(this, this.cr));
                let e = this.j;
                e.onContactMoved = delegateCombine(e.onContactMoved, runOn(this, this.cs));
                let f = this.j;
                f.onContactStarted = delegateCombine(f.onContactStarted, runOn(this, this.ct));
                let g = this.j;
                g.onDragCompleted = delegateCombine(g.onDragCompleted, runOn(this.n, this.n.ic));
                let h = this.j;
                h.onFlingStarted = delegateCombine(h.onFlingStarted, runOn(this, this.aj));
                let i = this.j;
                i.onDragDelta = delegateCombine(i.onDragDelta, (i) => this.n.id(i));
                let j = this.j;
                j.onDragStarted = delegateCombine(j.onDragStarted, (j) => this.n.ie(j, true));
                let k = this.j;
                k.onKeyDown = delegateCombine(k.onKeyDown, runOn(this.n, this.n.c8));
                let l = this.j;
                l.onMouseDown = delegateCombine(l.onMouseDown, runOn(this, this.c0));
                let m = this.j;
                m.onMouseLeave = delegateCombine(m.onMouseLeave, runOn(this, this.c1));
                let n = this.j;
                n.onMouseOver = delegateCombine(n.onMouseOver, runOn(this, this.c2));
                let o = this.j;
                o.onMouseUp = delegateCombine(o.onMouseUp, runOn(this, this.c3));
                let p = this.j;
                p.onMouseWheel = delegateCombine(p.onMouseWheel, runOn(this.n, this.n.c9));
                if (this.j.aj) {
                    let q = this.j;
                    q.onZoomDelta = delegateCombine(q.onZoomDelta, (q, r, s, t) => this.n.i5(q, r, s, t));
                    let r = this.j;
                    r.onZoomStarted = delegateCombine(r.onZoomStarted, (r, s, t, u) => this.n.i9(r, s, t, u));
                    let s = this.j;
                    s.onZoomCompleted = delegateCombine(s.onZoomCompleted, (s, t, u, v) => this.n.i4(s, t, u, v));
                }
                else {
                    let t = this.j;
                    t.onPinchDelta = delegateCombine(t.onPinchDelta, (t, u) => this.n.iq(u));
                    let u = this.j;
                    u.onPinchStarted = delegateCombine(u.onPinchStarted, (u, v) => this.n.ir(u));
                    let v = this.j;
                    v.onGestureCompleted = delegateCombine(v.onGestureCompleted, (v, w) => this.n.ig(v));
                }
                let w = this.j;
                w.onDoubleTap = delegateCombine(w.onDoubleTap, (w) => this.n.ib(w));
                let x = this.j;
                x.onHold = delegateCombine(x.onHold, runOn(this, this.cx));
            }
            if (this.n.bi != null) {
                this.n.bi.provideContext(this.x);
                this.n.bi.provideContainer(a);
                this.n.bi.provideEventSource(this.j);
            }
            for (let y of fromEnum(this.b)) {
                y.a3.aw();
                this.bm(y);
            }
            for (let z of fromEnum(this.f)) {
                this.bn(z);
            }
        }
        aj(a, b, c) {
            if (this.n.ce) {
                return false;
            }
            return true;
        }
        cs(a, b) {
            this.n.h7(a, b);
        }
        ct(a, b) {
            this.n.a1.f$s(this.n, a, b);
        }
        cx(a) {
            this.n.is(a);
        }
        cr(a, b) {
            this.n.h6(a, b);
        }
        dm(a) {
        }
        get_an() {
            return false;
        }
        get an() {
            return this.get_an();
        }
        d8() {
            this.a7 = FontUtil.getCurrentFontHeight(this.i.ae, this.n.getFontInfo());
        }
        e(a, b, c, d) {
            return {
                ret: ((() => { let e = this.n.a1.f$c(this.n, this.f, this.v, a, b, c, d); c = e.p5; return e.ret; })()),
                p2: c
            };
        }
        bb() {
            return this.a6;
        }
        ba() {
            return this.a5;
        }
        co() {
            this.i.bc();
        }
        cv(a, b) {
            let c = this.a6;
            let d = this.a5;
            if (this.a6 != a) {
                this.ah = true;
            }
            this.a6 = a;
            if (this.a5 != b) {
                this.ah = true;
            }
            this.a5 = b;
            if (this.ah) {
                let e = new Size(1, c, d);
                let f = new Size(1, a, b);
                this.n.i1(e, f);
            }
            this.dc();
            this.dw();
            this.n.ah.n();
        }
        dw() {
            this.ae = true;
            this.n.al.y();
        }
        b0() {
            if (this.a6 == 0 || this.a5 == 0) {
                return;
            }
            this.ae = false;
            this.y = false;
            if (this.ai) {
                this.db();
                this.c7();
                this.ai = false;
                this.ck();
            }
            let a = this.a6;
            let b = this.a5;
            let c = this.n.ej;
            let d = this.n.el;
            let e = this.n.ef;
            let f = this.n.eu;
            let g = this.n.ed;
            let h = this.n.ee;
            if (isNaN_(g)) {
                g = this.a7 / 2;
            }
            if (isNaN_(h)) {
                h = 0;
            }
            let i = this.n.dd();
            let j = new List$1(AxisLabelPanelBase.$, 0);
            for (let k of fromEnum(this.b)) {
                if (k.au != null) {
                    j.add(k.au);
                    k.au.bo = () => this.ah;
                }
            }
            if (i) {
                let l = false;
                let m = false;
                let n = false;
                let o = false;
                for (let p of fromEnum(j)) {
                    if (LabelPanelArranger.b(p) == 2 && (p.ac.ax == null || p.ac.ax.visibility == 0)) {
                        l = true;
                    }
                    if (LabelPanelArranger.b(p) == 3 && (p.ac.ax == null || p.ac.ax.visibility == 0)) {
                        m = true;
                    }
                    if (LabelPanelArranger.b(p) == 0 && (p.ac.ax == null || p.ac.ax.visibility == 0)) {
                        n = true;
                    }
                    if (LabelPanelArranger.b(p) == 1 && (p.ac.ax == null || p.ac.ax.visibility == 0)) {
                        o = true;
                    }
                    if (p.ac != null && p.ac.ax != null) {
                        p.ac.ax.c = p.ac.ax.location;
                    }
                }
                if (l || m) {
                    if (!n && isNaN_(f)) {
                        f = g;
                    }
                    if (!o && isNaN_(e)) {
                        e = g;
                    }
                }
                if (o || n) {
                    if (!l && isNaN_(c)) {
                        c = h;
                    }
                    if (!m && isNaN_(d)) {
                        d = h;
                    }
                }
            }
            if (isNaN_(f)) {
                f = 0;
            }
            if (isNaN_(c)) {
                c = 0;
            }
            if (isNaN_(d)) {
                d = 0;
            }
            if (isNaN_(e)) {
                e = 0;
            }
            let q = this.bd();
            f += q;
            let r = this.bc();
            f += r;
            let s = new Rect(0, c, f, a - (c + d), b - (f + e));
            s = LabelPanelArranger.e(j, s);
            let t = new Size(1, Math.max(0, a - (c + d)), Math.max(0, b - (f + e)));
            if (this.n.cl() && s.width != s.height) {
                if (s.width < s.height) {
                    f += (s.height - s.width) / 2;
                    s.top = s.top + ((s.height - s.width) / 2);
                    t.height = t.height - (s.height - s.width);
                    s.height = s.width;
                }
                else {
                    c += (s.width - s.height) / 2;
                    s.left = s.left + ((s.width - s.height) / 2);
                    t.width = t.width - (s.width - s.height);
                    s.width = s.height;
                }
            }
            this.az = f - (q + r);
            this.ax = c;
            this.ay = d;
            this.aw = e;
            this.e1 = s;
            let u = ((() => {
                let $ret = new LabelPanelsArrangeState();
                $ret.f = c;
                $ret.c = c;
                $ret.a = f + t.height;
                $ret.b = f + t.height;
                $ret.g = c + t.width;
                $ret.d = c + t.width;
                $ret.h = f;
                $ret.e = f;
                return $ret;
            })());
            LabelPanelArranger.d(j, u, this.e1, (v, w) => {
                if (!v.cn.equals1(w)) {
                    v.cn = w;
                    v.ac.a3.ad();
                }
            });
            let v = false;
            if (this.ah) {
                this.ah = false;
                v = true;
            }
            this.n.jd(this.n.m5, this.e1);
            for (let w of fromEnum(this.b)) {
                if (Rect.l_op_Equality(w.i8, null) || w.i8.isEmpty) {
                    this.y = true;
                }
                if (w.i8.equals1(this.e1) && !this.i.y()) {
                    continue;
                }
                w.gu(w.i8, this.e1);
            }
            for (let x of fromEnum(this.f)) {
                if (Rect.l_op_Equality(x.bi.br, null) || x.bi.br.isEmpty) {
                    this.y = true;
                }
                if (x.bi.br.equals1(this.e1) && !this.i.y()) {
                    continue;
                }
                x.iw(x.bi.br, this.e1);
            }
            this.ed();
            this.dn(this.e1);
            this.i.bb(false);
        }
        ed() {
            if (this.n.bi != null && !this.e1.isEmpty) {
                let a = this.n.bi;
                let b = (this.n.ca) ? this.e1.width : Number.POSITIVE_INFINITY;
                let c = (this.n.ca) ? this.e1.height : Number.POSITIVE_INFINITY;
                let d = a.getDesiredSize(new Size(1, b, c));
                this.n.bi.arrange(new Rect(0, this.e1.right - d.width, this.e1.bottom - d.height, d.width, d.height));
                this.ef();
            }
        }
        t() {
            let a = this.n.getFontInfo();
            let b = this.q();
            if (this.n.bt() != null) {
                a = this.n.bt();
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        s() {
            let a = this.n.getFontInfo();
            let b = this.p();
            if (this.n.bs() != null) {
                a = this.n.bs();
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        ex() {
            let a = this.n.getFontBrush();
            let b = this.eu();
            if (this.n.mh != null) {
                a = this.n.mh;
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        ew() {
            let a = this.n.getFontBrush();
            let b = this.et();
            if (this.n.mg != null) {
                a = this.n.mg;
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        bd() {
            if (this.n.gr == null || !(typeCast(XamDataChart.$, this.n) !== null)) {
                return 0;
            }
            let a = this.t();
            let b = 0;
            b = FontUtil.getCurrentFontHeight(this.i.ae, a);
            let c = this.fc();
            b += c.e + c.b;
            return b;
        }
        bc() {
            if (this.n.gf == null || !(typeCast(XamDataChart.$, this.n) !== null)) {
                return 0;
            }
            if (!isNaN_(this.a0)) {
                return this.a0;
            }
            let a = this.s();
            this.a0 = FontUtil.getCurrentFontHeight(this.i.ae, a);
            let b = this.fb();
            this.a0 += b.e + b.b;
            return this.a0;
        }
        fc() {
            let a = this.i.cd();
            let b = isNaN_(this.n.et) ? a.e : this.n.et;
            let c = isNaN_(this.n.er) ? a.c : this.n.er;
            let d = isNaN_(this.n.es) ? a.d : this.n.es;
            let e = isNaN_(this.n.eq) ? a.b : this.n.eq;
            return new Thickness(1, c, b, d, e);
        }
        fb() {
            let a = this.i.cc();
            let b = isNaN_(this.n.ep) ? a.e : this.n.ep;
            let c = isNaN_(this.n.en) ? a.c : this.n.en;
            let d = isNaN_(this.n.eo) ? a.d : this.n.eo;
            let e = isNaN_(this.n.em) ? a.b : this.n.em;
            return new Thickness(1, c, b, d, e);
        }
        dn(a) {
        }
        ck() {
            if (!this.ad) {
                this.ad = true;
                this.a.n();
            }
        }
        dt() {
            if (this.x == null) {
                return;
            }
            if (this.x.d) {
                if (this.n.ea != 1) {
                    this.x.z();
                    this.x.aa(this.n.ea, this.n.ea);
                }
                if (!this.e2.isEmpty) {
                    if (!this.as) {
                        this.x.k(this.e2.left, this.e2.top, this.e2.width, this.e2.height);
                    }
                }
            }
            this.du();
            if (this.x.d) {
                if (this.n.ea != 1) {
                    this.x.y();
                }
            }
        }
        isValid() {
            return true;
        }
        preRender() {
            this.i.a5(this.a6, this.a5);
            this.dk();
        }
        dk() {
        }
        du() {
            if (this.x.d) {
                this.e2 = new Rect(0, 0, 0, this.a6, this.a5);
                if (this.av != null && this.av.count > 0) {
                    this.cc();
                    this.x.z();
                    this.x.ae(this.n.m5);
                    if (!this.as) {
                        this.x.k(this.n.m5.left, this.n.m5.top, this.n.m5.width, this.n.m5.height);
                    }
                }
                this.x.r(this.e5);
                this.x.r(this.e6);
                this.x.s(this.e7);
                this.x.v(this.e8);
                this.x.ac(this.t());
                if (this.el != null) {
                    this.el.am = this.ex();
                    this.x.w(this.el);
                }
                this.x.ac(this.s());
                if (this.ek != null) {
                    this.ek.am = this.ew();
                    this.x.w(this.ek);
                }
                if (this.av != null && this.av.count > 0) {
                    this.i.bk(this.av);
                    this.x.y();
                }
                if (this.ap) {
                    this.d4();
                    this.ap = false;
                    this.av.clear();
                    this.n.a1.f$h(this.n);
                    this.ck();
                }
            }
        }
        cw() {
            this.i.bg();
        }
        cq() {
            this.i.be();
        }
        e3() {
            return new Rect(0, 0, 0, this.a6, this.a5);
        }
        e0() {
            return this.i.b7();
        }
        dz() {
            this.n.ko = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.d;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.n.kx = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.m;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.n.ku = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.j;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.n.kv = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.k;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.n.kp = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.e;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.n.ks = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.h;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.n.kq = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.f;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.n.kw = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.l;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.n.kt = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.i;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.n.kr = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.g;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
        }
        d7() {
            this.i.bo();
            this.dx();
            let a = this.a7;
            this.d8();
            if (a != this.a7) {
                this.n.hu();
            }
        }
        dh() {
            if (this.n.na == 0) {
                this.ch();
                this.n.hr();
            }
            if (this.n.bi != null) {
                let a = this.n.na;
                this.n.bi.visibility = a;
                this.n.bi.doRefresh(false);
            }
        }
        aq(a) {
            return this.n.a1.f$f(this.n, a);
        }
        c2(a, b, c) {
            this.n.a1.f$v(this.n, this.f, this.v, a, b, c);
        }
        c1(a) {
            this.n.a1.f$u(this.n, a);
        }
        c0(a) {
            this.n.a1.f$t(this.n, this.j, a);
        }
        c3(a) {
            this.n.a1.f$w(this.n, this.j, a);
        }
        dx() {
        }
        get er() {
            return this.j.bc;
        }
        ej(a) {
            if (this.j != null) {
                this.j.bf = this.n.m5;
            }
        }
        cl(a) {
            this.n.a1.f$y(this.n, a);
            this.n.ca = a;
        }
        bi(a) {
            this.n.kc();
            this.i.bv(a);
            if (this.n.bi != null) {
                this.n.bi.mobileMode = a;
            }
            this.ee();
        }
        ee() {
            this.n.ki();
        }
        get isDirty() {
            return this.ad;
        }
        set isDirty(a) {
            this.ad = a;
        }
        undirty(a) {
            this.ad = false;
            this.dt();
        }
        get index() {
            return 10;
        }
        postRender() {
        }
        b3() {
            this.dw();
        }
        cb() {
            this.i.a8();
        }
        d3() {
            this.i.bn();
        }
        bt(a) {
            this.i.ax();
        }
        bk(a) {
            this.i.at(a);
        }
        eb(a) {
            this.i.bt(a);
        }
        ec(a) {
            this.i.bu(a);
        }
        bl(a) {
            this.i.au(a);
        }
        ds(a) {
            this.i.bj(a);
        }
        c4(a) {
            this.n.ah.n();
        }
        bs(a) {
        }
        k(a) {
            if (this.n.ca) {
                return 2;
            }
            else {
                return 1;
            }
        }
        cz() {
            if (this.j != null) {
                this.j.ac = this.n.cz;
            }
            if (this.l != null) {
                this.l.isSurfaceInteractionDisabled = this.n.cz;
            }
        }
        a9(a, b) {
            if (a == null || this.x == null) {
                return 0;
            }
            this.x.ac(b);
            return this.x.e(a);
        }
        a8(a, b) {
            if (a == null) {
                return 0;
            }
            let c = 0;
            c = FontUtil.getCurrentFontHeight(this.i.ae, b);
            return c;
        }
        dc() {
            this.ai = true;
            this.dw();
            this.ck();
        }
        em(a, b, c, d) {
            if (a == null) {
                return null;
            }
            let e = ((() => {
                let $ret = new TextBlock();
                $ret.ak = a;
                $ret.o = b.e;
                return $ret;
            })());
            let f = this.a9(e, c);
            e.o = b.e;
            let g = this.a8(a, c);
            e.m = f;
            e.l = g;
            switch (d) {
                case 0:
                    e.n = b.c;
                    break;
                case 2:
                    e.n = Math.max((this.a6 - b.d) - f, b.c);
                    break;
                default:
                case 1:
                case 3:
                    let h = (this.a6 / 2) - (f / 2);
                    h += b.c;
                    h -= b.d;
                    e.n = h;
                    break;
            }
            return e;
        }
        db() {
            this.el = typeCast(XamDataChart.$, this.n) !== null ? this.em(this.n.gr, this.fc(), this.t(), this.eq()) : null;
        }
        c7() {
            this.a0 = NaN;
            this.ek = typeCast(XamDataChart.$, this.n) !== null ? this.em(this.n.gf, this.fb(), this.s(), this.ep()) : null;
            if (this.ek != null) {
                this.ek.o += this.bd();
            }
        }
        c(a) {
            let b = this.i.c();
            if (b == 0) {
                let c = LabelPanelArranger.b(a.au);
                if (a.ah == null) {
                    if (c == 4) {
                        return 4;
                    }
                    if (c == 5) {
                        return 3;
                    }
                }
                else {
                    if (c == 4) {
                        return 3;
                    }
                    if (c == 5) {
                        return 4;
                    }
                }
                if (c == 0) {
                    return 3;
                }
                return 4;
            }
            return b;
        }
        d(a) {
            let b = this.i.d();
            if (b == 0) {
                let c = LabelPanelArranger.b(a.au);
                if (a.ah == null) {
                    if (c == 7) {
                        return 1;
                    }
                    if (c == 6) {
                        return 2;
                    }
                }
                else {
                    if (c == 7) {
                        return 2;
                    }
                    if (c == 6) {
                        return 1;
                    }
                }
                if (c == 3) {
                    return 2;
                }
                return 1;
            }
            return b;
        }
        dd() {
            if (!isNaN_(this.n.d9)) {
                if (!isNaN_(DeviceUtils.a(this.n.ek))) {
                    this.n.ea = DeviceUtils.a(this.n.ek);
                }
                else {
                    this.ci();
                }
            }
            if (!this.n.cp) {
                this.i.a4();
            }
        }
        de() {
            if (!isNaN_(DeviceUtils.a(this.n.d9))) {
                this.n.ea = DeviceUtils.a(this.n.d9);
            }
            if (!this.n.cp) {
                this.i.a3();
            }
        }
        r() {
            return this.i.r();
        }
        ev() {
            return this.i.b6();
        }
        o() {
            return this.i.q();
        }
        es() {
            return this.i.b5();
        }
        q() {
            return this.i.p();
        }
        p() {
            return this.i.o();
        }
        eu() {
            return this.i.b4();
        }
        et() {
            return this.i.b3();
        }
        get a2() {
            return this.ax;
        }
        get a3() {
            return this.ay;
        }
        get a4() {
            return this.az;
        }
        get a1() {
            return this.aw;
        }
        get eo() {
            return this.el;
        }
        get en() {
            return this.ek;
        }
        e4() {
            return new Rect(0, 0, 0, this.a6, this.a5);
        }
        fa() {
            return this.i.cf();
        }
        e9() {
            return this.i.ce();
        }
        c6(a, b) {
            this.aa = true;
        }
        da(a, b) {
            this.ab = true;
        }
        eq() {
            if (this.ab) {
                return this.n.l0;
            }
            else {
                let a = 1;
                switch (this.i.as()) {
                    case "left":
                        a = 0;
                        break;
                    case "right":
                        a = 2;
                        break;
                }
                return a;
            }
        }
        ep() {
            if (this.aa) {
                return this.n.lz;
            }
            else {
                let a = 1;
                switch (this.i.ar()) {
                    case "left":
                        a = 0;
                        break;
                    case "right":
                        a = 2;
                        break;
                }
                return a;
            }
        }
        bo() {
            if (this.ae) {
                this.b0();
                if (this.y) {
                    this.n.al.x();
                }
                if (this.ae) {
                    this.b0();
                }
            }
        }
        ak() {
            if (this.n.dk) {
                return false;
            }
            if ((dateNow().getTime() - this.n.dn.getTime()) < 300) {
                return true;
            }
            return false;
        }
        b2() {
            this.i.a5(this.a6, this.a5);
        }
        cj() {
            this.i.ba(this.n.cy);
        }
        ar(a) {
            let b = this.n.mr;
            let c = b.top > 0;
            let d = b.left > 0;
            let e = b.right < 1;
            let f = b.bottom < 1;
            let g = a.y < 0;
            let h = a.y > 0;
            let i = a.x < 0;
            let j = a.x > 0;
            if (c && g) {
                return true;
            }
            if (d && i) {
                return true;
            }
            if (f && h) {
                return true;
            }
            if (j && e) {
                return true;
            }
            return false;
        }
        di() {
            this.i.bi();
            this.n.ah.n();
            this.n.ai.n();
            this.n.ag.n();
            this.a.n();
        }
        b1(a, b, c) {
            this.ap = false;
            if (this.av == null) {
                this.av = new List$1(ITileZoomTile_$type, 0);
            }
            for (let d = 0; d < this.av.count; d++) {
                while (d < this.av.count && !a.containsKey(this.av._inner[d].content)) {
                    this.av.removeAt(d);
                }
            }
            for (let e = 0; e < b.count; e++) {
                this.av.add(b._inner[e]);
            }
            this.ck();
        }
        bf(a, b, c) {
            return this.i.an(a, b, c);
        }
        by() {
            this.i.a1();
        }
        bz(a) {
            this.i.a2(a);
        }
        cg() {
            if (this.av == null) {
                return;
            }
            this.ap = true;
            this.ck();
        }
        bw() {
            this.i.az();
        }
        bp() {
            this.i.av();
        }
        bx(a) {
            this.i.a0(a);
        }
        bq() {
            this.i.aw();
        }
        cc() {
            if (this.af) {
                this.af = false;
                this.w.k(this.n.m5.left, this.n.m5.top, this.n.m5.width, this.n.m5.height);
                this.n.ah.c = true;
            }
        }
        d4() {
            if (!this.af) {
                this.af = true;
                this.n.ah.c = false;
                this.n.ah.o(this.w, this.v);
            }
        }
        c9() {
        }
        cp() {
            this.i.bd();
        }
        bh(a, b) {
            return this.i.ao(a, b);
        }
    }
    SeriesViewerView.$t = /*@__PURE__*/ markType(SeriesViewerView, 'SeriesViewerView', Base.$, [ISchedulableRender_$type]);
    return SeriesViewerView;
})();
/**
 * @hidden
 */
export let OverviewPlusDetailViewportHost = /*@__PURE__*/ (() => {
    class OverviewPlusDetailViewportHost extends Base {
        constructor(a) {
            super();
            this.a = null;
            if (a == null) {
                throw new ArgumentNullException(0, "view");
            }
            this.a = a;
        }
        getViewInfo(a, b) {
            a = new Rect(0, 0, 0, this.a.l.worldRectViewport.width, this.a.l.worldRectViewport.height);
            b = SeriesViewer.m2;
            return {
                p0: a,
                p1: b
            };
        }
        getEffectiveViewport() {
            if (!this.a.n.cx) {
                if (this.a.n.mv.isEmpty) {
                    return this.a.n.mv;
                }
                return this.a.n.m0(this.a.l.previewViewportdRect, this.a.n.m5, this.a.n.mv);
            }
            return Rect.empty;
        }
    }
    OverviewPlusDetailViewportHost.$t = /*@__PURE__*/ markType(OverviewPlusDetailViewportHost, 'OverviewPlusDetailViewportHost', Base.$, [IProvidesViewport_$type]);
    return OverviewPlusDetailViewportHost;
})();
/**
 * @hidden
 */
export let SeriesViewerViewManager = /*@__PURE__*/ (() => {
    class SeriesViewerViewManager extends Base {
        constructor(a) {
            super();
            this.ae = null;
            this.af = null;
            this.aj = null;
            this.ai = null;
            this.ag = null;
            this.ak = null;
            this.t = null;
            this.w = null;
            this.v = null;
            this.u = null;
            this.x = null;
            this.f = null;
            this.j = null;
            this.ah = null;
            this.ab = 0;
            this.aa = 0;
            this.ac = 1;
            this.ad = 0;
            this.l = null;
            this.b9 = new Thickness(0, 0);
            this.aq = null;
            this.ap = stringEmpty();
            this.b8 = new Thickness(0, 0);
            this.bz = null;
            this.by = null;
            this.k = null;
            this.a = 0;
            this.b = 0;
            this.n = null;
            this.b1 = null;
            this.m = null;
            this.b0 = null;
            this.ca = new Thickness(0, 0);
            this.cb = new Thickness(0, 0);
            this.h = null;
            this.z = new Dictionary$2(String_$type, Tuple$2.$.specialize(DomWrapper_$type, RenderingContext.$), 0);
            this.al = -1;
            this.am = -1;
            this.s = null;
            this.j = a;
        }
        bi() {
        }
        bf(a) {
            if (a == null) {
                if (this.f != null) {
                    this.f.aq();
                }
                this.ae = null;
                if (this.af != null) {
                    this.af.remove();
                }
                this.af = null;
                if (this.aj != null) {
                    this.aj.remove();
                }
                this.aj = null;
                if (this.ai != null) {
                    this.ai.remove();
                }
                this.ai = null;
                if (this.ag != null) {
                    this.ag.remove();
                }
                this.ag = null;
                if (this.ak != null) {
                    this.ak.remove();
                }
                this.ak = null;
                this.t = null;
                this.w = null;
                this.v = null;
                this.u = null;
                if (this.ah != null) {
                    this.ah.remove();
                }
                this.ah = null;
                this.f = null;
                this.j.n.bo.u(null);
                this.j.n.ah.j(null);
                this.j.n.ai.j(null);
                this.j.n.ag.j(null);
                this.j.a.j(null);
                return;
            }
            this.ae = a;
            this.j.n.bo.u(this.ae);
            this.j.n.ah.j(this.ae);
            this.j.n.ai.j(this.ae);
            this.j.n.ag.j(this.ae);
            this.j.a.j(this.ae);
            this.j.n.al.z(this.ae);
            this.bh();
            this.ae.rootWrapper.setStyleProperty("position", "relative");
            this.af = this.ae.createElement("canvas");
            this.af.setStyleProperty("position", "absolute");
            this.af.setStyleProperty("top", "0px");
            this.af.setStyleProperty("left", "0px");
            this.aj = this.ae.createElement("canvas");
            this.aj.setStyleProperty("position", "absolute");
            this.aj.setStyleProperty("top", "0px");
            this.aj.setStyleProperty("left", "0px");
            this.ai = this.ae.createElement("canvas");
            this.ai.setStyleProperty("position", "absolute");
            this.ai.setStyleProperty("top", "0px");
            this.ai.setStyleProperty("left", "0px");
            this.ag = this.ae.createElement("canvas");
            this.ag.setStyleProperty("position", "absolute");
            this.ag.setStyleProperty("top", "0px");
            this.ag.setStyleProperty("left", "0px");
            this.ak = this.ae.createElement("canvas");
            this.ak.setStyleProperty("position", "absolute");
            this.ak.setStyleProperty("top", "0px");
            this.ak.setStyleProperty("left", "0px");
            this.ae.append(this.af);
            this.ae.append(this.ai);
            this.ae.append(this.aj);
            this.t = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.af));
            this.w = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.aj));
            this.v = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ai));
            if (this.j.n.ao != 1) {
                this.u = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ag));
                this.s = this.u;
            }
            else {
                this.u = new RenderingContext(null, null);
            }
            this.x = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ak));
            this.j.dm(this.t);
            this.j.cv(this.ae.rootWrapper.width(), this.ae.rootWrapper.height());
            {
                if ((TypeRegistrar.isRegistered('CanvasGestureDOMEventProxy'))) {
                    let overlayCanvas_ = this.aj;
                    let container_ = this.ae;
                    this.f = (TypeRegistrar.create('CanvasGestureDOMEventProxy', overlayCanvas_, container_, false));
                }
                else {
                    this.f = null;
                }
                if (this.f != null) {
                    this.f.al = runOn(this.j, this.j.ar);
                }
            }
            this.ah = this.ae.createElement("div");
            this.ah.hide();
            this.ah.setStyleProperty("position", "absolute");
            this.ah.setStyleProperty("z-index", "10000");
            this.ah.addClass(this.j.n.g1);
            this.ae.append(this.ah);
        }
        static bx(a, b) {
            b();
            return;
        }
        bh() {
            this.j.dx();
            this.j.d8();
            this.bo();
        }
        a9() {
            let a = this.j.n.ek;
            let b = this.j.n.ea;
            if (!isNaN_(a) && a != 0) {
                return;
            }
            if (window.devicePixelRatio != undefined && window.devicePixelRatio != b) {
                this.j.n.ea = window.devicePixelRatio;
            }
        }
        g() {
            if ((TypeRegistrar.isRegistered('XamOverviewPlusDetailPane'))) {
                let overlayCanvas_ = this.aj;
                let container_ = this.ae;
                return (TypeRegistrar.create('XamOverviewPlusDetailPane'));
            }
            return null;
        }
        bl() {
            this.aj.setStyleProperty("cursor", "default");
        }
        bm() {
            this.aj.setStyleProperty("cursor", "pointer");
        }
        b2() {
            return ((() => {
                let $ret = new Brush();
                $ret.fill = "#000000";
                return $ret;
            })());
        }
        ay(a, b, c) {
            this.ab = a;
            this.aa = b;
            this.ac = c;
            let d = a;
            let e = b;
            if (c != 1) {
                d = Math.round(a * c);
                e = Math.round(b * c);
            }
            if (this.af != null) {
                this.af.setAttribute("width", d.toString());
                this.af.setAttribute("height", e.toString());
                this.af.setStyleProperty("width", a.toString() + "px");
                this.af.setStyleProperty("height", b.toString() + "px");
            }
            if (this.aj != null) {
                this.aj.setAttribute("width", d.toString());
                this.aj.setAttribute("height", e.toString());
                this.aj.setStyleProperty("width", a.toString() + "px");
                this.aj.setStyleProperty("height", b.toString() + "px");
                this.aj.setAttribute("tabindex", "0");
                this.aj.setStyleProperty("outline", "0");
            }
            if (this.ai != null) {
                this.ai.setAttribute("width", d.toString());
                this.ai.setAttribute("height", e.toString());
                this.ai.setStyleProperty("width", a.toString() + "px");
                this.ai.setStyleProperty("height", b.toString() + "px");
            }
            if (this.ag != null) {
                this.ag.setAttribute("width", d.toString());
                this.ag.setAttribute("height", e.toString());
                this.ag.setStyleProperty("width", a.toString() + "px");
                this.ag.setStyleProperty("height", b.toString() + "px");
            }
            if (this.ak != null) {
                this.ak.setAttribute("width", d.toString());
                this.ak.setAttribute("height", e.toString());
                this.ak.setStyleProperty("width", a.toString() + "px");
                this.ak.setStyleProperty("height", b.toString() + "px");
            }
            this.j.n.ah.n();
            this.j.n.ai.n();
            this.j.n.ag.n();
        }
        b7() {
            if (this.f == null) {
                return { $type: Point_$type, x: 0, y: 0 };
            }
            let a = this.f.be(this.ae.rootWrapper);
            return { $type: Point_$type, x: a.left, y: a.top };
        }
        y() {
            return false;
        }
        bb(a) {
        }
        a7(a, b, c, d, e) {
            let f = this.e();
            a = f.a;
            b = f.f;
            c = f.k;
            d = f.h;
            e = f.i;
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d,
                p4: e
            };
        }
        e() {
            let a = new DefaultPaletteInfo();
            a.a = new BrushCollection();
            a.f = new BrushCollection();
            a.b = new BrushCollection();
            a.c = new BrushCollection();
            let b = new List$1(String_$type, 0);
            b.add("background-image");
            this.ae.startCSSQuery();
            let c = this.ae.getCssDefaultValuesForClassCollection("ui-chart-fill-palette-", b.toArray());
            let d = c.length;
            let e = this.ae.getCssDefaultValuesForClassCollection("ui-chart-outline-palette-", b.toArray());
            let f = e.length;
            let g = this.ae.getCssDefaultValuesForClassCollection("ui-chart-marker-fill-palette-", b.toArray());
            let h = g.length;
            let i = this.ae.getCssDefaultValuesForClassCollection("ui-chart-marker-outline-palette-", b.toArray());
            let j = i.length;
            for (let k = 0; k < d; k++) {
                a.a.add(CssGradientUtil.brushFromGradientString(c[k][0]));
            }
            for (let l = 0; l < f; l++) {
                a.f.add(CssGradientUtil.brushFromGradientString(e[l][0]));
            }
            for (let m = 0; m < h; m++) {
                a.b.add(CssGradientUtil.brushFromGradientString(g[m][0]));
            }
            for (let n = 0; n < j; n++) {
                a.c.add(CssGradientUtil.brushFromGradientString(i[n][0]));
            }
            b.clear();
            let o = 0;
            let p = 0;
            let q = Math.min(d, f);
            let r = null;
            if (d == 0) {
                b.add("background-color");
            }
            if (f == 0) {
                b.add("border-top-color");
                p = d == 0 ? 1 : 0;
            }
            if (b.count > 0) {
                r = this.ae.getCssDefaultValuesForClassCollection("ui-chart-palette-", b.toArray());
                q = r.length;
            }
            if (d == 0) {
                if (q > 0) {
                    for (let s = 0; s < q; s++) {
                        let t = new Brush();
                        t._fill = r[s][o];
                        a.a.add(t);
                    }
                }
                else {
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#50a8be";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#fc6754";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#fec33c";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#3c6399";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#91af49";
                        return $ret;
                    })()));
                }
            }
            if (f == 0) {
                if (q > 0) {
                    for (let u = 0; u < q; u++) {
                        let v = new Brush();
                        v._fill = r[u][p];
                        a.f.add(v);
                    }
                }
                else {
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#B1BFC9";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#798995";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#4F606C";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#374650";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#162C3B";
                        return $ret;
                    })()));
                }
            }
            b.clear();
            let w = Math.min(h, j);
            if (h == 0) {
                b.add("background-color");
            }
            if (j == 0) {
                b.add("border-top-color");
                p = h == 0 ? 1 : 0;
            }
            if (b.count > 0) {
                r = this.ae.getCssDefaultValuesForClassCollection("ui-chart-marker-palette-", b.toArray());
                w = r.length;
            }
            if (h == 0) {
                if (w > 0) {
                    for (let x = 0; x < w; x++) {
                        let y = ((() => {
                            let $ret = new Brush();
                            $ret.fill = r[x][o];
                            return $ret;
                        })());
                        a.b.add(y);
                    }
                }
                else {
                    a.b.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#FFFFFF";
                        return $ret;
                    })()));
                }
            }
            if (j == 0) {
                if (w > 0) {
                    for (let z = 0; z < w; z++) {
                        let aa = ((() => {
                            let $ret = new Brush();
                            $ret.fill = r[z][p];
                            return $ret;
                        })());
                        a.c.add(aa);
                    }
                }
                else {
                    for (let ab of fromEnum(a.a)) {
                        a.c.add(ab);
                    }
                }
            }
            let ac = this.ae.getCssDefaultPropertyValue("ui-chart-axis", "border-top-color");
            if (ac != null) {
                a.i = new Brush();
                a.i._fill = ac;
            }
            else {
                let ad = new Brush();
                ad._fill = "#989EA3";
                a.i = ad;
            }
            a.k = new Brush();
            a.k._fill = this.ae.getCssDefaultPropertyValue("", "color");
            a.j = a.k;
            let ae = this.ae.getCssDefaultPropertyValue("ui-chart-crosshair", "border-top-color");
            if (ae != null) {
                a.j = new Brush();
                a.j._fill = ae;
            }
            this.ae.endCSSQuery();
            a.h = FontUtil.getFont(this.ae);
            let af = ((() => {
                let $ret = new Brush();
                $ret.fill = "#C62828";
                return $ret;
            })());
            a.d = new BrushCollection();
            a.d.add(af);
            a.e = new BrushCollection();
            a.e.add(af);
            return a;
        }
        a6(a, b, c, d, e, f) {
            this.ae.startCSSQuery();
            let g = this.ae.getCssDefaultPropertyValue("ui-chart-area-fill-opacity", "opacity");
            a = g != null ? parseFloat(g) : 1;
            b = new Array(4);
            let h = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-top");
            let i = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-right");
            let j = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-bottom");
            let k = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-left");
            b[0] = h != null ? parseFloat(h) : NaN;
            b[1] = i != null ? parseFloat(i) : NaN;
            b[2] = j != null ? parseFloat(j) : NaN;
            b[3] = k != null ? parseFloat(k) : NaN;
            c = d = null;
            let l = this.ae.getCssDefaultPropertyValue("ui-chart-axis-stroke", "border-top-color");
            if (l != null) {
                let m = new Brush();
                m._fill = l;
                c = m;
            }
            let n = this.ae.getCssDefaultPropertyValue("ui-chart-axis-major-line", "border-top-color");
            if (n != null) {
                let o = new Brush();
                o._fill = n;
                d = o;
            }
            let p = this.ae.getCssDefaultPropertyValue("ui-chart-aligned-gridlines", "visibility");
            f = p != null && p == "visible";
            let q = this.ae.getCssDefaultPropertyValue("ui-chart-category-axis-tick", "height");
            if (q != null) {
                e = parseFloat(q);
                if (Math.abs(e) > 4000) {
                    e = 0;
                }
            }
            else {
                q = this.ae.getCssDefaultPropertyValue("ui-chart-category-axis-tick", "width");
                e = q != null ? parseFloat(q) : 0;
            }
            this.ae.endCSSQuery();
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f
            };
        }
        ax() {
            this.ah.removeChildren();
        }
        bt(x_) {
            let box_ = this.ah;
            let offset_ = this.f.be(this.ah);
            let a = this.b7();
            x_ = a.x + this.j.n.m5.left + x_;
            box_.setOffset(x_, this.j.n.m5.top + this.ad + a.y);
        }
        bu(y_) {
            this.ad = y_;
            let box_ = this.ah;
            let offset_ = this.ah.getOffset();
            let a = this.b7();
            y_ = this.j.n.m5.top + this.ad + a.y;
            box_.setOffset(offset_.left, y_);
        }
        at(a) {
            let b = a;
            b.show();
            this.ah.append(b);
        }
        a8() {
            this.ah.hide();
        }
        bn() {
            this.ah.show();
        }
        au(a) {
            this.ae.appendToBody(a);
        }
        bj(a) {
            a.remove();
        }
        bc() {
            if (this.ae == null) {
                return;
            }
            this.a9();
            this.j.cv(this.ae.rootWrapper.width(), this.ae.rootWrapper.height());
        }
        p() {
            return this.l;
        }
        cd() {
            return this.b9;
        }
        as() {
            return this.aq;
        }
        ar() {
            return this.ap;
        }
        cc() {
            return this.b8;
        }
        b4() {
            return this.bz;
        }
        b3() {
            return this.by;
        }
        o() {
            return this.k;
        }
        c() {
            return this.a;
        }
        d() {
            return this.b;
        }
        r() {
            return this.n;
        }
        b6() {
            return this.b1;
        }
        q() {
            return this.m;
        }
        b5() {
            return this.b0;
        }
        ce() {
            return this.ca;
        }
        cf() {
            return this.cb;
        }
        bo() {
            this.ae.startCSSQuery();
            this.bq();
            this.bp();
            this.bs();
            this.br();
            this.bw();
            this.ae.endCSSQuery();
        }
        bw() {
            let a = "ui-chart-pointer-tooltip";
            let b = this.ae.getCssDefaultPropertyValue(a, "background-color");
            let c = this.ae.getCssDefaultPropertyValue(a, "border-top-color");
            let d = this.ae.getCssDefaultPropertyValue(a, "border-top-left-radius");
            let e = this.ae.getCssDefaultPropertyValue(a, "border-top-width");
            let f = new PointerTooltipStyle();
            f.a = d != null ? parseFloat(d) : 0;
            f.c = b != null ? Brush.create(b) : ((() => {
                let $ret = new Brush();
                $ret.fill = "white";
                return $ret;
            })());
            f.d = c != null ? Brush.create(c) : ((() => {
                let $ret = new Brush();
                $ret.fill = "gray";
                return $ret;
            })());
            f.b = e != null ? parseFloat(e) : 0;
            this.h = f;
        }
        bq() {
            let a = "ui-chart-title";
            this.l = FontUtil.getFontForClass(this.ae, a);
            this.bz = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            this.aq = this.ae.getCssDefaultPropertyValue(a, "text-align");
            if (this.aq == null) {
                this.aq = "center";
            }
            let b = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let f = b != null ? parseFloat(b) : 0;
            let g = c != null ? parseFloat(c) : 0;
            let h = d != null ? parseFloat(d) : 0;
            let i = e != null ? parseFloat(e) : 0;
            this.b9 = new Thickness(1, h, f, i, g);
        }
        bp() {
            let a = "ui-chart-subtitle";
            this.k = FontUtil.getFontForClass(this.ae, a);
            this.by = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            this.ap = this.ae.getCssDefaultPropertyValue(a, "text-align");
            if (this.ap == null) {
                this.ap = "center";
            }
            let b = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let f = b != null ? parseFloat(b) : 0;
            let g = c != null ? parseFloat(c) : 0;
            let h = d != null ? parseFloat(d) : 0;
            let i = e != null ? parseFloat(e) : 0;
            this.b8 = new Thickness(1, h, f, i, g);
        }
        br() {
            let a = "ui-chart-horizontal-axis-title";
            this.m = FontUtil.getFontForClass(this.ae, a);
            this.b0 = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            let b = this.ae.getCssDefaultPropertyValue(a, "vertical-align");
            if (b == null) {
                this.a = 0;
            }
            else if (b.toLowerCase() == "bottom") {
                this.a = 4;
            }
            else {
                this.a = 3;
            }
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let f = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let g = c != null ? parseFloat(c) : 2;
            let h = d != null ? parseFloat(d) : 2;
            let i = e != null ? parseFloat(e) : 2;
            let j = f != null ? parseFloat(f) : 2;
            this.ca = new Thickness(1, i, g, j, h);
        }
        bs() {
            let a = "ui-chart-vertical-axis-title";
            this.n = FontUtil.getFontForClass(this.ae, a);
            this.b1 = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            let b = this.ae.getCssDefaultPropertyValue(a, "text-align");
            if (b == null) {
                this.b = 0;
            }
            else if (b.toLowerCase() == "right") {
                this.b = 2;
            }
            else {
                this.b = 1;
            }
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let f = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let g = c != null ? parseFloat(c) : 0;
            let h = d != null ? parseFloat(d) : 0;
            let i = e != null ? parseFloat(e) : 0;
            let j = f != null ? parseFloat(f) : 0;
            this.cb = new Thickness(1, i, g, j, h);
        }
        a5(a, b) {
            let c = this.j.n.ea;
            if (a != this.ab || b != this.aa || c != this.ac) {
                this.ay(a, b, this.j.n.ea);
                this.j.n.ah.i();
                this.j.a.i();
            }
        }
        i() {
            return this.h;
        }
        ba(a) {
            if (this.f == null) {
                return;
            }
            this.f.aa = a;
            this.f.al = runOn(this.j, this.j.ar);
        }
        an(a, b, c) {
            let d;
            if (!((() => { let e = this.z.tryGetValue(b.iD.toString(), d); d = e.p1; return e.ret; })())) {
                let e = this.ae.createElement("canvas");
                e.setAttribute("width", c.toString());
                e.setAttribute("height", c.toString());
                e.setStyleProperty("width", c.toString() + "px");
                e.setStyleProperty("height", c.toString() + "px");
                let f = this.ae.get2DCanvasContext(e);
                let g = new RenderingContext(new CanvasViewRenderer(), f);
                let h = new Tuple$2(DomWrapper_$type, RenderingContext.$, e, g);
                d = h;
                this.z.addItem(b.iD.toString(), d);
            }
            let i = new Rect(0, 0, 0, c, c);
            let j = new RenderSurface();
            j.a = d.d;
            for (let k = 0; k < this.j.n.series.count; k++) {
                let l = this.j.n.series._inner[k];
                l.jd(i, a, j, "tile", 1);
            }
            this.j.n.ag.i();
            return d.c;
        }
        a2(a) {
            this.z.removeItem(a.iD.toString());
        }
        a1() {
            this.z.clear();
        }
        bk(a) {
            for (let b = 0; b < a.count; b++) {
                let c = a._inner[b];
                let d = c.content;
                this.j.x.m(d.getNativeElement(), 1, c.xPosition + this.j.n.m5.left, c.yPosition + this.j.n.m5.top, c.width, c.height);
            }
        }
        az() {
            if (this.al != -1) {
                this.av();
            }
            if (this.ae != null) {
                this.al = this.ae.setTimeout(() => this.j.n.a1.f$i(this.j.n), 5000);
            }
            else {
                this.al = window.setTimeout(() => this.j.n.a1.f$i(this.j.n), 5000);
            }
        }
        av() {
            if (this.al != -1) {
                if (this.ae != null) {
                    this.ae.clearTimeout(this.al);
                }
                else {
                    window.clearTimeout(this.al);
                }
                this.al = -1;
            }
        }
        a0(a) {
            if (this.am != -1) {
                this.aw();
            }
            if (this.ae != null) {
                this.ae.setTimeout(() => this.j.n.hk(), a);
            }
            else {
                this.am = window.setTimeout(() => this.j.n.hk(), a);
            }
        }
        aw() {
            if (this.am != -1) {
                if (this.ae != null) {
                    this.ae.clearTimeout(this.am);
                }
                else {
                    window.clearTimeout(this.am);
                }
                this.am = -1;
            }
        }
        bd() {
            if (this.j.n.ao != 1) {
                if (this.s == null) {
                    this.u = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ag));
                    this.s = this.u;
                }
                else {
                    this.u = this.s;
                }
            }
            else {
                this.u = new RenderingContext(null, null);
            }
            this.j.dl(this.u);
        }
        bv(a) {
            if (this.ae != null) {
                let b = "igTouch";
                if (a) {
                    this.ae.rootWrapper.addClass(b);
                }
                else {
                    this.ae.rootWrapper.removeClass(b);
                }
            }
        }
        a3() {
        }
        a4() {
        }
        bg() {
            if (this.f != null) {
                this.f.bb(this.aj, "");
            }
        }
        be() {
            this.a9();
            if (this.f != null) {
                this.f.ap(this.aj, "");
            }
        }
        ao(a, b) {
            let c = this.ae.createElement("canvas");
            c.setStyleProperty("width", a + "px");
            c.setStyleProperty("height", b + "px");
            c.setProperty("width", a);
            c.setProperty("height", b);
            let d = this.ae.get2DCanvasContext(c);
            if (this.t != null) {
                d.drawImage(this.af.getNativeElement(), 0, 0, a, b);
            }
            if (this.v != null) {
                d.drawImage(this.ai.getNativeElement(), 0, 0, a, b);
            }
            if (this.w != null) {
                d.drawImage(this.aj.getNativeElement(), 0, 0, a, b);
            }
            let e = this.ae.createElement("img");
            let sCanv_ = c.getNativeElement();
            e.setProperty("src", sCanv_.toDataURL('image/png'));
            return e.getNativeElement();
        }
    }
    SeriesViewerViewManager.$t = /*@__PURE__*/ markType(SeriesViewerViewManager, 'SeriesViewerViewManager');
    return SeriesViewerViewManager;
})();
/**
 * @hidden
 */
export let AutoRangeCalculator = /*@__PURE__*/ (() => {
    class AutoRangeCalculator extends Base {
        static a(a, b, c, d, e, f, g) {
            f = !isNaN_(b) && !isInfinity(b) ? b : Number.POSITIVE_INFINITY;
            g = !isNaN_(c) && !isInfinity(c) ? c : Number.NEGATIVE_INFINITY;
            let h = f;
            let i = g;
            if (isInfinity(h) || isInfinity(i)) {
                if (a != null) {
                    let j = a.ji();
                    if (j != null) {
                        h = Math.min(h, j.c);
                        i = Math.max(i, j.b);
                    }
                }
            }
            if (!isInfinity(h) && !isInfinity(i)) {
                if (h == i && h != 0) {
                    h *= h > 0 ? 0.9 : 1.1;
                    i *= i > 0 ? 1.1 : 0.9;
                }
                if (h == i && h == 0) {
                    i = 1;
                }
                if (b > c) {
                    let k = c;
                    c = b;
                    b = k;
                }
                let l = isNaN_(b) || isInfinity(b) ? h : b;
                let m = isNaN_(c) || isInfinity(c) ? i : c;
                if (d) {
                    if (l <= 0) {
                        if (m > 1) {
                            l = 1;
                        }
                        else {
                            l = Math.pow(e, Math.floor(logBase(m, e)));
                        }
                    }
                    if (isNaN_(b) || isInfinity(b)) {
                        let n = logBase(l, e);
                        h = Math.pow(e, Math.floor(n));
                    }
                    else {
                        h = l;
                    }
                    if (isNaN_(c) || isInfinity(c)) {
                        i = Math.pow(e, Math.ceil(logBase(m, e)));
                    }
                    else {
                        i = m;
                    }
                }
                else {
                    let o = Math.pow(10, Math.floor(log10(m - l)) - 1);
                    let p = a.dx();
                    if (a != null && p > 0 && (!a.jz && !a.jy)) {
                        let q = new LinearNumericSnapper(0, h, i, p, a.eb());
                        o = q.g;
                    }
                    if ((isNaN_(b) || isInfinity(b)) && !isNaN_(h) && !isNaN_(o) && o != 0) {
                        {
                            h = o * Math.floor(h / o);
                        }
                    }
                    else {
                        h = l;
                    }
                    if ((isNaN_(c) || isInfinity(c)) && !isNaN_(i) && !isNaN_(o) && o != 0) {
                        let r = Math.ceil(i / o);
                        {
                            i = o * r;
                        }
                    }
                    else {
                        i = m;
                    }
                }
            }
            f = h;
            g = i;
            return {
                p5: f,
                p6: g
            };
        }
    }
    AutoRangeCalculator.$t = /*@__PURE__*/ markType(AutoRangeCalculator, 'AutoRangeCalculator');
    return AutoRangeCalculator;
})();
/**
 * @hidden
 */
export let IAxisAnnotationManager_$type = /*@__PURE__*/ new Type(null, 'IAxisAnnotationManager');
/**
 * @hidden
 */
export let AxisLabelSettings = /*@__PURE__*/ (() => {
    class AxisLabelSettings extends Base {
        constructor() {
            super();
            this.aa = null;
            this.ax = null;
            this.b = 1;
            this.a2 = 0;
            this.h = true;
            this.c = 0;
            this.a = null;
            this.m = 0;
            this.o = NaN;
            this.p = 2;
            this.q = 2;
            this.r = 2;
            this.n = 2;
            this.au = 0;
            this.az = 1;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.f = null;
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.aq(a, b.propertyName, b.oldValue, b.newValue));
        }
        get textStyle() {
            return this.aa;
        }
        set textStyle(a) {
            let b = this.aa;
            this.aa = a;
            this.ar("TextStyle", b, a);
        }
        get textColor() {
            return this.ax;
        }
        set textColor(a) {
            let b = this.ax;
            this.ax = a;
            this.ar("TextColor", b, a);
        }
        get location() {
            return this.b;
        }
        set location(a) {
            let b = this.b;
            this.b = a;
            this.ar("Location", enumGetBox(AxisLabelsLocation_$type, b), enumGetBox(AxisLabelsLocation_$type, a));
        }
        get visibility() {
            return this.a2;
        }
        set visibility(a) {
            let b = this.a2;
            this.a2 = a;
            this.ar("Visibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, a));
        }
        get showFirstLabel() {
            return this.h;
        }
        set showFirstLabel(a) {
            let b = this.h;
            this.h = a;
            this.ar("ShowFirstLabel", b, a);
        }
        registerAxis(a) {
            this.a = a;
        }
        unregisterAxis(a) {
            this.a = null;
        }
        get angle() {
            return this.m;
        }
        set angle(a) {
            let b = this.m;
            this.m = a;
            this.ar("Angle", b, a);
        }
        get extent() {
            return this.o;
        }
        set extent(a) {
            let b = this.o;
            this.o = a;
            this.ar("Extent", b, a);
        }
        set margin(a) {
            this.topMargin = this.rightMargin = this.bottomMargin = this.leftMargin = a;
        }
        get leftMargin() {
            return this.p;
        }
        set leftMargin(a) {
            let b = this.p;
            this.p = a;
            this.ar("LeftMargin", b, a);
        }
        get rightMargin() {
            return this.q;
        }
        set rightMargin(a) {
            let b = this.q;
            this.q = a;
            this.ar("RightMargin", b, a);
        }
        get topMargin() {
            return this.r;
        }
        set topMargin(a) {
            let b = this.r;
            this.r = a;
            this.ar("TopMargin", b, a);
        }
        get bottomMargin() {
            return this.n;
        }
        set bottomMargin(a) {
            let b = this.n;
            this.n = a;
            this.ar("BottomMargin", b, a);
        }
        get horizontalAlignment() {
            return this.au;
        }
        set horizontalAlignment(a) {
            let b = this.au;
            this.au = a;
            this.ar("HorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, a));
        }
        get verticalAlignment() {
            return this.az;
        }
        set verticalAlignment(a) {
            let b = this.az;
            this.az = a;
            this.ar("VerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, a));
        }
        ar(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        aq(a, b, c, d) {
            switch (b) {
                case "Location":
                    this.c = this.location;
                    break;
            }
            if (this.a == null || this.a.be == null) {
                return;
            }
            switch (b) {
                case "Angle":
                    this.a.ci = true;
                    this.a.ha();
                    break;
                case "TextStyle":
                    this.f = null;
                    this.a.ci = true;
                    if (this.a.bh != null) {
                        this.a.bh.hu();
                    }
                    this.a.ha();
                    break;
                case "Location":
                case "Extent":
                case "Visibility":
                case "HorizontalAlignment":
                case "VerticalAlignment":
                case "TopMargin":
                case "RightMargin":
                case "BottomMargin":
                case "LeftMargin":
                case "ShowFirstLabel":
                    this.a.ci = true;
                    if (this.a.bh != null) {
                        this.a.bh.hu();
                    }
                    this.a.ha();
                    break;
                case "TextColor":
                    this.a.ha();
                    break;
            }
        }
        j() {
            return this.m != 0;
        }
        k() {
            return !isNaN_(this.o);
        }
        get i() {
            return this.textStyle != null;
        }
        g(a) {
            if (this.f == null) {
                this.f = FontUtil.toFontInfo(a, this.textStyle);
            }
            return this.f;
        }
    }
    AxisLabelSettings.$t = /*@__PURE__*/ markType(AxisLabelSettings, 'AxisLabelSettings', Base.$, [INotifyPropertyChanged_$type]);
    AxisLabelSettings.extentPropertyDefault = NaN;
    return AxisLabelSettings;
})();
/**
 * @hidden
 */
export let TitleSettings = /*@__PURE__*/ (() => {
    class TitleSettings extends AxisLabelSettings {
        constructor() {
            super();
            this.a4 = 0;
            this.horizontalAlignment = 1;
            this.leftMargin = NaN;
            this.rightMargin = NaN;
            this.topMargin = NaN;
            this.bottomMargin = NaN;
        }
        get position() {
            return this.a4;
        }
        set position(a) {
            let b = this.a4;
            this.a4 = a;
            this.ar("AxisTitlePosition", enumGetBox(AxisTitlePosition_$type, b), enumGetBox(AxisTitlePosition_$type, a));
        }
        aq(a, b, c, d) {
            super.aq(a, b, c, d);
            if (this.a == null || this.a.bh == null) {
                return;
            }
            switch (b) {
                case "AxisTitlePosition":
                    this.a.ci = true;
                    this.a.ha();
                    break;
            }
        }
    }
    TitleSettings.$t = /*@__PURE__*/ markType(TitleSettings, 'TitleSettings', AxisLabelSettings.$);
    return TitleSettings;
})();
/**
 * @hidden
 */
export let Axis = /*@__PURE__*/ (() => {
    class Axis extends Control {
        constructor() {
            super();
            this.a3 = null;
            this.bs = null;
            this.a7 = null;
            this.a5 = null;
            this.ho = null;
            this.bm = null;
            this.bg = null;
            this.br = null;
            this.bw = false;
            this.c5 = NaN;
            this.c0 = 50;
            this.db = 0;
            this.c8 = 150;
            this.aq = 0;
            this.c4 = NaN;
            this.df = 0;
            this.da = 0;
            this.c7 = 180;
            this.bj = null;
            this.bi = null;
            this.fc = "Verdana";
            this.c6 = NaN;
            this.dh = 0;
            this.dc = 8;
            this.c9 = 16;
            this.ex = -1;
            this.ew = 1;
            this.ev = 3;
            this.ey = 0;
            this.je = 0;
            this.de = 0;
            this.dd = 2;
            this.hp = null;
            this.di = 0;
            this.cb = false;
            this.rangeChanged = null;
            this.aj = new AxisAnnotationCollection();
            this.ak = new AxisAnnotationCollection();
            this.i1 = Rect.empty;
            this.i7 = null;
            this.cx = null;
            this.cy = null;
            this.au = null;
            this.bv = false;
            this.a4 = null;
            this.eu = null;
            this.bf = null;
            this._coercionMethods = null;
            this.bu = false;
            this.cl = false;
            this.cs = false;
            this.renderRequested = null;
            this.ba = null;
            this.c2 = NaN;
            this.c3 = -1;
            this.cj = false;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.cz = null;
            this.cv = new Dictionary$2(String_$type, String_$type, 0);
            this.cu = new Dictionary$2(String_$type, FastReflectionHelper.$, 0);
            this.jd = new Size();
            this.an = new AxisComponentsForView();
            this.dk = 0;
            this.c1 = 0;
            this.bq = null;
            this.bp = null;
            this.bo = null;
            this.av = new AxisLabelSettings();
            this.et = null;
            DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
            DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
            this.dk = NaN;
            this.a3 = this.a2();
            this.gx(this.a3);
            this.a3.ag();
            this.bq = ((() => {
                let $ret = new Pool$1(TextBlock.$);
                $ret.create = runOn(this.a3, this.a3.ax);
                $ret.activate = runOn(this.a3, this.a3.aq);
                $ret.disactivate = runOn(this.a3, this.a3.as);
                $ret.destroy = runOn(this.a3, this.a3.ar);
                return $ret;
            })());
            this.bp = ((() => {
                let $ret = new Pool$1(TextBlock.$);
                $ret.create = runOn(this.a3, this.a3.ax);
                $ret.activate = runOn(this.a3, this.a3.aq);
                $ret.disactivate = runOn(this.a3, this.a3.as);
                $ret.destroy = runOn(this.a3, this.a3.ar);
                return $ret;
            })());
            this.bo = ((() => {
                let $ret = new Pool$1(Rectangle.$);
                $ret.create = runOn(this.a3, this.a3.bc);
                $ret.activate = runOn(this.a3, this.a3.p);
                $ret.disactivate = runOn(this.a3, this.a3.r);
                $ret.destroy = runOn(this.a3, this.a3.q);
                return $ret;
            })());
            this.i7 = Rect.empty;
            this.cx = new List$1(Base.$, 0);
            this.cy = new List$1(LabelPosition.$, 0);
            this.au = this.at();
            this.au.af = this.ax;
            this.au.ac = this;
            this.cz = new List$1(Series.$, 0);
            let a = this.aj;
            a.collectionResetting = delegateCombine(a.collectionResetting, runOn(this, this.gh));
            let b = this.aj;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.gg));
            let c = this.ak;
            c.collectionResetting = delegateCombine(c.collectionResetting, runOn(this, this.gj));
            let d = this.ak;
            d.collectionChanged = delegateCombine(d.collectionChanged, runOn(this, this.gi));
            this.ab = Axis.$;
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (e, f) => this.gz(e, f.propertyName, f.oldValue, f.newValue));
            this.br = (e, f) => {
                if (this.bh == null || !this.bh.cn) {
                    this.hn(f.oldRect, f.newRect);
                }
            };
            this.a3.v();
        }
        a2() {
            return new AxisView(this);
        }
        gx(a) {
        }
        gk() {
            if (this.b3) {
                this.a6.onAddAnnotations(this);
            }
        }
        get bt() {
            if (this.bs == null) {
                this.bs = new SRProvider(this.eu);
            }
            if (this.bs.l == null) {
                this.bs.l = this.eu;
            }
            return this.bs;
        }
        get a8() {
            if (this.a7 == null) {
                this.a7 = DVContainer.instance.createInstance(IAxisVisualDataManager_$type, () => this.bt.q);
            }
            return this.a7;
        }
        dx() {
            return this.i8.width;
        }
        fb() {
            return null;
        }
        fa() {
            return null;
        }
        get_b4() {
            return false;
        }
        get b4() {
            return this.get_b4();
        }
        get_cc() {
            return false;
        }
        get cc() {
            return this.get_cc();
        }
        get_b2() {
            return false;
        }
        get b2() {
            return this.get_b2();
        }
        get_ce() {
            return false;
        }
        get ce() {
            return this.get_ce();
        }
        get_ch() {
            return false;
        }
        get ch() {
            return this.get_ch();
        }
        get_cf() {
            return false;
        }
        get cf() {
            return this.get_cf();
        }
        get_b7() {
            return false;
        }
        get b7() {
            return this.get_b7();
        }
        get_cd() {
            return false;
        }
        get cd() {
            return this.get_cd();
        }
        get_b5() {
            return false;
        }
        get b5() {
            return this.get_b5();
        }
        get_b6() {
            return true;
        }
        get b6() {
            return this.get_b6();
        }
        ai() {
            return this.ah;
        }
        get a6() {
            if (this.a5 == null) {
                this.a5 = DVContainer.instance.createInstance(IAxisAnnotationManager_$type, () => this.bt.n);
                this.a5.owner = this;
            }
            return this.a5;
        }
        get b3() {
            return DVContainer.instance.checkLoaded("AnnotationFactoryManager");
        }
        gi(a, b) {
            if (!this.b3) {
                return;
            }
            this.a6.onAutoAnnotionsChanged(this, this.ak, b);
        }
        gj(a, b) {
            if (!this.b3) {
                return;
            }
            this.a6.onAutoAnnotionsReset(this, this.ak, b);
        }
        gg(a, b) {
            if (!this.b3) {
                return;
            }
            this.a6.onAnnotionsChanged(this, this.aj, b);
        }
        gh(a, b) {
            if (!this.b3) {
                return;
            }
            this.a6.onAnnotionsReset(this, this.aj, b);
        }
        provideRenderer(a) {
            this.eu = a;
            this.gl();
            this.au.af = this.ax;
        }
        gu(a, b) {
            if (!a.equals1(b)) {
                this.hm(a, b);
            }
        }
        ac() {
            super.ac();
            this.a3.aj();
        }
        get bn() {
            return this.bm;
        }
        set bn(a) {
            if (this.bn != a) {
                let b = this.bn;
                this.bm = a;
                this.g5("FastItemsSourceProvider", b, this.bm);
            }
        }
        get bh() {
            return this.bg;
        }
        set bh(a) {
            if (this.bh != a) {
                let b = this.bh;
                this.bg = a;
                this.g5("SeriesViewer", b, this.bg);
            }
        }
        get be() {
            return typeCast(XamDataChart.$, this.bh);
        }
        set be(a) {
            this.bh = a;
        }
        get cr() {
            return this.bw;
        }
        set cr(a) {
            if (this.bw == a) {
                return;
            }
            this.bw = a;
            let b = null;
            if (this.au != null && Rect.l_op_Inequality(this.au.cn, null)) {
                b = this.au.cn;
            }
            this.au = this.at();
            this.au.ac = this;
            this.au.af = this.ax;
            if (Rect.l_op_Inequality(b, null)) {
                this.au.cn = b;
            }
            if (this.bh != null && this.bh.bn != null) {
                this.au.ae.ak(this.bh.bn.w);
                this.g9(true);
            }
        }
        get ef() {
            return this.c5;
        }
        set ef(a) {
            let b = this.c5;
            if (b != a) {
                this.c5 = a;
                this.dg = a;
                this.g9(true);
            }
        }
        get dg() {
            return this.c0;
        }
        set dg(a) {
            this.c0 = a;
        }
        get el() {
            return this.db;
        }
        set el(a) {
            this.db = a;
            this.g9(true);
        }
        get ei() {
            return this.c8;
        }
        set ei(a) {
            this.c8 = a;
            this.g9(true);
        }
        get ar() {
            return this.aq;
        }
        set ar(a) {
            let b = this.aq;
            if (b != a) {
                this.aq = a;
                this.g9(true);
            }
        }
        get ee() {
            return this.c4;
        }
        set ee(a) {
            this.c4 = a;
            this.g8();
        }
        get ek() {
            return this.da;
        }
        set ek(a) {
            this.da = a;
            this.g8();
        }
        get eh() {
            return this.c7;
        }
        set eh(a) {
            this.c7 = a;
            this.g8();
        }
        get bl() {
            if (this.bj == null) {
                if (this.bi == null) {
                    this.bi = this.a3.i();
                }
                return this.bi;
            }
            return this.bj;
        }
        set bl(a) {
            this.bj = a;
            this.c6 = FontUtil.getFontSize(this.bj);
            this.g8();
        }
        get f3() {
            return this.fc;
        }
        set f3(a) {
            this.fc = a;
            let b = this.c6;
            if (isNaN_(b)) {
                b = 12;
            }
            this.bl.n = a;
            this.bl.d = b;
            this.au.bz();
            this.g8();
        }
        get eg() {
            return this.c6;
        }
        set eg(a) {
            this.c6 = a;
            this.bl = FontUtil.getFontWithNewFontSize(this.bl, this.c6);
            this.g8();
        }
        get em() {
            return this.dc;
        }
        set em(a) {
            this.dc = a;
            this.g8();
        }
        get ej() {
            return this.c9;
        }
        set ej(a) {
            this.c9 = a;
            this.g8();
        }
        get e2() {
            return this.ex;
        }
        set e2(a) {
            this.ex = a;
            this.g8();
        }
        get e1() {
            return this.ew;
        }
        set e1(a) {
            this.ew = a;
            this.g8();
        }
        get e0() {
            return this.ev;
        }
        set e0(a) {
            this.ev = a;
            this.g8();
        }
        get jh() {
            return this.je;
        }
        set jh(a) {
            this.je = a;
            this.g8();
        }
        get eo() {
            return this.de;
        }
        set eo(a) {
            this.de = a;
            this.g8();
        }
        get en() {
            return this.dd;
        }
        set en(a) {
            this.dd = a;
            this.g8();
        }
        hg() {
            this.au.ce();
        }
        g8() {
            this.g9(false);
        }
        g9(a) {
            if (a) {
                this.au.cd();
            }
            this.ci = true;
            this.g7();
        }
        hi() {
            if (this.eq > 0) {
                this.di = this.eq;
                return;
            }
            let a = typeCast(XamDataChart.$, this.bh);
            if (a != null && isNaN_(this.eq) && this.b4 && (this.ch || this.a0 == 0)) {
                this.di = a.nl.fg;
                return;
            }
            this.di = 0;
        }
        get cq() {
            return this.c(Axis.ik);
        }
        set cq(a) {
            this.h(Axis.ik, a);
        }
        dm() {
            return 0;
        }
        il() {
            if (this.ch) {
                return 2;
            }
            return 0;
        }
        jf() {
            return 1;
        }
        im() {
            return 1;
        }
        jg() {
            return 1;
        }
        dp() {
            if (this.ch) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        dr() {
            if (!this.ch && !this.b2) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        dq() {
            if (this.ch) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        dn() {
            if (!this.ch && !this.b2) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        du() {
            return NaN;
        }
        dw() {
            return NaN;
        }
        dv() {
            return NaN;
        }
        dt() {
            return NaN;
        }
        ay() {
            if (this.ch) {
                return 2;
            }
            if (this.ce) {
                return 5;
            }
            return 1;
        }
        az() {
            return 1;
        }
        g6(a) {
            if (this.rangeChanged != null) {
                this.rangeChanged(this, a);
            }
        }
        ds() {
            if (this.ch) {
                return -90;
            }
            return 0;
        }
        dl() {
            return NaN;
        }
        get al() {
            return this.aj;
        }
        get am() {
            return this.ak;
        }
        get i8() {
            if (this.i7.isEmpty) {
                return this.i1;
            }
            return this.i7;
        }
        set i8(a) {
            this.i1 = a;
        }
        hj() {
            let a = 0;
            let b = typeCast(XamDataChart.$, this.bh);
            if (b != null && b.ni == 0) {
                a = 1;
            }
            this.a3.av(a);
        }
        ct(a, b, c) {
            return this.bh != null;
        }
        cg() {
            let a = Rect.empty;
            if (this.bh != null) {
                a = this.bh.m6;
            }
            return this.ct(this.i8, a, this.a3);
        }
        hm(a, b) {
            this.i8 = b;
            this.ci = true;
            this.cn();
            this.hb(false);
            if (this.bh != null) {
                this.bh.al.ad(1, this, this.a4, b);
            }
        }
        get ci() {
            return this.bv;
        }
        set ci(a) {
            this.bv = a;
        }
        i5() {
            if (this.bh == null || this.bh.mv.isEmpty) {
                return Rect.empty;
            }
            let a = this.bh.mv;
            let b = this.i8;
            let c = (a.left - b.left) / b.width;
            let d = (a.top - b.top) / b.height;
            let e = (a.right - b.left) / b.width;
            let f = (a.bottom - b.top) / b.height;
            return new Rect(0, c, d, e - c, f - d);
        }
        hn(a, b) {
            this.ci = true;
            this.hb(true);
        }
        g7() {
            this.hb(false);
        }
        gz(a, b, c, d) {
            switch (b) {
                case Axis.$$p[9]:
                case Axis.$$p[10]:
                    if (this.fo != null) {
                        this.bf = new BindingFormatter();
                        this.bf.j = this.fo;
                        this.bf.d = this.ag;
                    }
                    else {
                        this.bf = null;
                    }
                    break;
                case "SeriesViewer":
                    let e = typeCast(SeriesViewer.$, c);
                    if (e != null) {
                        this.eu = null;
                        e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, this.br);
                        e.al.ac(1, this);
                        this.a3.aa(e);
                    }
                    let f = typeCast(SeriesViewer.$, d);
                    if (f != null) {
                        this.eu = f.bn.i.ae;
                        f.actualWindowRectChanged = delegateCombine(f.actualWindowRectChanged, this.br);
                        this.a4 = f.al.k(1, this, runOn(this, this.gp));
                        if (this.ax == null && this.eu != null) {
                            this.provideRenderer(this.eu);
                        }
                        this.a3.u(f);
                        if (this.cj && !this.a4.e) {
                            this.cj = false;
                            this.cn();
                        }
                        this.hh();
                        this.hi();
                    }
                    break;
                case Axis.$$p[7]:
                    this.hb(false);
                    break;
                case Axis.$$p[8]:
                    this.cb = this.ca;
                    let g = new AxisRangeChangedEventArgs(0, 0, 0, 1, 1);
                    this.go(g);
                    for (let h of fromEnum(this.cz)) {
                        h.ic();
                        if (h.bs != null) {
                            h.il();
                        }
                    }
                    break;
                case Axis.$$p[11]:
                    this.a3.ah();
                    if (typeCast(DataTemplate.$, d) !== null) {
                        this.cs = true;
                    }
                    else {
                        this.cs = false;
                    }
                    this.ci = true;
                    this.he();
                    this.hb(false);
                    break;
                case Axis.$$p[15]:
                case Axis.$$p[18]:
                case Axis.$$p[22]:
                    this.hb(false);
                    break;
                case Axis.$$p[12]:
                    let i = typeCast(AxisLabelSettings.$, d);
                    if (i != null) {
                        i.registerAxis(this);
                        this.av = i;
                    }
                    else {
                        this.av = new AxisLabelSettings();
                    }
                    if (this.au != null) {
                        this.au.af = this.av;
                    }
                    if (this.a3.m()) {
                        this.a3.w(this.av);
                    }
                    this.ci = true;
                    this.hb(false);
                    break;
                case Axis.$$p[27]:
                    this.a3.ak();
                    break;
                case Axis.$$p[28]:
                    let j = typeCast(TitleSettings.$, d);
                    if (j != null) {
                        j.registerAxis(this);
                    }
                    else {
                        j = new TitleSettings();
                    }
                    if (this.hp != null) {
                        this.hp.dataContext = j;
                    }
                    this.a3.ak();
                    this.hb(false);
                    break;
                case Axis.$$p[23]:
                    this.ci = true;
                    this.hi();
                    this.a3.ad();
                    this.hb(false);
                    break;
                case Axis.$$p[5]:
                case "UseEnhancedIntervalManagement":
                    this.ci = true;
                    this.hb(false);
                    break;
                case Axis.$$p[3]:
                    if (this.bh != null) {
                        this.bh.hu();
                    }
                    break;
                case Axis.$$p[17]:
                    this.hh();
                    if (d != null) {
                        this.cl = true;
                        this.hb(false);
                    }
                    else {
                        this.cl = false;
                    }
                    break;
                case Axis.$$p[4]:
                    if (this.ah != null) {
                        this.ah.ha();
                    }
                    break;
                case Axis.$$p[21]:
                case Axis.$$p[14]:
                    this.hh();
                    this.hb(false);
                    break;
                case Axis.$$p[20]:
                case Axis.$$p[13]:
                case Axis.$$p[16]:
                case Axis.$$p[6]:
                case Axis.$$p[25]:
                case Axis.$$p[26]:
                case Axis.$$p[24]:
                case Axis.$$p[2]:
                case Axis.$$p[0]:
                case Axis.$$p[1]:
                case Axis.$$p[19]:
                    this.hb(false);
                    break;
                case "MinExtent":
                    this.a3.ad();
                    break;
            }
        }
        get coercionMethods() {
            return this._coercionMethods;
        }
        set coercionMethods(a) {
            this._coercionMethods = a;
        }
        get_expectFunctions() {
            return this.bu;
        }
        set_expectFunctions(a) {
            this.bu = a;
        }
        get expectFunctions() {
            return this.get_expectFunctions();
        }
        set expectFunctions(a) {
            this.set_expectFunctions(a);
        }
        he() {
            this.bq.count = 0;
            this.bp.count = 0;
            this.bo.count = 0;
            if (this.a3.m()) {
                this.a3.an();
            }
        }
        gw(a, b, c, d) {
            let e = Math.min(b, c);
            let f = Math.max(b, c);
            if (e < d.bottom && f > d.top) {
                let g = new RectangleGeometry();
                g.e = new Rect(0, d.left, e, d.width, f - e);
                a.add(g);
            }
        }
        gv(a, b, c, d, e) {
            let f = b <= c.bottom && b >= c.top;
            if (!e && f) {
                f = !this.b9(b, d.c, c, false);
            }
            if (f) {
                if (d.a) {
                    b = this.dj(b, c.top, c.bottom, d);
                }
                let g = new LineGeometry();
                g.d = { $type: Point_$type, x: c.left, y: b };
                g.c = { $type: Point_$type, x: c.right, y: b };
                a.add(g);
            }
        }
        hl(a, b, c, d) {
            let e = Math.min(b, c);
            let f = Math.max(b, c);
            if (f > d.left && e < d.right) {
                let g = new RectangleGeometry();
                g.e = new Rect(0, e, d.top, f - e, d.height);
                a.add(g);
            }
        }
        hk(a, b, c, d, e) {
            let f = b >= c.left && b <= c.right;
            if (!f) {
                let g = truncate(Math.round(b));
                let h = truncate(Math.round(c.left));
                let i = truncate(Math.round(c.right));
                if (g >= h && g <= i) {
                    f = true;
                }
            }
            if (!e && f) {
                f = !this.b9(b, d.c, c, true);
            }
            if (f) {
                if (d.a) {
                    b = this.dj(b, c.left, c.right, d);
                }
                let j = new LineGeometry();
                j.d = { $type: Point_$type, x: b, y: c.top };
                j.c = { $type: Point_$type, x: b, y: c.bottom };
                a.add(j);
            }
        }
        b9(a, b, c, d) {
            let e = false;
            let f = typeCast(XamDataChart.$, this.bh);
            if (f != null && f.nw && !c.isEmpty) {
                for (let g of fromEnum(f.axes)) {
                    if (g._visibility != 0 || g.ep < 1 || g.iq == null || BrushUtilCore.a(g.iq) || g.i8.isEmpty) {
                        continue;
                    }
                    if (g.ah != null && g.b0()) {
                        let h = this.ch ? c.left : c.top;
                        let i = 0;
                        let j = g.hf(h, i, g.bh.m6, c, g.i3(), d ? c.left : c.top, d ? c.right : c.bottom);
                        h = j.p0;
                        i = j.p1;
                        let k = Rect.empty;
                        let l = Rect.empty;
                        if (d && g.ch) {
                            k = new Rect(0, h - (g.ep / 2), g.i8.top, g.ep, g.i8.height);
                            l = new Rect(0, a - (b / 2), c.top, b, c.height);
                        }
                        else if (!d && !g.ch) {
                            k = new Rect(0, g.i8.left, h - (g.ep / 2), g.i8.width, g.ep);
                            l = new Rect(0, c.left, a - (b / 2), c.width, b);
                        }
                        if (k.left <= l.right && l.left <= k.right && k.top <= l.bottom && l.top <= k.bottom) {
                            e = true;
                            break;
                        }
                    }
                    else {
                        let m = Rect.empty;
                        let n = Rect.empty;
                        if (d && g.ch) {
                            m = new Rect(0, g.i8.left, g.i8.top, g.ep, g.i8.height);
                            n = new Rect(0, a - (b / 2), c.top, b, c.height);
                        }
                        else if (!d && !g.ch) {
                            m = new Rect(0, g.i8.left, g.i8.bottom - (g.ep / 2), g.i8.width, g.ep);
                            n = new Rect(0, c.left, a - (b / 2), c.width, b);
                        }
                        if (m.left <= n.right && n.left <= m.right && m.top <= n.bottom && n.top <= m.bottom) {
                            e = true;
                            break;
                        }
                    }
                }
            }
            return e;
        }
        hf(a, b, c, d, e, f, g) {
            let h = Math.abs(f - g);
            a = this.e4;
            a = this.ah.ed(a);
            let i = typeCast(CategoryAxisBase.$, this.ah);
            if (i != null && i.categoryMode == 2) {
                let j = 0.5 * i.getCategorySize(c, d, e);
                let k = i.a0 == 0;
                if (i.ca == k) {
                    j = -j;
                }
                a = a + j;
            }
            b = a - f;
            if (a < f) {
                a = f;
            }
            else if (a > g) {
                a = g;
            }
            if (b < 0) {
                b = 0;
            }
            else if (b > h) {
                b = h;
            }
            return {
                p0: a,
                p1: b
            };
        }
        dj(a, b, c, d) {
            let e = a;
            if (d != null && d.c > 0) {
                let f = d.c % 2;
                if (f == 0 || f == 1) {
                    let g = 1;
                    e = Math.floor(a);
                    if (e + 0.5 < a) {
                        g = -1;
                        e = Math.ceil(a);
                    }
                    if (f == 1) {
                        e += 0.5 * g;
                    }
                    if (e >= c) {
                        e -= 1;
                    }
                    else if (e <= b) {
                        e += 1;
                    }
                }
            }
            return e;
        }
        gn(a) {
            this.a3.z(a);
        }
        gm() {
            this.bq.count = 0;
            this.bp.count = 0;
            this.bo.count = 0;
            this.a3.x();
            this.cx.clear();
            this.cy.clear();
        }
        ha() {
            this.hb(false);
        }
        hb(a) {
            if (this.bh != null) {
                this.bh.al.ab(1, this, this.a4, a);
                if (this.renderRequested != null) {
                    let b = new RenderRequestedEventArgs();
                    b.animate = a;
                    this.renderRequested(this, b);
                    a = b.animate;
                }
            }
        }
        ec() {
            if (this.ba == null) {
                return -1;
            }
            if (isNaN_(this.ba.a)) {
                return -1;
            }
            if (this.ax != null && (this.ax.angle != 0)) {
                return -1;
            }
            return Math.max(Axis.d7, this.ba.a);
        }
        ea() {
            if (this.ba == null) {
                return -1;
            }
            if (isNaN_(this.ba.c) && isNaN_(this.c2)) {
                return -1;
            }
            if (this.ax != null && (this.ax.angle != 0)) {
                return -1;
            }
            let a = this.ba.c;
            if (!isNaN_(this.c2) && this.ez == -1) {
                return this.c2;
            }
            return Math.max(Axis.d7, this.ba.c);
        }
        eb() {
            if (this.ch) {
                return this.ec();
            }
            else {
                return this.ea();
            }
        }
        get cm() {
            return this.ez == -1;
        }
        gp(a) {
            if (this.a3.l()) {
                return;
            }
            let b = 0;
            let c = 0;
            if (this.cy != null && this.cy.count > 0) {
                b = this.cy._inner[this.cy.count - 1].c;
                c = this.cy.count;
            }
            if (this.ci && this.cq) {
                this.ba = this.a9();
            }
            this.hc(a);
            if (!this.ch && this.ci && this.cq && this.cm) {
                if (this.by()) {
                    this.hc(a);
                }
            }
            let d = 1;
            let e = 0;
            if (this.cy != null && this.cy.count > 0) {
                d = this.cy._inner[this.cy.count - 1].c;
                e = this.cy.count;
            }
            if (this.cr) {
                this.ci = true;
            }
            let f = false;
            if (d != b || e != c || this.ci) {
                this.ci = false;
                if (this.a3.m()) {
                    this.a3.ad();
                    f = true;
                }
            }
            this.a3.ac();
            if (!f) {
                this.gq();
            }
        }
        by() {
            if (!isNaN_(this.c2) || this.cx == null || this.cx.count == 0) {
                return false;
            }
            let a = this.bk();
            if (a == null) {
                return false;
            }
            let b = -1.7976931348623157E+308;
            for (let c = 0; c < this.cx.count; c++) {
                let d = this.cx._inner[c];
                if (typeof d === 'string') {
                    let e = FontUtil.measureStringWidth(d, a, this.a3.j);
                    b = Math.max(e, b);
                }
            }
            b += 5;
            if (this.ax != null) {
                b += this.ax.leftMargin + this.ax.rightMargin;
            }
            this.c2 = b;
            return true;
        }
        hd() {
            this.c2 = NaN;
            this.hb(false);
        }
        a9() {
            let a = this.bk();
            if (a == null) {
                return null;
            }
            let b = "W";
            let c = FontUtil.measureStringWidth(b, a, this.a3.j);
            if (this.c3 != c || this.ba == null) {
                this.c3 = c;
                let d = FontUtil.getCurrentFontHeight(this.bh.bn.i.ae, a);
                if (this.ba == null) {
                    this.ba = new LabelFontHeuristics();
                }
                this.ba.a = d;
                this.ba.b = this.ez;
                this.ba.d = c;
                this.ba.c = this.ba.d * this.ba.b;
            }
            return this.ba;
        }
        bk() {
            let a = null;
            if (this.bh != null) {
                a = this.bh.getFontInfo();
            }
            if (this.ax != null && this.ax.i) {
                if (this.bh != null) {
                    a = this.ax.g(this.bh.bn.i.ae);
                }
            }
            return a;
        }
        gq() {
            if (!this.a3.m()) {
                return;
            }
            if (!this.b1()) {
                this.a3.ab();
            }
        }
        cn() {
            return this.co(false);
        }
        co(a) {
            if (a || this.bh == null) {
                let b = this.cp();
                if (b) {
                    this.ci = true;
                }
                this.cj = false;
                return b;
            }
            if (!this.cj) {
                this.cj = true;
                this.bh.al.aa(this, this.a4);
            }
            return false;
        }
        cp() {
            return false;
        }
        hc(a) {
            if (this.hp != null) {
                if ((this.bd == null || this.bd.visibility == 0) && (this.ax == null || this.ax.visibility == 0) && this.gc != null) {
                    this.hp._visibility = 0;
                }
                else {
                    this.hp._visibility = 1;
                }
            }
        }
        hh() {
            let a = typeCast(XamDataChart.$, this.bh);
            if (a == null) {
                return;
            }
            let b = null, c = null, d = null;
            if (this.b4 && !this.b2) {
                b = a.pq;
                for (let e of fromEnum(this.cz)) {
                    if (e.c4 || e.c2 || e.c0 || e.c2) {
                        c = a.po;
                        d = a.pp;
                        break;
                    }
                }
            }
            else if (this.cc && !this.b2) {
                c = a.po;
                d = a.pp;
                b = this.ah != null ? a.pq : null;
                for (let f of fromEnum(this.cz)) {
                    if (f.c4 || f.c2 || f.c0 || f.c2) {
                        b = a.pq;
                        break;
                    }
                }
            }
            else if (this.b2 || this.a0 == 3) {
                b = a.pq;
                c = a.po;
                d = a.pp;
            }
            this.iq = this.iu != null ? this.iu : b;
            this.io = this.ir != null ? this.ir : c;
            this.ip = this.is != null ? this.is : d;
        }
        g5(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        ck(a) {
            let b = this.cz.contains(a);
            if (!b) {
                this.cz.add(a);
            }
            this.hh();
            return !b;
        }
        bx(a) {
            let b = this.cz.contains(a);
            if (b) {
                this.cz.remove(a);
            }
            this.hh();
            return b;
        }
        e6(a, b) {
            let c = this.f0(b);
            if (c == Axis.$$p[11]) {
                return this.e7(a, b, this.e9);
            }
            return null;
        }
        f0(a) {
            if (!this.cv.containsKey(a)) {
                let b = a.charAt(0).toUpperCase() + a.substr(1);
                this.cv.addItem(a, b);
            }
            return this.cv.item(a);
        }
        e7(a, b, c) {
            let d = null;
            if (!this.cu.containsKey(b)) {
                d = new FastReflectionHelper(false, c);
                this.cu.addItem(b, d);
            }
            else {
                d = this.cu.item(b);
            }
            d.propertyName = c;
            return d.getPropertyValue(a);
        }
        e8(a) {
            return this.a3.n(a);
        }
        fl(a) {
            return this.a3.o(a);
        }
        d9() {
            return NaN;
        }
        dy(a, b) {
            return 0;
        }
        dz(a, b, c) {
            return 0;
        }
        i4(a) {
            if (this.bh == null) {
                return Rect.empty;
            }
            if (!a.equals1(this.i8)) {
                return Rect.empty;
            }
            return this.bh.mv;
        }
        i3() {
            if (this.bh == null) {
                return Rect.empty;
            }
            return this.bh.mv;
        }
        i2() {
            if (this.bh == null || this.bh.mu.isEmpty) {
                return this.i8;
            }
            return this.bh.mu;
        }
        i6(a, b) {
            if (b.isEmpty) {
                return a;
            }
            return b;
        }
        d0(a, b, c) {
            let d = this.i4(c);
            let e = new ScalerParams(0, b, c, this.ca, d);
            return this.dy(a, e);
        }
        gs(a, b, c, d) {
        }
        gr(a, b, c, d, e) {
        }
        d1(a, b) {
            return 0;
        }
        d2(a, b, c) {
            return 0;
        }
        d3(a, b, c) {
            let d = this.i4(c);
            let e = new ScalerParams(0, b, c, this.ca, d);
            return this.d1(a, e);
        }
        gt(a, b, c, d) {
        }
        ed(a) {
            let b = this.i3();
            let c = new ScalerParams(0, this.bh.mr, this.i8, this.ca, b);
            return this.dy(a, c);
        }
        gy() {
            this.i7 = new Rect(0, 0, 0, this.jd.width, this.jd.height);
        }
        ao() {
            this.an.a = this.au;
            return this.an;
        }
        get d6() {
            return this.c1;
        }
        set d6(a) {
            let b = this.d6;
            if (a != b) {
                this.c1 = a;
                this.g5("MinExtent", b, this.d6);
            }
        }
        b1() {
            if (!isNaN_(this.dk)) {
                return true;
            }
            if (this.ax == null) {
                return false;
            }
            else {
                return this.ax.k();
            }
        }
        d4() {
            if (!isNaN_(this.dk)) {
                return this.dk;
            }
            if (this.ax == null) {
                return 50;
            }
            return this.ax.extent;
        }
        gl() {
            this.a3.t();
        }
        go(a) {
            this.g6(a);
        }
        get i9() {
            return this.ap().a;
        }
        get ja() {
            return this.ap().b;
        }
        get jc() {
            return this.a3.c().d;
        }
        get jb() {
            return this.ap().c;
        }
        bc() {
            return SyncManager.a(this.bg);
        }
        ap() {
            return this.a3.c();
        }
        get aw() {
            return this.av;
        }
        g0(a, b) {
            if (this.au != null) {
                this.au.b9(a);
            }
            this.a3.af(a, b);
        }
        b0() {
            return this.e4 != null;
        }
        e5() {
            return this.a8.exportVisualData(this);
        }
        *_cw() {
            for (let a = 0; a < this.cz.count; a++) {
                let b = this.cz._inner[a];
                yield b;
            }
        }
        cw() {
            return toEnum(() => this._cw());
        }
        g1(a) {
        }
        g4(a) {
        }
        g3(a) {
        }
        i0(a, b, c, d = null, e = null) {
            if (this.ch) {
                let f = new LineGeometry();
                f.d = { $type: Point_$type, x: c.left, y: a };
                f.c = { $type: Point_$type, x: c.right, y: a };
                return f;
            }
            else {
                let g = new LineGeometry();
                g.d = { $type: Point_$type, x: a, y: c.bottom };
                g.c = { $type: Point_$type, x: a, y: c.top };
                return g;
            }
        }
    }
    Axis.$t = /*@__PURE__*/ markType(Axis, 'Axis', Control.$, [INotifyPropertyChanged_$type]);
    Axis.ik = /*@__PURE__*/ DependencyProperty.i("UseEnhancedIntervalManagement", Boolean_$type, Axis.$, /*@__PURE__*/ new PropertyMetadata(2, false, (a, b) => a.g5("UseEnhancedIntervalManagement", b.oldValue, b.newValue)));
    Axis.d7 = 7;
    Axis.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, Axis, 'g5', ['ActualMajorStroke:io:hq', [Brush.$], 'ActualMinorStroke:ip:hr', [Brush.$], 'ActualStroke:iq:hs', [Brush.$], 'CrossingAxis:ah:ht', [Axis.$], 'CrossingValue:e4:hu', [4, null], 'EnhancedIntervalMinimumCharacters:ez:hv', [1, -1], 'FormatLabel:as:hw', [Delegate_$type], 'IsDisabled:b8:hx', [0, false], 'IsInverted:ca:hy', [0, false], 'LabelFormat:fo:hz', [2, null], 'LabelFormatSpecifiers:ag:h0', [Array_$type, null], 'Label:e9:h1', [4, null], 'LabelSettings:ax:h2', [AxisLabelSettings.$, null], 'MajorStrokeDashArray:iw:h3', [DoubleCollection.$], 'MajorStroke:ir:h4', [Brush.$], 'MajorStrokeThickness:d5:h5', [1, 1], 'MinorStrokeDashArray:ix:h6', [DoubleCollection.$], 'MinorStroke:is:h7', [Brush.$], 'MinorStrokeThickness:d8:h8', [1, 1], 'Strip:it:h9', [Brush.$], 'StrokeDashArray:iy:ia', [DoubleCollection.$], 'Stroke:iu:ib', [Brush.$], 'StrokeThickness:ep:ic', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'TickLength:eq:id', [1, NaN], 'TickStrokeDashArray:iz:ie', [DoubleCollection.$], 'TickStroke:iv:ig', [Brush.$], 'TickStrokeThickness:er:ih', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'Title:gc:ii', [2], 'TitleSettings:bd:ij', [TitleSettings.$, null]]);
    return Axis;
})();
/**
 * @hidden
 */
export let AxisCollection = /*@__PURE__*/ (() => {
    class AxisCollection extends ObservableCollection$1 {
        constructor() {
            super(Axis.$, 0);
            this.collectionResetting = null;
            this.propertyChanged = delegateCombine(this.propertyChanged, (a, b) => {
                if (b.propertyName == "Name") {
                    for (let c = 0; c < this.count; ++c) {
                        if (this._inner[c].name == b.propertyName) {
                            this.ac(new NotifyCollectionChangedEventArgs(2, 2, this._inner[c], this._inner[c], c));
                        }
                    }
                }
            });
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    AxisCollection.$t = /*@__PURE__*/ markType(AxisCollection, 'AxisCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(Axis.$));
    return AxisCollection;
})();
/**
 * @hidden
 */
export let AxisLabelManager = /*@__PURE__*/ (() => {
    class AxisLabelManager extends Base {
        constructor() {
            super();
            this.e = null;
            this.f = null;
            this.b = null;
            this.a = null;
            this.c = null;
            this.c = (a) => {
            };
        }
        m(a, b) {
            this.e.clear();
            this.f.clear();
            this.b.ac = this.a;
            this.b.cp = a;
            this.b.co = b;
            if (b.isEmpty || a.isEmpty) {
                this.r(0);
                this.a.bp.count = 0;
                this.a.bo.count = 0;
            }
            if (this.a.bq.count == 0 && this.a.bp.count == 0) {
                this.b.ab.clear();
            }
        }
        i(a, b) {
            this.e.add1(a);
            this.f.add(b);
        }
        s() {
            this.b.a1 = this.e;
            this.b.a2 = this.f;
        }
        static j(a) {
            AxisLabelManager.k(a, false);
        }
        static k(a, b) {
        }
        static l(a) {
            AxisLabelManager.k(a, true);
        }
        h(a) {
            this.b.ab.add(a);
        }
        q(a) {
            this.b.bn = a;
        }
        n(a) {
            this.c(a);
        }
        t(a) {
            let b = this.a.bq.item(a);
            return b;
        }
        r(a) {
            if (this.a == null) {
                return;
            }
            this.a.bq.count = a;
        }
        get d() {
            if (this.a == null || this.a.ax == null) {
                return false;
            }
            return this.a.ax.visibility != 0;
        }
        p() {
            this.a.bq.count = 0;
            this.a.bp.count = 0;
            this.a.bo.count = 0;
            this.a.au.a3.clear();
        }
        o() {
            this.a.ci = true;
        }
        g() {
            this.a.gk();
        }
    }
    AxisLabelManager.$t = /*@__PURE__*/ markType(AxisLabelManager, 'AxisLabelManager');
    return AxisLabelManager;
})();
/**
 * @hidden
 */
export let AxisLabelPanelBase = /*@__PURE__*/ (() => {
    class AxisLabelPanelBase extends Panel {
        constructor() {
            super();
            this.cl = null;
            this.bn = 0;
            this.ac = null;
            this.aj = false;
            this.ax = null;
            this.a2 = null;
            this.co = null;
            this.ck = Rect.empty;
            this.cj = null;
            this.a4 = 0;
            this.bo = null;
            this.a3 = null;
            this.a0 = null;
            this.af = null;
            this.am = false;
            this.ap = false;
            this.aq = false;
            this.ar = false;
            this.bq = null;
            this.ak = false;
            this.a5 = 50;
            this.a6 = 0;
            this.a7 = 0;
            this.a6 = NaN;
            this.co = Rect.empty;
            this.cn = Rect.empty;
            this.ae = this.ad();
            this.b8(this.ae);
            this.ae.am();
            this.a3 = new List$1(FrameworkElement.$, 0);
            this.a2 = new List$1(LabelPosition.$, 0);
            this.a0 = new List$1(Rect.$, 0);
            this.aq = false;
            this.ap = false;
            this.ar = false;
            this.am = false;
            this.aj = false;
        }
        ad() {
            return new AxisLabelPanelBaseView(this);
        }
        b8(a) {
        }
        bz() {
        }
        ce() {
        }
        cd() {
        }
        get at() {
            return this.aj;
        }
        set at(a) {
            this.aj = a;
        }
        get a1() {
            return this.ax;
        }
        set a1(a) {
            let b = this.ax;
            this.ax = a;
            if (b == null && b != a) {
                this.b5();
            }
        }
        get cp() {
            return this.ck;
        }
        set cp(a) {
            let b = this.ck;
            this.ck = a;
            this.ch(b, this.ck);
        }
        get cn() {
            return this.cj;
        }
        set cn(a) {
            let b = this.cj;
            this.cj = a;
            this.b4(b, this.cj);
        }
        get a8() {
            return this.a4;
        }
        set a8(a) {
            this.a4 = a;
        }
        al(a, b) {
            for (let c = 0; c < a.count - 1; c++) {
                if (b._inner[c]) {
                    continue;
                }
                for (let d = c; d < a.count - 1; d++) {
                    if (b._inner[d + 1]) {
                        continue;
                    }
                    if (a._inner[c].intersectsWith(a._inner[d + 1])) {
                        return true;
                    }
                }
            }
            return false;
        }
        bp(a, b, c) {
            return {
                ret: 0,
                p1: b
            };
        }
        ay() {
            return null;
        }
        bx() {
        }
        bt(a) {
        }
        bd() {
            return this.af != null ? this.af.angle : 0;
        }
        bh() {
            return this.ac.bd != null ? this.ac.bd.angle : 0;
        }
        ao(a, b) {
            if (a == 0 && !this.ac.b2 && this.af != null) {
                if (this.ac.ch) {
                    if (!this.af.showFirstLabel && this.ac.bh.eh() == 1) {
                        return false;
                    }
                }
                else {
                    if (!this.af.showFirstLabel && this.ac.bh.eg() == 1) {
                        return false;
                    }
                }
            }
            return true;
        }
        bc(a) {
            return this.ae.m(a);
        }
        bm(a) {
            return this.ae.w(a);
        }
        be(a) {
            return this.ae.n(a);
        }
        bb(a) {
            return this.ae.l(a);
        }
        an() {
            return false;
        }
        ch(a, b) {
        }
        b4(a, b) {
        }
        az() {
            if (this.ab.count < 1 || this.a2.count == 0) {
                return new List$1(Rect.$, 0);
            }
            this.a3 = new List$1(FrameworkElement.$, 0);
            this.a0 = new List$1(Rect.$, 0);
            this.bx();
            this.ae.ae();
            let a = this.bd();
            if (a % 360 == 0) {
                this.ap = false;
            }
            if (this.a3.count == 0) {
                return new List$1(Rect.$, 0);
            }
            this.a0 = this.ay();
            this.aj = true;
            return this.a0;
        }
        bg(a, b) {
            let c = a * (Math.PI / 180);
            let d = Math.abs(b.width * Math.cos(c)) + Math.abs(b.height * Math.sin(c));
            return d;
        }
        bf(a, b) {
            let c = a * (Math.PI / 180);
            let d = Math.abs(b.height * Math.cos(c)) + Math.abs(b.width * Math.sin(c));
            return d;
        }
        bk() {
            let a = this.ae.k();
            return a;
        }
        bi() {
            let a = this.ae.j();
            return a;
        }
        bj() {
            if (this.ac.gc == null || (this.ac.bd != null && this.ac.bd.visibility == 1)) {
                return 0;
            }
            let a = this.bi();
            let b = this.bk();
            let c = new Rect(0, 0, 0, b, a);
            let d = this.bh();
            let e = RectUtil.w(c, d);
            return e.height + this.ae.v() + this.ae.s();
        }
        bl() {
            if (this.ac.gc == null || (this.ac.bd != null && this.ac.bd.visibility == 1)) {
                return 0;
            }
            let a = this.bi();
            let b = this.bk();
            let c = new Rect(0, 0, 0, b, a);
            let d = this.bh();
            let e = RectUtil.w(c, d);
            return e.width + this.ae.t() + this.ae.u();
        }
        cq(a) {
            if (this.ac == null || this.ab.count == 0) {
                return a;
            }
            this.bw(a);
            this.b0();
            this.bv(a);
            this.a0 = this.az();
            if (this.a3.count != this.a0.count) {
                return a;
            }
            let b = this.ae.p();
            let c = this.ae.r();
            let d = this.ae.q();
            let e = this.ae.o();
            if (this.ap) {
                for (let f = 0; f < this.a3.count; f++) {
                    if (this.ao(f, this.a0._inner[f])) {
                        this.ae.aa(this.a3._inner[f], this.a0._inner[f], b, c, d, e);
                    }
                    this.cb(this.a3._inner[f], this.bd());
                }
            }
            for (let g = 0; g < this.a3.count; g++) {
                if (!this.ap) {
                    this.ae.ad(this.a3._inner[g]);
                }
                if (this.ao(g, this.a0._inner[g])) {
                    this.ae.aa(this.a3._inner[g], this.a0._inner[g], b, c, d, e);
                }
                else {
                    this.ae.aa(this.a3._inner[g], new Rect(0, 0, 0, 0, 0), b, c, d, e);
                }
            }
            if (this.ac.bp.count > 0) {
                this.ac.a6.arrangeAnnotations(this.ac, this.ae, this.a3, this.a0, this.ap, this.bd(), b, c, d, e);
            }
            this.bt(a);
            return a;
        }
        cm() {
            return Rect.empty;
        }
        bw(a) {
            if (this.ac.hp == null) {
                return;
            }
            this.ae.ah(this.ac.hp, new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
            let b = Math.abs(this.bh() - 0) > 1E-06;
            let c = this.cm();
            let d = c.left + (c.width / 2);
            let e = c.top + (c.height / 2);
            let f = this.bk() + this.ae.t() + this.ae.u();
            let g = this.bi() + this.ae.v() + this.ae.s();
            let h = f / 2;
            let i = g / 2;
            let j = new Rect(0, d - h, e - i, f, g);
            if (b) {
                this.cc(this.ac.hp);
            }
            else {
                this.ae.ad(this.ac.hp);
            }
            this.ae.aa(this.ac.hp, j, this.ae.t(), this.ae.v(), this.ae.u(), this.ae.s());
            if ((this.ac.bd == null || this.ac.bd.visibility == 0) && (this.ac.ax == null || this.ac.ax.visibility == 0) && this.ac.gc != null) {
                this.ac.hp._visibility = 0;
            }
            else {
                this.ac.hp._visibility = 1;
                this.ae.aa(this.ac.hp, new Rect(0, 0, 0, 0, 0), 0, 0, 0, 0);
            }
        }
        bv(a) {
            this.ae.ab(a);
        }
        b0() {
        }
        aw() {
            if (typeCast(CategoryAxisBase.$, this.ac) !== null) {
                return this.ac.jt;
            }
            if (typeCast(NumericAxisBase.$, this.ac) !== null) {
                let a = new List$1(Number_$type, 0);
                let d = this.ac.jr.j();
                for (let c = 0; c < d.length; c++) {
                    let b = d[c];
                    let e = this.ac.i3();
                    let f = new ScalerParams(0, this.ac.bh.m6, this.ac.i8, this.ac.cb, e);
                    a.add(this.ac.dy(b, f));
                }
                return a;
            }
            return null;
        }
        get ag() {
            let a = this.af != null ? this.af.c : this.ah();
            if (this.ac.ah == null) {
                if (a == 4) {
                    a = 5;
                }
                else if (a == 5) {
                    a = 4;
                }
                else if (a == 6) {
                    a = 7;
                }
                else if (a == 7) {
                    a = 6;
                }
            }
            return a;
        }
        cg(a, b, c, d, e, f) {
            let g = b;
            let h = b;
            if (f != null) {
                let i = f.c / 2;
                g -= i;
                h += i;
            }
            if (h >= e.left && g <= e.right) {
                if (f.a) {
                    b = this.ac.dj(b, e.left, e.right, f);
                }
                let j = new LineGeometry();
                j.d = { $type: Point_$type, x: b, y: c };
                j.c = { $type: Point_$type, x: b, y: d };
                a.add(j);
            }
        }
        b3(a, b, c, d, e, f) {
            if (b <= e.bottom && b >= e.top) {
                if (f.a) {
                    b = this.ac.dj(b, e.top, e.bottom, f);
                }
                let g = new LineGeometry();
                g.d = { $type: Point_$type, x: c, y: b };
                g.c = { $type: Point_$type, x: d, y: b };
                a.add(g);
            }
        }
        cb(a, b) {
            let c = this.bd();
            this.ae.ai(a, c);
        }
        cc(a) {
            let b = this.bh();
            this.b2(a, b);
        }
        b2(a, b) {
            let c = typeCast(FrameworkElement.$, a);
            let d = this.bi();
            let e = this.bk();
            let f = 0.5 * e;
            let g = 0.5 * d;
            let h = ((() => {
                let $ret = new RotateTransform();
                $ret.j = b;
                $ret.k = f;
                $ret.l = g;
                return $ret;
            })());
            let i = new TransformGroup();
            i.j.add(h);
            c.j = i;
        }
        cr(a) {
            if ((this.ab.contains(this.ac.hp) == false) && this.ac.hp != null) {
                this.ab.add(this.ac.hp);
                AxisLabelManager.l(this.ac.hp);
            }
            for (let b of fromEnum(this.ab)) {
                if (b != this.ac.hp && b != this.ae.av) {
                    this.ae.ag(b);
                }
            }
            let c = (this.ac == null || this.a5 <= 0 || isNaN_(this.a5)) ? 50 : this.a5;
            if (this.ac != null && (this.ac.cz == null || this.ac.cz.count == 0)) {
                if (this.ac.b1()) {
                    c = this.ac.d4();
                }
            }
            let d = this.an();
            c = Math.min(c, d ? a.height : a.width);
            c = isInfinity(c) ? 50 : c;
            return d ? new Size(1, 50, c) : new Size(1, c, 50);
        }
        get a9() {
            return this.c(AxisLabelPanelBase.ci);
        }
        set a9(a) {
            this.h(AxisLabelPanelBase.ci, a);
        }
        ai(a) {
            if (a == null) {
                return this.ac.bh.aj(this.ac);
            }
            if (a.position == 0) {
                if (this.ac != null && this.ac.bh != null) {
                    return this.ac.bh.aj(this.ac);
                }
                return 4;
            }
            return a.position;
        }
        ah() {
            return 1;
        }
        as(a) {
            return true;
        }
        *_au() {
            for (let a of fromEnum(this.ab)) {
                if (a != this.ac.hp && a != this.ae.av) {
                    yield a;
                }
            }
        }
        au() {
            return toEnum(() => this._au());
        }
        bs(a, b, c, d, e) {
            let f = this.ae.x(b, c, d, e);
            return f;
        }
        by(a) {
            if (this.bq == null || this.bc(this.bq) < this.bc(a)) {
                this.bq = a;
            }
        }
        b7(a) {
            this.a3.add(a);
        }
        *_av() {
            for (let a = 0; a < this.ac.bq.count; a++) {
                yield this.ac.bq.item(a);
            }
            for (let b = 0; b < this.ac.bp.count; b++) {
                yield this.ac.bp.item(b);
            }
        }
        av() {
            return toEnum(() => this._av());
        }
        b1() {
            this.ae.af();
            this.cf();
        }
        cf() {
            this.a0 = this.az();
        }
        b5() {
        }
        ba(a) {
            return this.a5;
        }
        b6() {
            this.ae.aj();
        }
        b9(a) {
            this.ae.ak(a);
        }
        bu() {
            this.ae.y();
        }
        ca() {
            this.ae.an();
        }
    }
    AxisLabelPanelBase.$t = /*@__PURE__*/ markType(AxisLabelPanelBase, 'AxisLabelPanelBase', Panel.$);
    AxisLabelPanelBase.ci = /*@__PURE__*/ DependencyProperty.i("Extent", Number_$type, AxisLabelPanelBase.$, /*@__PURE__*/ new PropertyMetadata(2, 50, (a, b) => a.a5 = b.newValue));
    return AxisLabelPanelBase;
})();
/**
 * @hidden
 */
export let CategoryAxisBase = /*@__PURE__*/ (() => {
    class CategoryAxisBase extends Axis {
        constructor() {
            super();
            this.jt = null;
            this.jl = null;
            this.j4 = 0;
            this.j5 = 0;
            this.jj = 0;
            this.j7 = 0;
            this.jn = false;
            this.jt = new List$1(Number_$type, 0);
        }
        a2() {
            return new CategoryAxisBaseView(this);
        }
        get_b6() {
            return false;
        }
        gx(a) {
            super.gx(a);
            this.ji = a;
        }
        ct(a, b, c) {
            let d = super.ct(a, b, c);
            if (!d) {
                return false;
            }
            return this.itemsSource != null && this.j5 > 0;
        }
        kq() {
            if (this.jm != null && this.bn != null && this.itemsSource != null) {
                this.jm = this.bn.releaseFastItemsSource(this.itemsSource);
            }
        }
        kp() {
            if (this.jm == null && this.bn != null && this.itemsSource != null) {
                this.jm = this.bn.getFastItemsSource(this.itemsSource);
            }
        }
        get_b4() {
            return true;
        }
        k1(a, b, c) {
            if (this.b2) {
                return Rect.empty;
            }
            return this.k2(a, b, c, this.ch);
        }
        k2(a, b, c, d) {
            let e = 0;
            let f = a.x;
            let g = this.i8.left;
            let h = this.i8.right;
            if (d) {
                f = a.y;
                g = this.i8.top;
                h = this.i8.bottom;
            }
            let i = this.jt;
            if ((d && !this.ca) || (!d && this.ca)) {
                i = new List$1(Number_$type, 0);
                for (let j = this.jt.count - 1; j >= 0; j--) {
                    i.add(this.jt._inner[j]);
                }
            }
            if (this.categoryMode == 0) {
                if (b) {
                    let k;
                    if (d) {
                        k = new Rect(0, this.i8.left, a.y - c / 2, this.i8.width, c);
                    }
                    else {
                        k = new Rect(0, a.x - c / 2, this.i8.top, c, this.i8.height);
                    }
                    k.intersect(this.i8);
                    return k;
                }
                else {
                    if (f > h) {
                        return Rect.empty;
                    }
                    if (f < g) {
                        return Rect.empty;
                    }
                    let l = 1.7976931348623157E+308;
                    let m = -1;
                    for (e = 0; e < i.count; e++) {
                        let n = Math.abs(i._inner[e] - f);
                        if (n < l) {
                            l = n;
                            m = e;
                        }
                    }
                    if (m == -1) {
                        return Rect.empty;
                    }
                    let o = i._inner[m];
                    let p;
                    if (d) {
                        p = new Rect(0, this.i8.left, o - c / 2, this.i8.width, c);
                    }
                    else {
                        p = new Rect(0, o - c / 2, this.i8.top, c, this.i8.height);
                    }
                    p.intersect(this.i8);
                    return p;
                }
            }
            else {
                for (e = 0; e < i.count; e++) {
                    if (i._inner[e] > f) {
                        break;
                    }
                }
                if (e == 0) {
                    return Rect.empty;
                }
                if (f > h) {
                    return Rect.empty;
                }
                if (f < g) {
                    return Rect.empty;
                }
                let q = this.i8.right;
                if (d) {
                    q = this.i8.bottom;
                }
                if (e < i.count) {
                    q = i._inner[e];
                }
                if (d) {
                    return new Rect(0, this.i8.left, i._inner[e - 1], this.i8.width, q - i._inner[e - 1]);
                }
                else {
                    return new Rect(0, i._inner[e - 1], this.i8.top, q - i._inner[e - 1], this.i8.height);
                }
            }
        }
        get itemsSource() {
            return this.c(CategoryAxisBase.ky);
        }
        set itemsSource(a) {
            this.h(CategoryAxisBase.ky, a);
        }
        get j6() {
            return this.j4;
        }
        set j6(a) {
            this.j4 = a;
            this.j5 = this.j4;
        }
        get categoryMode() {
            return this.jj;
        }
        set categoryMode(a) {
            if (this.jj != a) {
                let b = this.jj;
                this.jj = a;
                this.g5("CategoryMode", enumGetBox(CategoryMode_$type, b), enumGetBox(CategoryMode_$type, a));
            }
        }
        get j8() {
            return this.j7;
        }
        set j8(a) {
            if (a != this.j7) {
                let b = this.j7;
                this.j7 = a;
                this.g5("GroupCount", b, this.j7);
            }
        }
        d1(a, b) {
            return NaN;
        }
        getUnscaledValue3(a, b, c, d) {
            return NaN;
        }
        getCategorySize(a, b, c) {
            return NaN;
        }
        jy(a, b, c) {
            return NaN;
        }
        getGroupCenter(a, b, c, d) {
            return NaN;
        }
        j3(a) {
            let b = this.bh.m6;
            let c = this.i8;
            let d = this.i3();
            let e = new ScalerParams(0, b, c, this.ca, d);
            return this.d1(a, e);
        }
        *_js() {
            for (let a of fromEnum(this.cz)) {
                yield a;
            }
            if (this.bh != null && this.bh.c0 && this.jp(this.bh)) {
                for (let b of fromEnum(this.bh.dm())) {
                    if (b != this.bh) {
                        for (let c of fromEnum(b.series)) {
                            yield c;
                        }
                    }
                }
            }
        }
        js() {
            return toEnum(() => this._js());
        }
        jo(a) {
            return this.cz.contains(a);
        }
        jp(a) {
            return false;
        }
        *_jr() {
            let a = typeCast(XamDataChart.$, this.bh);
            if (a != null && a.c0 && this.jp(a)) {
                for (let b of fromEnum(a.dm())) {
                    if (b != this.bh) {
                        let c = typeCast(XamDataChart.$, b);
                        if (c != null) {
                            for (let d of fromEnum(c.axes)) {
                                if (typeCast(CategoryAxisBase.$, d) !== null) {
                                    yield typeCast(CategoryAxisBase.$, d);
                                }
                            }
                        }
                    }
                }
            }
        }
        jr() {
            return toEnum(() => this._jr());
        }
        ku(a) {
            if (this.jn) {
                return;
            }
            try {
                this.jn = true;
                let b = 0;
                let c = 0;
                let d = false;
                for (let e of fromEnum(this.js())) {
                    if (!e.cl && !e.c2 && !e.cr) {
                        continue;
                    }
                    let f = e;
                    let g = f.preferredCategoryMode(this);
                    if (g == 2) {
                        b = 2;
                        d = true;
                        if (this.jo(e)) {
                            c++;
                        }
                    }
                    if (g == 1 && !d) {
                        b = 1;
                    }
                }
                let h = this.jq;
                for (let i of fromEnum(this.jr())) {
                    if (i.jq) {
                        h = true;
                    }
                    if (a) {
                        i.ku(false);
                    }
                }
                if (b == 0 && h) {
                    b = 2;
                    if (c == 0) {
                        c = 1;
                    }
                }
                this.categoryMode = b;
                this.j8 = c;
            }
            finally {
                this.jn = false;
            }
        }
        gz(a, b, c, d) {
            super.gz(a, b, c, d);
            switch (b) {
                case "FastItemsSourceProvider":
                    if ((typeCast(IFastItemsSourceProvider_$type, c)) != null) {
                        this.jm = c.releaseFastItemsSource(this.itemsSource);
                    }
                    if ((typeCast(IFastItemsSourceProvider_$type, d)) != null) {
                        this.jm = d.getFastItemsSource(this.itemsSource);
                    }
                    this.j6 = 0;
                    if (this.jm != null) {
                        this.j6 = this.jm.count;
                    }
                    this.ku(true);
                    break;
                case "ItemsSource":
                    if (this.bn != null) {
                        this.jm = this.bn.getFastItemsSource(this.itemsSource);
                    }
                    break;
                case CategoryAxisBase.$$p[0]:
                    let e = typeCast(IFastItemsSource_$type, c);
                    this.kh();
                    this.ci = true;
                    if (e != null) {
                        e.event = delegateRemove(e.event, runOn(this, this.kk));
                    }
                    this.j6 = 0;
                    if (this.jm != null) {
                        this.j6 = this.jm.count;
                    }
                    if (this.jm != null) {
                        let f = this.jm;
                        f.event = delegateCombine(f.event, runOn(this, this.kk));
                        this.hb(false);
                        for (let g of fromEnum(this.cw())) {
                            g.je(false);
                            if (g.bs != null) {
                                g.il();
                            }
                        }
                    }
                    else {
                        this.gm();
                        for (let h of fromEnum(this.cw())) {
                            h.hw(true, h.bi);
                            if (h.bs != null) {
                                h.il();
                            }
                        }
                    }
                    break;
                case "ItemsCount":
                    this.g6(new AxisRangeChangedEventArgs(0, 0, 0, typeGetValue((c)) - 1, typeGetValue((d)) - 1));
                    this.hb(false);
                    break;
                case CategoryAxisBase.$$p[3]:
                    this.ci = true;
                    this.kv();
                    this.hb(false);
                    this.ki();
                    break;
                case "CategoryMode":
                    this.ci = true;
                    this.hb(false);
                    this.ks();
                    this.ki();
                    break;
                case CategoryAxisBase.$$p[2]:
                case CategoryAxisBase.$$p[1]:
                    this.ci = true;
                    for (let i of fromEnum(this.cw())) {
                        i.dl = true;
                        let j = typeCast(IHasCategoryModePreference_$type, i);
                        if (j != null && j.preferredCategoryMode(this) == 2) {
                            i.je(false);
                        }
                    }
                    this.hb(false);
                    if (this.bh != null) {
                        this.bh.h2();
                    }
                    break;
                case Axis.$$p[4]:
                case Axis.$$p[3]:
                    this.ci = true;
                    this.hb(true);
                    break;
            }
        }
        ki() {
            for (let a of fromEnum(this.cw())) {
                a.je(false);
            }
        }
        kk(a, b) {
            this.kr(b);
        }
        kr(a) {
            switch (a.action) {
                case 3:
                case 0:
                case 1:
                case 2:
                case 4:
                    if (this.jm != null) {
                        this.j6 = this.jm.count;
                    }
                    this.hb(false);
                    break;
            }
            if (this.jm != null) {
                this.j6 = this.jm.count;
            }
        }
        kv() {
            let a = false, b = false;
            for (let c of fromEnum(this.cz)) {
                let d = typeCast(IHasCategoryModePreference_$type, c);
                if (d == null) {
                    continue;
                }
                let e = d.preferredCategoryMode(this);
                a = a || e == 1;
                b = b || e == 2;
            }
            let f = b ? 2 : a ? 1 : 0;
            if (f == 0 && this.jq) {
                f = 1;
                if (this.j8 == 0) {
                    this.j8 = 1;
                }
            }
            this.categoryMode = f;
        }
        ck(a) {
            let b = super.ck(a);
            if (b) {
                this.ku(true);
                let c = typeCast(IHasCategoryModePreference_$type, a);
                if (c != null && c.preferredCategoryMode(this) == 2) {
                    for (let d of fromEnum(this.cw())) {
                        let e = typeCast(IHasCategoryModePreference_$type, d);
                        if (e != null && e != c && e.preferredCategoryMode(this) == 2) {
                            d.je(false);
                        }
                    }
                }
                this.hb(false);
                this.cn();
            }
            return b;
        }
        bx(a) {
            let b = super.bx(a);
            if (b) {
                this.ku(true);
                let c = typeCast(IHasCategoryModePreference_$type, a);
                if (c != null && c.preferredCategoryMode(this) != 0) {
                    for (let d of fromEnum(this.cw())) {
                        let e = typeCast(IHasCategoryModePreference_$type, d);
                        if (e != null) {
                            d.je(false);
                        }
                    }
                }
                this.hb(false);
            }
            return b;
        }
        ks() {
            let a = null;
            for (let b of fromEnum(this.cw())) {
                if (b.cl) {
                    let c = b.am(this);
                    if (c != null && c.ah == this) {
                        a = c;
                    }
                }
            }
            if (a != null) {
                a.ha();
            }
        }
        kh() {
            this.jl = this.jm;
        }
        kt() {
            let a = this.ax;
            if (a == null) {
                a = new AxisLabelSettings();
            }
            if (a.visibility == 1) {
                this.bq.count = 0;
                this.bp.count = 0;
                this.bo.count = 0;
            }
            else {
                let b = 0;
                b = this.ji.bf(this.cx);
                this.bq.count = b;
            }
        }
        kj(a) {
            if (this.jm != null) {
                this.jm.handleCollectionChanged(a);
            }
        }
        ko(a, b, c) {
            this.kj(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
        }
        kl() {
            this.kj(new NotifyCollectionChangedEventArgs(0, 4));
        }
        km(a, b) {
            this.kj(new NotifyCollectionChangedEventArgs(1, 0, b, a));
        }
        kn(a, b) {
            this.kj(new NotifyCollectionChangedEventArgs(1, 1, b, a));
        }
        jz(a, b, c, d) {
            return this.j0(a, b, c, d, this.categoryMode);
        }
        j0(a, b, c, d, e) {
            let f = 0;
            let g = e;
            if (g == 0 && this.categoryMode != 0) {
                g = 1;
            }
            switch (g) {
                case 0:
                    f = 0;
                    break;
                case 1:
                    f = 0.5 * this.getCategorySize(a, b, c);
                    break;
                case 2:
                    f = this.getGroupCenter(d, a, b, c);
                    break;
            }
            if (this.ch != this.ca) {
                f *= -1;
            }
            return f;
        }
        getSeriesOffset(a, b, c, d, e) {
            return this.j0(a, b, c, d, e);
        }
        get isVertical() {
            return this.ch;
        }
        j$c(a, b) {
            return this.d1.apply(this, arguments);
        }
        j$b(a, b) {
            return this.dy.apply(this, arguments);
        }
        j$d(a, b, c, d, e) {
            this.gr.apply(this, arguments);
        }
        j$e(a, b, c, d) {
            this.gs.apply(this, arguments);
        }
        j$f(a, b, c, d) {
            this.gt.apply(this, arguments);
        }
        get j$a() {
            return this.ca;
        }
    }
    CategoryAxisBase.$t = /*@__PURE__*/ markType(CategoryAxisBase, 'CategoryAxisBase', Axis.$, [ICategoryScaler_$type]);
    CategoryAxisBase.ky = /*@__PURE__*/ DependencyProperty.i("ItemsSource", IEnumerable_$type, CategoryAxisBase.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(CategoryAxisBase.$, a);
        if (c.bn != null) {
            c.bn.releaseFastItemsSource(b.oldValue);
        }
        a.g5("ItemsSource", b.oldValue, b.newValue);
    }));
    CategoryAxisBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CategoryAxisBase, 'g5', ['FastItemsSource:jm:kw', [IFastItemsSource_$type], 'Gap:jv:kx', [1, 0.2], 'Overlap:j2:kz', [1, 0], 'UseClusteringMode:jq:k0', [0, false]]);
    return CategoryAxisBase;
})();
/**
 * @hidden
 */
export let HorizontalAxisLabelPanelBase = /*@__PURE__*/ (() => {
    class HorizontalAxisLabelPanelBase extends AxisLabelPanelBase {
        constructor() {
            super(...arguments);
            this.c4 = 0;
            this.c1 = 0;
            this.c3 = 0;
            this.c2 = 0;
        }
        ad() {
            return new HorizontalAxisLabelPanelBaseView(this);
        }
        b8(a) {
            super.b8(a);
            this.cs = a;
        }
        bx() {
            this.cs.az();
        }
        cu() {
            return this.af != null && this.af.j() && this.bd() % 360 != 0;
        }
        cv() {
            return this.am && !this.ap;
        }
        an() {
            return true;
        }
        ay() {
            let a = new List$1(Rect.$, 0);
            let b = new List$1(Boolean_$type, 0);
            this.aq = false;
            this.ap = false;
            this.ar = false;
            let c = this.af != null ? (this.af.angle) : 0;
            let d = c * Math.PI / 180;
            if (this.cu()) {
                this.ap = true;
            }
            this.am = false;
            this.c6(a, b, d);
            this.am = this.am || this.al(a, b);
            if (this.am) {
                this.c8(a, b);
            }
            else {
                this.c9();
            }
            let e = this.ac.b1();
            if (!e) {
                this.c5(c);
            }
            else {
                this.ae.ac();
            }
            if (this.ap) {
                for (let f = 0; f < a.count; f++) {
                    let g = a._inner[f];
                    g.x = this.a2._inner[f].c;
                    a._inner[f] = g;
                }
            }
            let h = 0;
            if (this.cv()) {
                h = ((() => { let i = this.bp(this.c1, a, b); a = i.p1; return i.ret; })());
            }
            if (this.am && !this.aq) {
                if (h > 0) {
                    if (this.cs.ay()) {
                        this.ar = true;
                    }
                }
            }
            if (this.am && this.ct()) {
                let i = this.cn.width;
                let j = this.cz();
                let k = this.cy();
                let l = this.a2.count > 1 ? this.a2._inner[1].c - this.a2._inner[0].c : i;
                let m = Math.abs(l * 0.8);
                let n = 0;
                let o = Math.abs(Math.atan(this.c1 / l) * 180 / Math.PI);
                let p = this.ae.p();
                let q = this.ae.q();
                for (let r = 0; r < a.count; r++) {
                    if (this.ak) {
                        if (r > 0 && r < a.count - 1) {
                            let s = this.a2.count > 1 ? this.a2._inner[r].c - (a._inner[r - 1].x + a._inner[r - 1].width) : i;
                            let t = this.a2.count > 1 ? a._inner[r + 1].x - this.a2._inner[r].c : i;
                            m = Math.abs(Math.min(Math.abs(s * 2), Math.abs(t * 2)) * 0.8);
                        }
                        else {
                            if (r == 0) {
                                let u = this.a2.count > 1 ? a._inner[r + 1].x - this.a2._inner[r].c : i;
                                m = Math.abs((l * 2) * 0.8);
                            }
                            if (r == a.count - 1) {
                                let v = this.a2.count > 1 ? this.a2._inner[r].c - (a._inner[r - 1].x + a._inner[r - 1].width) : i;
                                m = Math.abs((v * 2) * 0.8);
                            }
                        }
                    }
                    let w = Math.min(a._inner[r].width, m);
                    n = this.ap ? this.a2._inner[r].c : this.a2._inner[r].c - w / 2;
                    let x = AngleSimplifier.a(c);
                    let y = (x >= o && x <= 180 - o) || (x >= 180 + o && x <= 360 - o);
                    let z = a._inner[r];
                    if (this.ap && y) {
                        let aa = this.bm(this.a3._inner[r]);
                        m = Math.min(j / Math.abs(Math.sin(d)), aa);
                    }
                    z.x = n;
                    z.width = Math.min(m, z.width);
                    a._inner[r] = z;
                    if (!(typeCast(TextBlock.$, this.a3._inner[r]) !== null)) {
                        this.a3._inner[r].width = Math.min(m, z.width);
                    }
                    let ab = typeCast(TextBlock.$, this.a3._inner[r]);
                    if (ab != null) {
                        let ac = this.bs(r, ab, m, p, q);
                        if (this.ar) {
                            ab.height = k;
                        }
                        else if (!Base.equalsStatic(ab.ak, ac)) {
                            ab.ak = ac;
                            this.a3._inner[r].width = Math.min(m, this.bc(this.a3._inner[r]));
                            this.c3 = Math.min(this.c3, this.a3._inner[r].width);
                        }
                    }
                }
                if (!e) {
                    this.c5(c);
                }
            }
            if (this.cw()) {
                this.c7(a);
            }
            return a;
        }
        c6(a, b, c) {
            let d = this.bj();
            let e = this.c0();
            this.c1 = -1.7976931348623157E+308;
            this.c4 = -1.7976931348623157E+308;
            this.c2 = -1.7976931348623157E+308;
            this.c3 = -1.7976931348623157E+308;
            let f = this.ae.p();
            let g = this.ae.q();
            let h = this.ae.r();
            let i = this.ae.o();
            let j = this.cn.top;
            let k = (this.cn.height - d);
            let l = false;
            for (let m = 0; m < this.a3.count; m++) {
                if (!this.a2._inner[m].a) {
                    l = true;
                }
            }
            for (let n = 0; n < this.a3.count; n++) {
                if (this.a2 == null || n >= this.a2.count) {
                    break;
                }
                let o, p, q, r, s, t;
                let u = this.a3._inner[n];
                s = this.bc(u);
                t = this.bb(u);
                r = s + this.ae.p() + this.ae.q();
                q = t + h + i;
                let v = this.a2._inner[n].a;
                if (this.ap) {
                    o = this.a2._inner[n].c;
                }
                else {
                    o = this.a2._inner[n].c - r / 2;
                }
                p = j + e;
                if (!v || !l) {
                    this.c1 = Math.max(q, this.c1);
                    this.c4 = Math.max(r, this.c4);
                    this.c2 = Math.max(t, this.c2);
                    this.c3 = Math.max(s, this.c3);
                }
                let w = new Rect(0, o, p, r, q);
                a.add(w);
                b.add(v);
                let x = r * Math.abs(Math.sin(c));
                this.am = this.am || x > k;
            }
        }
        c5(a) {
            let b = a * (Math.PI / 180);
            let c = Math.abs(this.c3 * Math.sin(b)) + Math.abs(this.c2 * Math.cos(b));
            c += this.ae.r() + this.ae.o();
            let d = this.bj();
            this.a9 = (c) + (d) + this.ac.di;
        }
        c7(a) {
            this.cs.a0(a);
        }
        c8(a, b) {
        }
        c9() {
        }
        cb(a, b) {
            let c = a.l;
            let d = a.m;
            let e = 0;
            let f = c / 2;
            let g = new TransformGroup();
            let h = AngleSimplifier.a(this.bd());
            let i = ((() => {
                let $ret = new RotateTransform();
                $ret.j = h;
                $ret.k = e;
                $ret.l = f;
                return $ret;
            })());
            let j = 0;
            let k = 0;
            if (h != 0 && h != 360) {
                if (h > 0 && h < 180) {
                    j = -Math.sin(MathUtil.k(h)) * (c / 2);
                }
                else {
                    i.k = d;
                    k = -d;
                    j = -Math.sin(MathUtil.k(h - 180)) * (c / 2);
                }
            }
            let l = ((() => {
                let $ret = new TranslateTransform();
                $ret.k = j;
                $ret.j = k;
                return $ret;
            })());
            g.j.add(i);
            g.j.add(l);
            a.j = g;
        }
        cw() {
            return !this.aq && !this.ap;
        }
        ct() {
            return true;
        }
        bp(a, b, c) {
            let d = 0;
            let e = new List$1(Rect.$, 0);
            let f = this.c0() + this.cn.top;
            let g = this.cz();
            let h = f + g;
            if (a * 3 <= this.a5) {
                d = 3;
            }
            else if (a * 2 <= this.a5) {
                d = 2;
            }
            else {
                return {
                    ret: d,
                    p1: b
                };
            }
            let i = 0;
            for (let j = 0; j < b.count; j++) {
                let k = RectUtil.p(b._inner[j]);
                if (!c._inner[j]) {
                    if (i % d == 0) {
                        k.y = f;
                    }
                    else if (i % d == d - 1) {
                        k.y = h - k.height;
                    }
                    else {
                        k.y = (f + (g / 2)) - k.height / 2;
                    }
                    i++;
                }
                e.add(k);
            }
            this.am = this.al(e, c);
            if (!this.am) {
                this.aq = true;
                b = e;
            }
            return {
                ret: d,
                p1: b
            };
        }
        cm() {
            let a = this.ai(this.ac.bd);
            let b = this.bj();
            let c = this.ag;
            let d = 0;
            if (a == 3) {
                d += this.cn.top;
                if (c == 1 || c == 5) {
                    d += this.ac.di;
                }
            }
            else {
                d = this.cn.bottom - b;
                if (c == 4 || c == 0) {
                    d -= this.ac.di;
                }
            }
            let e = this.bl();
            let f = 0;
            let g = this.ac.bd == null ? 1 : this.ac.bd.horizontalAlignment;
            if (g == 0) {
                f = this.cn.left;
            }
            else if (g == 2) {
                f = this.cn.right - e;
            }
            else {
                f = (this.cn.left + (this.cn.width / 2)) - (e / 2);
            }
            return new Rect(0, f, d, e, b);
        }
        c0() {
            let a = 0;
            let b = this.ai(this.ac.bd);
            if (b == 3) {
                a += this.bj();
            }
            let c = this.ag;
            if (c == 1 || c == 5) {
                a += this.ac.di;
            }
            return a;
        }
        cx() {
            let a = 0;
            let b = this.ai(this.ac.bd);
            if (b == 4) {
                a += this.bj();
            }
            let c = this.ag;
            if (c == 0 || c == 4) {
                a += this.ac.di;
            }
            return a;
        }
        cz() {
            let a = (this.a5 - this.c0()) - this.cx();
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        cy() {
            let a = ((this.cz() - this.ae.r()) - this.ae.o());
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        b0() {
            let a = this.ae.at();
            this.ac.gn(a);
            if (this.af != null && this.af.visibility != 0) {
                return;
            }
            let b = this.ac.di;
            if (b == 0) {
                return;
            }
            let c = this.aw();
            if (c == null) {
                return;
            }
            let d = this.cn.top;
            let e;
            let f = this.ag;
            if (f == 0 || f == 4) {
                d = this.cn.bottom;
                e = d - this.ac.di;
            }
            else {
                e = d + this.ac.di;
            }
            let g = this.ae.b();
            for (let h of fromEnum(c)) {
                this.cg(a, h, d, e, this.co, g);
            }
            if (!this.ab.contains(this.ae.av)) {
                this.ab.add(this.ae.av);
            }
        }
    }
    HorizontalAxisLabelPanelBase.$t = /*@__PURE__*/ markType(HorizontalAxisLabelPanelBase, 'HorizontalAxisLabelPanelBase', AxisLabelPanelBase.$);
    return HorizontalAxisLabelPanelBase;
})();
/**
 * @hidden
 */
export let HorizontalAxisLabelPanel = /*@__PURE__*/ (() => {
    class HorizontalAxisLabelPanel extends HorizontalAxisLabelPanelBase {
        ah() {
            return 1;
        }
        as(a) {
            return a == 5 || a == 4 || a == 1 || a == 0;
        }
    }
    HorizontalAxisLabelPanel.$t = /*@__PURE__*/ markType(HorizontalAxisLabelPanel, 'HorizontalAxisLabelPanel', HorizontalAxisLabelPanelBase.$);
    return HorizontalAxisLabelPanel;
})();
/**
 * @hidden
 */
export let NumericAxisBase = /*@__PURE__*/ (() => {
    class NumericAxisBase extends Axis {
        constructor() {
            super();
            this.j5 = 0;
            this.kh = 0;
            this.j8 = 0;
            this.j4 = 0;
            this.kg = 0;
            this.j7 = 0;
            this.j3 = 0;
            this.j6 = 0;
            this.ju = false;
            this.ko = 0;
            this.jm = null;
            this.j2 = false;
            this.jq = null;
            this.jt = false;
            this.ko = 10;
        }
        a2() {
            return new NumericAxisBaseView(this);
        }
        gx(a) {
            super.gx(a);
            this.jj = a;
        }
        get_cc() {
            return true;
        }
        get kb() {
            return this.j5;
        }
        set kb(a) {
            if (this.kb != a) {
                let b = this.j5;
                this.j5 = a;
                this.kh = Math.log(this.kb);
                this.g5("ActualMinimumValue", b, this.kb);
            }
        }
        fb() {
            return this.kj;
        }
        get ke() {
            return this.j8;
        }
        set ke(a) {
            if (this.ke != a) {
                let b = this.j8;
                this.j8 = a;
                this.g5("ActualVisibleMinimumValue", b, this.ke);
            }
        }
        get ka() {
            return this.j4;
        }
        set ka(a) {
            if (this.ka != a) {
                let b = this.j4;
                this.j4 = a;
                this.kg = Math.log(this.ka);
                this.g5("ActualMaximumValue", b, this.ka);
            }
        }
        fa() {
            return this.ka;
        }
        get kd() {
            return this.j7;
        }
        set kd(a) {
            if (this.kd != a) {
                let b = this.j7;
                this.j7 = a;
                this.g5("ActualVisibleMaximumValue", b, this.kd);
            }
        }
        get j9() {
            return this.j3;
        }
        set j9(a) {
            if (this.j9 != a) {
                let b = this.j3;
                this.j3 = a;
                this.g5("ActualInterval", b, this.j9);
            }
        }
        d9() {
            return this.j9;
        }
        get kc() {
            return this.j6;
        }
        set kc(a) {
            if (this.kc != a) {
                let b = this.j6;
                this.j6 = a;
                this.g5("ActualMinorInterval", b, this.kc);
            }
        }
        get jw() {
            return this.ju;
        }
        set jw(a) {
            if (this.jw != a) {
                let b = this.ju;
                if (b != a) {
                    this.ju = a;
                    this.g5("ActualIsLogarithmic", b, this.jw);
                }
            }
        }
        get j1() {
            return this.jw && this.kb > 0 && this.ko > 1;
        }
        hc(a) {
            super.hc(a);
            if (this.j1 && this.bh != null) {
                let b = this.i3();
                let c = this.i2();
                let d = this.jn(this.i8, this.bh.mr, b, c);
                if (d == null) {
                    return;
                }
                for (let e = 0; e < d.k.count; e++) {
                    let f = this.kn;
                    let g = d.k._inner[e];
                    let h = Math.min(g.d, g.c);
                    let i = Math.max(g.d, g.c);
                    let j = Math.floor(logBase(h, f));
                    let k = Math.ceil(logBase(i, f));
                    if (k - j < 2) {
                        if (typeCast(LogarithmicTickmarkValues.$, this.jq) !== null) {
                            this.jq = new LinearTickmarkValues();
                        }
                    }
                    else {
                        this.jq = this.js != null ? this.js : ((() => {
                            let $ret = new LogarithmicTickmarkValues();
                            $ret.x = f;
                            return $ret;
                        })());
                    }
                }
            }
        }
        g4(a) {
            super.g4(a);
            this.kj = a;
        }
        g3(a) {
            super.g4(a);
            this.ki = a;
        }
        gz(a, b, c, d) {
            super.gz(a, b, c, d);
            switch (b) {
                case NumericAxisBase.$$p[4]:
                    this.cn();
                    this.hb(false);
                    break;
                case NumericAxisBase.$$p[3]:
                    this.cn();
                    this.hb(false);
                    break;
                case NumericAxisBase.$$p[1]:
                    this.j2 = true;
                    this.jw = this.j0;
                    break;
                case Axis.$$p[4]:
                case Axis.$$p[3]:
                case NumericAxisBase.$$p[0]:
                case NumericAxisBase.$$p[5]:
                    this.ci = true;
                    this.hb(false);
                    break;
                case NumericAxisBase.$$p[2]:
                    this.j2 = true;
                    this.ko = this.kn;
                    if (this.jw) {
                        this.cn();
                        this.k8();
                        this.hb(false);
                    }
                    break;
                case NumericAxisBase.$$p[6]:
                    let e = new AxisRangeChangedEventArgs(0, this.kb, this.kb, this.ka, this.ka);
                    this.g6(e);
                    this.ci = true;
                    this.hb(false);
                    break;
                case Axis.$$p[12]:
                    this.jm = this.jk();
                    this.ci = true;
                    this.hb(false);
                    break;
                case "TickmarkValues":
                    this.la();
                    break;
                case "ActualIsLogarithmic":
                    this.cn();
                    this.k8();
                    this.ci = true;
                    this.la();
                    this.hb(false);
                    break;
                case "ActualTickmarkValues":
                    this.ci = true;
                    this.hb(false);
                    break;
                case "AbbreviateLargeNumbers":
                    this.hb(false);
                    break;
            }
        }
        k8() {
            for (let a of fromEnum(this.cw())) {
                a.je(false);
            }
        }
        ji() {
            let a = new AxisRange(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
            let b = false;
            if (this.bh != null) {
                for (let c of fromEnum(this.cw())) {
                    let d = c.an(this);
                    if (d != null) {
                        b = true;
                        a = new AxisRange(Math.min(a.c, d.c), Math.max(a.b, d.b));
                    }
                }
            }
            if (b) {
                return a;
            }
            return null;
        }
        k6(a, b, c, d, e, f, g) {
            let h = AutoRangeCalculator.a(a, b, c, d, e, f, g);
            f = h.p5;
            g = h.p6;
            return {
                p5: f,
                p6: g
            };
        }
        cp() {
            let a = this.jw && !isNaN_(this.kn) && !isInfinity(this.kn) && this.kn > 1;
            let b;
            let c;
            let d = this.k6(this, this.kj, this.ki, a, this.kn, b, c);
            b = d.p5;
            c = d.p6;
            if (b != this.kb || c != this.ka || this.j2) {
                this.j2 = false;
                let e = new AxisRangeChangedEventArgs(0, this.kb, b, this.ka, c);
                this.kb = b;
                this.ka = c;
                this.g6(e);
                this.k9(e);
                this.hb(true);
                return true;
            }
            return false;
        }
        k9(a) {
        }
        ck(a) {
            let b = super.ck(a);
            if (b) {
                this.cn();
            }
            return b;
        }
        bx(a) {
            let b = super.bx(a);
            if (b) {
                this.cn();
            }
            return b;
        }
        jl(a) {
            return new NumericAxisRenderer(a);
        }
        jk() {
            let a = ((() => {
                let $ret = new AxisLabelManager();
                $ret.a = this;
                $ret.f = this.cy;
                $ret.e = this.cx;
                $ret.b = this.au;
                return $ret;
            })());
            if (this.ax != null) {
                this.ax.registerAxis(this);
            }
            let b = this.jl(a);
            b.u = () => {
                let c = this.a3.ay();
                let d = this.a3.a1();
                let e = this.a3.az();
                let f = this.a3.a0();
                this.hj();
                this.gn(c);
                this.gn(d);
                this.gn(e);
                this.gn(f);
            };
            b.o = (c, d) => !d.isEmpty && !c.isEmpty;
            b.d = (c, d, e, f) => this.jn(c, d, e, f);
            b.g = (c) => this.e8(c);
            return b;
        }
        jo() {
            return new NumericAxisRenderingParameters();
        }
        k7() {
        }
        jp() {
            return null;
        }
        jn(a, b, c, d) {
            let e = this.jo();
            let f = this.a3.ay();
            let g = this.a3.a1();
            let h = this.a3.az();
            let i = this.a3.a0();
            let j = this.a3.e();
            let k = this.a3.f();
            let l = this.a3.g();
            e.t = f;
            e.w = g;
            e.u = h;
            e.v = i;
            e.a = j;
            e.c = k;
            e.d = l;
            e.l = this.ka;
            e.m = this.kb;
            e.h = this.jy;
            e.f = this.jr;
            e.z = a;
            e.y = c;
            e.x = d;
            e.aa = b;
            e.o = this.eb();
            e.g = this.jx();
            e.p = this.kf;
            e.q = this.kk;
            e.s = this.e9;
            if (this.e9 == null && (this.as != null || this.bf != null)) {
                e.s = "Format";
            }
            e.j = this.cl;
            e.ab = this.jv;
            return e;
        }
        km(a) {
            let b = this.i3();
            let c = new ScalerParams(0, this.bh.mr, this.i8, this.ca, b);
            return this.d1(a, c);
        }
        jx() {
            return !isNaN_(this.kf);
        }
        get jz() {
            return !isNaN_(this.kj);
        }
        get jy() {
            return !isNaN_(this.ki);
        }
        la() {
            if (this.js != null) {
                this.jr = this.js;
            }
            else if (this.jw) {
                this.jr = new LogarithmicTickmarkValues();
                this.jj.bf();
            }
            else {
                this.jr = new LinearTickmarkValues();
            }
        }
        get js() {
            return typeCast(TickmarkValues.$, this.c(NumericAxisBase.li));
        }
        set js(a) {
            this.h(NumericAxisBase.li, a);
        }
        get jr() {
            if (this.jq == null) {
                this.la();
            }
            return this.jq;
        }
        set jr(a) {
            let b = this.jq;
            let c = b != a;
            if (c) {
                this.jq = a;
                this.g5("ActualTickmarkValues", b, a);
            }
        }
        get jv() {
            return this.jt;
        }
        set jv(a) {
            let b = this.jv;
            if (a != b) {
                this.jt = a;
                this.g5("AbbreviateLargeNumbers", b, this.jv);
            }
        }
    }
    NumericAxisBase.$t = /*@__PURE__*/ markType(NumericAxisBase, 'NumericAxisBase', Axis.$);
    NumericAxisBase.li = /*@__PURE__*/ DependencyProperty.i("TickmarkValues", TickmarkValues.$, NumericAxisBase.$, /*@__PURE__*/ new PropertyMetadata(1, (a, b) => a.g5("TickmarkValues", b.oldValue, b.newValue)));
    NumericAxisBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, NumericAxisBase, 'g5', ['Interval:kf:lb', [1, NaN], 'IsLogarithmic:j0:lc', [0, false], 'LogarithmBase:kn:ld', [1, 10], 'MaximumValue:ki:le', [1, NaN], 'MinimumValue:kj:lf', [1, NaN], 'MinorInterval:kk:lg', [1, NaN], 'ReferenceValue:kl:lh', [1, 0]]);
    return NumericAxisBase;
})();
/**
 * @hidden
 */
export let NumericScaler = /*@__PURE__*/ (() => {
    class NumericScaler extends DependencyObject {
        constructor() {
            super(...arguments);
            this.o = 0;
            this.n = 0;
            this.m = 0;
        }
        y(a) {
            this.l = a;
        }
        x(a) {
            this.k = a;
        }
        w(a, b, c) {
            switch (a) {
                case NumericScaler.$$p[1]:
                    this.o = this.l;
                    this.z();
                    break;
                case NumericScaler.$$p[0]:
                    this.n = this.k;
                    this.z();
                    break;
            }
        }
        z() {
            if (isNaN_(this.l) || isNaN_(this.k) || isInfinity(this.l) || isInfinity(this.k) || this.l < (-7.9228162514264338E+28) || this.k > (7.9228162514264338E+28)) {
                this.m = this.k - this.l;
            }
            else {
                this.m = this.k - this.l;
            }
        }
        j(a, b, c, d) {
            let e = new List$1(Number_$type, 2, a.count);
            for (let f = b; f < c; f++) {
                e.add(this.q(a.item(f), d));
            }
            return e;
        }
        v(a, b, c, d) {
            for (let e = b; e < c; e++) {
                a.item(e, this.p(a.item(e), d));
            }
        }
        u(a, b, c, d, e) {
            for (let f = 0; f < b.count; f++) {
                let g = b.item(f);
                for (let h = c; h < d; h++) {
                    a.item(h)[g] = this.p(a.item(h)[g], e);
                }
            }
        }
    }
    NumericScaler.$t = /*@__PURE__*/ markType(NumericScaler, 'NumericScaler', DependencyObject.$);
    NumericScaler.ac = /*@__PURE__*/ new Rect(0, 0, 0, 1, 1);
    NumericScaler.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, NumericScaler, 'w', ['ActualMaximumValue:k:aa', [1, NaN], 'ActualMinimumValue:l:ab', [1, NaN]]);
    return NumericScaler;
})();
/**
 * @hidden
 */
export let AxisRendererBase = /*@__PURE__*/ (() => {
    class AxisRendererBase extends Base {
        constructor(a) {
            super();
            this.u = null;
            this.o = null;
            this.v = null;
            this.m = null;
            this.l = null;
            this.k = null;
            this.q = null;
            this.n = null;
            this.j = null;
            this.e = null;
            this.p = null;
            this.h = null;
            this.t = null;
            this.b = null;
            this.g = null;
            this.d = null;
            this.r = null;
            this.a = null;
            this.f = null;
            this.i = null;
            this.u = () => {
            };
            this.o = (b, c) => false;
            this.v = () => {
            };
            this.m = (b, c) => c;
            this.l = (b, c, d, e) => {
            };
            this.k = (b, c, d) => {
            };
            this.q = (b, c) => false;
            this.n = (b, c) => this.q(b, c);
            this.j = (b) => {
            };
            this.e = (b) => {
            };
            this.p = (b, c, d) => false;
            this.h = (b, c) => new LabelPosition(c);
            this.t = (b, c) => c;
            this.g = (b) => null;
            this.r = (b, c, d, e) => c;
            this.a = (b, c, d, e) => c;
            this.b = a;
            this.d = (b, c, d, e) => null;
        }
        c(a, b, c, d, e) {
            this.x(c, b);
            if (this.o(b, c)) {
                this.v();
                let f = this.d(b, c, d, e);
                this.x(c, b);
                if (f == null) {
                    this.aa();
                    return null;
                }
                if (f.k.count > 1 && !f.g) {
                    this.ab(f);
                }
                for (let g of fromEnum(f.k)) {
                    f.e = g;
                    if (isNaN_(g.c) || isInfinity(g.c) || isNaN_(g.d) || isInfinity(g.d)) {
                        continue;
                    }
                    if (g.d == g.c) {
                        continue;
                    }
                    this.e(f);
                    this.b.n(f.r);
                    let h = 0;
                    let i = 0;
                    let j = false;
                    let k = (l) => l;
                    if (this.f != null) {
                        k = this.i;
                    }
                    if (typeCast(CategoryAxisRenderingParameters.$, f) !== null) {
                        h = f.ab;
                        i = f.af;
                        j = f.ac;
                    }
                    f.f = this.s(f);
                    f.f.s(((() => {
                        let $ret = new TickmarkValuesInitializationParameters();
                        $ret.n = f.e.d;
                        $ret.m = f.e.c;
                        $ret.g = f.m;
                        $ret.f = f.l;
                        $ret.k = f.e.b;
                        $ret.d = f.g;
                        $ret.l = f.p;
                        $ret.j = f.q;
                        $ret.h = f.o;
                        $ret.i = f.e.a;
                        $ret.p = f.e.e;
                        $ret.a = h;
                        $ret.q = i;
                        $ret.s = f.aa;
                        $ret.r = f.z;
                        $ret.e = j;
                        $ret.c = k;
                        return $ret;
                    })()));
                    this.y(f);
                }
                this.z();
                return f;
            }
            return null;
        }
        aa() {
            this.b.p();
        }
        ab(a) {
            let b = -1.7976931348623157E+308;
            let c = -2147483648;
            let d = 0;
            let e = 0;
            let f = false;
            let g = (h) => h;
            if (this.f != null) {
                g = this.i;
            }
            if (typeCast(CategoryAxisRenderingParameters.$, a) !== null) {
                d = a.ab;
                e = a.af;
                f = a.ac;
            }
            for (let h of fromEnum(a.k)) {
                a.e = h;
                a.f.s(((() => {
                    let $ret = new TickmarkValuesInitializationParameters();
                    $ret.n = h.d;
                    $ret.m = h.c;
                    $ret.g = a.m;
                    $ret.f = a.l;
                    $ret.k = h.b;
                    $ret.d = a.g;
                    $ret.l = a.p;
                    $ret.i = h.a;
                    $ret.p = h.e;
                    $ret.h = a.o;
                    $ret.j = a.q;
                    $ret.a = d;
                    $ret.q = e;
                    $ret.s = a.aa;
                    $ret.r = a.z;
                    $ret.e = f;
                    $ret.c = g;
                    return $ret;
                })()));
                h.a = a.f.m;
                h.e = a.f.r;
                if (!isNaN_(a.f.m)) {
                    b = Math.max(b, a.f.m);
                    c = Math.max(c, a.f.r);
                }
            }
            for (let i of fromEnum(a.k)) {
                if (i.a == b) {
                    i.a = -1;
                    i.e = -1;
                }
                else {
                    i.a = b;
                    i.e = c;
                }
            }
        }
        x(a, b) {
            this.u();
            this.b.m(a, b);
            this.b.s();
        }
        z() {
            this.b.s();
            let a = false;
            if (this.b.d) {
                this.b.r(0);
            }
            else {
                let b = 0;
                for (let c of fromEnum(this.b.e)) {
                    let d = typeCast(FrameworkElement.$, c);
                    if (d == null) {
                        d = this.b.t(b);
                        let e = d.ak;
                        let f = c.toString();
                        let g = 0;
                        let h = 0;
                        if (e != null) {
                            g = e.length;
                        }
                        if (f != null) {
                            h = f.length;
                        }
                        if (g != h) {
                            a = true;
                        }
                        d.ak = f;
                        b++;
                    }
                    else {
                        this.b.h(d);
                    }
                }
                if (a) {
                    this.b.o();
                }
                this.b.g();
                this.b.r(b);
            }
        }
        s(a) {
            return a.f;
        }
        y(a) {
            let b = a.f.j();
            let c = a.f.k();
            this.b.q(this.m(a, a.f.m));
            this.j(a);
            for (let d = 0; d < b.length; d++) {
                let e = a.f.p + d;
                let f = b[d];
                let g = f;
                let h = 0;
                if (d < b.length - 1) {
                    h = b[d + 1];
                }
                else {
                    h = Number.POSITIVE_INFINITY;
                }
                g = this.r(a, g, e, a.f.m);
                h = this.r(a, h, e, a.f.m);
                let i = this.m(a, g);
                let j = this.m(a, h);
                if (this.q(a, i)) {
                    if (e % 2 == 0 && this.n(a, j) && !isInfinity(j)) {
                        this.l(a, a.w, i, j);
                    }
                    a.b = a.c;
                    this.k(a, a.u, i);
                    a.b = null;
                }
                i = this.a(a, i, e, a.f.m);
                if (!isNaN_(i) && !isInfinity(i) && this.p(a, i, d == b.length - 1)) {
                    let k = this.w(a, g, e, a.f.m);
                    if (k != null) {
                        this.b.i(k, this.h(a, i));
                    }
                }
            }
            if (a.j) {
                for (let l = 0; l < c.length; l++) {
                    let m = c[l];
                    let n = this.m(a, m);
                    a.b = a.d;
                    this.k(a, a.v, n);
                    a.b = null;
                }
            }
        }
        w(a, b, c, d) {
            return null;
        }
    }
    AxisRendererBase.$t = /*@__PURE__*/ markType(AxisRendererBase, 'AxisRendererBase');
    return AxisRendererBase;
})();
/**
 * @hidden
 */
export let NumericAxisRenderer = /*@__PURE__*/ (() => {
    class NumericAxisRenderer extends AxisRendererBase {
        constructor(a) {
            super(a);
            this.ac = null;
            this.ad = false;
        }
        w(a, b, c, d) {
            let e;
            if (a.s != null) {
                e = this.g(b);
            }
            else {
                b = Math.round(b * 1000000) / 1000000;
                if (a.i() && a.ab) {
                    return this.ae(b);
                }
                e = b.toString();
            }
            return e;
        }
        ae(a) {
            if (this.ad) {
                return a.toString();
            }
            if (this.ac == null) {
                this.ac = NumberAbbreviatorFactory.a(this.b.a.bt);
                if (this.ac == null) {
                    this.ad = true;
                    return a.toString();
                }
            }
            return this.ac.abbreviate(a);
        }
    }
    NumericAxisRenderer.$t = /*@__PURE__*/ markType(NumericAxisRenderer, 'NumericAxisRenderer', AxisRendererBase.$);
    return NumericAxisRenderer;
})();
/**
 * @hidden
 */
export let VerticalAxisLabelPanel = /*@__PURE__*/ (() => {
    class VerticalAxisLabelPanel extends AxisLabelPanelBase {
        constructor() {
            super(...arguments);
            this.c1 = 0;
            this.cy = 0;
            this.c0 = 0;
            this.cz = 0;
        }
        ad() {
            return new VerticalAxisLabelPanelView(this);
        }
        b8(a) {
            super.b8(a);
            this.cs = a;
        }
        bx() {
            this.cs.ay();
        }
        bh() {
            return this.ac.bd != null ? this.ac.bd.angle : -90;
        }
        cu() {
            let a = 0;
            let b = this.ai(this.ac.bd);
            if (b == 1) {
                a += this.bl();
            }
            let c = this.ag;
            if (c == 3 || c == 7) {
                a += this.ac.di;
            }
            return a;
        }
        cw() {
            let a = 0;
            let b = this.ai(this.ac.bd);
            if (b == 2) {
                a += this.bl();
            }
            let c = this.ag;
            if (c == 2 || c == 6) {
                a += this.ac.di;
            }
            return a;
        }
        cx() {
            let a = (this.a5 - this.cu()) - this.cw();
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        cv() {
            let a = ((this.cx() - this.ae.p()) - this.ae.q());
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        ay() {
            let a = new List$1(Rect.$, 0);
            this.aq = false;
            this.ap = false;
            if (this.af != null && this.af.j() && this.bd() % 360 != 0) {
                this.ap = true;
            }
            this.c1 = -1.7976931348623157E+308;
            this.cy = -1.7976931348623157E+308;
            this.c0 = -1.7976931348623157E+308;
            this.cz = -1.7976931348623157E+308;
            let b = this.ae.p();
            let c = this.ae.r();
            let d = this.ae.q();
            let e = this.ae.o();
            let f = this.cu();
            let g = false;
            if (!isNaN_(this.a6)) {
                this.c1 = Math.max(this.a6, this.c1);
                this.c0 = Math.max(this.a7, this.c0);
            }
            for (let h = 0; h < this.a3.count; h++) {
                let i = this.a3._inner[h];
                let j = this.a2._inner[h].a;
                let k = this.bb(i);
                let l = this.bc(i);
                let m = k + c + e;
                let n = l + b + d;
                let o = this.cn.left + f;
                let p = this.a2._inner[h].c - m / 2;
                if (j) {
                    let q = this.a6;
                    if ((isNaN_(this.a6) || n > this.a6 || this.a2._inner[h].b) && !g) {
                        if (this.a2._inner[h].b) {
                            g = true;
                        }
                        this.a2._inner[h].b = false;
                        this.a6 = n;
                        this.a7 = l;
                    }
                    this.c1 = Math.max(this.a6, this.c1);
                    this.cy = Math.max(m, this.cy);
                    this.c0 = Math.max(this.a7, this.c0);
                    this.cz = Math.max(k, this.cz);
                }
                else {
                    this.c1 = Math.max(n, this.c1);
                    this.cy = Math.max(m, this.cy);
                    this.c0 = Math.max(l, this.c0);
                    this.cz = Math.max(k, this.cz);
                }
                let r = new Rect(0, o, p, n, m);
                a.add(r);
            }
            let s = 0;
            if (this.ap) {
                s = this.bd() % 360;
                if (s < 0) {
                    s += 360;
                }
            }
            let t = this.ac.b1();
            if (!t) {
                this.c2(s, b, d);
            }
            else {
                this.ae.ac();
            }
            if (this.ap) {
                for (let u = 0; u < a.count; u++) {
                    let v = a._inner[u];
                    v.y = this.a2._inner[u].c - this.cy / 2;
                    a._inner[u] = v;
                }
            }
            let w = false;
            if (!this.ap && this.c1 <= this.a5) {
                w = true;
            }
            if (!w) {
                let x = this.cn.height;
                let y = this.cx();
                let z = y;
                let aa = this.a2.count > 1 ? Math.abs(this.a2._inner[1].c - this.a2._inner[0].c) : x;
                let ab = Math.abs(Math.asin(aa / this.c1) * (180 / Math.PI));
                let ac = (s >= ab && s <= 180 - ab) || (s - 180 >= ab && s - 180 <= 180 - ab);
                for (let ad = 0; ad < a.count; ad++) {
                    if (this.ap) {
                        let ae = s * (Math.PI / 180);
                        let af = this.bm(this.a3._inner[ad]);
                        z = Math.min(y / Math.abs(Math.cos(ae)), af);
                        if (ac) {
                            let ag;
                            if (s > 0 && s < 90) {
                                ag = (Math.PI / 180) * (90 - s);
                            }
                            else if (s > 270 && s < 360) {
                                ag = (Math.PI / 180) * (s - 270);
                            }
                            else {
                                ag = 0;
                            }
                            z = aa / Math.cos(ag);
                        }
                    }
                    let ah = a._inner[ad];
                    ah.width = Math.min(ah.width, z);
                    a._inner[ad] = ah;
                    if (!(typeCast(TextBlock.$, this.a3._inner[ad]) !== null)) {
                        this.a3._inner[ad].width = z;
                    }
                    let ai = typeCast(TextBlock.$, this.a3._inner[ad]);
                    if (ai != null) {
                        let aj = this.bs(ad, ai, z, b, d);
                        if (!Base.equalsStatic(ai.ak, aj)) {
                            ai.ak = aj;
                            this.a3._inner[ad].width = z;
                        }
                    }
                }
                if (!t) {
                    this.c2(s, b, d);
                }
            }
            if (this.ct()) {
                this.c3(a);
            }
            return a;
        }
        c2(a, b, c) {
            let d = a * (Math.PI / 180);
            let e = Math.abs(this.c0 * Math.cos(d)) + Math.abs(this.cz * Math.sin(d));
            let f = this.bl();
            let g = (e + b + c) + (f) + this.ac.di;
            this.a9 = Math.max(this.ac.d6, g);
        }
        c3(a) {
            this.cs.az(a, this.c1);
        }
        cb(a, b) {
            let c = 0;
            let d = this.cz / 2;
            let e = new TransformGroup();
            let f = AngleSimplifier.a(this.bd());
            let g = ((() => {
                let $ret = new RotateTransform();
                $ret.j = f;
                $ret.k = c;
                $ret.l = d;
                return $ret;
            })());
            let h = 0;
            let i = 0;
            if (f != 0 && f != 360) {
                f -= 90;
                if (f > 0 && f < 180) {
                    g.k = this.c0;
                    h = -this.c0 + this.cz / 2;
                    h = h + Math.sin(MathUtil.k(f - 180)) * (this.cz / 2);
                }
                else {
                    if (f >= 180) {
                        h = h - Math.cos(MathUtil.k(f)) * (this.cz / 2);
                    }
                    else {
                        h = h + Math.cos(MathUtil.k(f)) * (this.cz / 2);
                    }
                }
            }
            let j = ((() => {
                let $ret = new TranslateTransform();
                $ret.j = h;
                $ret.k = i;
                return $ret;
            })());
            e.j.add(g);
            e.j.add(j);
            a.j = e;
        }
        ct() {
            return !this.aq && !this.ap;
        }
        cm() {
            let a = this.ai(this.ac.bd);
            let b = this.bl();
            let c = this.ag;
            let d = 0;
            if (a == 1) {
                d += this.cn.left;
                if (c == 3 || c == 7) {
                    d += this.ac.di;
                }
            }
            else {
                d = this.cn.right - b;
                if (c == 6 || c == 2) {
                    d -= this.ac.di;
                }
            }
            let e = this.bj();
            let f = 0;
            let g = this.ac.bd == null ? 1 : this.ac.bd.verticalAlignment;
            if (g == 0) {
                f = this.cn.top;
            }
            else if (g == 2) {
                f = this.cn.bottom - e;
            }
            else {
                f = (this.cn.top + (this.cn.height / 2)) - (e / 2);
            }
            return new Rect(0, d, f, b, e);
        }
        ai(a) {
            if (a == null) {
                return this.ac.bh.ak(this.ac);
            }
            if (a.position == 0) {
                if (this.ac != null && this.ac.bh != null) {
                    return this.ac.bh.ak(this.ac);
                }
                return 1;
            }
            return a.position;
        }
        ah() {
            return 2;
        }
        as(a) {
            return a == 2 || a == 3 || a == 6 || a == 7;
        }
        b0() {
            let a = this.ae.at();
            this.ac.gn(a);
            if (this.af != null && this.af.visibility != 0) {
                return;
            }
            let b = this.ac.di;
            if (b == 0) {
                return;
            }
            let c = this.aw();
            if (c == null) {
                return;
            }
            let d = this.cn.left;
            let e;
            let f = this.ag;
            if (f == 2 || f == 6) {
                d = this.cn.right;
                e = d - b;
            }
            else {
                e = d + b;
            }
            let g = this.ae.b();
            for (let h of fromEnum(c)) {
                this.b3(a, h, d, e, this.co, g);
            }
            if (!this.ab.contains(this.ae.av)) {
                this.ab.add(this.ae.av);
            }
        }
    }
    VerticalAxisLabelPanel.$t = /*@__PURE__*/ markType(VerticalAxisLabelPanel, 'VerticalAxisLabelPanel', AxisLabelPanelBase.$);
    return VerticalAxisLabelPanel;
})();
/**
 * @hidden
 */
export let IHasCategoryAxis_$type = /*@__PURE__*/ new Type(null, 'IHasCategoryAxis');
/**
 * @hidden
 */
export let IHasCategoryModePreference_$type = /*@__PURE__*/ new Type(null, 'IHasCategoryModePreference', null, [IHasCategoryAxis_$type]);
/**
 * @hidden
 */
export let IHighlightingManager_$type = /*@__PURE__*/ new Type(null, 'IHighlightingManager');
/**
 * @hidden
 */
export let HighlightingInfo = /*@__PURE__*/ (() => {
    class HighlightingInfo extends Base {
        constructor() {
            super();
            this.f = 0;
            this.e = 0;
            this.a = 0;
            this.d = 0;
            this.c = false;
            this.b = null;
            this.a = HighlightingState.outward;
            this.d = 0;
            this.c = false;
        }
    }
    HighlightingInfo.$t = /*@__PURE__*/ markType(HighlightingInfo, 'HighlightingInfo');
    return HighlightingInfo;
})();
/**
 * @hidden
 */
export let ISeriesInteractionManager_$type = /*@__PURE__*/ new Type(null, 'ISeriesInteractionManager');
/**
 * @hidden
 */
export let ISeriesViewerInteractionManager_$type = /*@__PURE__*/ new Type(null, 'ISeriesViewerInteractionManager');
/**
 * @hidden
 */
export let IDataChartVisualDataManager_$type = /*@__PURE__*/ new Type(null, 'IDataChartVisualDataManager');
/**
 * @hidden
 */
export let IAxisVisualDataManager_$type = /*@__PURE__*/ new Type(null, 'IAxisVisualDataManager');
/**
 * @hidden
 */
export let ISeriesVisualDataManager_$type = /*@__PURE__*/ new Type(null, 'ISeriesVisualDataManager');
/**
 * @hidden
 */
export let XamDataChart = /*@__PURE__*/ (() => {
    class XamDataChart extends SeriesViewer {
        constructor() {
            super();
            this._xsr = null;
            this.nj = null;
            this.nz = 1;
            this.n0 = 1;
            this.nf = new AxisCollection();
            this.axisRangeChanged = null;
            this.nm = null;
            this.n2 = 0;
            this.n4 = 0;
            this.n3 = 0;
            this.n1 = 0;
            this.ab = XamDataChart.$;
            let a = this.axes;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.o1));
            let b = this.axes;
            b.collectionResetting = delegateCombine(b.collectionResetting, runOn(this, this.o2));
        }
        get XSRP() {
            if (this._xsr == null) {
                this._xsr = new SRProvider(this.bn.i.ae);
            }
            return this._xsr;
        }
        get nk() {
            if (this.nj == null) {
                this.nj = DVContainer.instance.createInstance(IDataChartVisualDataManager_$type, () => this.XSRP.q);
            }
            return this.nj;
        }
        static staticInit() {
            XamDataChart.n8 = -1.7976931348623157E+308;
            XamDataChart.n7 = 1.7976931348623157E+308;
        }
        static of(a) {
            if (a.bs == null) {
                return -1;
            }
            if (!a.cw) {
                return -1;
            }
            let b = XamDataChartView.au(a);
            if (b.count == 0) {
                return -1;
            }
            let c = -1;
            for (let d = 0; d < b.count; d++) {
                c = Math.max(c, b._inner[d].fh);
            }
            let e = c + 1;
            if (a.cs) {
                e = a.e7();
                if (e == -1) {
                    return -1;
                }
                let f = a.a6();
                e = f.fh + e;
            }
            return e;
        }
        je(a, b, c, d) {
            super.je(a, b, c, d);
            switch (b) {
                case XamDataChart.$$p[15]:
                    this.n5 = this.od;
                    break;
                case XamDataChart.$$p[16]:
                    this.n6 = this.oe;
                    break;
                case "ActualWindowScaleHorizontal":
                case "ActualWindowScaleVertical":
                    if (!this.dg) {
                        this.kl(this.eg(), this.eh());
                    }
                    break;
                case XamDataChart.$$p[5]:
                    this.bn.fh(d);
                    {
                        for (let e of fromEnum(this.axes)) {
                            e.ha();
                        }
                    }
                    break;
                case XamDataChart.$$p[6]:
                    this.nt = this.ns;
                    break;
                case XamDataChart.$$p[14]:
                    this.nv = this.nx;
                    break;
                case XamDataChart.$$p[7]:
                case XamDataChart.$$p[9]:
                    this.kh();
                    break;
                case XamDataChart.$$p[0]:
                case XamDataChart.$$p[13]:
                    if (c != d) {
                        for (let f of fromEnum(this.axes)) {
                            f.ci = true;
                            f.ha();
                        }
                    }
                    break;
                case XamDataChart.$$p[4]:
                case XamDataChart.$$p[2]:
                case XamDataChart.$$p[3]:
                    for (let g of fromEnum(this.axes)) {
                        g.hh();
                    }
                    break;
            }
        }
        o4() {
            this.mv = this.mt(this.m5);
            for (let a of fromEnum(this.axes)) {
                a.ci = true;
                a.ha();
            }
            for (let b of fromEnum(this.series)) {
                b.je(false);
            }
        }
        eg() {
            return this.n5;
        }
        eh() {
            return this.n6;
        }
        ka() {
            super.ka();
            this.n5 = this.mr.width;
            this.n6 = this.mr.height;
        }
        get n5() {
            return this.nz;
        }
        set n5(a) {
            let b = this.nz;
            this.nz = a;
            this.ji("ActualWindowScaleHorizontal", b, this.nz);
        }
        get n6() {
            return this.n0;
        }
        set n6(a) {
            let b = this.n0;
            this.n0 = a;
            this.ji("ActualWindowScaleVertical", b, this.n0);
        }
        c3() {
            return this.nt;
        }
        c4() {
            return this.nv;
        }
        get axes() {
            return this.nf;
        }
        o1(a, b) {
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    if (c != null) {
                        c.bn = null;
                        c.bh = null;
                        this.jx(c);
                        this.bn.dp(c);
                        c.rangeChanged = delegateRemove(c.rangeChanged, runOn(this, this.o3));
                        this.bn.dq(c);
                        if (c.cz != null) {
                            for (let d of fromEnum(c.cw())) {
                                d.je(false);
                            }
                        }
                    }
                }
                if (this.axes.count == 0) {
                    this.j2();
                }
            }
            if (b.newItems != null) {
                for (let e of fromEn(b.newItems)) {
                    if (e != null) {
                        this.kd(e);
                        e.bn = this.actualSyncLink;
                        e.bh = this;
                        e.a3.aw();
                        this.bn.bm(e);
                        e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.o3));
                        this.bn.bj(e);
                    }
                }
            }
            this.h2();
        }
        o2(a, b) {
            let c = new List$1(Series.$, 0);
            for (let d of fromEnum(this.axes)) {
                if (d.cz != null) {
                    for (let e of fromEnum(d.cw())) {
                        if (!c.contains(e)) {
                            c.add(e);
                        }
                    }
                }
                d.bn = null;
                d.bh = null;
                this.jx(d);
                this.bn.dp(d);
                d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.o3));
                this.bn.dq(d);
                this.j2();
            }
            for (let f of fromEnum(this.series)) {
                if (!c.contains(f)) {
                    c.add(f);
                }
            }
            for (let g of fromEnum(c)) {
                g.je(false);
            }
        }
        o3(a, b) {
            let c = typeCast(Axis.$, a);
            if (c == null) {
                return;
            }
            this.h2();
            if (this.axisRangeChanged != null) {
                this.axisRangeChanged(this, new ChartAxisRangeChangedEventArgs(this, c, b.oldMinimumValue, b.minimumValue, b.oldMaximumValue, b.maximumValue));
            }
            if (c.ah != null) {
                c.ah.g7();
            }
            c.g7();
            let d = this.cd;
            if (typeCast(CategoryAxisBase.$, c) !== null) {
                d = true;
            }
            for (let e of fromEnum(c.cw())) {
                e.dl = true;
                this.h2();
                e.je(d);
            }
            if (c.bh != null) {
                for (let f of fromEnum(c.bh.series)) {
                    XamDataChart.o5(c, d, f);
                }
            }
            for (let g of fromEnum(this.axes)) {
                if (g != c && g.ah != null && g.ah == c) {
                    g.g7();
                }
            }
        }
        static o5(a, b, c) {
        }
        kj(a, b) {
            super.kj(a, b);
            if (this.axes == null) {
                return;
            }
            for (let c of fromEnum(this.axes)) {
                c.bn = this.actualSyncLink;
                c.bh = this;
            }
        }
        getFontInfo() {
            this.nm = this.nl.fe;
            return this.nm;
        }
        o6() {
            this.bn.d7();
            for (let a of fromEnum(this.axes)) {
                a.hb(false);
            }
            for (let b of fromEnum(this.series)) {
                b.bi.bg();
                b.je(false);
            }
        }
        getFontBrush() {
            return this.nl.fm;
        }
        hj() {
            super.hj();
            let a = new List$1(Axis.$, 0);
            for (let b = 0; b < this.axes.count; b++) {
                a.add(this.axes._inner[b]);
            }
            for (let c = 0; c < a.count; c++) {
                this.axes.remove(a._inner[c]);
                if (typeCast(CategoryAxisBase.$, a._inner[c]) !== null) {
                    let d = a._inner[c];
                    this.jz(d.name, true);
                    d.itemsSource = null;
                }
                a._inner[c].g0(null, null);
            }
        }
        l6() {
            return this.nl.fi;
        }
        dd() {
            return true;
        }
        ke() {
            super.ke();
            if (!this.c6) {
                return;
            }
            for (let a of fromEnum(this.axes)) {
                this.kd(a);
            }
        }
        l7(a) {
            return this.pr(a, this.nb);
        }
        pr(a, b) {
            if (b != null && b.count > 0) {
                return b.item(a % b.count);
            }
            else {
                return null;
            }
        }
        mb(a) {
            return this.pr(a, this.nc);
        }
        mc(a) {
            return this.pr(a, this.nd);
        }
        md(a) {
            return this.pr(a, this.ne);
        }
        cl() {
            if (this.nu) {
                return true;
            }
            return this.nr();
        }
        nr() {
            for (let a = 0; a < this.series.count; a++) {
                if (this.series._inner[a].c2 || this.series._inner[a].c0) {
                    return true;
                }
            }
            for (let b = 0; b < this.axes.count; b++) {
                if (this.axes._inner[b].b2 || this.axes._inner[b].ce) {
                    return true;
                }
            }
            return false;
        }
        bm() {
            return new XamDataChartView(this);
        }
        i2(a) {
            super.i2(a);
            this.nl = a;
        }
        ju() {
            for (let a = 0; a < this.nf.count; a++) {
                this.nf._inner[a].ci = true;
                this.nf._inner[a].hb(false);
            }
            super.ju();
        }
        get oa() {
            return this.n2;
        }
        set oa(a) {
            this.n2 = a;
            this.o4();
        }
        get oc() {
            return this.n4;
        }
        set oc(a) {
            this.n4 = a;
            this.o4();
        }
        get ob() {
            return this.n3;
        }
        set ob(a) {
            this.n3 = a;
            this.o4();
        }
        get n9() {
            return this.n1;
        }
        set n9(a) {
            this.n1 = a;
            this.o4();
        }
        mt(a) {
            let b = super.mt(a);
            if (a.isEmpty) {
                return Rect.empty;
            }
            if (this.oa == 0 && this.oc == 0 && this.ob == 0 && this.n9 == 0) {
                return Rect.empty;
            }
            if (this.oa + this.ob >= a.width || this.oc + this.n9 >= a.height) {
                return Rect.empty;
            }
            let c = new Rect(0, a.left + this.oa, a.top + this.oc, a.width - this.oa - this.ob, a.height - this.oc - this.n9);
            return c;
        }
        mz() {
            let a = this.m5;
            let b = this.m6;
            let c = this.mv;
            if (c.isEmpty || a.isEmpty) {
                return a;
            }
            if (c.containsRect(a)) {
                return a;
            }
            if (a.containsRect(c)) {
                return c;
            }
            return a;
        }
        og() {
            return this.nk.exportVisualData(this);
        }
        oo() {
            let cvd_ = this.og();
            cvd_.scaleByViewport();
            return (cvd_.serialize());
        }
        jb() {
            super.jb();
            for (let a = 0; a < this.axes.count; a++) {
                let b = this.axes._inner[a];
                let c = 50;
                if (!isNaN_(b.au.a9)) {
                    c = b.au.a9;
                }
                b.dk = c;
            }
        }
        jw() {
            super.jw();
            for (let a = 0; a < this.axes.count; a++) {
                let b = this.axes._inner[a];
                b.dk = NaN;
                b.ci = true;
                b.hb(false);
            }
        }
        ny(a) {
            let b = new List$1(Axis.$, 0);
            for (let c of fromEnum(this.series)) {
                let d = c.am(a);
                if (d != null) {
                    b.add(d);
                }
            }
            return b;
        }
    }
    XamDataChart.$t = /*@__PURE__*/ markType(XamDataChart, 'XamDataChart', SeriesViewer.$);
    XamDataChart.n8 = 0;
    XamDataChart.n7 = 0;
    XamDataChart.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, XamDataChart, 'ji', ['AlignsGridLinesToPixels:np:o7', [0, true], 'Brushes:nb:o8', [BrushCollection.$, null], 'DefaultAxisMajorStroke:po:o9', [Brush.$, null], 'DefaultAxisMinorStroke:pp:pa', [Brush.$, null], 'DefaultAxisStroke:pq:pb', [Brush.$, null], 'GridMode:ni:pc', [GridMode_$type, /*@__PURE__*/ enumGetBox(GridMode_$type, 2)], 'HorizontalZoomable:ns:pd', [0, false], 'IsHorizontalZoomEnabled:nt:pe', [0, false], 'IsSquare:nu:pf', [0, false], 'IsVerticalZoomEnabled:nv:pg', [0, false], 'MarkerBrushes:nc:ph', [BrushCollection.$, null], 'MarkerOutlines:nd:pi', [BrushCollection.$, null], 'Outlines:ne:pj', [BrushCollection.$, null], 'ShouldClipGridlines:nw:pk', [0, true], 'VerticalZoomable:nx:pl', [0, false], 'WindowScaleHorizontal:od:pm', [1, NaN], 'WindowScaleVertical:oe:pn', [1, NaN]]);
    return XamDataChart;
})();
/**
 * @hidden
 */
export let LabelPanelArranger = /*@__PURE__*/ (() => {
    class LabelPanelArranger extends Base {
        static e(a, b) {
            for (let c of fromEnum(a)) {
                let d = c.ac;
                let e = d.ah;
                e = LabelPanelArranger.a(c, d, e);
                let f = LabelPanelArranger.b(c);
                let g = 0;
                let h = 0;
                let i = 0;
                if (d.b1()) {
                    c.ae.ac();
                    i = c.a9;
                }
                else {
                    i = c.ba(b);
                }
                g = i;
                h = i;
                if (c.ac.ax != null && c.ac.ax.visibility != 0) {
                    h = 0;
                    g = 0;
                }
                if (c.an()) {
                    switch (f) {
                        case 0:
                            b.y = Math.max(0, b.top + h);
                            b.height = Math.max(0, b.height - h);
                            d.ax.c = 0;
                            break;
                        case 4:
                            if (e != null && (c.a8 - b.top < h && typeCast(HorizontalAxisLabelPanel.$, c) !== null)) {
                                d.ax.c = 5;
                            }
                            else {
                                d.ax.c = 4;
                            }
                            break;
                        case 5:
                            if (e != null && (b.bottom - c.a8 < h && typeCast(HorizontalAxisLabelPanel.$, c) !== null)) {
                                if (d.ax != null) {
                                    d.ax.c = 4;
                                }
                            }
                            else {
                                if (d.ax != null) {
                                    d.ax.c = 5;
                                }
                            }
                            break;
                        case 1:
                        default:
                            if (d.ax != null) {
                                d.ax.c = 1;
                            }
                            b.height = Math.max(0, b.height - h);
                            break;
                    }
                }
                if (typeCast(VerticalAxisLabelPanel.$, c) !== null) {
                    switch (f) {
                        case 3:
                            b.width = Math.max(0, b.width - g);
                            d.ax.c = 3;
                            break;
                        case 6:
                            if (e != null && c.a8 - b.left < g) {
                                d.ax.c = 7;
                            }
                            else {
                                d.ax.c = 6;
                            }
                            break;
                        case 7:
                            if (e != null && b.right - c.a8 < g) {
                                d.ax.c = 6;
                            }
                            else {
                                d.ax.c = 7;
                            }
                            break;
                        case 2:
                        default:
                            if (d.ax != null) {
                                d.ax.c = 2;
                            }
                            b.x = Math.max(0, b.left + g);
                            b.width = Math.max(0, b.width - g);
                            break;
                    }
                }
                if (c.ac.b2) {
                    if (d.ax != null) {
                        d.ax.c = f;
                    }
                }
            }
            return b;
        }
        static a(a, b, c) {
            return b.ai();
        }
        static b(a) {
            if (a == null) {
                return 1;
            }
            else {
                let b = a.ac;
                if (b != null && b.ax != null) {
                    let c = b.ax.c;
                    if (!a.as(c)) {
                        return a.ah();
                    }
                    return c;
                }
                else {
                    return a.ah();
                }
            }
        }
        static c(a, b, c, d) {
            let e = a.ac;
            let f = e.ah;
            f = LabelPanelArranger.a(a, e, f);
            let g = LabelPanelArranger.b(a);
            let h;
            let i = a.ba(c);
            let j = Math.max(0, i);
            let k = Math.max(0, i);
            if (a.ac != null && a.ac.ax != null && a.ac.ax.visibility == 1) {
                return;
            }
            switch (g) {
                case 3:
                    b.g = b.g - k;
                    b.d = b.d - k;
                    h = new Rect(0, b.g, c.top, k, c.height);
                    d(a, h);
                    break;
                case 2:
                    h = new Rect(0, b.f, c.top, k, c.height);
                    d(a, h);
                    b.f = b.f + k;
                    b.c = b.c + k;
                    break;
                case 7:
                    if (f != null) {
                        h = new Rect(0, b.f + a.a8, c.top, k, c.height);
                    }
                    else {
                        b.d = b.d - k;
                        h = new Rect(0, b.d, c.top, k, c.height);
                    }
                    d(a, h);
                    break;
                case 6:
                    if (f != null) {
                        h = new Rect(0, b.f + a.a8 - k, c.top, k, c.height);
                    }
                    else {
                        h = new Rect(0, b.c, c.top, k, c.height);
                        b.c = b.c + k;
                    }
                    d(a, h);
                    break;
                case 1:
                    b.a = b.a - j;
                    b.b = b.b - j;
                    h = new Rect(0, c.left, b.a, c.width, j);
                    d(a, h);
                    break;
                case 0:
                    h = new Rect(0, c.left, b.h, c.width, j);
                    d(a, h);
                    b.h = b.h + j;
                    b.e = b.e + j;
                    break;
                case 5:
                    if (f != null) {
                        h = new Rect(0, c.left, b.h + a.a8, c.width, j);
                    }
                    else {
                        b.b = b.b - j;
                        h = new Rect(0, c.left, b.b, c.width, j);
                    }
                    d(a, h);
                    break;
                case 4:
                    if (f != null) {
                        h = new Rect(0, c.left, b.h + a.a8 - j, c.width, j);
                    }
                    else {
                        h = new Rect(0, c.left, b.e, c.width, j);
                        b.e = b.e + j;
                    }
                    d(a, h);
                    break;
            }
            if (a.ac.b2) {
                h = new Rect(0, c.left, c.top, c.width, c.height);
                d(a, h);
            }
        }
        static d(a, b, c, d) {
            let e = new List$1(AxisLabelPanelBase.$, 0);
            let f = new List$1(AxisLabelPanelBase.$, 0);
            for (let g of fromEnum(a)) {
                let h = LabelPanelArranger.b(g);
                switch (h) {
                    case 1:
                    case 2:
                    case 0:
                    case 3:
                        f.add(g);
                        break;
                    case 5:
                    case 6:
                    case 4:
                    case 7:
                        e.add(g);
                        break;
                }
            }
            for (let i of fromEnum(f)) {
                LabelPanelArranger.c(i, b, c, d);
            }
            for (let j of fromEnum(e)) {
                LabelPanelArranger.c(j, b, c, d);
            }
        }
    }
    LabelPanelArranger.$t = /*@__PURE__*/ markType(LabelPanelArranger, 'LabelPanelArranger');
    return LabelPanelArranger;
})();
/**
 * @hidden
 */
export let ChartContentManager = /*@__PURE__*/ (() => {
    class ChartContentManager extends DependencyObject {
        constructor(a) {
            super();
            this.l = null;
            this.q = new Dictionary$2(ChartContentType_$type, Dictionary$2.$.specialize(DependencyObject.$, ContentInfo.$), 0);
            this.s = new List$1(Series.$, 0);
            this.m = false;
            this.u = null;
            this.p = false;
            this.n = false;
            this.o = false;
            this.o = true;
            this.n = true;
            this.q.addItem(0, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
            this.q.addItem(1, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
            this.q.addItem(2, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
            this.l = a;
        }
        get t() {
            return this.s;
        }
        set t(a) {
            this.s = a;
        }
        k(a, b, c) {
            let d = this.j(a, b);
            d.a = c;
            return d;
        }
        ac(a, b) {
            let c = this.q.item(a);
            if (c.containsKey(b)) {
                c.removeItem(b);
            }
            let d = typeCast(Series.$, b);
            if (d != null && this.t.contains(d)) {
                this.t.remove(d);
            }
        }
        z(a) {
            let b = this.u;
            this.u = a;
            if (this.m && b == null && this.u != null) {
                this.u.setTimeout(runOn(this, this.v), 0);
            }
        }
        y() {
            if (!this.m) {
                this.m = true;
                if (this.u != null) {
                    this.u.setTimeout(runOn(this, this.v), 0);
                }
                else {
                }
            }
        }
        ab(a, b, c, d) {
            let e = c;
            if (!e.c) {
                e.b = d;
            }
            else {
                if (!d) {
                    e.b = false;
                }
            }
            if (!e.c) {
                e.c = true;
                this.y();
            }
        }
        j(a, b) {
            let c = this.q.item(a);
            let d = null;
            if (!((() => { let e = c.tryGetValue(b, d); d = e.p1; return e.ret; })())) {
                d = new ContentInfo();
                d.h = b;
                c.addItem(b, d);
                let e = typeCast(Series.$, b);
                if (e != null && !this.t.contains(e)) {
                    if (e.cs) {
                        let f = e.a6();
                        let g = this.t.indexOf(f) + 1;
                        g += e.fb();
                        if (this.t.count <= g || f.fg() == 0 || g == -1) {
                            this.t.add(e);
                        }
                        else {
                            this.t.insert(g, e);
                        }
                    }
                    else {
                        this.t.add(e);
                    }
                }
            }
            return d;
        }
        x() {
            this.v();
        }
        v() {
            if (this.l == null || this.q == null) {
                return;
            }
            if (!this.m) {
                return;
            }
            this.m = false;
            if (this.l != null) {
                this.l.hd();
            }
            for (let a of fromEnum(this.r())) {
                a.f();
            }
            if (!this.m) {
                this.l.jj();
            }
        }
        *_r() {
            let a = null;
            a = this.q.item(1);
            for (let b of fromEnum(a.values)) {
                yield b;
            }
            a = this.q.item(0);
            let c = new List$1(ContentInfo.$, 0);
            for (let d of fromEnum(this.t)) {
                if (!d.cj) {
                    c.add(a.item(d));
                }
            }
            for (let e of fromEnum(this.t)) {
                if (e.cj) {
                    c.add(a.item(e));
                }
            }
            for (let f of fromEnum(c)) {
                yield f;
            }
            a = this.q.item(2);
            for (let g of fromEnum(a.values)) {
                yield g;
            }
        }
        r() {
            return toEnum(() => this._r());
        }
        w(a) {
            for (let b of fromEnum(this.q.item(1).values)) {
                b.h.gy();
            }
            for (let c of fromEnum(this.q.item(1).values)) {
                c.f();
            }
            for (let d of fromEnum(this.q.item(1).values)) {
                d.h.i7 = Rect.empty;
            }
        }
        ad(a, b, c, d) {
            c.i = d;
        }
        aa(a, b) {
            if (!b.e) {
                b.e = true;
                this.y();
            }
        }
    }
    ChartContentManager.$t = /*@__PURE__*/ markType(ChartContentManager, 'ChartContentManager', DependencyObject.$);
    return ChartContentManager;
})();
/**
 * @hidden
 */
export let ContentInfo = /*@__PURE__*/ (() => {
    class ContentInfo extends Base {
        constructor() {
            super(...arguments);
            this.h = null;
            this.a = null;
            this.b = false;
            this.c = false;
            this.i = null;
            this.e = false;
        }
        get d() {
            if (this.i.isEmpty) {
                return false;
            }
            if (this.i.width == 0 && this.i.height == 0) {
                return false;
            }
            return true;
        }
        g() {
            if (this.e && typeCast(Axis.$, this.h) !== null) {
                this.e = false;
                let a = this.c;
                this.c = true;
                let b = this.h.co(true);
                if (!b) {
                    this.c = a;
                }
            }
        }
        f() {
            this.g();
            if (typeCast(Axis.$, this.h) !== null) {
                let a = typeCast(Axis.$, this.h);
                if (a.ah != null) {
                    let b = a.ah;
                    if (b.a4 != null && b.a4.e) {
                        b.a4.g();
                    }
                }
            }
            if (this.c) {
                this.c = false;
                this.a(this.b);
                this.b = false;
            }
        }
    }
    ContentInfo.$t = /*@__PURE__*/ markType(ContentInfo, 'ContentInfo');
    return ContentInfo;
})();
/**
 * @hidden
 */
export let Series = /*@__PURE__*/ (() => {
    class Series extends Control {
        constructor() {
            super();
            this.bi = null;
            this.fk = 0;
            this.lq = null;
            this.e3 = null;
            this.b1 = null;
            this.a1 = null;
            this.az = null;
            this.bt = null;
            this.jy = null;
            this.dy = new Dictionary$2(String_$type, String_$type, 0);
            this.dx = new Dictionary$2(String_$type, FastReflectionHelper.$, 0);
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.renderRequested = null;
            this.dm = false;
            this.bh = null;
            this.aq = null;
            this.b6 = true;
            this.de = false;
            this.df = false;
            this.b7 = false;
            this.cd = false;
            this.bm = null;
            this.br = null;
            this.d3 = null;
            this.a4 = null;
            this.b0 = null;
            this.e0 = null;
            this.jw = null;
            this.av = null;
            this.bl = 0;
            this.bj = 0;
            this.bk = 0;
            this.cf = false;
            this.b9 = false;
            this.b5 = false;
            this.fn = null;
            this.a7 = new SeriesComponentsForView();
            this.b8 = false;
            this.fz = null;
            this.e2 = null;
            this._coercionMethods = null;
            this.b4 = false;
            this.bb = 0;
            this.ba = 0;
            this.b3 = null;
            this.lg = { $type: Point_$type, x: NaN, y: NaN };
            this.d4 = NaN;
            this.d5 = NaN;
            DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
            DVContainer.instance.registerIfLoaded("InteractivityFactoryManager");
            DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
            this.fk = Series.e5++;
            this.dl = true;
            this.lq = Rect.empty;
            this.bi = this.bf();
            this.bi.br = Rect.empty;
            this.iv(this.bi);
            this.bi.k = true;
            this.bi.ap();
            this.bi.k = false;
            this.ab = Series.$;
            this.b0 = (a, b) => {
                if (this.bs == null || !this.bs.cn) {
                    this.ju(b.oldRect, b.newRect);
                }
            };
            this.a4 = (a, b) => this.i0(a, b.propertyName, b.oldValue, b.newValue);
            this.e0 = (a, b) => {
                if (this.bs != null) {
                    this.dl = true;
                    this.bs.h3();
                }
                this.hz(b.action, b.position, b.count, b.propertyName);
            };
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.i0(a, b.propertyName, b.oldValue, b.newValue));
            this.jy = new Canvas();
            this.bt = new DoubleAnimator(0, 1, this.fi);
            let a = this.bt;
            a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.hp));
            this.g(Series.k3, ((() => {
                let $ret = new Binding(1, "Visibility");
                $ret.d = this;
                return $ret;
            })()));
            this.bc = this.bd();
        }
        get e4() {
            return this.e3;
        }
        set e4(a) {
            this.e3 = a;
            this.bt.u(this.e3);
        }
        provideRenderer(a) {
            this.e4 = a;
        }
        gw() {
            return this.a0.a$q(this);
        }
        hp(a, b) {
            this.ez = this.bt.o;
        }
        get b2() {
            if (this.b1 == null) {
                this.b1 = new SRProvider(this.e4);
            }
            if (this.b1.l == null) {
                this.b1.l = this.e4;
            }
            return this.b1;
        }
        get a2() {
            if (this.a1 == null) {
                this.a1 = DVContainer.instance.createInstance(ISeriesVisualDataManager_$type, () => this.b2.q);
            }
            return this.a1;
        }
        get dz() {
            return this.a0.a$h;
        }
        get a0() {
            if (this.az == null) {
                this.az = DVContainer.instance.createInstance(ISeriesInteractionManager_$type, () => this.b2.n);
                if (this.toolTip != null) {
                    this.az.a$ah(this, this.toolTip);
                }
            }
            return this.az;
        }
        get cx() {
            return DVContainer.instance.checkLoaded("InteractivityFactoryManager");
        }
        iv(a) {
        }
        it() {
            this.hq(this.aw, this.aw);
            if (this.bz == null && this.bn != null && this.itemsSource != null) {
                this.bz = this.bn.getFastItemsSource(this.itemsSource);
            }
            this.bi.as();
        }
        iu() {
            this.hv();
            if (this.bz != null && this.bn != null && this.itemsSource != null) {
                this.bz = this.bn.releaseFastItemsSource(this.itemsSource);
            }
            this.bi.at();
        }
        bg() {
            return this.bf();
        }
        bf() {
            return new SeriesView(this);
        }
        dt() {
            return false;
        }
        fs(a, b) {
            return null;
        }
        gv(a) {
            if (!this.dy.containsKey(a)) {
                let b = a.charAt(0).toUpperCase() + a.substr(1);
                this.dy.addItem(a, b);
            }
            return this.dy.item(a);
        }
        ft(a, b, c) {
            let d = null;
            if (!this.dx.containsKey(b)) {
                d = new FastReflectionHelper(false, c);
                this.dx.addItem(b, d);
            }
            else {
                d = this.dx.item(b);
            }
            d.propertyName = c;
            return d.getPropertyValue(a);
        }
        eb(a) {
            return this.e8(a);
        }
        fa(a) {
            return -1;
        }
        get_c1() {
            return false;
        }
        get c1() {
            return this.get_c1();
        }
        ap() {
            return null;
        }
        e8(a) {
            return -1;
        }
        fp(a) {
            return null;
        }
        fu(a, b) {
            return a.fp(b);
        }
        e7() {
            return -1;
        }
        fb() {
            return -1;
        }
        fg() {
            return -1;
        }
        get container() {
            return this.bs;
        }
        get hasSubItems() {
            return this.ci();
        }
        ci() {
            return false;
        }
        forSubItems(a) {
            this.h7(a);
        }
        h7(a) {
        }
        h8(a) {
        }
        la() {
            return null;
        }
        resolveLegendIndex() {
            return this.fh;
        }
        a6() {
            return null;
        }
        get_cj() {
            return false;
        }
        get cj() {
            return this.get_cj();
        }
        get_isVertical() {
            return false;
        }
        get isVertical() {
            return this.get_isVertical();
        }
        get_cs() {
            return false;
        }
        get cs() {
            return this.get_cs();
        }
        get_ck() {
            return false;
        }
        get ck() {
            return this.get_ck();
        }
        get_c0() {
            return false;
        }
        get c0() {
            return this.get_c0();
        }
        get_c4() {
            return false;
        }
        get c4() {
            return this.get_c4();
        }
        get_c2() {
            return false;
        }
        get c2() {
            return this.get_c2();
        }
        get_isStacked() {
            return false;
        }
        get isStacked() {
            return this.get_isStacked();
        }
        get_cr() {
            return false;
        }
        get cr() {
            return this.get_cr();
        }
        get_c3() {
            return false;
        }
        get c3() {
            return this.get_c3();
        }
        get_cl() {
            return false;
        }
        get cl() {
            return this.get_cl();
        }
        get_ct() {
            return false;
        }
        get ct() {
            return this.get_ct();
        }
        get_c5() {
            return false;
        }
        get c5() {
            return this.get_c5();
        }
        get_c6() {
            return false;
        }
        get c6() {
            return this.get_c6();
        }
        a5() {
            return null;
        }
        get_cm() {
            return false;
        }
        get cm() {
            return this.get_cm();
        }
        get_cn() {
            return false;
        }
        get cn() {
            return this.get_cn();
        }
        d9(a, b, c, d, e) {
            return Number.POSITIVE_INFINITY;
        }
        ea(a, b, c, d, e, f, g) {
            return this.a0.a$i(this, a, b, c, d, e, f, g);
        }
        get_dv() {
            return false;
        }
        get dv() {
            return this.get_dv();
        }
        ep(a, b, c, d, e, f, g, h) {
            return this.a0.a$l(this, a, b, c, d, e, f, g, h);
        }
        ef(a, b, c, d, e, f, g, h) {
            return this.a0.a$k(this, a, b, c, d, e, f, g, h);
        }
        ff(a, b, c, d, e) {
            return this.a0.a$n(this, a, b, c, d, e);
        }
        ee(a) {
            return (a ? 10 : 3);
        }
        ah(a) {
            return null;
        }
        ai(a) {
            return null;
        }
        dg(a, b) {
            return this.a0.a$d(this, a, b);
        }
        aj(a, b, c, d, e, f) {
            return this.a0.a$a(this, a, b, c, d, e, f);
        }
        di(a, b, c) {
            return this.a0.a$e(this, a, b, c);
        }
        dj(a, b) {
            return this.a0.a$f(this, a, b);
        }
        fd(a, b, c, d, e) {
            return this.a0.a$m(this, a, b, c, d, e);
        }
        ed(a, b) {
            return this.a0.a$j(this, a, b);
        }
        fe(a, b) {
            return -1;
        }
        fc(a, b) {
            return -1;
        }
        en(a, b, c) {
            return NaN;
        }
        lm(a, b, c) {
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        lv(a) {
            return Rect.empty;
        }
        ak(a) {
            let b = this.lv(a);
            if (!b.isEmpty) {
                let c = new Array(1);
                c[0] = b;
                return c;
            }
            return null;
        }
        lw(a) {
            return this.lv(this.lp(a));
        }
        al(a) {
            return this.ak(this.lp(a));
        }
        lx(a) {
            return Rect.empty;
        }
        ly(a) {
            return this.lx(this.lp(a));
        }
        dk(a, b) {
            return this.a0.a$g(this, a, b);
        }
        lo(a, b, c, d, e, f, g, h, i) {
            return this.a0.a$aj(this, a, b, c, d, e, f, g, h, i);
        }
        ej(a, b, c) {
            return this.en(a, b, c);
        }
        li(a, b, c) {
            return this.lm(a, b, c);
        }
        el(a, b, c) {
            return this.en(a, b, c);
        }
        lk(a, b, c) {
            return this.lm(a, b, c);
        }
        ln(a, b, c) {
            let d = this.lp(a);
            return this.lm(d, b, c);
        }
        eo(a, b, c) {
            let d = this.lp(a);
            return this.en(d, b, c);
        }
        lj(a, b, c) {
            let d = this.lp(a);
            return this.li(d, b, c);
        }
        ek(a, b, c) {
            let d = this.lp(a);
            return this.ej(d, b, c);
        }
        ll(a, b, c) {
            let d = this.lp(a);
            return this.lk(d, b, c);
        }
        em(a, b, c) {
            let d = this.lp(a);
            return this.el(d, b, c);
        }
        e9(a) {
            let b = this.lp(a);
            return this.e8(b);
        }
        eg() {
            return 0;
        }
        ec(a) {
            let b = this.lp(a);
            return this.eb(b);
        }
        fq(a) {
            let b = this.lp(a);
            return this.fp(b);
        }
        ch(a, b, c) {
            return false;
        }
        raisePropertyChanged(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        get_hasMarkers() {
            return false;
        }
        get hasMarkers() {
            return this.get_hasMarkers();
        }
        ib() {
        }
        k7() {
            return null;
        }
        k8() {
            return null;
        }
        j0() {
            return null;
        }
        lp(a) {
            let b = this.bs != null ? this.bs.mu : this.bi.br;
            let c = this.bi.bs;
            let d = { $type: Point_$type, x: c.left + c.width * (a.x - b.left) / b.width, y: c.top + c.height * (a.y - b.top) / b.height };
            return d;
        }
        lh(a) {
            let b = this.bs != null ? this.bs.mu : this.bi.br;
            let c = this.bi.bs;
            let d = b.left + (a.x - c.left) / c.width * b.width;
            let e = b.top + (a.y - c.top) / c.height * b.height;
            return { $type: Point_$type, x: d, y: e };
        }
        fv(a, b) {
            let c = this.bi.c(a);
            let d = c != null ? c.item : null;
            if (d == null) {
                let e = this.lp(b);
                d = this.fp(e);
            }
            return d;
        }
        c9(a) {
            return false;
        }
        an(a) {
            return new AxisRange(NaN, NaN);
        }
        ao() {
            return new AxisRange(NaN, NaN);
        }
        je(a) {
            this.de = false;
            if (this.bs != null) {
                this.bs.al.ab(0, this, this.aq, a);
                if (this.renderRequested != null) {
                    let b = new RenderRequestedEventArgs();
                    b.animate = a;
                    this.renderRequested(this, b);
                    a = b.animate;
                }
            }
        }
        h2(a) {
            this.jf(a);
            this.de = false;
        }
        jf(a) {
            if (this.dp && !this.dc()) {
                this.dn = false;
            }
        }
        ht() {
            if (this.dm && !this.dp) {
                this.bt.r = truncate(Math.max(this.eq(), this.er()));
                this.hx();
            }
        }
        hx() {
        }
        jg(a, b) {
            if (this.bh == null) {
                this.bh = this.bf();
                this.bh.n = true;
                if (this.bs != null) {
                    this.bs.ai.l(this.bh);
                    this.bh.a = this.bs.ai;
                }
                this.bh.ap();
            }
            this.bh.br = a;
        }
        jd(a, b, c, d, e) {
            this.a0.a$r(this, a, b, d, e);
        }
        getEffectiveViewport1(a) {
            if (this.bs == null) {
                return Rect.empty;
            }
            if (a.m) {
                return this.bs.mv;
            }
            if (a.n) {
                if (this.bs.mv.isEmpty) {
                    return this.bs.mv;
                }
                let b = this.bs.m0(a.br, this.bs.m5, this.bs.mv);
                return b;
            }
            return this.bs.mv;
        }
        lr(a) {
            if (this.bs == null || this.bs.mu.isEmpty) {
                return a.br;
            }
            if (a.m) {
                return a.br;
            }
            if (a.n) {
                if (this.bs.mv.isEmpty) {
                    return a.br;
                }
                if (this.bs.mu.equals1(this.bs.m5)) {
                    return a.br;
                }
                let b = this.bs.m0(a.br, this.bs.m5, this.bs.mv);
                let c = this.bs.my(a.br, b, this.bs.mr);
                return c;
            }
            return this.bs.mu;
        }
        lu(a) {
            if (!this.lz.equals1(a)) {
                return Rect.empty;
            }
            return this.getEffectiveViewport();
        }
        lt(a) {
            if (this.bs == null || this.bs.mv.isEmpty) {
                return Rect.empty;
            }
            let b = this.bs.mv;
            let c = a.br;
            let d = (b.left - c.left) / c.width;
            let e = (b.top - c.top) / c.height;
            let f = (b.right - c.left) / c.width;
            let g = (b.bottom - c.top) / c.height;
            return new Rect(0, d, e, f - d, g - e);
        }
        getEffectiveViewport() {
            return this.getEffectiveViewport1(this.bi);
        }
        i8() {
            this.i9(null);
        }
        i9(a) {
            if (this.cx) {
                this.a0.a$ac(this, a);
            }
        }
        ja(a) {
            if (this.cx) {
                this.a0.a$ad(this, a, this.bs);
            }
        }
        getViewInfo(a, b) {
            a = this.bi.br;
            b = this.bi.bs;
            return {
                p0: a,
                p1: b
            };
        }
        dw(a, b, c) {
            if (a.width == 0 || a.height == 0) {
                return false;
            }
            if (this.cs) {
                return true;
            }
            return this._visibility == 0;
        }
        hw(a, b) {
            if (a) {
                this.dl = true;
            }
        }
        cb() {
            return this.cc(this.bi);
        }
        cc(a) {
            let b = a.br;
            let c = a.bs;
            if (!this.dw(b, c, a)) {
                this.hw(true, a);
                return true;
            }
            return false;
        }
        iw(a, b) {
            this.bi.br = b;
            this.jt(a, b);
            if (this.bs != null) {
                this.bs.al.ad(0, this, this.aq, b);
            }
        }
        ju(a, b) {
        }
        jt(a, b) {
        }
        get dl() {
            return this.b6;
        }
        set dl(a) {
            this.b6 = a;
        }
        h6(a) {
            a.h3();
        }
        im() {
            this.df = false;
            this.dl = true;
            if (this.bs != null) {
                this.bs.h3();
            }
        }
        il() {
            this.df = false;
            this.dl = true;
            if (this.bs != null) {
                this.bs.h2();
            }
        }
        get_cw() {
            return true;
        }
        get cw() {
            return this.get_cw();
        }
        get_isUsableInLegend() {
            return true;
        }
        get isUsableInLegend() {
            return this.get_isUsableInLegend();
        }
        ir() {
            this.bi.al();
        }
        io() {
            this.ix();
        }
        ix() {
            this.bi.aw();
            this.iz(false);
        }
        iy() {
            this.bi.aw();
            this.iz(true);
        }
        c8() {
            return false;
        }
        iz(a) {
            if (this.aq == null || this.aq.c) {
                return;
            }
            let b = this.bi.br;
            let c = this.bi.bs;
            let d = this.dw(b, c, this.bi);
            let e = this.bs != null && this.bs.c1 && this.bh != null && this.dw(this.bh.br, this.bh.bs, this.bh);
            if (d) {
                if (a) {
                    this.de = !this.c8();
                    this.h2(false);
                }
                else {
                    this.je(false);
                    this.de = !this.c8();
                }
            }
            if (e) {
                if (!this.dl) {
                    this.il();
                    this.df = true;
                }
            }
        }
        get dn() {
            return this.b7;
        }
        set dn(a) {
            this.b7 = a;
        }
        get dp() {
            if (this.dn == false) {
                return false;
            }
            return this.er() > 0;
        }
        v() {
            super.v();
            this.raisePropertyChanged("Opacity", this._opacity, this._opacity);
        }
        w(a, b) {
            super.w(a, b);
            this.raisePropertyChanged("Visibility", enumGetBox(Visibility_$type, a), enumGetBox(Visibility_$type, b));
        }
        i0(a, b, c, d) {
            switch (b) {
                case "SyncLink":
                    if (typeCast(SyncLink.$, c) !== null) {
                        let e = c;
                        e.propertyUpdated = delegateRemove(e.propertyUpdated, this.a4);
                        this.i7(typeCast(IFastItemsSourceProvider_$type, c));
                    }
                    if (typeCast(SyncLink.$, d) !== null) {
                        let f = d;
                        f.propertyUpdated = delegateCombine(f.propertyUpdated, this.a4);
                        this.i6(typeCast(IFastItemsSourceProvider_$type, d));
                    }
                    if (this.fh == -1) {
                        this.fh = XamDataChart.of(this);
                    }
                    break;
                case XamDataChart.$$p[1]:
                case XamDataChart.$$p[11]:
                case XamDataChart.$$p[10]:
                case XamDataChart.$$p[12]:
                    this.h3();
                    break;
                case "SeriesViewer":
                    if (typeCast(SeriesViewer.$, c) !== null) {
                        this.e4 = null;
                        let g = c;
                        g.windowRectChanged = delegateRemove(g.windowRectChanged, this.b0);
                        let h = c.series;
                        h.collectionChanged = delegateRemove(h.collectionChanged, this.d3);
                        let i = c;
                        i.propertyUpdated = delegateRemove(i.propertyUpdated, this.a4);
                        c.al.ac(0, this);
                        this.i9(c);
                        this.bi.ah(c);
                    }
                    if (typeCast(SeriesViewer.$, d) !== null) {
                        this.e4 = d.bn.i.ae;
                        let j = d;
                        j.windowRectChanged = delegateCombine(j.windowRectChanged, this.b0);
                        let k = d.series;
                        k.collectionChanged = delegateCombine(k.collectionChanged, this.d3);
                        let l = d;
                        l.propertyUpdated = delegateCombine(l.propertyUpdated, this.a4);
                        this.aq = d.al.k(0, this, runOn(this, this.h2));
                        this.bi.ad(d);
                        this.jo();
                        this.h4();
                        this.fk = this.bs.e4();
                    }
                    if (this.bs == null) {
                        this.externalObject._ensureTooltipDestroyed();
                        this.bt.w();
                    }
                    if (this.fh != -1) {
                        this.jp();
                    }
                    if (this.fh == -1 || d == null) {
                        this.fh = XamDataChart.of(this);
                    }
                    this.aw = this.ax();
                    this.hr(typeCast(XamDataChart.$, c), typeCast(XamDataChart.$, d));
                    break;
                case Series.$$p[23]:
                    if (this.bi != null) {
                        this.bi.av();
                    }
                    break;
                case "HitTestMode":
                    this.bc = this.bd();
                    break;
                case "ActualHitTestMode":
                    if (this.bs != null) {
                        this.bs.jt();
                    }
                    break;
                case "LegendItemBadgeTemplate":
                case "LegendItemTemplate":
                    this.bi.bg();
                    break;
                case Series.$$p[4]:
                case Series.$$p[14]:
                case Series.$$p[5]:
                case Series.$$p[6]:
                    this.h3();
                    this.ix();
                    break;
                case "Index":
                    if (typeGetValue(c) != typeGetValue(d)) {
                        this.h3();
                        this.ix();
                    }
                    break;
                case "RadiusX":
                case "RadiusY":
                case "RoundedCornersLocation":
                    this.ix();
                    break;
                case Series.$$p[3]:
                    this.jo();
                    this.ix();
                    break;
                case Series.$$p[21]:
                case Series.$$p[7]:
                case Series.$$p[12]:
                    this.ix();
                    break;
                case Series.$$p[9]:
                    this.ir();
                    this.ix();
                    break;
                case Series.$$p[31]:
                case Series.$$p[17]:
                case Series.$$p[16]:
                case Series.$$p[18]:
                case Series.$$p[19]:
                    this.ix();
                    break;
                case Series.$$p[1]:
                case Series.$$p[2]:
                case Series.$$p[22]:
                    this.ix();
                    this.bi.bg();
                    if (this.toolTip != null && this.az != null) {
                        this.a0.a$ah(this, this.toolTip);
                    }
                    break;
                case "Visibility":
                    this.bi.bh();
                    break;
                case "ItemsSource":
                    if (this.bn != null) {
                        this.i6(this.bn);
                    }
                    break;
                case Series.$$p[8]:
                    if (c != d && d != null) {
                        this.dn = true;
                    }
                    this.im();
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        let m = c;
                        m.event = delegateRemove(m.event, this.e0);
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        let n = d;
                        n.event = delegateCombine(n.event, this.e0);
                    }
                    break;
                case "Legend":
                    if (d != null) {
                        if (a == this) {
                            d.seriesOwner = this;
                        }
                        else if (typeCast(XamDataChart.$, a) !== null) {
                            d.chartOwner = a;
                        }
                    }
                    this.aw = this.ax();
                    break;
                case "ActualLegend":
                    this.hq(typeCast(IChartLegend_$type, c), typeCast(IChartLegend_$type, d));
                    break;
                case "LegendItem":
                    this.hs(typeCast(Control.$, c), typeCast(Control.$, d));
                    break;
                case Series.$$p[11]:
                    this.bi.aq();
                    break;
                case Series.$$p[24]:
                    if (this.az != null) {
                        this.a0.a$ah(this, this.toolTip);
                    }
                    break;
                case "CrosshairPoint":
                    if (this.bs != null) {
                        if (!this.cd) {
                            this.bs.jl(this, this.fp(this.bs.mj));
                        }
                    }
                    break;
                case Series.$$p[15]:
                    this.je(false);
                    this.il();
                    break;
                case Series.$$p[25]:
                case Series.$$p[26]:
                    this.bt.w();
                    this.bt.r = this.fi;
                    this.bt.b = this.bu;
                    this.je(false);
                    break;
                case "DiscreteLegendItemTemplate":
                    this.je(false);
                    break;
                case "VisibilityProxy":
                    if (c != d) {
                        this.je(false);
                    }
                    this.il();
                    this.bi.bh();
                    break;
                case Series.$$p[10]:
                    this.b9 = this.cg();
                    this.je(false);
                    break;
                case Series.$$p[20]:
                    this.h4();
                    break;
                case "FinalValue":
                    this.jr();
                    break;
            }
        }
        h4() {
            if (this.bs != null && (this.externalObject.owner)) {
                let sv_ = this.bs;
                this.externalObject.owner._ensureDefaultTooltip(this.externalObject);
                ;
            }
        }
        cg() {
            return this.cu && this.cv;
        }
        get_cv() {
            return false;
        }
        get cv() {
            return this.get_cv();
        }
        h1(a) {
            a.cd = true;
        }
        get bn() {
            return this.bm;
        }
        set bn(a) {
            if (this.bn != a) {
                let b = this.bn;
                this.bm = a;
                this.raisePropertyChanged("SyncLink", b, this.bn);
            }
        }
        get bs() {
            return this.br;
        }
        set bs(a) {
            if (this.bs != a) {
                let b = this.bs;
                this.br = a;
                this.raisePropertyChanged("SeriesViewer", b, this.br);
            }
        }
        get bq() {
            return typeCast(XamDataChart.$, this.bs);
        }
        set bq(a) {
            this.bs = a;
        }
        get itemsSource() {
            return this.c(Series.ke);
        }
        set itemsSource(a) {
            this.h(Series.ke, a);
        }
        hz(a, b, c, d) {
            if (this.bs != null) {
                this.bs.jm();
            }
        }
        get legend() {
            return this.c(Series.ki);
        }
        set legend(a) {
            this.h(Series.ki, a);
        }
        get jx() {
            if (this.jw == null && this.aw != null) {
                this.jw = this.jv();
            }
            return this.jw;
        }
        set jx(a) {
            if (this.jx != a) {
                let b = this.jx;
                this.jw = a;
                this.raisePropertyChanged("LegendItem", b, this.jw);
            }
        }
        fw() {
            return this.jv();
        }
        jv() {
            let a = typeCast(ContentControl.$, this.jw);
            let b = this.legendItemTemplate;
            if (b == null) {
                b = this.bi.bi(this.bl);
            }
            if (b != null) {
                if (a == null) {
                    a = new ContentControl();
                }
                a.content = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this;
                    $ret.item = null;
                    return $ret;
                })());
                a.ah = b;
            }
            else {
                a = null;
            }
            return a;
        }
        get aw() {
            return this.av;
        }
        set aw(a) {
            if (this.aw != a) {
                let b = this.av;
                this.av = a;
                this.raisePropertyChanged("ActualLegend", b, this.av);
            }
        }
        get legendItemBadgeTemplate() {
            return this.c(Series.kf);
        }
        set legendItemBadgeTemplate(a) {
            this.h(Series.kf, a);
        }
        get legendItemTemplate() {
            return this.c(Series.kg);
        }
        set legendItemTemplate(a) {
            this.h(Series.kg, a);
        }
        get jz() {
            return this.c(Series.j8);
        }
        set jz(a) {
            this.h(Series.j8, a);
        }
        get fh() {
            return typeGetValue(this.c(Series.kb));
        }
        set fh(a) {
            this.h(Series.kb, a);
        }
        js() {
            this.jp();
        }
        h3() {
            this.jp();
        }
        jp() {
            this.il();
            if (this.fh < 0) {
                return;
            }
            if (this.k6 != null) {
                this.bi.a4();
                this.bi.ae();
            }
            else {
                this.k4 = this.bs == null ? null : this.bs.l7(this.fh);
            }
            if (this.k9 != null) {
                this.bi.a5();
                this.bi.af();
            }
            else {
                this.k5 = this.bs == null ? null : this.bs.md(this.fh);
            }
        }
        ca() {
            return this.bt.f();
        }
        jm() {
            this.bt.v();
        }
        get_cq() {
            return true;
        }
        get cq() {
            return this.get_cq();
        }
        jo() {
            let a = (typeCast(XamDataChart.$, this.bs));
            if (a != null) {
                this.d6 = isNaN_(this.d7) ? a.nl.ff : this.d7;
            }
        }
        get co() {
            return this.b5;
        }
        set co(a) {
            this.b5 = a;
        }
        as(a) {
            return ((() => {
                let $ret = new DataContext();
                $ret.series = this;
                $ret.item = a;
                return $ret;
            })());
        }
        bo() {
            return 1;
        }
        jc() {
            this.bi.a0();
        }
        jh() {
            this.dn = true;
            this.je(true);
        }
        jb() {
            this.hu();
        }
        hu() {
        }
        ic() {
        }
        static *_d1(a, b, c) {
            for (let d = b; d < c; d++) {
                yield a(d);
            }
        }
        static d1(a, b, c) {
            return toEnum(() => Series._d1(a, b, c));
        }
        static d0(a, b) {
            return Series.d1(a, 0, b);
        }
        a8() {
            return this.a7;
        }
        ji(a) {
            this.jq(a);
        }
        eq() {
            return this.fi;
        }
        er() {
            return this.fj;
        }
        get_dq() {
            return this.b8;
        }
        set_dq(a) {
            this.b8 = a;
        }
        get dq() {
            return this.get_dq();
        }
        set dq(a) {
            this.set_dq(a);
        }
        get db() {
            return this.dq;
        }
        at(a, b) {
            return null;
        }
        au(a, b) {
            return null;
        }
        is(a, b, c) {
            this.a0.a$w(this, a, b, c);
        }
        jl(a) {
            this.a0.a$ag(this, a);
        }
        hr(a, b) {
            if (this.aw != null && this.jx != null) {
                if (b == null && this.aw.containsChild(this.jx)) {
                    this.aw.removeChild(this.jx);
                }
                if (b != null && !this.aw.containsChild(this.jx) && this.l0 != 1) {
                    this.aw.addChildInOrder(this.jx, this);
                }
            }
        }
        hv() {
            if (this.aw == null || this.jx == null) {
                return;
            }
            this.aw.removeChild(this.jx);
        }
        hq(a, b) {
            if (this.jx != null) {
                if (a != null && a.containsChild(this.jx)) {
                    a.removeChild(this.jx);
                }
                if (this.bs != null && b != null && !b.containsChild(this.jx) && this.l0 != 1) {
                    b.addChildInOrder(this.jx, this);
                }
            }
        }
        hs(a, b) {
            if (this.aw != null) {
                if (a != null && this.aw.containsChild(a)) {
                    this.aw.removeChild(a);
                }
                if (this.bs != null && b != null && this.l0 != 1) {
                    this.aw.addChildInOrder(b, this);
                }
            }
        }
        i7(a) {
            this.bz = a.releaseFastItemsSource(this.itemsSource);
        }
        i6(a) {
            this.bz = a.getFastItemsSource(this.itemsSource);
        }
        ax() {
            if (this.legend != null) {
                return this.legend;
            }
            if (this.bs != null && this.bs.legend != null) {
                return this.bs.legend;
            }
            return null;
        }
        dc() {
            return false;
        }
        da(a) {
            return (a && this.eq() > 0) || this.ca() || (this.dp && this.dc() && this.er() > 0);
        }
        h0(a) {
            if (a != null) {
                a.bx(this);
            }
        }
        i5(a) {
            if (a != null) {
                a.ck(this);
            }
        }
        a9() {
            return this.bi.g();
        }
        jq(a) {
            this.bi.a6(a);
        }
        jk(a, b) {
            this.a0.a$af(this, a, b);
        }
        get_ds() {
            return false;
        }
        get ds() {
            return this.get_ds();
        }
        i1(a, b) {
            this.bi.ao(a, b);
        }
        i3(a) {
            this.iw(this.lz, a);
        }
        ia(a) {
            if (this.bz != null) {
                this.bz.handleCollectionChanged(a);
            }
        }
        ij(a, b, c) {
            this.ia(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
        }
        ig() {
            this.ia(new NotifyCollectionChangedEventArgs(0, 4));
        }
        ih(a, b) {
            this.ia(new NotifyCollectionChangedEventArgs(1, 0, b, a));
        }
        ii(a, b) {
            this.ia(new NotifyCollectionChangedEventArgs(1, 1, b, a));
        }
        jn() {
            this.je(false);
        }
        dh(a, b) {
            return false;
        }
        get_coercionMethods() {
            return this._coercionMethods;
        }
        set_coercionMethods(a) {
            this._coercionMethods = a;
        }
        get coercionMethods() {
            return this.get_coercionMethods();
        }
        set coercionMethods(a) {
            this.set_coercionMethods(a);
        }
        get_expectFunctions() {
            return this.b4;
        }
        set_expectFunctions(a) {
            let b = this.b4;
            this.b4 = a;
            if (b != this.b4) {
                this.raisePropertyChanged("ExpectFunctions", b, this.b4);
            }
        }
        get expectFunctions() {
            return this.get_expectFunctions();
        }
        set expectFunctions(a) {
            this.set_expectFunctions(a);
        }
        ar(a, b) {
            return null;
        }
        get be() {
            return this.bb;
        }
        set be(a) {
            let b = this.bb;
            this.bb = a;
            if (b != this.bb) {
                this.raisePropertyChanged("HitTestMode", enumGetBox(SeriesHitTestMode_$type, b), enumGetBox(SeriesHitTestMode_$type, this.bb));
            }
        }
        bd() {
            return this.be == 0 ? 2 : this.be;
        }
        get bc() {
            return this.ba;
        }
        set bc(a) {
            let b = this.ba;
            this.ba = a;
            if (b != this.ba) {
                this.raisePropertyChanged("ActualHitTestMode", enumGetBox(SeriesHitTestMode_$type, b), enumGetBox(SeriesHitTestMode_$type, this.ba));
            }
        }
        bw(a) {
            if (a == null) {
                return this.bz.registerColumn(null, null, false);
            }
            let b = null;
            let c = SeriesViewer.bb(a, this.coercionMethods);
            b = c.a;
            return this.bz.registerColumn(a, b, this.expectFunctions);
        }
        bx(a) {
            if (a == null) {
                return this.bz.registerColumnInt(null, null, false);
            }
            let b = null;
            let c = SeriesViewer.bb(a, this.coercionMethods);
            b = c.a;
            return this.bz.registerColumnInt(a, b, this.expectFunctions);
        }
        by(a) {
            if (a == null) {
                return this.bz.registerColumnObject(null, null, false);
            }
            let b = null;
            let c = SeriesViewer.bb(a, this.coercionMethods);
            b = c.a;
            return this.bz.registerColumnObject(a, b, this.expectFunctions);
        }
        get lz() {
            return this.bi != null ? this.bi.br : Rect.empty;
        }
        get_cz() {
            return false;
        }
        get cz() {
            return this.get_cz();
        }
        get_cy() {
            return true;
        }
        get cy() {
            return this.get_cy();
        }
        jj(a, b) {
        }
        hy(a, b) {
            this.a2.copyVisualData(a, b);
        }
        fo() {
            let a = this.a2.exportVisualData(this, this.lz);
            this.h5(a);
            this.bi.ai(a);
            return a;
        }
        h5(a) {
        }
        id(a) {
            if (this.lg.x != a.x || this.lg.y != a.y) {
                this.lg = a;
                this.iq(a);
            }
        }
        iq(a) {
        }
        ie() {
        }
        ik() {
        }
        am(a) {
            return null;
        }
        ag() {
            return null;
        }
        eh() {
            return NaN;
        }
        static ei(a, b) {
            if (a == null || a.count == 0) {
                return NaN;
            }
            if (b != null && b.i$b != null) {
                if (b.i$b.count != a.count) {
                    return NaN;
                }
                for (let c = 0; c < a.count; c++) {
                    if (!isNaN_(a.item(b.i$b._inner[c])) && a.item(b.i$b._inner[c]) != 0) {
                        return a.item(b.i$b._inner[c]);
                    }
                }
            }
            for (let d = 0; d < a.count; d++) {
                if (!isNaN_(a.item(d)) && a.item(d) != 0) {
                    return a.item(d);
                }
            }
            return NaN;
        }
        ip() {
        }
        get d8() {
            return this.d4;
        }
        set d8(a) {
            let b = this.d8;
            if (a != b) {
                this.d4 = a;
                this.raisePropertyChanged("FinalValue", b, this.d8);
            }
        }
        get et() {
            return this.d5;
        }
        set et(a) {
            let b = this.et;
            if (a != b) {
                this.d5 = a;
                this.raisePropertyChanged("PercentChange", b, this.et);
            }
        }
        jr() {
            let a = this.eh();
            this.et = (this.d8 - a) / a * 100;
        }
        fr(a) {
            return null;
        }
    }
    Series.$t = /*@__PURE__*/ markType(Series, 'Series', Control.$, [INotifyPropertyChanged_$type, IProvidesViewport_$type, ILegendSeries_$type, ILegendOwner_$type, ILegendTemplateProvider_$type]);
    Series.e5 = 0;
    Series.k3 = /*@__PURE__*/ DependencyProperty.i("VisibilityProxy", Visibility_$type, Series.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(Visibility_$type, 0), (a, b) => a.raisePropertyChanged("VisibilityProxy", b.oldValue, b.newValue)));
    Series.ke = /*@__PURE__*/ DependencyProperty.i("ItemsSource", IEnumerable_$type, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        if (c.bn != null) {
            c.bn.releaseFastItemsSource(b.oldValue);
        }
        a.raisePropertyChanged("ItemsSource", b.oldValue, b.newValue);
    }));
    Series.ki = /*@__PURE__*/ DependencyProperty.i("Legend", IChartLegend_$type, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("Legend", b.oldValue, b.newValue);
    }));
    Series.kf = /*@__PURE__*/ DependencyProperty.i("LegendItemBadgeTemplate", DataTemplate.$, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("LegendItemBadgeTemplate", b.oldValue, b.newValue);
        if (c.jx != null) {
            c.jx = c.jv();
        }
    }));
    Series.kg = /*@__PURE__*/ DependencyProperty.i("LegendItemTemplate", DataTemplate.$, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("LegendItemTemplate", b.oldValue, b.newValue);
        if (c.jx != null) {
            c.jx = c.jv();
        }
    }));
    Series.j8 = /*@__PURE__*/ DependencyProperty.i("DiscreteLegendItemTemplate", DataTemplate.$, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("DiscreteLegendItemTemplate", b.oldValue, b.newValue);
    }));
    Series.kb = /*@__PURE__*/ DependencyProperty.i("Index", Number_$type, Series.$, /*@__PURE__*/ new PropertyMetadata(2, -1, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("Index", b.oldValue, b.newValue);
        if (c.jx != null) {
            c.jx = c.jv();
        }
    }));
    Series.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, Series, 'raisePropertyChanged', ['ActualAreaFillOpacity:d6:j1', [1, 1], 'ActualBrush:k4:j2', [Brush.$], 'ActualOutline:k5:j3', [Brush.$], 'AreaFillOpacity:d7:j4', [1, NaN], 'Brush:k6:j5', [Brush.$, null], 'DashArray:lc:j6', [DoubleCollection.$], 'DashCap:ld:j7', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)], 'EndCap:le:j9', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'FastItemsSource:bz:ka', [IFastItemsSource_$type], 'IsDropShadowEnabled:cp:kc', [0, false], 'IsHighlightingEnabled:cu:kd', [0, false], 'LegendItemVisibility:l0:kh', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'MiterLimit:es:kj', [1, 0], 'MouseOverEnabled:c7:kk', [0, true], 'Outline:k9:kl', [Brush.$, null], 'Resolution:eu:km', [1, 1], 'ShadowBlur:ev:kn', [1, NaN], 'ShadowColor:lb:ko', [Color.$], 'ShadowOffsetX:ew:kp', [1, NaN], 'ShadowOffsetY:ex:kq', [1, NaN], 'ShowDefaultTooltip:dd:kr', [0, false], 'StartCap:lf:ks', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'Thickness:ey:kt', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'Title:fx:ku', [4, "Series Title"], 'ToolTip::kv', [4, null], 'TransitionDuration:fi:kw', [1, 0], 'TransitionEasingFunction:bu:kx', [Delegate_$type, null], 'TransitionInDuration:fj:ky', [1, 1000], 'TransitionInEasingFunction:bv:kz', [Delegate_$type, null], 'TransitionInSpeedType:bp:k0', [TransitionInSpeedType_$type, /*@__PURE__*/ enumGetBox(TransitionInSpeedType_$type, 0)], 'TransitionProgress:ez:k1', [1, 0], 'UseSingleShadow:du:k2', [0, true]]);
    return Series;
})();
/**
 * @hidden
 */
export let MarkerSeries = /*@__PURE__*/ (() => {
    class MarkerSeries extends Series {
        constructor() {
            super();
            this.mm = null;
            this.l7 = 2;
        }
        iv(a) {
            super.iv(a);
            this.l1 = a;
        }
        get_hasMarkers() {
            return true;
        }
        k7() {
            return this.mz;
        }
        k8() {
            return this.m0;
        }
        j0() {
            return this.mm;
        }
        static get mo() {
            if (MarkerSeries.mk == null) {
                MarkerSeries.mk = new DataTemplate();
            }
            return MarkerSeries.mk;
        }
        get m1() {
            return this.c(MarkerSeries.ms);
        }
        set m1(a) {
            this.h(MarkerSeries.ms, a);
        }
        l4() {
            return this.mm != null && ((this.l2 != 1 && this.l2 != 0) || this.mn != null);
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case "MarkerBrush":
                case MarkerSeries.$$p[7]:
                case MarkerSeries.$$p[3]:
                case MarkerSeries.$$p[5]:
                case MarkerSeries.$$p[6]:
                    this.jp();
                    this.ix();
                    break;
                case MarkerSeries.$$p[2]:
                    this.mm = d;
                    if (c == MarkerSeries.mo || d == MarkerSeries.mo || (c == null || d != null)) {
                        this.l1.cd();
                        let e = typeCast(MarkerSeriesView.$, this.bh);
                        if (e != null) {
                            e.cd();
                        }
                        this.je(false);
                    }
                    this.bi.bg();
                    if (this.toolTip != null && this.cx) {
                        this.a0.a$ah(this, this.toolTip);
                    }
                    this.il();
                    break;
                case MarkerSeries.$$p[8]:
                    this.l1.ck(this.l6);
                    this.je(false);
                    break;
                case MarkerSeries.$$p[0]:
                case MarkerSeries.$$p[1]:
                    if (this.l4()) {
                        this.je(false);
                    }
                    break;
            }
        }
        static mc(a) {
            switch (a) {
                case 3:
                case 13: return SeriesViewer.$$p[1];
                case 4: return SeriesViewer.$$p[26];
                case 5: return SeriesViewer.$$p[18];
                case 6: return SeriesViewer.$$p[20];
                case 7: return SeriesViewer.$$p[4];
                case 8: return SeriesViewer.$$p[13];
                case 9: return SeriesViewer.$$p[6];
                case 10: return SeriesViewer.$$p[23];
                case 11: return SeriesViewer.$$p[14];
                case 12: return SeriesViewer.$$p[7];
                default:
                case 0:
                case 1: return null;
            }
        }
        static l3(a, b) {
            let c = a.bs != null ? b : 1;
            if (c == 2) {
                let d = [3, 4, 8, 10, 7, 6, 9, 11, 5, 12];
                c = a.fh >= 0 ? d[a.fh % d.length] : 1;
            }
            return c;
        }
        jp() {
            super.jp();
            if (this.fh < 0) {
                return;
            }
            if (this.l1.bz()) {
                this.l1.cb();
                this.l1.b5();
            }
            else {
                let a = MarkerSeries.l3(this, this.l2);
                let b = MarkerSeries.mc(a);
                if (b == null) {
                    this.ml = MarkerSeries.mo;
                }
                else {
                    this.l1.b8(b);
                }
            }
            if (this.m1 != null && this.l2 != 13) {
                this.l1.b9();
                this.l1.b6();
            }
            else {
                if (this.l2 == 13) {
                    this.mz = this.bi.bn();
                }
                else {
                    this.mz = this.bs == null ? null : this.bs.mb(this.fh);
                }
            }
            if (this.m2 != null) {
                this.l1.ca();
                this.l1.b7();
            }
            else {
                if (this.l2 == 13) {
                    this.m0 = this.bi.bn();
                }
                else {
                    this.m0 = this.bs == null ? null : this.bs.mc(this.fh);
                }
            }
        }
        h5(a) {
            super.h5(a);
            this.a2.exportMarkerVisualData(this, a);
        }
        l5(a, b) {
            if (this.hasMarkers && this.l4()) {
                let c = this.ly(a);
                if (c.isEmpty) {
                    return false;
                }
                let d = RectUtil.r(c, this.ee(b));
                if (d.containsPoint(a)) {
                    return true;
                }
            }
            return false;
        }
        ar(a, b) {
            let c = this.l1.bv(a);
            let d = null;
            if (c != null) {
                d = c.content;
            }
            return d;
        }
    }
    MarkerSeries.$t = /*@__PURE__*/ markType(MarkerSeries, 'MarkerSeries', Series.$);
    MarkerSeries.mk = null;
    MarkerSeries.ms = /*@__PURE__*/ DependencyProperty.i("MarkerBrush", Brush.$, MarkerSeries.$, /*@__PURE__*/ new PropertyMetadata(1, (a, b) => {
        let c = (typeCast(MarkerSeries.$, a));
        c.raisePropertyChanged("MarkerBrush", b.oldValue, b.newValue);
    }));
    MarkerSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, MarkerSeries, 'raisePropertyChanged', ['ActualMarkerBrush:mz:mp', [Brush.$], 'ActualMarkerOutline:m0:mq', [Brush.$], 'ActualMarkerTemplate:ml:mr', [DataTemplate.$, null], 'MarkerOutline:m2:mt', [Brush.$], 'MarkerStyle:m3:mu', [Style.$], 'MarkerTemplate:mn:mv', [DataTemplate.$, null], 'MarkerThickness:l7:mw', [1], 'MarkerType:l2:mx', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 1)], 'UseLightweightMarkers:l6:my', [0, false]]);
    return MarkerSeries;
})();
/**
 * @hidden
 */
export let SyncLink = /*@__PURE__*/ (() => {
    class SyncLink extends FrameworkElement {
        constructor() {
            super();
            this.ai = null;
            this.af = new Dictionary$2(IEnumerable_$type, FastItemsSourceReference.$, 0);
            this.aq = null;
            this.ab = null;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.am(a, b.propertyName, b.oldValue, b.newValue));
            this.ab = new ChartCollection();
            let a = this.ab;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.aj));
            this.aq = new Rect(0, 0, 0, 1, 1);
        }
        am(a, b, c, d) {
        }
        releaseFastItemsSource(a) {
            if (a != null) {
                let b = null;
                if (((() => { let c = this.af.tryGetValue(a, b); b = c.p1; return c.ret; })())) {
                    --b.b;
                    if (b.b == 0) {
                        this.af.removeItem(a);
                    }
                }
            }
            return null;
        }
        static ad(a) {
            return ((() => {
                let $ret = new FastItemsSource();
                $ret.e = a;
                return $ret;
            })());
        }
        getFastItemsSource(a) {
            if (SyncLink.ah == null) {
                SyncLink.ah = SyncLink.ad;
            }
            let b = null;
            if (a != null) {
                let c = null;
                if (!((() => { let d = this.af.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
                    b = SyncLink.ah(a);
                    c = new FastItemsSourceReference(b);
                    this.af.addItem(a, c);
                }
                c.b++;
                b = c.a;
            }
            return b;
        }
        ae(a) {
            let b = null;
            if (a != null) {
                let c = null;
                if (!((() => { let d = this.af.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
                    return null;
                }
                b = c.a;
            }
            return b;
        }
        ar(a, b, c) {
            return this.as(a, b, c, false);
        }
        as(a, b, c, d) {
            if (!c.isEmpty) {
                c = new Rect(0, c.left, c.top, c.width, c.height);
                let e = a.ex;
                if (b == a) {
                    if (!d) {
                        if (!b.c3()) {
                            c.x = b.m6.x;
                            c.width = b.m6.width;
                        }
                        if (!b.c4()) {
                            c.y = b.m6.y;
                            c.height = b.m6.height;
                        }
                    }
                }
                else {
                    let f = SyncManager.a(b);
                    if (f == null || !f.synchronizeHorizontally) {
                        c.x = b.m6.x;
                        c.width = b.m6.width;
                    }
                    if (f == null || !f.synchronizeVertically) {
                        c.y = b.m6.y;
                        c.height = b.m6.height;
                    }
                }
                let g = 0.5 * (c.left + c.right);
                let h = 0.5 * (c.top + c.bottom);
                let i = c.width;
                let j = c.height;
                let k = MathUtil.b(c.width, e, 1);
                let l = MathUtil.b(c.height, e, 1);
                if (a.dh() && !a.m5.isEmpty) {
                    let m = a.m5;
                    let n = m.width / m.height;
                    let o = k * m.width;
                    let p = l * m.height;
                    let q = o / p;
                    if (q != n) {
                        if (p * n > o) {
                            o = p * n;
                            k = o / m.width;
                        }
                        else {
                            p = o / n;
                            l = p / m.height;
                        }
                    }
                }
                else if (a.cl()) {
                    let r = false;
                    let s = false;
                    if (Math.abs(k - a.mr.width) > e) {
                        r = true;
                    }
                    if (Math.abs(l - a.mr.height) > e) {
                        s = true;
                    }
                    let t = a.hv(k, l, r, s);
                    k = t.p0;
                    l = t.p1;
                    k = MathUtil.b(k, e, 1);
                    l = MathUtil.b(l, e, 1);
                }
                let u = k != i;
                let v = l != j;
                let w = u ? g - 0.5 * k : c.left;
                let x = v ? h - 0.5 * l : c.top;
                let y = u ? g + 0.5 * k : c.right;
                let z = v ? h + 0.5 * l : c.bottom;
                if (w < 0) {
                    w = 0;
                    y = w + k;
                }
                if (y > 1) {
                    y = 1;
                    w = y - k;
                }
                if (x < 0) {
                    x = 0;
                    z = x + l;
                }
                if (z > 1) {
                    z = 1;
                    x = z - l;
                }
                c = new Rect(0, w, x, y - w, z - x);
            }
            return c;
        }
        get ag() {
            return this.ab;
        }
        aj(a, b) {
            if (b.newItems != null) {
                for (let c of fromEn(b.newItems)) {
                    if (c.m6.isEmpty) {
                        c.m6 = this.ar(null, c, this.aq);
                    }
                }
            }
        }
        ak(a, b) {
            for (let c of fromEnum(this.ag)) {
                if (c == a) {
                    c.mj = { $type: Point_$type, x: b.x, y: b.y };
                }
                else {
                    let d = { $type: Point_$type, x: b.x, y: b.y };
                    let e = SyncManager.a(c);
                    if (e == null || !e.synchronizeHorizontally) {
                        d.x = NaN;
                    }
                    if (e == null || !e.synchronizeVertically) {
                        d.y = NaN;
                    }
                    c.mj = d;
                }
            }
        }
        al(a, b) {
            for (let c of fromEnum(this.ag)) {
                c.m1 = this.ar(a, c, b);
            }
        }
        ao(a, b) {
            this.ap(a, b, false);
        }
        ap(a, b, c) {
            let d = b.isEmpty || isNaN_(b.x) || isNaN_(b.y) || isNaN_(b.width) || isNaN_(b.height);
            if (!d && !a.cj) {
                for (let e of fromEnum(this.ag)) {
                    e.cj = true;
                    e.m6 = this.as(a, e, b, c);
                    e.cj = false;
                }
            }
        }
        an(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
    }
    SyncLink.$t = /*@__PURE__*/ markType(SyncLink, 'SyncLink', FrameworkElement.$, [INotifyPropertyChanged_$type, IFastItemsSourceProvider_$type]);
    SyncLink.ah = null;
    return SyncLink;
})();
/**
 * @hidden
 */
export let SyncLinkManager = /*@__PURE__*/ (() => {
    class SyncLinkManager extends Base {
        constructor() {
            super();
            this.d = null;
            this.d = new Dictionary$2(String_$type, SyncLink.$, 0);
        }
        static instance() {
            if (SyncLinkManager.b == null) {
                SyncLinkManager.b = new SyncLinkManager();
            }
            return SyncLinkManager.b;
        }
        get e() {
            return this.d.count;
        }
        getLink(a) {
            let b;
            if (((() => { let c = this.d.tryGetValue(a, b); b = c.p1; return c.ret; })())) {
                return b;
            }
            b = new SyncLink();
            b.ai = a;
            this.d.addItem(a, b);
            return b;
        }
        releaseLink(a) {
            if (a.ag.count == 0 && a.ai != null && this.d.containsKey(a.ai)) {
                this.d.removeItem(a.ai);
            }
        }
    }
    SyncLinkManager.$t = /*@__PURE__*/ markType(SyncLinkManager, 'SyncLinkManager');
    SyncLinkManager.b = null;
    return SyncLinkManager;
})();
/**
 * @hidden
 */
export let SyncManager = /*@__PURE__*/ (() => {
    class SyncManager extends Base {
        static e(a) {
            let b = SyncManager.a(a);
            if (b == null) {
                return;
            }
            if (!a.c0) {
                return;
            }
            if (a.syncChannel != b.syncChannel) {
                return;
            }
            SyncManager.b(a, a.syncChannel, null);
        }
        static c(a) {
            let b = SyncManager.a(a);
            if (b == null) {
                return;
            }
            if (a.c0 && a.syncChannel == b.syncChannel) {
                return;
            }
            let c = null;
            if (a.c0) {
                c = a.syncChannel;
            }
            SyncManager.b(a, c, b.syncChannel);
        }
        static b(a, b, c) {
            if (a != null) {
                if (stringIsNullOrEmpty(c)) {
                    let d = a.actualSyncLink;
                    a.actualSyncLink = null;
                    a.actualSyncLink = new SyncLink();
                    if (d != null) {
                        SyncLinkManager.instance().releaseLink(d);
                    }
                    a.syncChannel = null;
                }
                else {
                    if (!stringIsNullOrEmpty(b)) {
                        let e = a.actualSyncLink;
                        a.actualSyncLink = null;
                        if (e != null) {
                            SyncLinkManager.instance().releaseLink(e);
                        }
                    }
                    a.actualSyncLink = SyncLinkManager.instance().getLink(c);
                    a.syncChannel = c;
                }
            }
        }
        static d(a, b) {
            a.syncSettings = b;
        }
        static a(a) {
            return a.syncSettings;
        }
    }
    SyncManager.$t = /*@__PURE__*/ markType(SyncManager, 'SyncManager');
    return SyncManager;
})();
/**
 * @hidden
 */
export let ChartCollection = /*@__PURE__*/ (() => {
    class ChartCollection extends ObservableCollection$1 {
        constructor() {
            super(SeriesViewer.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    ChartCollection.$t = /*@__PURE__*/ markType(ChartCollection, 'ChartCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(SeriesViewer.$));
    return ChartCollection;
})();
/**
 * @hidden
 */
export let SeriesCollection = /*@__PURE__*/ (() => {
    class SeriesCollection extends ObservableCollection$1 {
        constructor() {
            super(Series.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    SeriesCollection.$t = /*@__PURE__*/ markType(SeriesCollection, 'SeriesCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(Series.$));
    return SeriesCollection;
})();
/**
 * @hidden
 */
export let ChartCursorEventArgs = /*@__PURE__*/ (() => {
    class ChartCursorEventArgs extends EventArgs {
        constructor(a, b, c) {
            super();
            this._item = null;
            this._series = null;
            this._seriesViewer = null;
            this.seriesViewer = a;
            this.series = b;
            this.item = c;
        }
        toString() {
            return this.seriesViewer.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "");
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        get seriesViewer() {
            return this._seriesViewer;
        }
        set seriesViewer(a) {
            this._seriesViewer = a;
        }
        get chart() {
            return typeCast(XamDataChart.$, this.seriesViewer);
        }
    }
    ChartCursorEventArgs.$t = /*@__PURE__*/ markType(ChartCursorEventArgs, 'ChartCursorEventArgs', EventArgs.$);
    return ChartCursorEventArgs;
})();
/**
 * @hidden
 */
export let DataChartMouseButtonEventArgs = /*@__PURE__*/ (() => {
    class DataChartMouseButtonEventArgs extends EventArgs {
        constructor(a, b, c, d) {
            super();
            this.g = null;
            this._item = null;
            this._series = null;
            this._chart = null;
            this.chart = a;
            this.series = b;
            this.item = c;
            this.g = d;
        }
        toString() {
            return this.chart.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "") + ", " + this.getPosition(null).toString();
        }
        get handled() {
            return this.g.handled;
        }
        set handled(a) {
            this.g.handled = a;
        }
        getPosition(a) {
            return this.g.getPosition(a);
        }
        get originalSource() {
            return this.g.originalSource;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        get chart() {
            return this._chart;
        }
        set chart(a) {
            this._chart = a;
        }
    }
    DataChartMouseButtonEventArgs.$t = /*@__PURE__*/ markType(DataChartMouseButtonEventArgs, 'DataChartMouseButtonEventArgs', EventArgs.$);
    return DataChartMouseButtonEventArgs;
})();
/**
 * @hidden
 */
export let ChartMouseEventArgs = /*@__PURE__*/ (() => {
    class ChartMouseEventArgs extends EventArgs {
        constructor(a, b, c, d) {
            super();
            this.f = null;
            this._item = null;
            this._series = null;
            this._chart = null;
            this.chart = a;
            this.series = b;
            this.item = c;
            this.f = d;
        }
        toString() {
            return this.chart.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "") + ", " + this.getPosition(null).toString();
        }
        getPosition(a) {
            return this.f.getPosition(a);
        }
        get originalSource() {
            return this.f.originalSource;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        get chart() {
            return this._chart;
        }
        set chart(a) {
            this._chart = a;
        }
    }
    ChartMouseEventArgs.$t = /*@__PURE__*/ markType(ChartMouseEventArgs, 'ChartMouseEventArgs', EventArgs.$);
    return ChartMouseEventArgs;
})();
/**
 * @hidden
 */
export let AxisComponentsForView = /*@__PURE__*/ (() => {
    class AxisComponentsForView extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
        }
    }
    AxisComponentsForView.$t = /*@__PURE__*/ markType(AxisComponentsForView, 'AxisComponentsForView');
    return AxisComponentsForView;
})();
/**
 * @hidden
 */
export let AxisLabelPanelBaseView = /*@__PURE__*/ (() => {
    class AxisLabelPanelBaseView extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.av = null;
            this.e = null;
            this.au = Rect.empty;
            this.c = null;
            this.h = 0;
            this.i = NaN;
            this.a = a;
        }
        aa(a, b, c, d, e, f) {
            let g = typeCast(FrameworkElement.$, a);
            if (g != null) {
                g._visibility = 0;
                if (b.width == 0 && b.height == 0) {
                    g._visibility = 1;
                }
                let h = b.height - (d + f);
                let i = b.width - (c + e);
                g.n = b.left + c;
                g.o = b.top + d;
                if (i < 0) {
                    i = 0;
                }
                if (h < 0) {
                    h = 0;
                }
                g.l = h;
                g.m = i;
                if (g.j != null) {
                    let j = g.j;
                    let k = j.j._inner[0];
                    k.k = k.k + g.n;
                    k.l = k.l + g.o;
                }
            }
        }
        z(a, b, c, d, e, f, g, h) {
            let i = Math.max(e, Math.max(f, Math.max(g, h)));
            let j = new Thickness(0, i);
            if (this.a.ap) {
                j = new Thickness(0, Math.sqrt((i * i) / 2));
            }
            let k = c.d;
            if (isNaN_(k.c) || isNaN_(k.e) || isNaN_(k.d) || isNaN_(k.b)) {
                k = j;
            }
            if (k.c > j.c || k.e > j.e || k.d > j.d || k.b > j.b) {
                k = j;
            }
            let l = new Rect(0, d.left - k.c, d.top - k.e, d.width + k.c + k.d, d.height + k.e + k.b);
            let m = a.j;
            a.j = null;
            this.aa(a, l, e, f, g, h);
            a.j = m;
            a.width = a.m;
            a.height = a.l;
        }
        ad(a) {
            let b = a;
            b.j = null;
        }
        ag(a) {
        }
        ah(a, b) {
        }
        ai(a, b) {
            let c = typeCast(FrameworkElement.$, a);
            let d = 0;
            let e = 0;
            let f = new TransformGroup();
            let g = ((() => {
                let $ret = new RotateTransform();
                $ret.j = b;
                $ret.k = d;
                $ret.l = e;
                return $ret;
            })());
            f.j.add(g);
            c.j = f;
        }
        aq(a, b, c, d, e, f, g, h, i) {
            let j = Math.max(e, Math.max(f, Math.max(g, h)));
            let k = new Thickness(0, j);
            if (this.a.ap) {
                k = new Thickness(0, Math.sqrt((j * j) / 2));
            }
            let l = c.d;
            if (isNaN_(l.c) || isNaN_(l.e) || isNaN_(l.d) || isNaN_(l.b)) {
                l = k;
            }
            if (l.c > k.c || l.e > k.e || l.d > k.d || l.b > k.b) {
                l = k;
            }
            let m = b.j;
            let n = new TransformGroup();
            let o = a.n + l.c;
            let p = a.o + l.e;
            n.j.add(m);
            a.j = n;
        }
        x(a, b, c, d) {
            let e = a.ak.length;
            let f = a.ak;
            let g = a.ak;
            while ((this.m(a) + c + d) > b && e > 0) {
                e--;
                f = f.substr(0, e) + "\u2026";
                a.ak = f;
            }
            a.ak = g;
            return f;
        }
        ae() {
            if (this.e == null) {
                return;
            }
            let a = this.g();
            for (let b of fromEnum(a)) {
                let c = typeCast(FrameworkElement.$, b);
                if (c != null) {
                    this.a.b7(c);
                }
                this.a.by(b);
            }
        }
        g() {
            let a = this.a.av();
            let b = this.a.au();
            if (!this.a.ac.cs) {
                return a;
            }
            else {
                return b;
            }
        }
        l(a) {
            return this.h;
        }
        n(a) {
            return this.l(a) + this.r() + this.o();
        }
        am() {
            this.av = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                $ret.ab = false;
                return $ret;
            })());
        }
        m(a) {
            let b = a;
            if (b != null && b.ak != null) {
                return this.e.e(b);
            }
            return 0;
        }
        w(a) {
            let b = a;
            if (b != null && b.ak != null) {
                return this.m(a) + this.p() + this.q();
            }
            return 0;
        }
        ac() {
            this.a.a9 = this.a.ac.d4();
        }
        aj() {
            this.af();
            this.a.cr(new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
        }
        f() {
            return this.e;
        }
        ak(a) {
            this.e = a;
        }
        y() {
            if (this.a.cn.isEmpty) {
                return;
            }
            let a = this.a.a5;
            this.a.cq(new Size(1, this.a.cn.width, this.a.cn.height));
            if (this.a.a5 != a) {
                this.a.ac.be.hu();
                this.al();
            }
        }
        al() {
        }
        ao(a) {
            this.e.w(a);
        }
        an() {
            if (this.e == null) {
                return;
            }
            if (this.e.d) {
                if (this.a.ac.bh != null && this.a.ac.bh.ea != 1) {
                    this.e.z();
                    this.e.aa(this.a.ac.bh.ea, this.a.ac.bh.ea);
                }
                this.af();
                this.au = this.a.cn;
                let a = this.a.ac.be.getFontBrush();
                if (this.a.af != null && this.a.af.textColor != null) {
                    a = this.a.af.textColor;
                }
                if (this.a.j != null) {
                    this.e.z();
                    this.e.j(this.a.j);
                }
                let b = false;
                for (let c of fromEnum(this.g())) {
                    let d = typeCast(TextBlock.$, c);
                    if (d != null) {
                        if (d.s != 0) {
                            b = true;
                            continue;
                        }
                        d.am = a;
                        if (d.j != null) {
                            this.e.z();
                            this.e.j(d.j);
                        }
                        this.ao(d);
                        if (d.j != null) {
                            this.e.y();
                        }
                    }
                }
                if (b) {
                    for (let e of fromEnum(this.a.ab)) {
                        let f = typeCast(Rectangle.$, e);
                        if (f != null) {
                            if (f.s == 0) {
                                continue;
                            }
                            if (f.j != null) {
                                this.e.z();
                                this.e.j(f.j);
                            }
                            this.e.v(f);
                            if (f.j != null) {
                                this.e.y();
                            }
                        }
                        let g = typeCast(TextBlock.$, e);
                        if (g != null) {
                            if (g.s == 0) {
                                continue;
                            }
                            if (g.j != null) {
                                this.e.z();
                                this.e.j(g.j);
                            }
                            if (g.am == null) {
                                g.am = a;
                            }
                            this.e.w(g);
                            if (g.j != null) {
                                this.e.y();
                            }
                        }
                    }
                }
                if (this.a.j != null) {
                    this.e.y();
                }
                this.ap();
                a = this.as();
                this.e.ac(this.d());
                let h = this.a.ac.hp;
                if (h != null) {
                    h.am = a;
                    if (h.j != null) {
                        this.e.z();
                        this.e.j(h.j);
                    }
                    this.e.w(h);
                    if (h.j != null) {
                        this.e.y();
                    }
                }
                if (this.a.ac.bh != null && this.a.ac.bh.ea != 1) {
                    this.e.y();
                }
            }
        }
        d() {
            let a = this.a.ac.bh.getFontInfo();
            if (this.a.ac.bd != null && this.a.ac.bd.textStyle != null) {
                a = this.a.ac.bd.g(this.a.ac.bh.bn.i.ae);
            }
            else {
                let b = this.a.ac.bh.bp();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        as() {
            let a = this.a.ac.be.getFontBrush();
            if (this.a.ac.bd != null && this.a.ac.bd.textColor != null) {
                a = this.a.ac.bd.textColor;
            }
            else {
                let b = this.a.ac.bh.l8();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        af() {
            if (this.e == null) {
                return;
            }
            let a = this.a.ac.bh.getFontInfo();
            if (this.a.af != null && this.a.af.textStyle != null) {
                a = this.a.af.g(this.a.ac.bh.bn.i.ae);
            }
            if (this.c != a) {
                this.c = a;
                this.ar();
            }
            this.e.ac(a);
        }
        ar() {
            if (this.a.ac != null && this.a.ac.bh != null) {
                if (this.a.af == null || this.a.af.textStyle == null) {
                    this.h = this.a.ac.bh.bn.a7;
                    return;
                }
                if (this.h == 0) {
                    this.h = this.a.ac.bh.bn.a7;
                }
                let a = this.h;
                let b = this.a.ac.bh.getFontInfo();
                if (this.a.af != null && this.a.af.textStyle != null) {
                    b = this.a.af.g(this.a.ac.bh.bn.i.ae);
                }
                let c = FontUtil.getCurrentFontHeight(this.a.ac.bh.bn.i.ae, b);
                this.h = c;
                if (a != this.h) {
                    this.a.ac.bh.hu();
                }
            }
        }
        j() {
            if (this.a.ac.gc == null) {
                return 0;
            }
            if (this.a.ac.bd != null && this.a.ac.bd.visibility == 1) {
                return 0;
            }
            if (!isNaN_(this.i)) {
                return this.i;
            }
            let a = this.d();
            if (this.a.ac.bh == null) {
                return this.h;
            }
            this.i = FontUtil.getCurrentFontHeight(this.a.ac.bh.bn.i.ae, a);
            return this.i;
        }
        k() {
            if (this.a.ac.bd != null && this.a.ac.bd.visibility == 1) {
                return 0;
            }
            if (this.e == null) {
                return 0;
            }
            let a = this.a.ac.hp;
            if (a != null && a.ak != null) {
                this.e.ac(this.d());
                let b = this.e.e(a);
                this.af();
                return b;
            }
            return 0;
        }
        ap() {
            if (this.a.ab.count == 0) {
                return;
            }
            if (this.a.ac.iv == null) {
                this.av._stroke = this.a.ac.be.l6();
            }
            else {
                this.av._stroke = this.a.ac.iv;
            }
            this.av.ac = this.a.ac.er;
            this.e.s(this.av);
        }
        ab(a) {
        }
        aw() {
            return this.a.ac.bh.m7();
        }
        v() {
            if (this.a.ac.bd != null && !isNaN_(this.a.ac.bd.topMargin)) {
                return Math.max(0, this.a.ac.bd.topMargin);
            }
            else {
                return this.aw().e;
            }
        }
        s() {
            if (this.a.ac.bd != null && !isNaN_(this.a.ac.bd.bottomMargin)) {
                return Math.max(0, this.a.ac.bd.bottomMargin);
            }
            else {
                return this.aw().b;
            }
        }
        t() {
            if (this.a.ac.bd != null && !isNaN_(this.a.ac.bd.leftMargin)) {
                return Math.max(0, this.a.ac.bd.leftMargin);
            }
            else {
                return this.aw().c;
            }
        }
        u() {
            if (this.a.ac.bd != null && !isNaN_(this.a.ac.bd.rightMargin)) {
                return Math.max(0, this.a.ac.bd.rightMargin);
            }
            else {
                return this.aw().d;
            }
        }
        at() {
            return this.av.ak.d;
        }
        b() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.ac.iv;
                $ret.c = this.a.ac.er;
                return $ret;
            })());
            if (this.a.ac != null && typeCast(XamDataChart.$, this.a.ac.be) !== null) {
                let b = this.a.ac.be;
                if (b.np && b.bg != 2 && b.bg != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        r() {
            if (this.a.af == null) {
                return 0;
            }
            return Math.max(0, this.a.af.topMargin);
        }
        p() {
            if (this.a.af == null) {
                return 0;
            }
            return Math.max(0, this.a.af.leftMargin);
        }
        q() {
            if (this.a.af == null) {
                return 0;
            }
            return Math.max(0, this.a.af.rightMargin);
        }
        o() {
            if (this.a.af == null) {
                return 0;
            }
            return Math.max(0, this.a.af.bottomMargin);
        }
    }
    AxisLabelPanelBaseView.$t = /*@__PURE__*/ markType(AxisLabelPanelBaseView, 'AxisLabelPanelBaseView');
    return AxisLabelPanelBaseView;
})();
/**
 * @hidden
 */
export let AxisView = /*@__PURE__*/ (() => {
    class AxisView extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a7 = null;
            this.a8 = null;
            this.ba = null;
            this.a9 = null;
            this.b = new AxisComponentsFromView();
            this.h = null;
            this.k = null;
            this.j = null;
            this._isDirty = false;
            this.bb = null;
            this.a5 = Rect.empty;
            this.a = a;
            this.bb = new Rectangle();
        }
        ag() {
            this.a7 = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                return $ret;
            })());
            this.ba = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                $ret.ab = false;
                $ret.stroke = null;
                return $ret;
            })());
            this.a8 = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                $ret.ab = false;
                return $ret;
            })());
            this.a9 = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                $ret.ab = false;
                return $ret;
            })());
            this.a.d5 = 1;
            this.a.ep = 1;
        }
        ai(a) {
        }
        ax() {
            let a = new TextBlock();
            return a;
        }
        aq(a) {
            a._visibility = 0;
            a.s = 0;
            if (a.x == null) {
                this.a.au.ab.add(a);
            }
        }
        as(a) {
            a._visibility = 1;
        }
        ar(a) {
            if (this.a.au.ab.contains(a)) {
                this.a.au.ab.remove(a);
            }
        }
        bc() {
            let a = new Rectangle();
            return a;
        }
        p(a) {
            if (a.x == null) {
                this.d.ab.add(a);
            }
            a._visibility = 0;
        }
        r(a) {
            a._visibility = 1;
        }
        q(a) {
            if (this.a.au.ab.contains(a)) {
                this.a.au.ab.remove(a);
            }
        }
        aj() {
        }
        m() {
            return true;
        }
        get index() {
            if (this.a.bh != null && this.a.bh.cx) {
                return this.a.bh.series.count + 1;
            }
            let a = typeCast(XamDataChart.$, this.a.be);
            let b = 0;
            if (a == null) {
                return 0;
            }
            if (a != null && a.ni == 1) {
                let c = 0;
                for (let d = 0; d < this.a.bh.series.count; d++) {
                    if (this.a.bh.series._inner[d].isStacked) {
                        c += this.a.bh.series._inner[d].fg();
                    }
                    else {
                        c++;
                    }
                }
                b = c;
            }
            return b + a.axes.indexOf(this.a);
        }
        ad() {
            this.d.b6();
            this.d.bu();
        }
        ab() {
            this.d.b1();
        }
        x() {
            if (this.d != null) {
                this.d.ab.clear();
            }
            this.z(this.a7.ak.d);
            this.z(this.ba.ak.d);
            this.z(this.a8.ak.d);
            this.z(this.a9.ak.d);
            this.ae();
        }
        av(a) {
            this.a7._visibility = a;
            this.a8._visibility = a;
            this.ba._visibility = a;
            this.a9._visibility = a;
        }
        an() {
        }
        w(a) {
            this.a.ci = true;
            if (this.a.bh != null) {
                this.a.bh.hu();
            }
            this.a.ha();
        }
        c() {
            this.b.a = this.a7;
            this.b.b = this.a8;
            this.b.c = this.a9;
            this.b.d = this.ba;
            return this.b;
        }
        z(a) {
            if (a != null) {
                a.clear();
            }
        }
        ay() {
            return this.a7.ak.d;
        }
        e() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.iu;
                $ret.c = this.a.ep;
                $ret.f = this.a.iy;
                return $ret;
            })());
            if (typeCast(XamDataChart.$, this.a.be) !== null) {
                let b = this.a.be;
                if (b.np && b.bg != 2 && b.bg != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        a1() {
            return this.ba.ak.d;
        }
        az() {
            return this.a8.ak.d;
        }
        f() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.ir;
                $ret.c = this.a.d5;
                $ret.f = this.a.iw;
                return $ret;
            })());
            if (typeCast(XamDataChart.$, this.a.be) !== null) {
                let b = this.a.be;
                if (b.np && b.bg != 2 && b.bg != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        a0() {
            return this.a9.ak.d;
        }
        g() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.is;
                $ret.c = this.a.d8;
                $ret.f = this.a.ix;
                return $ret;
            })());
            if (typeCast(XamDataChart.$, this.a.be) !== null) {
                let b = this.a.be;
                if (b.np && b.bg != 2 && b.bg != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        get d() {
            return this.a.ao().a;
        }
        at(a, b, c) {
            this.d.ac = a;
            this.d.cp = b;
            this.d.co = c;
            this.ae();
        }
        y() {
            this.d.ab.clear();
            this.ae();
        }
        ap(a) {
            this.d.bn = a;
            this.ae();
        }
        au(a, b) {
            this.d.a1 = a;
            this.d.a2 = b;
        }
        ao(a) {
            this.d.a8 = a;
        }
        v() {
        }
        o(a) {
            return null;
        }
        n(dataItem_) {
            if (this.a.as != null) {
                return this.a.as(dataItem_);
            }
            if (this.a.bf != null) {
                return this.a.bf.i(dataItem_);
            }
            let label_ = this.a.e9;
            let a = typeof dataItem_ === 'number' && typeof label_ === 'string';
            let labelValue_ = null;
            if (this.h != null) {
                labelValue_ = this.h.getPropertyValue(dataItem_);
                if ((labelValue_ === undefined)) {
                    labelValue_ = label_;
                }
            }
            else {
                labelValue_ = a ? stringFormat(label_, dataItem_) : (typeof dataItem_[label_] != 'undefined') ? dataItem_[label_] : label_;
                ;
            }
            if (this.a.expectFunctions) {
                if ((typeof (labelValue_) == 'function')) {
                    labelValue_ = labelValue_();
                }
            }
            return labelValue_;
        }
        af(a, b) {
            this.j = a;
            this.k = b;
        }
        get isDirty() {
            return this._isDirty;
        }
        set isDirty(a) {
            this._isDirty = a;
        }
        ae() {
            if (this.a.be == null || this.j == null) {
                return;
            }
            if (!this.isDirty) {
                this.isDirty = true;
                this.a.be.ah.n();
            }
        }
        undirty(a) {
            this.isDirty = false;
            this.al(a);
        }
        al(a) {
            if (this.j == null) {
                return;
            }
            if (this.j.d) {
                if (this.a.bh != null && this.a.bh.ea != 1) {
                    this.j.z();
                    this.j.aa(this.a.bh.ea, this.a.bh.ea);
                }
                let b = this.a.be.mw();
                if (a) {
                    this.j.k(b.left, b.top, b.width, b.height);
                }
                if (a) {
                    if (this.a.bh.me != null && !this.a.i8.isEmpty) {
                        this.bb.o = this.a.i8.top;
                        this.bb.n = this.a.i8.left;
                        this.bb.width = this.a.i8.width;
                        this.bb.height = this.a.i8.height;
                        this.bb._fill = this.a.bh.me;
                        this.j.v(this.bb);
                    }
                }
                this.j.z();
                this.j.ae(this.a.i8);
                this.am();
                this.j.y();
                if (this.a.bh != null && this.a.bh.ea != 1) {
                    this.j.y();
                }
            }
            if (this.k.d) {
                if (this.a.bh != null && this.a.bh.ea != 1) {
                    this.k.z();
                    this.k.aa(this.a.bh.ea, this.a.bh.ea);
                }
                let c = this.a5;
                let d = this.a.be.mw();
                if (!c.isEmpty && a) {
                    this.k.k(d.left, d.top, d.width, d.height);
                }
                if (this.a.bh != null && this.a.bh.ea != 1) {
                    this.k.y();
                }
            }
        }
        postRender() {
            this.d.ca();
        }
        am() {
            if (this.j.d) {
                this.a7._stroke = this.a.iq;
                this.ba._fill = this.a.it;
                this.a9._stroke = this.a.ip;
                this.a8._stroke = this.a.io;
                this.a9.ac = this.a.d8;
                this.a8.ac = this.a.d5;
                this.a7.ac = this.a.ep;
                this.a9.ai = this.a.ix;
                this.a8.ai = this.a.iw;
                this.a7.ai = this.a.iy;
                this.a5 = this.a.i8;
                this.j.s(this.a7);
                this.j.s(this.ba);
                this.j.s(this.a8);
                this.j.s(this.a9);
            }
        }
        ac() {
            this.ae();
        }
        aa(a) {
            if (a != null) {
                a.ah.r(this);
                a.bn.ck();
            }
        }
        u(a) {
            if (a != null) {
                a.ah.l(this);
                this.ae();
            }
        }
        i() {
            if (this.a.bh == null || this.a.bh.bn.i.ae == null) {
                return null;
            }
            return FontUtil.getFont(this.a.bh.bn.i.ae);
        }
        l() {
            return this.j == null;
        }
        ak() {
            if (this.a.b2 || this.a.ce) {
                return;
            }
            if (this.a.gc == null) {
                this.a.hp = null;
                this.a.ci = true;
                this.a.ha();
                return;
            }
            if (this.a.hp == null) {
                let a = new TextBlock();
                a.ak = this.a.gc;
                a.dataContext = this.a.bd;
                this.a.hp = a;
            }
            else {
                this.a.hp.ak = this.a.gc;
                this.a.hp.dataContext = this.a.bd;
            }
            this.a.ci = true;
            this.a.ha();
        }
        t() {
            let a;
            let b = new AxisLabelSettings();
            if (this.a.b2) {
                a = "ui-angular-axis-labels";
                b.margin = 0;
            }
            else if (this.a.ch) {
                a = "ui-vertical-axis-labels";
                b.location = 2;
            }
            else if (this.a.a0 == 3) {
                a = "ui-radial-axis-labels";
                b.location = 5;
            }
            else {
                a = "ui-horizontal-axis-labels";
                b.location = 1;
            }
            this.s(b, a);
        }
        aw() {
            if (this.a.bh == null) {
                return;
            }
            let a = this.a.bh.nl;
            let b = a.fl;
            let c = a.fk;
            if (this.a.iu == null) {
                if (b == null) {
                    this.a.iu = a.fi;
                }
                else if (b.color.l != 0) {
                    this.a.iu = b;
                }
            }
            if (this.a.ir == null) {
                if (c == null) {
                    this.a.ir = a.fi;
                }
                else if (c.color.l != 0) {
                    this.a.ir = c;
                }
            }
        }
        s(a, b) {
            this.a.eu.startCSSQuery();
            let c = this.a.eu.getCssDefaultPropertyValue(b, "margin-top");
            let d = this.a.eu.getCssDefaultPropertyValue(b, "margin-right");
            let e = this.a.eu.getCssDefaultPropertyValue(b, "margin-bottom");
            let f = this.a.eu.getCssDefaultPropertyValue(b, "margin-left");
            let g = this.a.eu.getCssDefaultPropertyValue(b, "text-align");
            let h = this.a.eu.getCssDefaultPropertyValue(b, "vertical-align");
            let i = this.a.eu.getCssDefaultPropertyValue(b, "color");
            this.a.eu.endCSSQuery();
            if (c != null) {
                a.topMargin = parseFloat(c);
            }
            if (d != null) {
                a.rightMargin = parseFloat(d);
            }
            if (e != null) {
                a.bottomMargin = parseFloat(e);
            }
            if (f != null) {
                a.leftMargin = parseFloat(f);
            }
            if (i != null) {
                if (a.textColor == null) {
                    a.textColor = new Brush();
                }
                a.textColor._fill = i;
            }
            if (g != null) {
                switch (g) {
                    case "right":
                        a.horizontalAlignment = 2;
                        break;
                    case "left":
                        a.horizontalAlignment = 0;
                        break;
                    default:
                        a.horizontalAlignment = 1;
                        break;
                }
            }
            if (h != null) {
                switch (h) {
                    case "top":
                        a.verticalAlignment = 0;
                        break;
                    case "bottom":
                        a.verticalAlignment = 2;
                        break;
                    default:
                        a.verticalAlignment = 1;
                        break;
                }
            }
            this.a.ax = a;
        }
        preRender() {
            if (this.a.bh != null) {
                this.a.bh.hl();
            }
        }
        isValid() {
            return this.a != null && !this.a.i8.isEmpty;
        }
        a2(a) {
            return { $type: Point_$type, x: a.n, y: a.o };
        }
        a3() {
            return { $type: Point_$type, x: this.a.au.cn.left, y: this.a.au.cn.top };
        }
        a6() {
            let a = this.a.au.cn;
            return a;
        }
        a4(a) {
            return { $type: Point_$type, x: a.n, y: a.o };
        }
        bd(a) {
            let b = this.a.au.ae.t();
            let c = this.a.au.ae.v();
            let d = this.a.au.ae.u();
            let e = this.a.au.ae.s();
            return new Thickness(1, b, c, d, e);
        }
        ah() {
            if (FastReflectionHelper.needsHelper(this.a.e9)) {
                this.h = new FastReflectionHelper(true, this.a.e9);
            }
            else {
                this.h = null;
            }
        }
    }
    AxisView.$t = /*@__PURE__*/ markType(AxisView, 'AxisView', Base.$, [ISchedulableRender_$type]);
    return AxisView;
})();
/**
 * @hidden
 */
export let CategoryAxisBaseView = /*@__PURE__*/ (() => {
    class CategoryAxisBaseView extends AxisView {
        constructor(a) {
            super(a);
            this.be = null;
            this.be = a;
        }
        o(a) {
            let b = 0;
            if (this.be.categoryMode == 0) {
                b = truncate(Math.round(a));
            }
            else {
                b = truncate(Math.floor(a));
            }
            if (b < 0 || b > this.a.j6 - 1) {
                return null;
            }
            let c = this.a.jm.item(b);
            let d = this.n(c);
            if (d == null) {
                return null;
            }
            return d.toString();
        }
        bf(a) {
            let b = 0;
            let c = false;
            for (let d = 0; d < a.count; d++) {
                let e = typeCast(FrameworkElement.$, a._inner[d]);
                if (e == null) {
                    e = this.a.bq.item(d);
                    let f = a._inner[d] == null ? "" : a._inner[d].toString();
                    let g = e.ak;
                    let h = 0;
                    let i = 0;
                    if (g != null) {
                        h = g.length;
                    }
                    if (f != null) {
                        i = f.length;
                    }
                    if (h != i) {
                        c = true;
                    }
                    e.ak = f;
                    b++;
                }
                else {
                    this.d.ab.add(e);
                }
            }
            if (c) {
                this.a.ci = true;
            }
            this.a.gk();
            return b;
        }
    }
    CategoryAxisBaseView.$t = /*@__PURE__*/ markType(CategoryAxisBaseView, 'CategoryAxisBaseView', AxisView.$);
    return CategoryAxisBaseView;
})();
/**
 * @hidden
 */
export let HorizontalAxisLabelPanelBaseView = /*@__PURE__*/ (() => {
    class HorizontalAxisLabelPanelBaseView extends AxisLabelPanelBaseView {
        constructor(a) {
            super(a);
            this.ax = null;
            this.ax = a;
        }
        az() {
        }
        ay() {
            return false;
        }
        a0(a) {
            let b = this.a.bj();
            let c, d;
            c = this.ax.c0();
            d = this.ax.cx();
            let e = this.a.af != null ? this.a.af.verticalAlignment : 1;
            let f = this.a.a5;
            let g = a.count;
            let h = this.a.cn;
            let i = this.ax.cz();
            let j = i / 2;
            for (let k = 0; k < g; k++) {
                let l = a._inner[k];
                let m = l.height / 2;
                switch (e) {
                    case 0:
                        l.y = h.top + c;
                        break;
                    case 1:
                    case 3:
                        l.y = (h.top + c + j) - m;
                        break;
                    case 2:
                        l.y = (h.bottom - d) - l.height;
                        break;
                }
            }
        }
    }
    HorizontalAxisLabelPanelBaseView.$t = /*@__PURE__*/ markType(HorizontalAxisLabelPanelBaseView, 'HorizontalAxisLabelPanelBaseView', AxisLabelPanelBaseView.$);
    return HorizontalAxisLabelPanelBaseView;
})();
/**
 * @hidden
 */
export let NumericAxisBaseView = /*@__PURE__*/ (() => {
    class NumericAxisBaseView extends AxisView {
        constructor(a) {
            super(a);
            this.be = null;
            this.be = a;
        }
        bf() {
        }
        o(a) {
            let b = this.be.jm.d(this.be.i8, this.be.bh.mr, this.be.i3(), this.be.i2());
            return this.be.jm.w(b, a, -1, NaN);
        }
    }
    NumericAxisBaseView.$t = /*@__PURE__*/ markType(NumericAxisBaseView, 'NumericAxisBaseView', AxisView.$);
    return NumericAxisBaseView;
})();
/**
 * @hidden
 */
export let VerticalAxisLabelPanelView = /*@__PURE__*/ (() => {
    class VerticalAxisLabelPanelView extends AxisLabelPanelBaseView {
        constructor(a) {
            super(a);
            this.ax = null;
            this.ax = a;
        }
        ay() {
        }
        d() {
            let a = this.a.ac.bh.getFontInfo();
            if (this.a.ac.bd != null && this.a.ac.bd.textStyle != null) {
                a = this.a.ac.bd.g(this.a.ac.bh.bn.i.ae);
            }
            else {
                let b = this.a.ac.bh.bq();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        aw() {
            return this.a.ac.bh.m8();
        }
        as() {
            let a = this.a.ac.be.getFontBrush();
            if (this.a.ac.bd != null && this.a.ac.bd.textColor != null) {
                a = this.a.ac.bd.textColor;
            }
            else {
                let b = this.a.ac.bh.l9();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        az(a, b) {
            let c, d;
            c = this.ax.cu();
            d = this.ax.cw();
            let e = this.a.af != null ? this.a.af.horizontalAlignment : 1;
            let f = this.a.a5;
            let g = this.ax.cx();
            let h = g / 2;
            let i = this.a.cn;
            for (let j = 0; j < a.count; j++) {
                let k = a._inner[j];
                let l = k.width / 2;
                switch (e) {
                    case 0:
                        k.x = i.left + c;
                        break;
                    case 1:
                    case 3:
                        k.x = (i.left + c + h) - l;
                        break;
                    case 2:
                        k.x = (i.right - d) - k.width;
                        break;
                }
            }
        }
    }
    VerticalAxisLabelPanelView.$t = /*@__PURE__*/ markType(VerticalAxisLabelPanelView, 'VerticalAxisLabelPanelView', AxisLabelPanelBaseView.$);
    return VerticalAxisLabelPanelView;
})();
/**
 * @hidden
 */
export let XamDataChartView = /*@__PURE__*/ (() => {
    class XamDataChartView extends SeriesViewerView {
        constructor(a) {
            super(a);
            this.fd = null;
            this.fm = null;
            this.fi = null;
            this.fj = null;
            this.fl = null;
            this.fk = null;
            this.ff = 0;
            this.fg = 0;
            this.fe = null;
            this.fd = a;
        }
        fh(a) {
            this.n.ah.p();
        }
        dk() {
            super.dk();
            if (this.b.count == 0 && this.w != null) {
                if (this.n.ea != 1) {
                    this.w.z();
                    this.w.aa(this.n.ea, this.n.ea);
                }
                this.w.k(0, 0, this.a6, this.a5);
                if (this.n.ea != 1) {
                    this.w.y();
                }
            }
        }
        dx() {
            let a, b;
            let c = 1, d = 0;
            let e = false;
            let f = this.i.e();
            let g;
            let h = this.i.a6(c, g, a, b, d, e);
            c = h.p0;
            g = h.p1;
            a = h.p2;
            b = h.p3;
            d = h.p4;
            e = h.p5;
            if (isNaN_(this.n.eu)) {
                this.n.eu = g[0];
            }
            if (isNaN_(this.n.el)) {
                this.n.el = g[1];
            }
            if (isNaN_(this.n.ef)) {
                this.n.ef = g[2];
            }
            if (isNaN_(this.n.ej)) {
                this.n.ej = g[3];
            }
            this.fd.pq = f.i;
            this.fd.po = f.i;
            this.fd.pp = f.i;
            this.fd.np = e;
            this.fl = a;
            this.fk = b;
            this.fd.nb = f.a;
            this.fd.ne = f.f;
            this.fd.nc = f.b != null ? f.b : new BrushCollection();
            this.fd.nd = f.c != null ? f.c : new BrushCollection();
            if (this.fd.nc.count == 0) {
                for (let i = 0; i < f.a.count; i++) {
                    this.fd.nc.add(f.a.item(i));
                }
            }
            if (f.c.count == 0) {
                for (let j = 0; j < f.f.count; j++) {
                    this.fd.nd.add(f.f.item(j));
                }
            }
            this.fj = f.j;
            this.fm = f.k;
            this.fe = f.h;
            this.fi = f.i;
            this.ff = c;
            for (let k of fromEnum(this.fd.series)) {
                k.jo();
            }
            this.fg = d;
        }
        du() {
            this.e5.ac = this.e6.ac = DeviceUtils.g(1.4);
            this.e5._stroke = this.e6._stroke = this.fj;
            super.du();
        }
    }
    XamDataChartView.$t = /*@__PURE__*/ markType(XamDataChartView, 'XamDataChartView', SeriesViewerView.$);
    return XamDataChartView;
})();
/**
 * @hidden
 */
export let SeriesView = /*@__PURE__*/ (() => {
    class SeriesView extends Base {
        constructor(a) {
            super();
            this.e = null;
            this.p = false;
            this.d = null;
            this._isDirty = false;
            this.bt = null;
            this.bk = null;
            this.s = 0;
            this.bo = Rect.empty;
            this.bj = new Brush();
            this.f = new SeriesComponentsFromView();
            this.h = null;
            this.i = null;
            this.bp = null;
            this.bq = null;
            this.j = false;
            this.a = null;
            this.o = false;
            this.k = false;
            this.m = false;
            this.aa = null;
            this.s = NaN;
            this.o = true;
            this.e = a;
            this.n = false;
            this.bt = new Rectangle();
            this.p = false;
        }
        getDefaultTooltipTemplate() {
            return this.e.a0.a$p(this.e);
        }
        am() {
            if (this.e.cx) {
                this.e.a0.a$s(this.e);
            }
        }
        ap() {
            if (!this.n) {
                this.e.bl = 0;
                this.e.bj = 0;
                this.e.bk = 1;
                this.d = new DataContext();
                this.d.series = this.e;
                this.e.bv = EasingFunctions.cubicEase;
                this.ac();
            }
        }
        getEffectiveViewport() {
            return this.e.getEffectiveViewport1(this);
        }
        aw() {
            this.an();
        }
        ag() {
        }
        get t() {
            if (this.e.bs != null) {
                return this.e.bs.bn.i.ae;
            }
            return null;
        }
        get isDirty() {
            return this._isDirty;
        }
        set isDirty(a) {
            this._isDirty = a;
        }
        get_index() {
            if (this.e == null || this.e.bs == null) {
                return 0;
            }
            if (this.e.bs.cx) {
                if (this.e.ct) {
                    return this.e.bs.series.indexOf(this.e);
                }
                else {
                    let a = this.e.bs.series.indexOf(this.e);
                    if (a >= 0) {
                        return a;
                    }
                    for (let b = 0; b < this.e.bs.series.count; b++) {
                        if (this.e.bs.series._inner[b].ct) {
                            let c = this.e.bs.series._inner[b].a5();
                            if (c == this.e) {
                                return b;
                            }
                        }
                    }
                    return a;
                }
            }
            let d = typeCast(XamDataChart.$, this.e.bq);
            let e = 0;
            if (d != null) {
                if (d.ni == 2 || d.ni == 0) {
                    e = d.axes.count;
                }
            }
            let f = 0;
            for (let g = 0; g < this.e.bs.series.count; g++) {
                if (this.e.bs.series._inner[g] == this.e) {
                    break;
                }
                if (this.e.bs.series._inner[g].isStacked) {
                    f += this.e.bs.series._inner[g].fg();
                }
                else {
                    f++;
                }
            }
            return e + f;
        }
        get index() {
            return this.get_index();
        }
        an() {
            if (this.e.bs == null) {
                return;
            }
            if (!this.isDirty) {
                this.isDirty = true;
                this.a.o(this.h, this.i);
            }
        }
        undirty(a) {
            this.isDirty = false;
            this.a1(a);
        }
        ar() {
            this.an();
        }
        bn() {
            if (this.bk == null) {
                this.bk = ((() => {
                    let $ret = new Brush();
                    $ret.color = Color.u(0, 0, 0, 0);
                    return $ret;
                })());
            }
            return this.bk;
        }
        r() {
            if (!isNaN_(this.s)) {
                return this.s;
            }
            if (this.e.bs != null) {
                return this.e.bs.ea;
            }
            else {
                return 1;
            }
        }
        a1(a) {
            if (this.h == null) {
                return;
            }
            if (this.bo.isEmpty) {
                this.bo = this.br;
            }
            let b = this.bo;
            let c = this.e.bs.mw();
            let d = c.left;
            let e = c.top;
            let f = c.width;
            let g = c.height;
            let h = this.r();
            if (this.m) {
                d = this.br.left;
                e = this.br.top;
                f = this.br.width;
                g = this.br.height;
            }
            if (this.h.d) {
                if (h != 1) {
                    this.h.z();
                    this.h.aa(h, h);
                }
                if (a) {
                    this.h.k(d, e, f, g);
                }
                if (a) {
                    if (this.e.bs.me != null && !this.br.isEmpty) {
                        this.bt.o = this.br.top;
                        this.bt.n = this.br.left;
                        this.bt.width = this.br.width;
                        this.bt.height = this.br.height;
                        this.bt._fill = this.e.bs.me;
                        this.h.v(this.bt);
                    }
                }
                if (h != 1) {
                    this.h.y();
                }
            }
            if (this.i != null && this.o) {
                if (this.i.d) {
                    if (this.e.bs != null && h != 1) {
                        this.i.z();
                        this.i.aa(h, h);
                    }
                    if (!b.isEmpty && a) {
                        this.i.k(b.left, b.top, b.width, b.height);
                    }
                    this.a7(true);
                    this.a3(this.i, true);
                    this.a2(this.i, true);
                    if (h != 1) {
                        this.i.y();
                    }
                }
            }
            if (this.h.d && this.o) {
                if (h != 1) {
                    this.h.z();
                    this.h.aa(h, h);
                }
                this.h.z();
                if (!this.n && Rect.l_op_Inequality(this.e.lq, null) && !this.e.lq.isEmpty && (this.e.lq.width != 1 || this.e.lq.height != 1)) {
                    this.h.ae(new Rect(0, this.br.left + this.br.width * this.e.lq.left, this.br.top + this.br.height * this.e.lq.top, this.br.width * this.e.lq.width, this.br.height * this.e.lq.height));
                }
                else {
                    this.h.ae(this.br);
                }
                this.a7(false);
                this.h.ad(this.e._opacity);
                if (this.e.cp && this.e.cq && !this.n) {
                    if (this.e.du) {
                        this.h.o(this.e.lb.colorString, 0, this.e.ew, this.e.ex);
                        let i = this.e.bs.bn.i.x;
                        let j = this.e.bs.bn.i.ak;
                        if (h != 1) {
                            i.z();
                            i.aa(h, h);
                        }
                        i.k(c.left, c.top, c.width, c.height);
                        this.a3(i, false);
                        this.a2(i, false);
                        this.h.m(j.getNativeElement(), 1, 0, 0, c.width, c.height);
                        if (h != 1) {
                            i.y();
                        }
                    }
                    else {
                        this.h.o(this.e.lb.colorString, this.e.ev, this.e.ew, this.e.ex);
                        this.a3(this.h, false);
                        this.a2(this.h, false);
                    }
                    this.h.l();
                }
                else {
                    this.a3(this.h, false);
                    this.a2(this.h, false);
                }
                this.h.ad(1);
                this.h.y();
                if (h != 1) {
                    this.h.y();
                }
            }
        }
        ba(a, b, c) {
            if (c) {
                this.bc(a, b);
            }
            else {
                this.bb(a, b);
            }
        }
        bd(a, b, c) {
            if (c) {
                this.bf(a, b);
            }
            else {
                this.be(a, b);
            }
        }
        x(a, b) {
            if (b) {
                return this.y(a);
            }
            else {
                return this.z(a);
            }
        }
        y(a) {
            return null;
        }
        z(a) {
            return null;
        }
        bb(a, b) {
        }
        be(a, b) {
        }
        bc(a, b) {
        }
        bf(a, b) {
        }
        a7(a) {
            if (a) {
                this.a9();
            }
            else {
                this.a8();
            }
        }
        a8() {
        }
        a9() {
        }
        bm(a) {
            return this.bl();
        }
        bl() {
            let a = this.e.fk;
            let num_ = (a + 1) * 1000;
            let b = ((num_ & 0x3F) << 2);
            num_ = (num_ >> 6);
            let c = ((num_ & 0x3F) << 2);
            num_ = (num_ >> 6);
            let d = ((num_ & 0x3F) << 2);
            this.bj._fill = "rgb(" + b + "," + c + "," + d + ")";
            return this.bj;
        }
        a3(a, b) {
            this.bo = this.br;
        }
        a2(a, b) {
        }
        au() {
        }
        aj() {
        }
        ak() {
        }
        g() {
            return this.f;
        }
        a6(a) {
        }
        q() {
            return true;
        }
        at() {
        }
        as() {
        }
        a4() {
            this.e.k4 = null;
        }
        ae() {
            this.e.k4 = this.e.k6;
        }
        a5() {
            this.e.k5 = null;
        }
        af() {
            this.e.k5 = this.e.k9;
        }
        c(a) {
            if (typeCast(DataContext.$, a) !== null) {
                return a;
            }
            return null;
        }
        ao(a, b) {
            this.h = a;
            this.i = b;
        }
        get br() {
            return this.bp;
        }
        set br(a) {
            this.bp = a;
        }
        get_bs() {
            if (this.m) {
                return this.bq;
            }
            else if (this.n) {
                return XamDataChart.m2;
            }
            else {
                return this.e.bs != null ? this.e.bs.mr : Rect.empty;
            }
        }
        get bs() {
            return this.get_bs();
        }
        get n() {
            return this.j;
        }
        set n(a) {
            this.j = a;
        }
        ah(a) {
            if (a != null) {
                this.a.r(this);
                if (this.e.bh != null) {
                    this.e.bh.a.r(this.e.bh);
                }
            }
        }
        ad(a) {
            if (a != null) {
                if (this.e.ds) {
                    this.h = this.e.bs.bn.x;
                    a.bn.a.l(this);
                    this.a = a.bn.a;
                }
                else {
                    this.h = this.e.bs.bn.w;
                    a.ah.l(this);
                    this.a = a.ah;
                }
                if (this.e.bh != null) {
                    a.ai.l(this.e.bh);
                    this.e.bh.a = a.ai;
                    this.e.bh.an();
                }
                if (this.e.cx) {
                    for (let b of fromEnum(this.e.a0.a$h.keys)) {
                        a.ag.l(this.e.a0.a$h.item(b));
                        this.e.a0.a$h.item(b).a = a.ag;
                        this.e.a0.a$h.item(b).an();
                    }
                }
                this.an();
            }
        }
        postRender() {
            this.ax();
        }
        ax() {
        }
        b(a) {
            return null;
        }
        az(a) {
            this.e.bh.h = a.a;
        }
        ai(a) {
        }
        bg() {
            if (this.k) {
                return;
            }
            if (this.e.bs != null) {
                let a = (this.e.legend != null) ? this.e.legend : this.e.bs.legend;
                if (a != null && this.e.jx != null && a.containsChild(this.e.jx)) {
                    a.removeChild(this.e.jx);
                    let b = this.e.fw();
                    b.content.actualItemBrush = this.e.k4;
                    b.content.outline = this.e.k9;
                    b.content.thickness = this.e.ey;
                    a.addChildInOrder(this.e.jx, this.e);
                }
            }
        }
        aq() {
            this.e.hq(this.e.aw, this.e.aw);
        }
        av() {
            this.bg();
        }
        getViewInfo(a, b) {
            a = this.br;
            b = this.bs;
            return {
                p0: a,
                p1: b
            };
        }
        l() {
            return this.h != null;
        }
        bh() {
            this.o = this.e._visibility == 0;
            this.an();
        }
        a0() {
            this.e.a0.a$ae(this.e);
        }
        ac() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.lb = a;
            this.e.ev = 5;
            this.e.ew = 5;
            this.e.ex = 5;
        }
        al() {
        }
        preRender() {
            if (this.e.bs != null && !this.n) {
                this.e.bs.hl();
            }
        }
        isValid() {
            return true;
        }
        ay(a) {
            this.h = a.a;
        }
        bi(type_) {
            let legendTemplates_ = TypeRegistrar.get("LegendTemplates");
            let a = (legendTemplates_.resolveLegendItemTemplate(type_));
            return a;
        }
    }
    SeriesView.$t = /*@__PURE__*/ markType(SeriesView, 'SeriesView', Base.$, [ISchedulableRender_$type, IProvidesViewport_$type]);
    return SeriesView;
})();
/**
 * @hidden
 */
export let MarkerSeriesView = /*@__PURE__*/ (() => {
    class MarkerSeriesView extends SeriesView {
        constructor(a) {
            super(a);
            this.by = null;
            this.b2 = 1;
            this.b4 = 2;
            this.b3 = 3;
            this.b1 = null;
            this.b0 = false;
            this.bu = new Marker();
            this.cl = null;
            this.bu = new Marker();
            this.bu.content = new DataContext();
            this.by = a;
        }
        ap() {
            super.ap();
            this.b1 = new List$1(Marker.$, 0);
            this.cl = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.c;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
        }
        cd() {
            for (let a of fromEnum(this.b1)) {
                a.ah = this.by.mm;
            }
            this.an();
        }
        ck(a) {
        }
        bx() {
            let a = new Marker();
            a.content = ((() => {
                let $ret = new DataContext();
                $ret.series = this.e;
                return $ret;
            })());
            a.ah = this.by.mm;
            this.b1.add(a);
            return a;
        }
        cg(a) {
            a._visibility = 0;
        }
        ci(a) {
            a._visibility = 1;
        }
        ch(a) {
            this.b1.remove(a);
        }
        bz() {
            return this.by.mn != null;
        }
        cb() {
            this.by.ml = null;
        }
        b5() {
            this.by.ml = this.by.mn;
        }
        cm(a) {
            let b = a.n;
            let c = a.o;
            let d = a.m;
            let e = a.l;
            return new Rect(0, b - d / 2, c - d / 2, d, e);
        }
        b8(a) {
            switch (a) {
                case SeriesViewer.$$p[1]:
                    this.by.ml = this.by.bs.ko;
                    break;
                case SeriesViewer.$$p[26]:
                    this.by.ml = this.by.bs.kx;
                    break;
                case SeriesViewer.$$p[18]:
                    this.by.ml = this.by.bs.ku;
                    break;
                case SeriesViewer.$$p[20]:
                    this.by.ml = this.by.bs.kv;
                    break;
                case SeriesViewer.$$p[4]:
                    this.by.ml = this.by.bs.kp;
                    break;
                case SeriesViewer.$$p[13]:
                    this.by.ml = this.by.bs.ks;
                    break;
                case SeriesViewer.$$p[6]:
                    this.by.ml = this.by.bs.kq;
                    break;
                case SeriesViewer.$$p[23]:
                    this.by.ml = this.by.bs.kw;
                    break;
                case SeriesViewer.$$p[14]:
                    this.by.ml = this.by.bs.kt;
                    break;
                case SeriesViewer.$$p[7]:
                    this.by.ml = this.by.bs.kr;
                    break;
            }
        }
        b9() {
            this.by.mz = null;
        }
        b6() {
            this.by.mz = this.by.m1;
        }
        ca() {
            this.by.m0 = null;
        }
        b7() {
            this.by.m0 = this.by.m2;
        }
        cj() {
            this.an();
        }
        be(a, b) {
            super.be(a, b);
            if (!this.b0) {
                let c = a;
                let d = c.content;
                if (d != null) {
                    d.actualItemBrush = this.by.mz;
                    if (d.itemBrush != null) {
                        d.actualItemBrush = d.itemBrush;
                    }
                    d.outline = this.by.m0;
                    d.thickness = this.b4;
                }
            }
        }
        bf(a, b) {
            super.bf(a, b);
            let c = a;
            this.bu._visibility = c._visibility;
            this.bu.ah = c.ah;
            this.bu.width = c.width;
            this.bu.height = c.height;
            this.bu.m = c.m;
            this.bu.l = c.l;
            this.bu.n = c.n;
            this.bu.o = c.o;
            let d = this.bm(b);
            let e = this.bu.content;
            let f = c.content;
            e.item = f.item;
            e.series = f.series;
            e.thickness = f.thickness;
            if (e != null) {
                e.actualItemBrush = d;
                e.outline = d;
                e.thickness = this.b2 + this.b3;
            }
        }
        b(a) {
            if (a >= 0 && a < this.b1.count) {
                return this.b1._inner[a].content;
            }
            return super.b(a);
        }
        a2(a, b) {
            super.a2(a, b);
            if (a.d) {
                let c = new DataTemplatePassInfo();
                c.isHitTestRender = b;
                c.context = a.g();
                c.viewportTop = this.br.top;
                c.viewportLeft = this.br.left;
                c.viewportWidth = this.br.width;
                c.viewportHeight = this.br.height;
                c.passID = "Markers";
                let d = new DataTemplateRenderInfo();
                d.isHitTestRender = b;
                d.passInfo = c;
                let e = new DataTemplateMeasureInfo();
                e.passInfo = c;
                let f = false;
                let g = a.g();
                e.context = g;
                d.context = g;
                let h = 0;
                let i = 0;
                if (this.by.mm != null && this.by.mm.passStarting != null) {
                    this.by.mm.passStarting(c);
                }
                for (let j = 0; j < this.b1.count; j++) {
                    let k = this.b1._inner[j];
                    if (k._visibility == 1) {
                        continue;
                    }
                    this.bd(k, j, b);
                    if (b) {
                        k = this.bu;
                    }
                    if (!f) {
                        e.data = k.content;
                        e.width = k.width;
                        e.height = k.height;
                        e.renderOffsetX = 0;
                        e.renderOffsetY = 0;
                        e.renderContext = a;
                        let l = k.ah;
                        if (l.measure != null) {
                            e.data = k.content;
                            l.measure(e);
                            f = e.isConstant;
                            if (f) {
                                h = e.width;
                                i = e.height;
                            }
                        }
                        d.availableWidth = e.width;
                        d.availableHeight = e.height;
                        d.renderOffsetX = e.renderOffsetX;
                        d.renderOffsetY = e.renderOffsetY;
                        d.renderContext = a;
                    }
                    else {
                        d.availableWidth = h;
                        d.availableHeight = i;
                    }
                    if (!isNaN_(k.width) && !isInfinity(k.width)) {
                        d.availableWidth = k.width;
                    }
                    if (!isNaN_(k.height) && !isInfinity(k.height)) {
                        d.availableHeight = k.height;
                    }
                    a.p(d, k);
                    k.m = d.availableWidth;
                    k.l = d.availableHeight;
                    k.ai = d.renderOffsetX;
                    k.aj = d.renderOffsetY;
                }
                if (this.by.mm != null && this.by.mm.passCompleted != null) {
                    this.by.mm.passCompleted(c);
                }
            }
        }
        ce(a) {
            a.create = runOn(this, this.bx);
            a.destroy = runOn(this, this.ch);
            a.activate = runOn(this, this.cg);
            a.disactivate = runOn(this, this.ci);
        }
        cf(a) {
            a.create = runOn(this, this.bx);
            a.destroy = runOn(this, this.ch);
            a.activate = runOn(this, this.cg);
            a.disactivate = runOn(this, this.ci);
        }
        bv(a) {
            let b = this.bw(a, 0);
            if (b == null) {
                b = this.bw(a, 3);
            }
            return b;
        }
        bw(a, b) {
            let c;
            let d;
            let e;
            let f;
            for (let g = this.b1.count - 1; g >= 0; g--) {
                let h = this.b1._inner[g];
                if (h._visibility == 1 || h._opacity == 0) {
                    continue;
                }
                c = (h.m / 2) + b;
                d = (h.l / 2) + b;
                e = h.ai;
                f = h.aj;
                if ((h.n + e) - c <= a.x && (h.n + e) + c >= a.x && (h.o + f) - d <= a.y && (h.o + f) + d >= a.y) {
                    return h;
                }
            }
            return null;
        }
    }
    MarkerSeriesView.$t = /*@__PURE__*/ markType(MarkerSeriesView, 'MarkerSeriesView', SeriesView.$);
    return MarkerSeriesView;
})();
/**
 * @hidden
 */
export let ChartAxisRangeChangedEventArgs = /*@__PURE__*/ (() => {
    class ChartAxisRangeChangedEventArgs extends EventArgs {
        constructor(a, b, c, d, e, f) {
            super();
            this._chart = null;
            this._axis = null;
            this._oldMinimumValue = 0;
            this._minimumValue = 0;
            this._oldMaximumValue = 0;
            this._maximumValue = 0;
            this.chart = a;
            this.axis = b;
            this.oldMinimumValue = c;
            this.minimumValue = d;
            this.oldMaximumValue = e;
            this.maximumValue = f;
        }
        get chart() {
            return this._chart;
        }
        set chart(a) {
            this._chart = a;
        }
        get axis() {
            return this._axis;
        }
        set axis(a) {
            this._axis = a;
        }
        get oldMinimumValue() {
            return this._oldMinimumValue;
        }
        set oldMinimumValue(a) {
            this._oldMinimumValue = a;
        }
        get minimumValue() {
            return this._minimumValue;
        }
        set minimumValue(a) {
            this._minimumValue = a;
        }
        get oldMaximumValue() {
            return this._oldMaximumValue;
        }
        set oldMaximumValue(a) {
            this._oldMaximumValue = a;
        }
        get maximumValue() {
            return this._maximumValue;
        }
        set maximumValue(a) {
            this._maximumValue = a;
        }
    }
    ChartAxisRangeChangedEventArgs.$t = /*@__PURE__*/ markType(ChartAxisRangeChangedEventArgs, 'ChartAxisRangeChangedEventArgs', EventArgs.$);
    return ChartAxisRangeChangedEventArgs;
})();
(function (v) { callStaticConstructors(); })(true);
//# sourceMappingURL=SeriesViewer_combined.js.map
