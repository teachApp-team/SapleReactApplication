/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { EventArgs, Base, markType, typeCast, Point_$type, String_$type, runOn, Number_$type, enumGetBox, fromEnum, toEnum, Date_$type, markDep, Delegate_$type } from "igniteui-react-core";
import { IBucketizer_$type } from "./IBucketizer";
import { ArgumentNullException } from "igniteui-react-core";
import { IFastItemColumn$1_$type } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { ISortingAxis_$type } from "./ISortingAxis";
import { SeriesView } from "./SeriesView";
import { truncate, intDivide, isInfinity, isNaN_ } from "igniteui-react-core";
import { IHasCategoryAxis_$type } from "./IHasCategoryAxis";
import { IHasCategoryModePreference_$type } from "./IHasCategoryModePreference";
import { Brush } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { NumericYAxis } from "./NumericYAxis";
import { HighlightingInfo } from "./HighlightingInfo";
import { CategoryTransitionInMode_$type } from "./CategoryTransitionInMode";
import { CategoryTransitionSourceFramePreparer } from "./CategoryTransitionSourceFramePreparer";
import { CategoryFrame } from "./CategoryFrame";
import { CategoryMode_$type } from "./CategoryMode";
import { ITimeRangeSelectorAxis_$type } from "./ITimeRangeSelectorAxis";
import { FastReflectionHelper } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { CategorySeriesRenderManager } from "./CategorySeriesRenderManager";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { FinancialValueList } from "./FinancialValueList";
import { CategoryXAxis } from "./CategoryXAxis";
import { SafeSortedReadOnlyDoubleCollection } from "./SafeSortedReadOnlyDoubleCollection";
import { SafeReadOnlyDoubleCollection } from "./SafeReadOnlyDoubleCollection";
import { SafeEnumerable } from "./SafeEnumerable";
import { CalculatedColumn } from "./CalculatedColumn";
import { TrendCalculators } from "igniteui-react-core";
import { ColumnSupportingCalculation } from "./ColumnSupportingCalculation";
import { IDateTimeAxis_$type } from "./IDateTimeAxis";
import { PropertyMetadata } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { dateToStringFormat } from "igniteui-react-core";
import { SupportingCalculation$1 } from "./SupportingCalculation$1";
import { SRProvider } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let FinancialEventArgs = /*@__PURE__*/ (() => {
    class FinancialEventArgs extends EventArgs {
        constructor(a, b, c, d, e) {
            super();
            this._position = 0;
            this._count = 0;
            this._dataSource = null;
            this._supportingCalculations = null;
            this._basedOn = null;
            this.position = a;
            this.count = b;
            this.dataSource = c;
            this.supportingCalculations = d;
            if (c != null) {
                c.series = e;
            }
        }
        get position() {
            return this._position;
        }
        set position(a) {
            this._position = a;
        }
        get count() {
            return this._count;
        }
        set count(a) {
            this._count = a;
        }
        get dataSource() {
            return this._dataSource;
        }
        set dataSource(a) {
            this._dataSource = a;
        }
        get supportingCalculations() {
            return this._supportingCalculations;
        }
        set supportingCalculations(a) {
            this._supportingCalculations = a;
        }
        get basedOn() {
            return this._basedOn;
        }
        set basedOn(a) {
            this._basedOn = a;
        }
    }
    FinancialEventArgs.$t = /*@__PURE__*/ markType(FinancialEventArgs, 'FinancialEventArgs', EventArgs.$);
    return FinancialEventArgs;
})();
/**
 * @hidden
 */
export let FinancialBucketCalculator = /*@__PURE__*/ (() => {
    class FinancialBucketCalculator extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.c = 0;
            this.d = 0;
            this.b = 0;
            if (a == null) {
                throw new ArgumentNullException(0, "view");
            }
            this.a = a;
            this.c = -1;
            this.d = this.d;
            this.b = 0;
        }
        getBucket(a) {
            return null;
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getErrorBucket(a, b) {
            return NaN;
        }
        getBucketInfo(a, b, c, d) {
            a = this.c;
            b = this.d;
            c = this.b;
            d = this.a.bw.eu;
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d
            };
        }
        e(a) {
            let b = this.a.bs;
            let c = this.a.br;
            let d = this.a.br;
            if (this.a.bw != null) {
                d = this.a.bw.getEffectiveViewport1(this.a);
            }
            if (b.isEmpty || c.isEmpty || this.a.bw.l9 == null) {
                this.b = 0;
                return;
            }
            let e = (this.a.bw.l9 != null) ? this.a.bw.l9.ca : false;
            let f = new ScalerParams(0, b, c, e, d);
            let g = this.a.bw.lr(this.a);
            let h = typeCast(ISortingAxis_$type, this.a.bw.l9);
            if (h == null || h.i$b == null) {
                let i = Math.floor(this.a.bw.l9.d1(g.left, f));
                let j = Math.ceil(this.a.bw.l9.d1(g.right, f));
                if (this.a.bw.l9.ca) {
                    j = Math.ceil(this.a.bw.l9.d1(g.left, f));
                    i = Math.floor(this.a.bw.l9.d1(g.right, f));
                }
                let k = Math.floor((j - i + 1) * a / g.width);
                this.b = truncate(Math.max(1, k));
                this.c = truncate(Math.floor(i / this.b));
                this.d = truncate(Math.ceil(j / this.b));
            }
            else {
                this.c = h.i$e(b, c, d, g);
                this.d = h.i$g(b, c, d, g);
                this.b = 1;
            }
        }
        cacheValues() {
        }
        unCacheValues() {
        }
    }
    FinancialBucketCalculator.$t = /*@__PURE__*/ markType(FinancialBucketCalculator, 'FinancialBucketCalculator', Base.$, [IBucketizer_$type]);
    return FinancialBucketCalculator;
})();
/**
 * @hidden
 */
export let FinancialSeries = /*@__PURE__*/ (() => {
    class FinancialSeries extends Series {
        constructor() {
            super();
            this.m2 = null;
            this.my = null;
            this.m0 = null;
            this.mw = null;
            this.m5 = null;
            this.m9 = false;
            this.assigningCategoryStyle = null;
            this.mh = null;
            this.nk = new Dictionary$2(IFastItemColumn$1_$type.specialize(Number_$type), String_$type, 0);
            this.nl = new Dictionary$2(String_$type, String_$type, 0);
            this.m8 = false;
            this.ms = null;
            this.mc = null;
            this.me = null;
            this.mb = null;
            this.mk = null;
            this.typical = null;
            this.typicalBasedOn = null;
            this.m7 = false;
            this.nx = null;
            this.nv = null;
            this.nw = null;
            this.nu = null;
            this.ny = null;
            this.md = null;
            this.ma = null;
            this.mf = 0;
            this.mt = null;
            this.mv = null;
            this.mh = new CategorySeriesRenderManager();
            this.m9 = false;
            this.mk = new CategoryTransitionSourceFramePreparer();
            this.md = new CategoryFrame(3);
            this.ab = FinancialSeries.$;
            this.mg = 0;
        }
        iv(a) {
            super.iv(a);
            this.mp = a;
        }
        get_cr() {
            return true;
        }
        ag() {
            return [this.l9, this.mu];
        }
        fs(a, b) {
            let c = this.gv(b);
            if (c == FinancialSeries.$$p[6]) {
                return this.ft(a, b, this.op);
            }
            if (c == FinancialSeries.$$p[1]) {
                return this.ft(a, b, this.og);
            }
            if (c == FinancialSeries.$$p[4]) {
                return this.ft(a, b, this.ol);
            }
            if (c == FinancialSeries.$$p[0]) {
                return this.ft(a, b, this.od);
            }
            if (c == FinancialSeries.$$p[8]) {
                return this.ft(a, b, this.ot);
            }
            return super.fs(a, b);
        }
        n9() {
            return 2;
        }
        n7() {
            return 4;
        }
        ah(a) {
            let b = this.aj(this.l9, this.mb.f, this.n6(this.bi), this.n8(this.bi), this.lp(a), true);
            if (b == null) {
                return null;
            }
            let c = b[0];
            let d = b[1];
            let e = new Array(1);
            let f = new Array(2);
            let g = this.n9();
            f[0] = { $type: Point_$type, x: c[0], y: c[g] };
            f[1] = { $type: Point_$type, x: d[0], y: d[g] };
            e[0] = f;
            return e;
        }
        ai(a) {
            let b = this.aj(this.l9, this.mb.f, this.n6(this.bi), this.n8(this.bi), this.lp(a), true);
            if (b == null) {
                return null;
            }
            let c = b[0];
            let d = b[1];
            let e = new Array(1);
            let f = new Array(2);
            f[0] = { $type: Point_$type, x: c[0], y: c[1] };
            f[1] = { $type: Point_$type, x: d[0], y: d[1] };
            e[0] = f;
            return e;
        }
        la() {
            return this.pf;
        }
        hu() {
            super.hu();
            this.l9 = null;
            this.mu = null;
        }
        get m3() {
            return this.m2;
        }
        set m3(a) {
            if (this.m2 != a) {
                let b = this.m2;
                this.m2 = a;
                this.raisePropertyChanged("OpenColumn", b, this.m2);
            }
        }
        get mz() {
            return this.my;
        }
        set mz(a) {
            if (this.my != a) {
                let b = this.my;
                this.my = a;
                this.raisePropertyChanged("HighColumn", b, this.my);
            }
        }
        get m1() {
            return this.m0;
        }
        set m1(a) {
            if (this.m0 != a) {
                let b = this.m0;
                this.m0 = a;
                this.raisePropertyChanged("LowColumn", b, this.m0);
            }
        }
        get mx() {
            return this.mw;
        }
        set mx(a) {
            if (this.mw != a) {
                let b = this.mw;
                this.mw = a;
                this.raisePropertyChanged("CloseColumn", b, this.mw);
            }
        }
        get m6() {
            return this.m5;
        }
        set m6(a) {
            if (this.m5 != a) {
                let b = this.m5;
                this.m5 = a;
                this.raisePropertyChanged("VolumeColumn", b, this.m5);
            }
        }
        nh() {
            return (this.assigningCategoryStyle != null && this.m9) || this.cu;
        }
        o1(a) {
            if (this.assigningCategoryStyle != null && this.m9) {
                this.assigningCategoryStyle(this, a);
            }
        }
        oz(a, b, c, d, e, f) {
            let g = this.b9;
            this.mh.ac(a, b, c, d, e, f, g);
            let h = this.mh.c;
            let i = null;
            let j = this.bz;
            if (g && this.bs != null) {
                i = this.bs.az.getHighlightingInfo(this, j, d, h.m, h.l, false);
                h.b = i;
            }
            h.f = f;
            this.o1(h);
            this.mh.aa(i, f, g);
        }
        nz(a) {
            return this.ed(a, this.l9);
        }
        fe(a, b) {
            return this.ff(a, b, this.l9, runOn(this, this.nz), new FinancialValueList(this.m3, this.mz, this.m1, this.mx, this.m6));
        }
        fc(a, b) {
            return this.fd(a, b, this.l9, runOn(this, this.nz), new FinancialValueList(this.m3, this.mz, this.m1, this.mx, this.m6));
        }
        d9(a, b, c, d, e) {
            if (c == null) {
                return Number.POSITIVE_INFINITY;
            }
            let f = this.l9.j5;
            return this.ea(a, b, this.l9, d, e, f, runOn(this, this.nz));
        }
        getOffsetValue() {
            return this.n0(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
        }
        getCategoryWidth() {
            return this.l9.getCategorySize(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
        }
        lm(a, b, c) {
            return this.lo(a, b, c, this.n0(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi)), this.mu, this.l9, null, null, null);
        }
        en(a, b, c) {
            let d = this.getEffectiveViewport1(this.bi);
            let e = this.n0(this.bi.bs, this.bi.br, d);
            let f = new ScalerParams(0, this.bi.bs, this.bi.br, this.l9.ca, d);
            return this.ep(new FinancialValueList(this.m3, this.mz, this.m1, this.mx, this.m6), a, this.l9, f, e, runOn(this, this.nz), b, c);
        }
        ej(a, b, c) {
            let d = this.getEffectiveViewport1(this.bi);
            let e = this.n0(this.bi.bs, this.bi.br, d);
            let f = new ScalerParams(0, this.bi.bs, this.bi.br, this.l9.ca, d);
            return this.ep(this.mz, a, this.l9, f, e, runOn(this, this.nz), b, c);
        }
        el(a, b, c) {
            let d = this.getEffectiveViewport1(this.bi);
            let e = this.n0(this.bi.bs, this.bi.br, d);
            let f = new ScalerParams(0, this.bi.bs, this.bi.br, this.l9.ca, d);
            return this.ep(this.m1, a, this.l9, f, e, runOn(this, this.nz), b, c);
        }
        n1(a, b, c) {
            let d = this.getEffectiveViewport1(this.bi);
            let e = this.n0(this.bi.bs, this.bi.br, d);
            let f = new ScalerParams(0, this.bi.bs, this.bi.br, this.l9.ca, d);
            return this.ep(this.mx, a, this.l9, f, e, runOn(this, this.nz), b, c);
        }
        n2(a, b, c) {
            let d = this.getEffectiveViewport1(this.bi);
            let e = this.n0(this.bi.bs, this.bi.br, d);
            let f = new ScalerParams(0, this.bi.bs, this.bi.br, this.l9.ca, d);
            return this.ep(this.m3, a, this.l9, f, e, runOn(this, this.nz), b, c);
        }
        n3(a, b, c) {
            let d = this.getEffectiveViewport1(this.bi);
            let e = this.n0(this.bi.bs, this.bi.br, d);
            let f = new ScalerParams(0, this.bi.bs, this.bi.br, this.l9.ca, d);
            return this.ep(this.m6, a, this.l9, f, e, runOn(this, this.nz), b, c);
        }
        li(a, b, c) {
            return this.lo(a, b, c, this.n0(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi)), this.mu, this.l9, runOn(this, this.ej), (d, e) => this.ff(d, e, this.l9, runOn(this, this.nz), this.mz), (d, e) => this.fd(d, e, this.l9, runOn(this, this.nz), this.mz));
        }
        lk(a, b, c) {
            return this.lo(a, b, c, this.n0(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi)), this.mu, this.l9, runOn(this, this.el), (d, e) => this.ff(d, e, this.l9, runOn(this, this.nz), this.m1), (d, e) => this.fd(d, e, this.l9, runOn(this, this.nz), this.m1));
        }
        ph(a, b, c) {
            return this.lo(a, b, c, this.n0(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi)), this.mu, this.l9, runOn(this, this.n2), (d, e) => this.ff(d, e, this.l9, runOn(this, this.nz), this.m3), (d, e) => this.fd(d, e, this.l9, runOn(this, this.nz), this.m3));
        }
        pg(a, b, c) {
            return this.lo(a, b, c, this.n0(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi)), this.mu, this.l9, runOn(this, this.n1), (d, e) => this.ff(d, e, this.l9, runOn(this, this.nz), this.mx), (d, e) => this.fd(d, e, this.l9, runOn(this, this.nz), this.mx));
        }
        pi(a, b, c) {
            return this.lo(a, b, c, this.n0(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi)), this.mu, this.l9, runOn(this, this.n3), (d, e) => this.ff(d, e, this.l9, runOn(this, this.nz), this.m6), (d, e) => this.fd(d, e, this.l9, runOn(this, this.nz), this.m6));
        }
        ic() {
            super.ic();
            if (this.l9 != null) {
                this.l9.hb(false);
            }
            if (this.mu != null) {
                this.mu.hb(false);
            }
        }
        ju(a, b) {
            this.mp.bu.e(this.eu);
            this.je(false);
        }
        jt(a, b) {
            if (this.dm && this.ez < 0.05) {
                this.dn = true;
            }
            this.mp.bu.e(this.eu);
            this.je(false);
        }
        m4(a, b, c) {
            let d = this.bw(b);
            this.nk.addItem(d, b);
            this.nl.addItem(b, c);
            return d;
        }
        oy(a, b) {
            if (b == null) {
                return;
            }
            a.deregisterColumn(b);
            let c = this.nk.item(b);
            this.nl.removeItem(c);
            this.nk.removeItem(b);
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case "SyncLink":
                    if (this.bn != null && this.bs != null) {
                        this.mp.bu.e(this.eu);
                        this.je(false);
                    }
                    break;
                case "SeriesViewer":
                    if (c != null && d == null) {
                        if (this.l9 != null) {
                            this.l9.bx(this);
                        }
                        if (this.mu != null) {
                            this.mu.bx(this);
                        }
                    }
                    if (c == null && d != null) {
                        if (this.l9 != null) {
                            this.l9.ck(this);
                        }
                        if (this.mu != null) {
                            this.mu.ck(this);
                        }
                    }
                    this.mp.bu.e(this.eu);
                    this.je(false);
                    break;
                case "FastItemsSource":
                    this.m8 = true;
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        this.oy(typeCast(IFastItemsSource_$type, c), this.m3);
                        this.oy(typeCast(IFastItemsSource_$type, c), this.mz);
                        this.oy(typeCast(IFastItemsSource_$type, c), this.m1);
                        this.oy(typeCast(IFastItemsSource_$type, c), this.mx);
                        this.oy(typeCast(IFastItemsSource_$type, c), this.m6);
                        this.m3 = null;
                        this.mz = null;
                        this.m1 = null;
                        this.mx = null;
                        this.m6 = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        if (stringIsNullOrEmpty(this.op) == false) {
                            this.m3 = this.m4(typeCast(IFastItemsSource_$type, d), this.op, "OpenColumn");
                        }
                        if (stringIsNullOrEmpty(this.og) == false) {
                            this.mz = this.m4(typeCast(IFastItemsSource_$type, d), this.og, "HighColumn");
                        }
                        if (stringIsNullOrEmpty(this.ol) == false) {
                            this.m1 = this.m4(typeCast(IFastItemsSource_$type, d), this.ol, "LowColumn");
                        }
                        if (stringIsNullOrEmpty(this.od) == false) {
                            this.mx = this.m4(typeCast(IFastItemsSource_$type, d), this.od, "CloseColumn");
                        }
                        if (stringIsNullOrEmpty(this.ot) == false) {
                            this.m6 = this.m4(typeCast(IFastItemsSource_$type, d), this.ot, "VolumeColumn");
                        }
                    }
                    this.m8 = false;
                    if (this.mu != null && !this.mu.cn()) {
                        this.mp.bu.e(this.eu);
                        this.je(false);
                    }
                    break;
                case FinancialSeries.$$p[6]:
                    if (this.bz != null) {
                        this.oy(this.bz, this.m3);
                        this.m3 = this.m4(this.bz, this.op, "OpenColumn");
                    }
                    break;
                case "OpenColumn":
                    if (this.mu != null && !this.mu.cn() && !this.m8) {
                        this.mp.bu.e(this.eu);
                        this.je(false);
                    }
                    break;
                case FinancialSeries.$$p[1]:
                    if (this.bz != null) {
                        this.oy(this.bz, this.mz);
                        this.mz = this.m4(this.bz, this.og, "HighColumn");
                    }
                    break;
                case "HighColumn":
                    if (this.mu != null && !this.mu.cn() && !this.m8) {
                        this.mp.bu.e(this.eu);
                        this.je(false);
                    }
                    break;
                case FinancialSeries.$$p[4]:
                    if (this.bz != null) {
                        this.oy(this.bz, this.m1);
                        this.m1 = this.m4(this.bz, this.ol, "LowColumn");
                    }
                    break;
                case "LowColumn":
                    if (this.mu != null && !this.mu.cn() && !this.m8) {
                        this.mp.bu.e(this.eu);
                        this.je(false);
                    }
                    break;
                case FinancialSeries.$$p[0]:
                    if (this.bz != null) {
                        this.oy(this.bz, this.mx);
                        this.mx = this.m4(this.bz, this.od, "CloseColumn");
                    }
                    break;
                case "CloseColumn":
                    if (this.mu != null && !this.mu.cn() && !this.m8) {
                        this.mp.bu.e(this.eu);
                        this.je(false);
                    }
                    this.o3();
                    break;
                case FinancialSeries.$$p[8]:
                    if (this.bz != null) {
                        this.oy(this.bz, this.m6);
                        this.m6 = this.m4(this.bz, this.ot, "VolumeColumn");
                    }
                    break;
                case "VolumeColumn":
                    if (this.mu != null && !this.mu.cn() && !this.m8) {
                        this.mp.bu.e(this.eu);
                        this.je(false);
                    }
                    break;
                case FinancialSeries.$$p[9]:
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.ck(this);
                    }
                    this.mp.bu.e(this.eu);
                    this.je(false);
                    this.il();
                    this.mt = typeCast(ITimeRangeSelectorAxis_$type, this.l9);
                    break;
                case FinancialSeries.$$p[10]:
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.ck(this);
                    }
                    this.mp.bu.e(this.eu);
                    if (this.mu != null) {
                        this.mu.cn();
                    }
                    {
                        this.je(false);
                    }
                    this.il();
                    break;
                case "TransitionProgress":
                    this.me.c(this.ez, this.mc, this.mb);
                    if (this.cc(this.bi)) {
                        return;
                    }
                    if (this.ez == 1) {
                        this.mb.v();
                        this.o2(this.mb, this.mp);
                        if (this.dm) {
                            this.dm = false;
                            this.hx();
                            this.bt.r = truncate(this.eq());
                            this.bt.b = this.bu;
                        }
                    }
                    else {
                        this.o2(this.me, this.mp);
                    }
                    if (this.bs != null) {
                        this.bs.jk(this);
                    }
                    break;
                case FinancialSeries.$$p[5]:
                    this.je(false);
                    break;
                case "IsCustomCategoryStyleAllowed":
                    this.m9 = this.nc();
                    this.je(false);
                    break;
                case "CategoryMode":
                    if (this.l9 != null) {
                        this.l9.ku(true);
                    }
                    break;
            }
        }
        nb(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        na(a) {
            if (typeCast(CategoryXAxis.$, a) !== null || a.b7) {
                return true;
            }
            return false;
        }
        l2(a, b, c) {
            if (b < a || a < 0 || a > this.bz.count || b < 0 || b > this.bz.count || c == null) {
                return null;
            }
            let d = new Array((b - a) + 1);
            let e = c.cf;
            let f = null;
            if (e) {
                f = c.i$b;
            }
            for (let g = a; g <= b; g++) {
                let h = g;
                if (e) {
                    h = f._inner[h];
                }
                d[g - a] = this.bz.item(g);
            }
            return d;
        }
        n6(a) {
            return a.bu.b;
        }
        n8(a) {
            return a.bu.c;
        }
        l1(a, b) {
            return this.l2(a, b, this.mu);
        }
        get_nd() {
            return false;
        }
        get nd() {
            return this.get_nd();
        }
        get_cv() {
            return true;
        }
        at(a, b) {
            if (this.nd) {
                let c = this.mr(a, b, this.ms);
                this.ms = c;
                return c;
            }
            else {
                let d = this.mq(a, b, this.ms);
                this.ms = d;
                return d;
            }
        }
        oa(a) {
            let b = this.mb;
            if (this.ca()) {
                b = this.me;
            }
            let c = this.bi.br;
            let d = this.bi.bs;
            let e = this.l9;
            let f = 0;
            if (e.ch) {
                let g = (a.y - d.top) / d.height;
                f = g * c.height + c.top;
            }
            else {
                let h = (a.x - d.left) / d.width;
                f = h * c.width + c.left;
            }
            let i = b.f.count;
            let j = 0;
            for (j = 0; j < i; j++) {
                let k = b.f._inner[j];
                let l = null;
                if (j < i - 1) {
                    l = b.f._inner[j + 1];
                }
                if (k[0] <= f && l == null || l[0] >= f) {
                    if (l != null) {
                        if (Math.abs(k[0] - f) < Math.abs(l[0] - f)) {
                            return j;
                        }
                        else {
                            return j + 1;
                        }
                    }
                    else {
                        return j;
                    }
                }
            }
            return j;
        }
        mr(a, b, c) {
            let d = this.bz.count;
            let e = this.mp.bu.c;
            let f = this.mp.bu.d;
            let g = this.mp.bu.b;
            let h = this.l9;
            let i = -1;
            let j = -1;
            if (h.cf) {
                let k = this.mb;
                if (this.ca()) {
                    k = this.me;
                }
                let l = this.oa(b);
                i = l;
                j = l;
            }
            else {
                let m = this.e8(b);
                i = truncate(Math.floor((intDivide(m, g)))) * g;
                j = i + (g - 1);
            }
            if (c != null && c.f == i && c.e == j) {
                return c;
            }
            let n = new HighlightingInfo();
            n.b = this;
            n.f = i;
            n.e = j;
            return n;
        }
        mq(a, b, c) {
            let d = new HighlightingInfo();
            d.b = this;
            d.f = 0;
            d.e = this.bz.count - 1;
            if (c != null && c.f == d.f && c.e == d.e) {
                return c;
            }
            return d;
        }
        nc() {
            return this.nf;
        }
        eb(a) {
            let b = this.bi.bs;
            let c = this.bi.br;
            let d = -1;
            if (!b.isEmpty && !c.isEmpty && this.l9 != null) {
                let e = this.getEffectiveViewport1(this.bi);
                let f = new ScalerParams(0, b, c, this.l9.ca, e);
                let g = this.lr(this.bi);
                let h = this.l9.d1(g.left, f);
                let i = this.l9.d1(g.right, f);
                let j = (a.x - b.left) / b.width;
                let k = h + (j * (i - h));
                if (this.l9.categoryMode != 0) {
                    k -= 0.5;
                }
                d = k;
            }
            return d;
        }
        e8(a) {
            return truncate(Math.round(this.eb(a)));
        }
        get_c1() {
            return typeCast(ISortingAxis_$type, this.l9) !== null;
        }
        ap() {
            return this.l9;
        }
        fa(a) {
            let b = this.bi.bs;
            let c = this.bi.br;
            let d = this.getEffectiveViewport1(this.bi);
            if (b.isEmpty || c.isEmpty) {
                return -1;
            }
            let e = new Rect(0, 0, 0, 1, 1);
            let f = new ScalerParams(0, b, c, this.l9.ca, d);
            let g = typeCast(ISortingAxis_$type, this.l9);
            let h = this.lr(this.bi);
            let i = h.left;
            let j = h.right;
            let k = this.lh(a).x;
            let l = this.l9.d1(k, f);
            let m = this.l9.d1(i, f);
            let n = this.l9.d1(j, f);
            l = Math.max(m, Math.min(n, l));
            let o = g.i$f(l);
            return o;
        }
        fp(a) {
            let b = 0;
            if (typeCast(ISortingAxis_$type, this.l9) !== null) {
                b = this.fa(a);
                if (b == -1) {
                    return null;
                }
            }
            else {
                b = this.e8(a);
            }
            return b >= 0 && this.bz != null && b < this.bz.count ? this.bz.item(b) : null;
        }
        n0(a, b, c) {
            if (this.l9 == null) {
                return 0;
            }
            return this.l9.jz(a, b, c, this.fh);
        }
        dc() {
            return this.ng;
        }
        mi() {
            return 11;
        }
        bo() {
            return 3;
        }
        o2(a, b) {
            this.lq = a.aa;
            b.ar();
        }
        o0(a, b) {
            a.u();
        }
        dw(a, b, c) {
            let d = super.dw(a, b, c);
            let e = c;
            if (this.bz == null || this.bz.count == 0 || !c.l() || b.isEmpty || a.isEmpty || this.l9 == null || this.mu == null || e.bu.b < 1 || this.l9.bh == null || this.mu.bh == null || this.mu.kb == this.mu.ka || this.l9.itemsSource == null || this.l9.j5 < 1) {
                e.bu.b = 0;
                d = false;
            }
            return d;
        }
        getViewInfo(a, b) {
            b = this.bi.bs;
            a = this.bi.br;
            return {
                p0: a,
                p1: b
            };
        }
        n4(a) {
            let b = 0;
            let c = a.bs;
            let d = a.br;
            let e = this.getEffectiveViewport1(this.bi);
            if (!c.isEmpty && !d.isEmpty && this.mu != null) {
                let f = new ScalerParams(0, c, d, this.mu.ca, e);
                f.b = this.eh();
                b = this.mu.dy(this.mu.kl, f);
            }
            return b;
        }
        hx() {
            super.hx();
            this.mc.v();
            this.mb.v();
            this.me.v();
        }
        jf(a) {
            super.jf(a);
            this.mp.bu.e(this.eu);
            if (this.cc(this.bi)) {
                return;
            }
            if (this.de) {
                if (this.ca()) {
                    this.o2(this.me, this.mp);
                }
                else {
                    this.o2(this.mb, this.mp);
                }
                return;
            }
            if (this.da(a)) {
                let b = this.mc;
                if (this.ca()) {
                    if (this.bt.g) {
                        this.bt.t();
                    }
                    this.mc = this.me;
                    this.me = b;
                }
                else {
                    this.mc = this.mb;
                    this.mb = b;
                }
                this.o0(this.mb, this.mp);
                if (this.dp) {
                    this.bt.w();
                    this.bt.r = truncate(this.er());
                    this.bt.b = this.bv != null ? this.bv : this.bu;
                    this.mk.p(this.mc, this.mb, this.isVertical, this.l9, this.mu, this.mj, this.mi(), this.bp, this.bo(), () => this.n4(this.mp), this.mp.br);
                }
                this.ht();
                this.jm();
                if (this.dp) {
                    this.dn = false;
                    this.dm = true;
                }
            }
            else {
                this.o0(this.mb, this.mp);
                this.o2(this.mb, this.mp);
            }
        }
        ni(a) {
            for (let b of fromEnum(a)) {
                switch (b) {
                    case "HighColumn":
                        if (this.mz == null) {
                            return false;
                        }
                        break;
                    case "LowColumn":
                        if (this.m1 == null) {
                            return false;
                        }
                        break;
                    case "OpenColumn":
                        if (this.m3 == null) {
                            return false;
                        }
                        break;
                    case "CloseColumn":
                        if (this.mx == null) {
                            return false;
                        }
                        break;
                    case "VolumeColumn":
                        if (this.m6 == null) {
                            return false;
                        }
                        break;
                }
            }
            return true;
        }
        get nj() {
            return this.l9 != null && typeCast(ISortingAxis_$type, this.l9) !== null;
        }
        ne() {
            return this.typical != null;
        }
        ox(a) {
            this.typical(this, a);
        }
        get nr() {
            return this.no();
        }
        *_no() {
            let a = false;
            if (this.ne()) {
                let b = this.ml(0, this.bz.count);
                this.ox(new FinancialEventArgs(0, this.bz.count, b, this.mm(b), this));
                if (b.typicalColumn != null) {
                    a = true;
                    for (let c of fromEnum(b.typicalColumn)) {
                        yield c;
                    }
                }
            }
            if (!a) {
                if (this.nj && this.l9.i$b != null) {
                    let d = this.bz.count;
                    let e = this.l9.i$b;
                    for (let f = 0; f < d; ++f) {
                        yield (this.mz.item(e.item(f)) + this.m1.item(e.item(f)) + this.mx.item(e.item(f))) / 3;
                    }
                }
                else {
                    let g = this.bz.count;
                    for (let h = 0; h < g; ++h) {
                        yield (this.mz.item(h) + this.m1.item(h) + this.mx.item(h)) / 3;
                    }
                }
            }
        }
        no() {
            return toEnum(() => this._no());
        }
        get nq() {
            return this.nn();
        }
        *_nn() {
            if (this.nj && this.l9.i$b != null) {
                let a = this.mz.count;
                let b = this.l9.i$b;
                if (a > 0) {
                    yield this.n5(this.mz.item(b.item(0)) - this.m1.item(b.item(0)));
                }
                for (let c = 1; c < a; ++c) {
                    yield Math.max(this.n5(this.mz.item(b.item(c)) - this.m1.item(b.item(c))), Math.max(this.n5(Math.abs(this.mz.item(b.item(c)) - this.mx.item(b.item(c - 1)))), this.n5(Math.abs(this.m1.item(b.item(c)) - this.mx.item(b.item(c - 1))))));
                }
            }
            else {
                let d = this.mz.count;
                if (d > 0) {
                    yield this.n5(this.mz.item(0) - this.m1.item(0));
                }
                for (let e = 1; e < d; ++e) {
                    yield Math.max(this.n5(this.mz.item(e) - this.m1.item(e)), Math.max(this.n5(Math.abs(this.mz.item(e) - this.mx.item(e - 1))), this.n5(Math.abs(this.m1.item(e) - this.mx.item(e - 1)))));
                }
            }
        }
        nn() {
            return toEnum(() => this._nn());
        }
        get np() {
            return this.nm();
        }
        *_nm() {
            if (this.nj && this.l9.i$b != null) {
                let a = this.m1.count;
                let b = this.l9.i$b;
                if (a > 0) {
                    yield this.n5(this.m1.item(b.item(0)));
                }
                for (let c = 1; c < a; c++) {
                    yield Math.min(this.n5(this.m1.item(b.item(c))), this.n5(this.mx.item(b.item(c - 1))));
                }
            }
            else {
                let d = this.m1.count;
                if (d > 0) {
                    yield this.n5(this.m1.item(0));
                }
                for (let e = 1; e < d; e++) {
                    yield Math.min(this.n5(this.m1.item(e)), this.n5(this.mx.item(e - 1)));
                }
            }
        }
        nm() {
            return toEnum(() => this._nm());
        }
        nt(a) {
            if (a == null) {
                return null;
            }
            if (this.nj && this.l9.i$b != null) {
                return new SafeSortedReadOnlyDoubleCollection(0, a, this.l9.i$b);
            }
            return new SafeReadOnlyDoubleCollection(0, a);
        }
        ns() {
            let a = new List$1(String_$type, 0);
            a.add("HighColumn");
            a.add("LowColumn");
            a.add("CloseColumn");
            if (this.typicalBasedOn != null && this.bz != null && !this.m7) {
                this.m7 = true;
                let b = this.ml(0, this.bz.count);
                this.m7 = false;
                let c = new FinancialEventArgs(0, this.bz.count, b, this.mm(b), this);
                this.typicalBasedOn(this, c);
                if (c.basedOn != null && c.basedOn.count > 0) {
                    return c.basedOn;
                }
            }
            return a;
        }
        getOpenColumnAsArray() {
            if (this.m3 == null) {
                return null;
            }
            if (this.l9 != null && typeCast(ISortingAxis_$type, this.l9) !== null) {
                if (this.nx != null) {
                    return this.nx.asArray();
                }
                let a = new List$1(Number_$type, 2, this.m3.count);
                let b = this.l9.i$b;
                let c = this.m3.asArray();
                for (let d = 0; d < b.count; d++) {
                    a.add(c[b._inner[d]]);
                }
                this.nx = a;
                return this.nx.asArray();
            }
            else {
                return this.m3.asArray();
            }
        }
        getHighColumnAsArray() {
            if (this.mz == null) {
                return null;
            }
            if (this.l9 != null && typeCast(ISortingAxis_$type, this.l9) !== null) {
                if (this.nv != null) {
                    return this.nv.asArray();
                }
                let a = new List$1(Number_$type, 2, this.mz.count);
                let b = this.l9.i$b;
                let c = this.mz.asArray();
                for (let d = 0; d < b.count; d++) {
                    a.add(c[b._inner[d]]);
                }
                this.nv = a;
                return this.nv.asArray();
            }
            else {
                return this.mz.asArray();
            }
        }
        getLowColumnAsArray() {
            if (this.m1 == null) {
                return null;
            }
            if (this.l9 != null && typeCast(ISortingAxis_$type, this.l9) !== null) {
                if (this.nw != null) {
                    return this.nw.asArray();
                }
                let a = new List$1(Number_$type, 2, this.m1.count);
                let b = this.l9.i$b;
                let c = this.m1.asArray();
                for (let d = 0; d < b.count; d++) {
                    a.add(c[b._inner[d]]);
                }
                this.nw = a;
                return this.nw.asArray();
            }
            else {
                return this.m1.asArray();
            }
        }
        getCloseColumnAsArray() {
            if (this.mx == null) {
                return null;
            }
            if (this.l9 != null && typeCast(ISortingAxis_$type, this.l9) !== null) {
                if (this.nu != null) {
                    return this.nu.asArray();
                }
                let a = new List$1(Number_$type, 2, this.mx.count);
                let b = this.l9.i$b;
                let c = this.mx.asArray();
                for (let d = 0; d < b.count; d++) {
                    a.add(c[b._inner[d]]);
                }
                this.nu = a;
                return this.nu.asArray();
            }
            else {
                return this.mx.asArray();
            }
        }
        getVolumeColumnAsArray() {
            if (this.m6 == null) {
                return null;
            }
            if (this.l9 != null && typeCast(ISortingAxis_$type, this.l9) !== null) {
                if (this.ny != null) {
                    return this.ny.asArray();
                }
                let a = new List$1(Number_$type, 2, this.m6.count);
                let b = this.l9.i$b;
                let c = this.m6.asArray();
                for (let d = 0; d < b.count; d++) {
                    a.add(c[b._inner[d]]);
                }
                this.ny = a;
                return this.ny.asArray();
            }
            else {
                return this.m6.asArray();
            }
        }
        hz(a, b, c, d) {
            super.hz(a, b, c, d);
            if (this.l9 == null || !(typeCast(ISortingAxis_$type, this.l9) !== null)) {
                return;
            }
            let e = this.l9.i$b;
            switch (a) {
                case 1:
                    for (let f = b; f < c; f++) {
                        let g = e._inner[f];
                        if (this.nx != null) {
                            this.nx.insert(f, this.m3.item(g));
                        }
                        if (this.nv != null) {
                            this.nv.insert(f, this.mz.item(g));
                        }
                        if (this.nw != null) {
                            this.nw.insert(f, this.m1.item(g));
                        }
                        if (this.nu != null) {
                            this.nu.insert(f, this.mx.item(g));
                        }
                        if (this.ny != null) {
                            this.ny.insert(f, this.m6.item(g));
                        }
                    }
                    break;
                case 0:
                    if (this.nx != null) {
                        this.nx.v(b, c);
                    }
                    if (this.nv != null) {
                        this.nv.v(b, c);
                    }
                    if (this.nw != null) {
                        this.nw.v(b, c);
                    }
                    if (this.nu != null) {
                        this.nu.v(b, c);
                    }
                    if (this.ny != null) {
                        this.ny.v(b, c);
                    }
                    break;
                case 4:
                    if (this.nx != null) {
                        this.nx = new List$1(Number_$type, 0);
                    }
                    if (this.nv != null) {
                        this.nv = new List$1(Number_$type, 0);
                    }
                    if (this.nw != null) {
                        this.nw = new List$1(Number_$type, 0);
                    }
                    if (this.nu != null) {
                        this.nu = new List$1(Number_$type, 0);
                    }
                    if (this.ny != null) {
                        this.ny = new List$1(Number_$type, 0);
                    }
                    break;
                case 3:
                case 2:
                    for (let h = b; h < c; h++) {
                        let i = e._inner[h];
                        if (this.nx != null) {
                            this.nx._inner[h] = this.m3.item(i);
                        }
                        if (this.nv != null) {
                            this.nv._inner[h] = this.mz.item(i);
                        }
                        if (this.nw != null) {
                            this.nw._inner[h] = this.m1.item(i);
                        }
                        if (this.nu != null) {
                            this.nu._inner[h] = this.mx.item(i);
                        }
                        if (this.ny != null) {
                            this.ny._inner[h] = this.m6.item(i);
                        }
                    }
                    break;
            }
            this.o3();
            this.jr();
        }
        ml(a, b) {
            let c = this.nt(this.m3);
            let d = this.nt(this.mx);
            let e = this.nt(this.mz);
            let f = this.nt(this.m1);
            let g = this.nt(this.m6);
            let h = ((() => {
                let $ret = new FinancialCalculationDataSource();
                $ret.typicalColumn = new CalculatedColumn(1, new SafeEnumerable(this.nr), this.ns());
                $ret.trueRange = new CalculatedColumn(1, new SafeEnumerable(this.nq), ((() => {
                    let $ret = new List$1(String_$type, 0);
                    $ret.add("HighColumn");
                    $ret.add("LowColumn");
                    $ret.add("CloseColumn");
                    return $ret;
                })()));
                $ret.trueLow = new CalculatedColumn(1, new SafeEnumerable(this.np), ((() => {
                    let $ret = new List$1(String_$type, 0);
                    $ret.add("LowColumn");
                    $ret.add("CloseColumn");
                    return $ret;
                })()));
                $ret.openColumn = c;
                $ret.closeColumn = d;
                $ret.highColumn = e;
                $ret.lowColumn = f;
                $ret.volumeColumn = g;
                $ret.calculateFrom = a;
                $ret.calculateCount = b;
                $ret.minimumValue = NaN;
                $ret.maximumValue = NaN;
                $ret.count = this.bz != null ? this.bz.count : 0;
                return $ret;
            })());
            return h;
        }
        n5(a) {
            if (isInfinity(a) || isNaN_(a)) {
                return 0;
            }
            return a;
        }
        mm(a) {
            return ((() => {
                let $ret = new FinancialCalculationSupportingCalculations();
                $ret.a = new ColumnSupportingCalculation(1, TrendCalculators.b, new List$1(String_$type, 0));
                $ret.c = new ColumnSupportingCalculation(1, TrendCalculators.e, new List$1(String_$type, 0));
                $ret.d = new ColumnSupportingCalculation(1, TrendCalculators.f, new List$1(String_$type, 0));
                $ret.b = new ColumnSupportingCalculation(1, TrendCalculators.d, new List$1(String_$type, 0));
                $ret.h = new DataSourceSupportingCalculation(1, (b) => TrendCalculators.b(b.volumeColumn, b.shortPeriod), ((() => {
                    let $ret = new List$1(String_$type, 0);
                    $ret.add("VolumeColumn");
                    return $ret;
                })()));
                $ret.f = new DataSourceSupportingCalculation(1, (b) => TrendCalculators.b(b.volumeColumn, b.longPeriod), ((() => {
                    let $ret = new List$1(String_$type, 0);
                    $ret.add("VolumeColumn");
                    return $ret;
                })()));
                $ret.g = new DataSourceSupportingCalculation(1, (b) => TrendCalculators.b(b.typicalColumn, b.shortPeriod), a.typicalColumn.basedOn);
                $ret.e = new DataSourceSupportingCalculation(1, (b) => TrendCalculators.b(b.typicalColumn, b.longPeriod), a.typicalColumn.basedOn);
                $ret.k = Series.d1;
                $ret.j = Series.d0;
                $ret.i = runOn(this, this.n5);
                return $ret;
            })());
        }
        get categoryAxis() {
            return this.l9;
        }
        jg(a, b) {
            super.jg(a, b);
            if (!this.dl) {
                this.bi.az(b);
                return;
            }
            let c = typeCast(FinancialSeriesView.$, this.bh);
            this.bi.az(b);
            c.bu.e(this.eu);
            if (this.cc(this.bh)) {
                return;
            }
            if (!this.df) {
                this.o0(this.md, c);
            }
            this.df = false;
            this.o2(this.md, c);
            this.dl = false;
        }
        jd(a, b, c, d, e) {
            super.jd(a, b, c, d, e);
            let f = this.a0.a$h.item(d);
            let g = f;
            g.bu.e(this.eu);
            f.ay(c);
            if (this.cc(g)) {
                return;
            }
            if (this.ma == null) {
                this.ma = new CategoryFrame(3);
            }
            this.ma.u();
            this.o0(this.ma, g);
            this.o2(this.ma, g);
        }
        am(a) {
            if (this.l9 == a) {
                return this.mu;
            }
            if (this.mu == a) {
                return this.l9;
            }
            return null;
        }
        preferredCategoryMode(a) {
            let b = typeCast(IDateTimeAxis_$type, this.l9);
            return b != null ? b.preferredCategoryMode(this) : this.mg;
        }
        get mg() {
            return this.mf;
        }
        set mg(a) {
            let b = this.mg;
            if (a != b) {
                this.mf = a;
                this.raisePropertyChanged("CategoryMode", enumGetBox(CategoryMode_$type, b), enumGetBox(CategoryMode_$type, this.mg));
            }
        }
        get_cz() {
            return true;
        }
        jj(a, b) {
            super.jj(a, b);
            this.pf = a;
        }
        o3() {
            this.d8 = this.mx == null || this.mx.count == 0 ? NaN : this.mx.item(this.mx.count - 1);
        }
        fr(a) {
            if (this.mt != null && a != null) {
                if (this.mv == null || this.mv.propertyName != this.mt.dateTimeMemberPath) {
                    this.mv = new FastReflectionHelper(false, this.mt.dateTimeMemberPath);
                }
                let b = this.mv.getPropertyValue(a);
                if (typeCast(Date_$type, b) !== null) {
                    return dateToStringFormat(b, this.mt.itemLabelFormat());
                }
            }
            return super.fr(a);
        }
    }
    FinancialSeries.$t = /*@__PURE__*/ markType(FinancialSeries, 'FinancialSeries', Series.$, [IHasCategoryAxis_$type, IHasCategoryModePreference_$type]);
    FinancialSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, FinancialSeries, 'raisePropertyChanged', ['CloseMemberPath:od:o4', [2, null], 'HighMemberPath:og:o5', [2, null], 'IsCustomCategoryStyleAllowed:nf:o6', [0, false], 'IsTransitionInEnabled:ng:o7', [0, false], 'LowMemberPath:ol:o8', [2, null], 'NegativeBrush:pf:o9', [Brush.$, null], 'OpenMemberPath:op:pa', [2, null], 'TransitionInMode:mj:pb', [CategoryTransitionInMode_$type, /*@__PURE__*/ enumGetBox(CategoryTransitionInMode_$type, 0)], 'VolumeMemberPath:ot:pc', [2, null], 'XAxis:l9:pd', [CategoryAxisBase.$, null], 'YAxis:mu:pe', [NumericYAxis.$, null]]);
    return FinancialSeries;
})();
/**
 * @hidden
 */
export let FinancialCalculationSupportingCalculations = /*@__PURE__*/ (() => {
    class FinancialCalculationSupportingCalculations extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.c = null;
            this.d = null;
            this.b = null;
            this.h = null;
            this.f = null;
            this.g = null;
            this.e = null;
            this.k = null;
            this.j = null;
            this.i = null;
        }
    }
    FinancialCalculationSupportingCalculations.$t = /*@__PURE__*/ markType(FinancialCalculationSupportingCalculations, 'FinancialCalculationSupportingCalculations');
    return FinancialCalculationSupportingCalculations;
})();
/**
 * @hidden
 */
export let DataSourceSupportingCalculation = /*@__PURE__*/ (() => {
    class DataSourceSupportingCalculation extends SupportingCalculation$1 {
        constructor(a, ..._rest) {
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        super(Delegate_$type, 0, c);
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        super(Delegate_$type, 1, c, d);
                    }
                    break;
            }
        }
    }
    DataSourceSupportingCalculation.$t = /*@__PURE__*/ markType(DataSourceSupportingCalculation, 'DataSourceSupportingCalculation', /*@__PURE__*/ SupportingCalculation$1.$.specialize(Delegate_$type));
    return DataSourceSupportingCalculation;
})();
/**
 * @hidden
 */
export let FinancialCalculationDataSource = /*@__PURE__*/ (() => {
    class FinancialCalculationDataSource extends Base {
        constructor() {
            super(...arguments);
            this._openColumn = null;
            this._closeColumn = null;
            this._highColumn = null;
            this._lowColumn = null;
            this._volumeColumn = null;
            this._indicatorColumn = null;
            this._typicalColumn = null;
            this._trueRange = null;
            this._trueLow = null;
            this._period = 0;
            this._shortPeriod = 0;
            this._longPeriod = 0;
            this._count = 0;
            this._calculateFrom = 0;
            this._calculateCount = 0;
            this._multiplier = 0;
            this._minimumValue = 0;
            this._maximumValue = 0;
            this._specifiesRange = false;
            this._series = null;
        }
        get openColumn() {
            return this._openColumn;
        }
        set openColumn(a) {
            this._openColumn = a;
        }
        get closeColumn() {
            return this._closeColumn;
        }
        set closeColumn(a) {
            this._closeColumn = a;
        }
        get highColumn() {
            return this._highColumn;
        }
        set highColumn(a) {
            this._highColumn = a;
        }
        get lowColumn() {
            return this._lowColumn;
        }
        set lowColumn(a) {
            this._lowColumn = a;
        }
        get volumeColumn() {
            return this._volumeColumn;
        }
        set volumeColumn(a) {
            this._volumeColumn = a;
        }
        get indicatorColumn() {
            return this._indicatorColumn;
        }
        set indicatorColumn(a) {
            this._indicatorColumn = a;
        }
        get typicalColumn() {
            return this._typicalColumn;
        }
        set typicalColumn(a) {
            this._typicalColumn = a;
        }
        get trueRange() {
            return this._trueRange;
        }
        set trueRange(a) {
            this._trueRange = a;
        }
        get trueLow() {
            return this._trueLow;
        }
        set trueLow(a) {
            this._trueLow = a;
        }
        get period() {
            return this._period;
        }
        set period(a) {
            this._period = a;
        }
        get shortPeriod() {
            return this._shortPeriod;
        }
        set shortPeriod(a) {
            this._shortPeriod = a;
        }
        get longPeriod() {
            return this._longPeriod;
        }
        set longPeriod(a) {
            this._longPeriod = a;
        }
        get count() {
            return this._count;
        }
        set count(a) {
            this._count = a;
        }
        get calculateFrom() {
            return this._calculateFrom;
        }
        set calculateFrom(a) {
            this._calculateFrom = a;
        }
        get calculateCount() {
            return this._calculateCount;
        }
        set calculateCount(a) {
            this._calculateCount = a;
        }
        get multiplier() {
            return this._multiplier;
        }
        set multiplier(a) {
            this._multiplier = a;
        }
        get minimumValue() {
            return this._minimumValue;
        }
        set minimumValue(a) {
            this._minimumValue = a;
        }
        get maximumValue() {
            return this._maximumValue;
        }
        set maximumValue(a) {
            this._maximumValue = a;
        }
        get specifiesRange() {
            return this._specifiesRange;
        }
        set specifiesRange(a) {
            this._specifiesRange = a;
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
    }
    FinancialCalculationDataSource.$t = /*@__PURE__*/ markType(FinancialCalculationDataSource, 'FinancialCalculationDataSource');
    return FinancialCalculationDataSource;
})();
/**
 * @hidden
 */
export let FinancialSeriesView = /*@__PURE__*/ (() => {
    class FinancialSeriesView extends SeriesView {
        constructor(a) {
            super(a);
            this.bw = null;
            this.bu = null;
            this.by = 0;
            this.by = -1;
            this.bw = a;
            this.bu = this.bv();
        }
        bx(a) {
            if (this.by != a.t) {
                return true;
            }
            return false;
        }
        bz(a) {
            this.by = a.t;
        }
        ap() {
            super.ap();
            if (!this.n) {
                this.e.bj = 6;
            }
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'>";
            if (this.bw.l9.b7) {
                a += "<span>${itemLabel}</span><br/>";
            }
            else if (this.bw.l9.e9 != null) {
                a += "<span>${item." + this.bw.l9.e9 + "}</span><br/>";
            }
            a += "<span class='ui-priority-primary'";
            let b = this.e.a0.a$q(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            let c = new SRProvider(this.t);
            let d = c.al("financialSeries_Open");
            let e = c.al("financialSeries_High");
            let f = c.al("financialSeries_Low");
            let g = c.al("financialSeries_Close");
            d = stringIsNullOrEmpty(d) ? "Open" : d;
            e = stringIsNullOrEmpty(e) ? "High" : e;
            f = stringIsNullOrEmpty(f) ? "Low" : f;
            g = stringIsNullOrEmpty(g) ? "Close" : g;
            a += ">" + this.bw.fx + "</span><table><tr><td>" + d + ":</td><td>" + "${item." + this.bw.op + "}</td></tr><tr><td>" + e + ":</td><td>" + "${item." + this.bw.og + "}</td></tr><tr><td>" + f + ":</td><td>" + "${item." + this.bw.ol + "}</td></tr><tr><td>" + g + ":</td><td>" + "${item." + this.bw.od + "}</td></tr>";
            if (!stringIsNullOrEmpty(this.bw.ot)) {
                let h = c.al("financialSeries_Volume");
                h = stringIsNullOrEmpty(h) ? "Volume" : h;
                a += "<tr><td>" + h + ":</td><td>" + "${item." + this.bw.ot + "}</td></tr>";
            }
            a += "</table></div>";
            return a;
        }
        ac() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.lb = a;
            this.e.ev = 5;
            this.e.ew = 2;
            this.e.ex = 2;
        }
    }
    FinancialSeriesView.$t = /*@__PURE__*/ markType(FinancialSeriesView, 'FinancialSeriesView', SeriesView.$);
    return FinancialSeriesView;
})();
//# sourceMappingURL=FinancialEventArgs_combined.js.map
