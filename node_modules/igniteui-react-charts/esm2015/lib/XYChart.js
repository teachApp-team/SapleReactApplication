/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DomainChart } from "./DomainChart";
import { fromEnum, enumGetBox, markType } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { VerticalAlignment_$type } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { AxisLabelsLocation_$type } from "./AxisLabelsLocation";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { TitleSettings } from "./TitleSettings";
import { ScalerParams } from "./ScalerParams";
/**
 * @hidden
 */
export let XYChart = /*@__PURE__*/ (() => {
    class XYChart extends DomainChart {
        constructor() {
            super(...arguments);
            this.ig = null;
            this.ih = null;
            this.iu = 0;
            this.iw = 5;
            this.iv = 0;
            this.it = 5;
            this.jb = 5;
            this.jd = 0;
            this.jc = 5;
            this.ja = 0;
            this.nx = null;
            this.n4 = null;
            this.i5 = 0;
            this.jm = 0;
            this.i4 = NaN;
            this.jl = NaN;
            this.i7 = NaN;
            this.jo = NaN;
            this.i6 = NaN;
            this.jn = NaN;
            this.i3 = NaN;
            this.jk = NaN;
            this.n3 = null;
            this.oa = null;
            this.kw = null;
            this.k0 = null;
            this.ky = null;
            this.k2 = null;
            this.kr = null;
            this.ks = null;
            this.ny = null;
            this.n5 = null;
            this.ix = 1;
            this.je = 1;
            this.iy = 1;
            this.jf = 0;
            this.n0 = null;
            this.n7 = null;
            this.n1 = null;
            this.n8 = null;
            this.iz = 1;
            this.jg = 1;
            this.i0 = 5;
            this.jh = 0;
            this.n2 = null;
            this.n9 = null;
            this.i1 = 2;
            this.ji = 2;
            this.kx = null;
            this.k1 = null;
            this.nz = null;
            this.n6 = null;
            this.is = 0;
            this.i9 = 0;
            this.ir = NaN;
            this.i8 = NaN;
            this.i2 = 0;
            this.jj = -90;
            this.im = false;
            this.io = false;
            this.ns = 1;
            this.or = 1;
            this.nr = 1;
            this.nt = 2;
            this.op = 0;
            this.oq = 1;
            this.ov = 0;
            this.ow = 0;
            this.ik = 2;
            this.kv = null;
            this.h9 = null;
            this.kz = null;
            this.ia = null;
        }
        provideContainer(a) {
            if (a != null) {
                let b = this.id();
                let c = this.ie();
                if (b != null) {
                    b.provideRenderer(a);
                }
                if (c != null) {
                    c.provideRenderer(a);
                }
            }
            super.provideContainer(a);
        }
        gj() {
            super.gj();
            let a = this.id();
            let b = this.ie();
            if (a != null && a.ax != null) {
                this.ob = a.ax.textColor;
            }
            if (b != null && b.ax != null) {
                this.oi = b.ax.textColor;
            }
        }
        g4(a, b, c) {
            super.g4(a, b, c);
            switch (a) {
                case "XAxisLabelLeftMargin":
                    this.nl((d) => d.leftMargin = this.jw);
                    break;
                case "XAxisLabelTopMargin":
                    this.nl((d) => d.topMargin = this.jy);
                    break;
                case "XAxisLabelRightMargin":
                    this.nl((d) => d.rightMargin = this.jx);
                    break;
                case "XAxisLabelBottomMargin":
                    this.nl((d) => d.bottomMargin = this.jv);
                    break;
                case "YAxisLabelLeftMargin":
                    this.np((d) => d.leftMargin = this.kd);
                    break;
                case "YAxisLabelTopMargin":
                    this.np((d) => d.topMargin = this.kf);
                    break;
                case "YAxisLabelRightMargin":
                    this.np((d) => d.rightMargin = this.ke);
                    break;
                case "YAxisLabelBottomMargin":
                    this.np((d) => d.bottomMargin = this.kc);
                    break;
                case "XAxisLabelTextColor":
                    this.nl((d) => d.textColor = this.ob);
                    break;
                case "YAxisLabelTextColor":
                    this.np((d) => d.textColor = this.oi);
                    break;
                case "XAxisTitleMargin":
                    this.nm((d) => d.margin = this.j7);
                    break;
                case "YAxisTitleMargin":
                    this.nq((d) => d.margin = this.ko);
                    break;
                case "XAxisTitleLeftMargin":
                    this.nm((d) => d.leftMargin = this.j6);
                    break;
                case "YAxisTitleLeftMargin":
                    this.nq((d) => d.leftMargin = this.kn);
                    break;
                case "XAxisTitleTopMargin":
                    this.nm((d) => d.topMargin = this.j9);
                    break;
                case "YAxisTitleTopMargin":
                    this.nq((d) => d.topMargin = this.kq);
                    break;
                case "XAxisTitleRightMargin":
                    this.nm((d) => d.rightMargin = this.j8);
                    break;
                case "YAxisTitleRightMargin":
                    this.nq((d) => d.rightMargin = this.kp);
                    break;
                case "XAxisTitleBottomMargin":
                    this.nm((d) => d.bottomMargin = this.j5);
                    break;
                case "YAxisTitleBottomMargin":
                    this.nq((d) => d.bottomMargin = this.km);
                    break;
                case "XAxisTitleTextColor":
                    this.nm((d) => d.textColor = this.oh);
                    break;
                case "YAxisTitleTextColor":
                    this.nq((d) => d.textColor = this.oo);
                    break;
                case "XAxisFormatLabel":
                    this.nj((d) => d.as = this.ii);
                    break;
                case "YAxisFormatLabel":
                    this.nn((d) => d.as = this.ij);
                    break;
            }
        }
        get ii() {
            return this.ig;
        }
        set ii(a) {
            let b = this.ii;
            if (a != b) {
                this.ig = a;
                this.g3("XAxisFormatLabel", b, this.ii);
            }
        }
        get ij() {
            return this.ih;
        }
        set ij(a) {
            let b = this.ij;
            if (a != b) {
                this.ih = a;
                this.g3("YAxisFormatLabel", b, this.ij);
            }
        }
        get jw() {
            return this.iu;
        }
        set jw(a) {
            let b = this.jw;
            if (a != b) {
                this.iu = a;
                this.g3("XAxisLabelLeftMargin", b, this.jw);
            }
        }
        get jy() {
            return this.iw;
        }
        set jy(a) {
            let b = this.jy;
            if (a != b) {
                this.iw = a;
                this.g3("XAxisLabelTopMargin", b, this.jy);
            }
        }
        get jx() {
            return this.iv;
        }
        set jx(a) {
            let b = this.jx;
            if (a != b) {
                this.iv = a;
                this.g3("XAxisLabelRightMargin", b, this.jx);
            }
        }
        get jv() {
            return this.it;
        }
        set jv(a) {
            let b = this.jv;
            if (a != b) {
                this.it = a;
                this.g3("XAxisLabelBottomMargin", b, this.jv);
            }
        }
        get kd() {
            return this.jb;
        }
        set kd(a) {
            let b = this.kd;
            if (a != b) {
                this.jb = a;
                this.g3("YAxisLabelLeftMargin", b, this.kd);
            }
        }
        get kf() {
            return this.jd;
        }
        set kf(a) {
            let b = this.kf;
            if (a != b) {
                this.jd = a;
                this.g3("YAxisLabelTopMargin", b, this.kf);
            }
        }
        get ke() {
            return this.jc;
        }
        set ke(a) {
            let b = this.ke;
            if (a != b) {
                this.jc = a;
                this.g3("YAxisLabelRightMargin", b, this.ke);
            }
        }
        get kc() {
            return this.ja;
        }
        set kc(a) {
            let b = this.kc;
            if (a != b) {
                this.ja = a;
                this.g3("YAxisLabelBottomMargin", b, this.kc);
            }
        }
        get ob() {
            return this.nx;
        }
        set ob(a) {
            let b = this.ob;
            if (a != b) {
                this.nx = a;
                this.g3("XAxisLabelTextColor", b, this.ob);
            }
        }
        get oi() {
            return this.n4;
        }
        set oi(a) {
            let b = this.oi;
            if (a != b) {
                this.n4 = a;
                this.g3("YAxisLabelTextColor", b, this.oi);
            }
        }
        get j7() {
            return this.i5;
        }
        set j7(a) {
            let b = this.j7;
            if (a != b) {
                this.i5 = a;
                this.g3("XAxisTitleMargin", b, this.j7);
            }
        }
        get ko() {
            return this.jm;
        }
        set ko(a) {
            let b = this.ko;
            if (a != b) {
                this.jm = a;
                this.g3("YAxisTitleMargin", b, this.ko);
            }
        }
        get j6() {
            return this.i4;
        }
        set j6(a) {
            let b = this.j6;
            if (a != b) {
                this.i4 = a;
                this.g3("XAxisTitleLeftMargin", b, this.j6);
            }
        }
        get kn() {
            return this.jl;
        }
        set kn(a) {
            let b = this.kn;
            if (a != b) {
                this.jl = a;
                this.g3("YAxisTitleLeftMargin", b, this.kn);
            }
        }
        get j9() {
            return this.i7;
        }
        set j9(a) {
            let b = this.j9;
            if (a != b) {
                this.i7 = a;
                this.g3("XAxisTitleTopMargin", b, this.j9);
            }
        }
        get kq() {
            return this.jo;
        }
        set kq(a) {
            let b = this.kq;
            if (a != b) {
                this.jo = a;
                this.g3("YAxisTitleTopMargin", b, this.kq);
            }
        }
        get j8() {
            return this.i6;
        }
        set j8(a) {
            let b = this.j8;
            if (a != b) {
                this.i6 = a;
                this.g3("XAxisTitleRightMargin", b, this.j8);
            }
        }
        get kp() {
            return this.jn;
        }
        set kp(a) {
            let b = this.kp;
            if (a != b) {
                this.jn = a;
                this.g3("YAxisTitleRightMargin", b, this.kp);
            }
        }
        get j5() {
            return this.i3;
        }
        set j5(a) {
            let b = this.j5;
            if (a != b) {
                this.i3 = a;
                this.g3("XAxisTitleBottomMargin", b, this.j5);
            }
        }
        get km() {
            return this.jk;
        }
        set km(a) {
            let b = this.km;
            if (a != b) {
                this.jk = a;
                this.g3("YAxisTitleBottomMargin", b, this.km);
            }
        }
        get oh() {
            return this.n3;
        }
        set oh(a) {
            let b = this.oh;
            if (a != b) {
                this.n3 = a;
                this.g3("XAxisTitleTextColor", b, this.oh);
            }
        }
        get oo() {
            return this.oa;
        }
        set oo(a) {
            let b = this.oo;
            if (a != b) {
                this.oa = a;
                this.g3("YAxisTitleTextColor", b, this.oo);
            }
        }
        g5(a, b, c) {
            super.g5(a, b, c);
            switch (a) {
                case "XAxisLabelTextStyle":
                    this.nl((d) => d.textStyle = this.lh);
                    break;
                case "YAxisLabelTextStyle":
                    this.np((d) => d.textStyle = this.mm);
                    break;
                case "XAxisTitleTextStyle":
                    this.nm((d) => d.textStyle = this.l5);
                    break;
                case "YAxisTitleTextStyle":
                    this.nq((d) => d.textStyle = this.na);
                    break;
            }
        }
        get lh() {
            return this.kw;
        }
        set lh(a) {
            let b = this.lh;
            if (a != b) {
                this.kw = a;
                this.g3("XAxisLabelTextStyle", b, this.lh);
            }
        }
        get mm() {
            return this.k0;
        }
        set mm(a) {
            let b = this.mm;
            if (a != b) {
                this.k0 = a;
                this.g3("YAxisLabelTextStyle", b, this.mm);
            }
        }
        get l5() {
            return this.ky;
        }
        set l5(a) {
            let b = this.l5;
            if (a != b) {
                this.ky = a;
                this.g3("XAxisTitleTextStyle", b, this.l5);
            }
        }
        get na() {
            return this.k2;
        }
        set na(a) {
            let b = this.na;
            if (a != b) {
                this.k2 = a;
                this.g3("YAxisTitleTextStyle", b, this.na);
            }
        }
        ng(a) {
            this.nd(a, (b) => b.leftMargin = this.jw);
            this.nd(a, (b) => b.topMargin = this.jy);
            this.nd(a, (b) => b.rightMargin = this.jx);
            this.nd(a, (b) => b.bottomMargin = this.jv);
            this.nd(a, (b) => b.textColor = this.ob);
            this.ne(a, (b) => b.textColor = this.oh);
            this.ne(a, (b) => b.leftMargin = this.j6);
            this.ne(a, (b) => b.topMargin = this.j9);
            this.ne(a, (b) => b.rightMargin = this.j8);
            this.ne(a, (b) => b.bottomMargin = this.j5);
            this.nd(a, (b) => b.textStyle = this.lh);
            this.ne(a, (b) => b.textStyle = this.l5);
        }
        ni(a) {
            this.nd(a, (b) => b.leftMargin = this.kd);
            this.nd(a, (b) => b.topMargin = this.kf);
            this.nd(a, (b) => b.rightMargin = this.ke);
            this.nd(a, (b) => b.bottomMargin = this.kc);
            this.nd(a, (b) => b.textColor = this.oi);
            this.ne(a, (b) => b.textColor = this.oo);
            this.ne(a, (b) => b.leftMargin = this.kn);
            this.ne(a, (b) => b.topMargin = this.kq);
            this.ne(a, (b) => b.rightMargin = this.kp);
            this.ne(a, (b) => b.bottomMargin = this.km);
            this.nd(a, (b) => b.textStyle = this.mm);
            this.ne(a, (b) => b.textStyle = this.na);
        }
        hk(a) {
            let b = this.u(a);
            let c = this.aq(a, b);
            if (c == null) {
                return;
            }
            c.itemsSource = a.data;
            c.name = this.el(a);
            c.fx = this.em(a, b);
            this.dataChart.series.add(c);
        }
        nj(a) {
            this.nk(a, null);
        }
        nk(a, b) {
            a(this.id());
        }
        no(a, b) {
            a(this.ie());
        }
        nn(a) {
            this.no(a, true);
        }
        nm(a) {
            this.ne(this.id(), a);
        }
        nq(a) {
            this.ne(this.ie(), a);
        }
        np(a) {
            this.nd(this.ie(), a);
        }
        nl(a) {
            this.nd(this.id(), a);
        }
        jp(a) {
            let b = this.id();
            return b.dy(a, new ScalerParams(1, this.h8, this.h7, b.ca));
        }
        jr(a) {
            let b = this.id();
            return b.d1(a, new ScalerParams(1, this.h8, this.h7, b.ca));
        }
        jq(a) {
            let b = this.ie();
            return b.dy(a, new ScalerParams(1, this.h8, this.h7, b.ca));
        }
        js(a) {
            let b = this.ie();
            return b.d1(a, new ScalerParams(1, this.h8, this.h7, b.ca));
        }
        hi(a) {
            super.hi(a);
            if (a == null) {
                return;
            }
            if (a.axes != null) {
                let b = this.id();
                let c = this.ie();
                if (a.axes.contains(b)) {
                    a.axes.remove(b);
                }
                if (a.axes.contains(c)) {
                    a.axes.remove(c);
                }
            }
        }
        static k3(a, b) {
            for (let c of fromEnum(b)) {
                let d = c.findMatchingHint(16);
                if (d != null) {
                    let e = d.path;
                    return e;
                }
            }
            return null;
        }
        ge(a) {
            super.ge(a);
            if (a == this.dataChart) {
                this.dataChart.axes.add(this.id());
                this.dataChart.axes.add(this.ie());
            }
        }
        nf(a) {
            if (a != null && this.di != null && a.eu == null) {
                a.provideRenderer(this.di);
            }
            a.ir = this.oc;
            a.d5 = this.jz;
            a.is = this.od;
            a.d8 = this.j0;
            a.iu = this.of;
            a.ep = this.j1;
            a.it = this.oe;
            a.eq = this.j2;
            a.iv = this.og;
            a.er = this.j3;
            a.cq = true;
            let b = a == this.id();
            if (b) {
                a.gc = this.lw;
            }
            a.e9 = this.kt;
            a.fo = this.k9;
            a.ag = this.ib;
            this.nd(a, (c) => c.angle = this.ju);
            this.nd(a, (c) => {
                if (c.extent != this.jt) {
                    c.extent = this.jt;
                }
            });
            this.nd(a, (c) => c.horizontalAlignment = this.nu);
            this.nd(a, (c) => c.verticalAlignment = this.os);
            this.nd(a, (c) => c.visibility = this.ox);
            this.ne(a, (c) => c.horizontalAlignment = this.nv);
            this.ne(a, (c) => c.angle = this.j4);
            this.ng(a);
        }
        nh(a) {
            if (a == null) {
                return;
            }
            if (this.di != null && a.eu == null) {
                a.provideRenderer(this.di);
            }
            this.nd(a, (b) => b.angle = this.kb);
            this.nd(a, (b) => {
                if (b.extent != this.ka) {
                    b.extent = this.ka;
                }
            });
            this.nd(a, (b) => b.horizontalAlignment = this.nw);
            this.nd(a, (b) => b.verticalAlignment = this.ot);
            this.nd(a, (b) => b.visibility = this.oy);
            this.nd(a, (b) => b.location = this.il);
            this.ne(a, (b) => b.verticalAlignment = this.ou);
            this.ne(a, (b) => b.angle = this.kl);
            a.ir = this.oj;
            a.d5 = this.kg;
            a.is = this.ok;
            a.d8 = this.kh;
            a.iu = this.om;
            a.ep = this.ki;
            a.it = this.ol;
            a.eq = this.kj;
            a.iv = this.on;
            a.er = this.kk;
            let b = a == this.ie();
            if (b) {
                a.gc = this.m1;
            }
            a.fo = this.md;
            a.ag = this.ic;
            this.ni(a);
        }
        gb() {
            super.gb();
            this.nf(this.id());
            this.nh(this.ie());
        }
        nd(a, b) {
            if (a == null) {
                return;
            }
            if (a.ax == null) {
                a.ax = new AxisLabelSettings();
                a.ax.angle = a.dm();
                a.ax.bottomMargin = a.dn();
                a.ax.leftMargin = a.dp();
                a.ax.rightMargin = a.dq();
                a.ax.topMargin = a.dr();
                a.ax.horizontalAlignment = a.il();
                a.ax.location = a.ay();
                a.ax.verticalAlignment = a.jf();
            }
            b(a.ax);
        }
        ne(a, b) {
            if (a == null) {
                return;
            }
            if (a.bd == null) {
                a.bd = new TitleSettings();
                a.bd.bottomMargin = a.dt();
                a.bd.leftMargin = a.du();
                a.bd.rightMargin = a.dv();
                a.bd.topMargin = a.dw();
                a.bd.location = a.az();
                a.bd.angle = a.ds();
                a.bd.horizontalAlignment = a.im();
                a.bd.verticalAlignment = a.jg();
            }
            b(a.bd);
        }
        g3(a, b, c) {
            super.g3(a, b, c);
            switch (a) {
                case "XAxisLabelAngle":
                    this.nl((d) => d.angle = this.ju);
                    break;
                case "YAxisLabelAngle":
                    this.np((d) => d.angle = this.kb);
                    break;
                case "XAxisLabelHorizontalAlignment":
                    this.nl((d) => d.horizontalAlignment = this.nu);
                    break;
                case "YAxisLabelHorizontalAlignment":
                    this.np((d) => d.horizontalAlignment = this.nw);
                    break;
                case "XAxisLabelVerticalAlignment":
                    this.nl((d) => d.verticalAlignment = this.os);
                    break;
                case "YAxisLabelVerticalAlignment":
                    this.np((d) => d.verticalAlignment = this.ot);
                    break;
                case "XAxisLabelVisibility":
                    this.nl((d) => d.visibility = this.ox);
                    break;
                case "YAxisLabelVisibility":
                    this.np((d) => d.visibility = this.oy);
                    break;
                case "XAxisLabel":
                    this.nj((d) => d.e9 = this.kt);
                    break;
                case "YAxisLabel":
                    this.nn((d) => d.e9 = this.ku);
                    break;
                case "XAxisLabelFormat":
                    this.nj((d) => d.fo = this.k9);
                    break;
                case "XAxisLabelFormatSpecifiers":
                    this.nj((d) => d.ag = this.ib);
                    break;
                case "YAxisLabelFormat":
                    this.nn((d) => d.fo = this.md);
                    break;
                case "YAxisLabelFormatSpecifiers":
                    this.nn((d) => d.ag = this.ic);
                    break;
                case "XAxisTitleAngle":
                    this.nm((d) => d.angle = this.j4);
                    break;
                case "YAxisTitleAngle":
                    this.nq((d) => d.angle = this.kl);
                    break;
                case "XAxisTitleAlignment":
                    this.nm((d) => d.horizontalAlignment = this.nv);
                    break;
                case "YAxisTitleAlignment":
                    this.nq((d) => d.verticalAlignment = this.ou);
                    break;
                case "XAxisTitle":
                    this.nj((d) => d.gc = this.lw);
                    break;
                case "YAxisTitle":
                    this.no((d) => d.gc = this.m1, false);
                    break;
                case "XAxisMajorStroke":
                    this.nk((d) => d.ir = this.oc, a);
                    break;
                case "YAxisMajorStroke":
                    this.nn((d) => d.ir = this.oj);
                    break;
                case "XAxisMajorStrokeThickness":
                    this.nk((d) => d.d5 = this.jz, a);
                    break;
                case "YAxisMajorStrokeThickness":
                    this.nn((d) => d.d5 = this.kg);
                    break;
                case "XAxisMinorStroke":
                    this.nj((d) => d.is = this.od);
                    break;
                case "YAxisMinorStroke":
                    this.nn((d) => d.is = this.ok);
                    break;
                case "XAxisMinorStrokeThickness":
                    this.nj((d) => d.d8 = this.j0);
                    break;
                case "YAxisMinorStrokeThickness":
                    this.nn((d) => d.d8 = this.kh);
                    break;
                case "XAxisTickLength":
                    this.nj((d) => d.eq = this.j2);
                    break;
                case "YAxisTickLength":
                    this.nn((d) => d.eq = this.kj);
                    break;
                case "XAxisTickStroke":
                    this.nj((d) => d.iv = this.og);
                    break;
                case "YAxisTickStroke":
                    this.nn((d) => d.iv = this.on);
                    break;
                case "XAxisTickStrokeThickness":
                    this.nj((d) => d.er = this.j3);
                    break;
                case "YAxisTickStrokeThickness":
                    this.nn((d) => d.er = this.kk);
                    break;
                case "XAxisStroke":
                    this.nj((d) => d.iu = this.of);
                    break;
                case "YAxisStroke":
                    this.nn((d) => d.iu = this.om);
                    break;
                case "XAxisStrokeThickness":
                    this.nj((d) => d.ep = this.j1);
                    break;
                case "YAxisStrokeThickness":
                    this.nn((d) => d.ep = this.ki);
                    break;
                case "XAxisExtent":
                    this.nl((d) => d.extent = this.jt);
                    break;
                case "YAxisExtent":
                    this.np((d) => d.extent = this.ka);
                    break;
                case "XAxisStrip":
                    this.nj((d) => d.it = this.oe);
                    break;
                case "YAxisStrip":
                    this.nn((d) => d.it = this.ol);
                    break;
                case "XAxisInverted":
                    this.nj((d) => d.ca = this.ip);
                    break;
                case "YAxisInverted":
                    this.nn((d) => d.ca = this.iq);
                    break;
                case "YAxisLabelLocation":
                    this.np((d) => d.location = this.il);
                    break;
            }
        }
        get kt() {
            return this.kr;
        }
        set kt(a) {
            let b = this.kt;
            if (a != b) {
                this.kr = a;
                this.g3("XAxisLabel", b, this.kt);
            }
        }
        get ku() {
            return this.ks;
        }
        set ku(a) {
            let b = this.ku;
            if (a != b) {
                this.ks = a;
                this.g3("YAxisLabel", b, this.ku);
            }
        }
        get oc() {
            return this.ny;
        }
        set oc(a) {
            let b = this.oc;
            if (a != b) {
                this.ny = a;
                this.g3("XAxisMajorStroke", b, this.oc);
            }
        }
        get oj() {
            return this.n5;
        }
        set oj(a) {
            let b = this.oj;
            if (a != b) {
                this.n5 = a;
                this.g3("YAxisMajorStroke", b, this.oj);
            }
        }
        get jz() {
            return this.ix;
        }
        set jz(a) {
            let b = this.jz;
            if (a != b) {
                this.ix = a;
                this.g3("XAxisMajorStrokeThickness", b, this.jz);
            }
        }
        get kg() {
            return this.je;
        }
        set kg(a) {
            let b = this.kg;
            if (a != b) {
                this.je = a;
                this.g3("YAxisMajorStrokeThickness", b, this.kg);
            }
        }
        get j0() {
            return this.iy;
        }
        set j0(a) {
            let b = this.j0;
            if (a != b) {
                this.iy = a;
                this.g3("XAxisMinorStrokeThickness", b, this.j0);
            }
        }
        get kh() {
            return this.jf;
        }
        set kh(a) {
            let b = this.kh;
            if (a != b) {
                this.jf = a;
                this.g3("YAxisMinorStrokeThickness", b, this.kh);
            }
        }
        get oe() {
            return this.n0;
        }
        set oe(a) {
            let b = this.oe;
            if (a != b) {
                this.n0 = a;
                this.g3("XAxisStrip", b, this.oe);
            }
        }
        get ol() {
            return this.n7;
        }
        set ol(a) {
            let b = this.ol;
            if (a != b) {
                this.n7 = a;
                this.g3("YAxisStrip", b, this.ol);
            }
        }
        get of() {
            return this.n1;
        }
        set of(a) {
            let b = this.of;
            if (a != b) {
                this.n1 = a;
                this.g3("XAxisStroke", b, this.of);
            }
        }
        get om() {
            return this.n8;
        }
        set om(a) {
            let b = this.om;
            if (a != b) {
                this.n8 = a;
                this.g3("YAxisStroke", b, this.om);
            }
        }
        get j1() {
            return this.iz;
        }
        set j1(a) {
            let b = this.j1;
            if (a != b) {
                this.iz = a;
                this.g3("XAxisStrokeThickness", b, this.j1);
            }
        }
        get ki() {
            return this.jg;
        }
        set ki(a) {
            let b = this.ki;
            if (a != b) {
                this.jg = a;
                this.g3("YAxisStrokeThickness", b, this.ki);
            }
        }
        get j2() {
            return this.i0;
        }
        set j2(a) {
            let b = this.j2;
            if (a != b) {
                this.i0 = a;
                this.g3("XAxisTickLength", b, this.j2);
            }
        }
        get kj() {
            return this.jh;
        }
        set kj(a) {
            let b = this.kj;
            if (a != b) {
                this.jh = a;
                this.g3("YAxisTickLength", b, this.kj);
            }
        }
        get og() {
            return this.n2;
        }
        set og(a) {
            let b = this.og;
            if (a != b) {
                this.n2 = a;
                this.g3("XAxisTickStroke", b, this.og);
            }
        }
        get on() {
            return this.n9;
        }
        set on(a) {
            let b = this.on;
            if (a != b) {
                this.n9 = a;
                this.g3("YAxisTickStroke", b, this.on);
            }
        }
        get j3() {
            return this.i1;
        }
        set j3(a) {
            let b = this.j3;
            if (a != b) {
                this.i1 = a;
                this.g3("XAxisTickStrokeThickness", b, this.j3);
            }
        }
        get kk() {
            return this.ji;
        }
        set kk(a) {
            let b = this.kk;
            if (a != b) {
                this.ji = a;
                this.g3("YAxisTickStrokeThickness", b, this.kk);
            }
        }
        get lw() {
            return this.kx;
        }
        set lw(a) {
            let b = this.lw;
            if (a != b) {
                this.kx = a;
                this.g3("XAxisTitle", b, this.lw);
            }
        }
        get m1() {
            return this.k1;
        }
        set m1(a) {
            let b = this.m1;
            if (a != b) {
                this.k1 = a;
                this.g3("YAxisTitle", b, this.m1);
            }
        }
        get od() {
            return this.nz;
        }
        set od(a) {
            let b = this.od;
            if (a != b) {
                this.nz = a;
                this.g3("XAxisMinorStroke", b, this.od);
            }
        }
        get ok() {
            return this.n6;
        }
        set ok(a) {
            let b = this.ok;
            if (a != b) {
                this.n6 = a;
                this.g3("YAxisMinorStroke", b, this.ok);
            }
        }
        get ju() {
            return this.is;
        }
        set ju(a) {
            let b = this.ju;
            if (a != b) {
                this.is = a;
                this.g3("XAxisLabelAngle", b, this.ju);
            }
        }
        get kb() {
            return this.i9;
        }
        set kb(a) {
            let b = this.kb;
            if (a != b) {
                this.i9 = a;
                this.g3("YAxisLabelAngle", b, this.kb);
            }
        }
        get jt() {
            return this.ir;
        }
        set jt(a) {
            let b = this.jt;
            if (a != b) {
                this.ir = a;
                this.g3("XAxisExtent", b, this.jt);
            }
        }
        get ka() {
            return this.i8;
        }
        set ka(a) {
            let b = this.ka;
            if (a != b) {
                this.i8 = a;
                this.g3("YAxisExtent", b, this.ka);
            }
        }
        get j4() {
            return this.i2;
        }
        set j4(a) {
            let b = this.j4;
            if (a != b) {
                this.i2 = a;
                this.g3("XAxisTitleAngle", b, this.j4);
            }
        }
        get kl() {
            return this.jj;
        }
        set kl(a) {
            let b = this.kl;
            if (a != b) {
                this.jj = a;
                this.g3("YAxisTitleAngle", b, this.kl);
            }
        }
        get ip() {
            return this.im;
        }
        set ip(a) {
            let b = this.ip;
            if (a != b) {
                this.im = a;
                this.g3("XAxisInverted", b, this.ip);
            }
        }
        get iq() {
            return this.io;
        }
        set iq(a) {
            let b = this.iq;
            if (a != b) {
                this.io = a;
                this.g3("YAxisInverted", b, this.iq);
            }
        }
        get nv() {
            return this.ns;
        }
        set nv(a) {
            let b = this.nv;
            if (a != b) {
                this.ns = a;
                this.g3("XAxisTitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.nv));
            }
        }
        get ou() {
            return this.or;
        }
        set ou(a) {
            let b = this.ou;
            if (a != b) {
                this.or = a;
                this.g3("YAxisTitleAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, this.ou));
            }
        }
        get nu() {
            return this.nr;
        }
        set nu(a) {
            let b = this.nu;
            if (a != b) {
                this.nr = a;
                this.g3("XAxisLabelHorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.nu));
            }
        }
        get_nw() {
            return this.nt;
        }
        set_nw(a) {
            let b = this.nw;
            if (a != b) {
                this.nt = a;
                this.g3("YAxisLabelHorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.nw));
            }
        }
        get nw() {
            return this.get_nw();
        }
        set nw(a) {
            this.set_nw(a);
        }
        get os() {
            return this.op;
        }
        set os(a) {
            let b = this.os;
            if (a != b) {
                this.op = a;
                this.g3("XAxisLabelVerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, this.os));
            }
        }
        get ot() {
            return this.oq;
        }
        set ot(a) {
            let b = this.ot;
            if (a != b) {
                this.oq = a;
                this.g3("YAxisLabelVerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, this.ot));
            }
        }
        get ox() {
            return this.ov;
        }
        set ox(a) {
            let b = this.ox;
            if (a != b) {
                this.ov = a;
                this.g3("XAxisLabelVisibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, this.ox));
            }
        }
        get oy() {
            return this.ow;
        }
        set oy(a) {
            let b = this.oy;
            if (a != b) {
                this.ow = a;
                this.g3("YAxisLabelVisibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, this.oy));
            }
        }
        get_il() {
            return this.ik;
        }
        set_il(a) {
            let b = this.il;
            if (a != b) {
                this.ik = a;
                this.g3("YAxisLabelLocation", enumGetBox(AxisLabelsLocation_$type, b), enumGetBox(AxisLabelsLocation_$type, this.il));
            }
        }
        get il() {
            return this.get_il();
        }
        set il(a) {
            this.set_il(a);
        }
        get k9() {
            return this.kv;
        }
        set k9(a) {
            let b = this.kv;
            if (a != b) {
                this.kv = a;
                this.g3("XAxisLabelFormat", b, this.kv);
            }
        }
        get ib() {
            return this.h9;
        }
        set ib(a) {
            let b = this.h9;
            if (a != b) {
                this.h9 = a;
                this.g3("XAxisLabelFormatSpecifiers", b, this.h9);
            }
        }
        get md() {
            return this.kz;
        }
        set md(a) {
            let b = this.kz;
            if (a != b) {
                this.kz = a;
                this.g3("YAxisLabelFormat", b, this.kz);
            }
        }
        get ic() {
            return this.ia;
        }
        set ic(a) {
            let b = this.ia;
            if (a != b) {
                this.ia = a;
                this.g3("YAxisLabelFormatSpecifiers", b, this.ia);
            }
        }
    }
    XYChart.$t = /*@__PURE__*/ markType(XYChart, 'XYChart', DomainChart.$);
    return XYChart;
})();
//# sourceMappingURL=XYChart.js.map
