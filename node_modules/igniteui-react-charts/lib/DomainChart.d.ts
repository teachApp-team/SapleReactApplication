import { Base, INotifyPropertyChanged, IEnumerable, Type, PropertyChangedEventArgs } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { IDomainChartWidget } from "./IDomainChartWidget";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesAdapterImplementation } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { IAnnotationLayerProxy } from "./IAnnotationLayerProxy";
import { Color } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { IChartLegend } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { UnknownValuePlotting } from "igniteui-react-core";
import { MarkerTypeCollection } from "./MarkerTypeCollection";
import { TrendLineType } from "igniteui-react-core";
import { ToolTipType } from "./ToolTipType";
import { CrosshairsDisplayMode } from "./CrosshairsDisplayMode";
import { Series } from "./Series";
import { DataSeries } from "igniteui-react-core";
import { ObservableColorCollection } from "igniteui-react-core";
import { DataSeriesMarker } from "igniteui-react-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { CalloutStyleUpdatingEventArgs } from "./CalloutStyleUpdatingEventArgs";
/**
 * @hidden
 */
export declare abstract class DomainChart extends Base implements INotifyPropertyChanged {
    static $t: Type;
    protected di: any;
    provideContainer(a: any): void;
    destroy(): void;
    private gi;
    protected gj(): void;
    protected gf(a: XamDataChart): void;
    protected gc(): void;
    protected gl(a: Series, b: number): void;
    protected g4(a: string, b: any, c: any): void;
    private dh;
    tooltipTemplate: any;
    private bz;
    tooltipTemplates: List$1<any>;
    private cd;
    ct: number;
    private dg;
    private toolTip;
    private cm;
    c2: number;
    private cn;
    c3: number;
    private co;
    c4: number;
    private cl;
    c1: number;
    private ch;
    cx: number;
    private cj;
    cz: number;
    private ci;
    cy: number;
    private cg;
    cw: number;
    private hx;
    h3: Brush;
    private hy;
    h4: Brush;
    private cc;
    protected get_cs(): number;
    protected set_cs(a: number): void;
    cs: number;
    private cp;
    c5: number;
    private cf;
    cv: number;
    private cb;
    cr: number;
    private db;
    de: number;
    private a0;
    a1: (time: number) => number;
    protected gg(a: XamDataChart): void;
    protected gm(a: Series, b: number): void;
    protected gd(): void;
    private gn;
    c7: (arg1: HTMLElement) => any[];
    private hr;
    private dk;
    private bx;
    private c8;
    protected g5(a: string, b: any, c: any): void;
    private af;
    ag: IDomainChartWidget;
    private dw;
    e9: string;
    private dy;
    fk: string;
    private ay;
    dataChart: XamDataChart;
    v: DataSeriesAdapterImplementation;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    constructor();
    protected gh(): void;
    protected abstract readonly b5: List$1<DataSeriesType>;
    protected abstract readonly b4: List$1<IDataSeriesAdapterRule>;
    protected b3: List$1<MarkerType>;
    protected bt(a: DataSeriesType): boolean;
    notifyResized(): void;
    gv(): void;
    f7(): void;
    ga(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected ha(a: string): void;
    protected f8(a: (arg1: Series) => void): void;
    protected f9(a: (arg1: Series, arg2: number) => void): void;
    protected gx(a: (arg1: XamDataChart) => void): void;
    protected gy(a: (arg1: XamDataChart) => void, b: boolean): void;
    protected gz(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    protected bu(a: DataSeries): boolean;
    protected bp(): boolean;
    private static readonly dq;
    private da;
    protected el(a: DataSeries): string;
    protected em(a: DataSeries, b: DataSeriesType): string;
    protected abstract u(a: DataSeries): DataSeriesType;
    protected abstract aq(a: DataSeries, b: DataSeriesType): Series;
    ek(): string;
    private br;
    protected hl(): void;
    protected ar(seriesType_: DataSeriesType): Series;
    private al;
    private an;
    private ao;
    private ap;
    private am;
    private ab;
    protected readonly ac: IAnnotationLayerProxy;
    private readonly bn;
    private bo;
    private hs;
    protected b1(a: string, b: boolean): List$1<Series>;
    protected hq(a: Series, b: Series, c: DataSeries): void;
    protected abstract hk(a: DataSeries): void;
    protected abstract hj(a: DataSeries): void;
    protected hn(): void;
    private ho;
    protected hp(a: Series): void;
    protected abstract hm(): void;
    private g0;
    protected f5(): void;
    protected hz(a: number): Brush;
    protected h2(a: number): Brush;
    protected h0(a: number): Brush;
    protected h1(a: number): Brush;
    protected h5(a: number): Color;
    protected a2(a: Color): ObservableColorCollection;
    protected k(a: Color): BrushCollection;
    protected by: List$1<Color>;
    protected readonly b0: List$1<Color>;
    dj(): any;
    go(a: string, b: string): void;
    gp(a: string, b: string, c: Series): void;
    ah(a: DataSeriesMarker): MarkerType;
    gu(source_: any, a: number, b: any, c: any): void;
    gq(source_: any): void;
    gr(source_: any, a: number, b: any): void;
    gs(source_: any, a: number, b: any): void;
    seriesAdded: (sender: any, args: ChartSeriesEventArgs) => void;
    hb(a: Series): void;
    seriesRemoved: (sender: any, args: ChartSeriesEventArgs) => void;
    hh(a: Series): void;
    seriesPointerEnter: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    hd(a: Series, b: any): void;
    seriesPointerLeave: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    he(a: Series, b: any): void;
    seriesPointerMove: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    hf(a: Series, b: any): void;
    seriesPointerDown: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    hc(a: Series, b: any): void;
    seriesPointerUp: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    hg(a: Series, b: any): void;
    calloutStyleUpdating: (sender: any, args: CalloutStyleUpdatingEventArgs) => void;
    g9(a: any, b: CalloutStyleUpdatingEventArgs): void;
    private b2;
    g7(a: () => void): void;
    private a3;
    g8(a: () => void, b: boolean): {
        p1?: boolean;
    };
    protected get_bv(): boolean;
    protected readonly bv: boolean;
    protected ge(a: XamDataChart): void;
    protected gk(a: Series, b: number): void;
    protected abstract f3(): void;
    protected readonly bh: boolean;
    private a6;
    protected f6(): void;
    protected gb(): void;
    protected hi(a: XamDataChart): void;
    private f2;
    protected abstract f1(a: Series, b: number): void;
    protected ai(a: Series, b: number): MarkerType;
    protected g3(a: string, b: any, c: any): void;
    private g2;
    private b8;
    itemsSource: IEnumerable;
    private b;
    d: string[];
    private a;
    c: string[];
    private e;
    j: BrushCollection;
    private h;
    n: BrushCollection;
    private ad;
    legend: IChartLegend;
    private bc;
    protected get_bq(): boolean;
    protected set_bq(a: boolean): void;
    bq: boolean;
    private be;
    protected get_bw(): boolean;
    protected set_bw(a: boolean): void;
    bw: boolean;
    private bd;
    protected get_bs(): boolean;
    protected set_bs(a: boolean): void;
    bs: boolean;
    private h6;
    h8: Rect;
    readonly h7: Rect;
    private dx;
    fd: string;
    private dv;
    e2: string;
    private hu;
    hw: HorizontalAlignment;
    private ht;
    hv: HorizontalAlignment;
    private aw;
    ax: UnknownValuePlotting;
    private ce;
    protected get_cu(): number;
    protected set_cu(a: number): void;
    cu: number;
    private ck;
    c0: number;
    private aj;
    ak: MarkerTypeCollection;
    private f;
    l: BrushCollection;
    private g;
    m: BrushCollection;
    private c9;
    dd: number;
    private a5;
    bg: boolean;
    private i;
    o: BrushCollection;
    private au;
    av: TrendLineType;
    private cq;
    c6: number;
    private a4;
    bf: boolean;
    private dc;
    df: number;
    private as;
    at: ToolTipType;
    private s;
    t: CrosshairsDisplayMode;
    private ba;
    bl: boolean;
    private a9;
    bk: boolean;
    private bb;
    bm: boolean;
    private a8;
    bj: boolean;
    private a7;
    bi: boolean;
    private b7;
    calloutsItemsSource: IEnumerable;
    private dt;
    ea: string;
    private du;
    ec: string;
    private ds;
    d6: string;
    private dr;
    d3: string;
}
