{"ast":null,"code":"import { loadGetInitialProps } from 'next/dist/next-server/lib/utils';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nvar initial = {\n  message: 'START',\n  count: 0,\n  // 単語ステート\n  data: [{\n    English: 'apple',\n    Japanese: 'りんご',\n    No: 1\n  }, {\n    English: 'banana',\n    Japanese: 'バナナ',\n    No: 2\n  }, {\n    English: 'chocolate',\n    Japanese: 'チョコレート',\n    No: 3\n  }, {\n    English: 'red',\n    Japanese: '赤',\n    No: 4\n  }, {\n    English: 'white',\n    Japanese: '白',\n    No: 5\n  }],\n  check: \"NON\",\n  question: \"SAMPLE\",\n  answer: \"例題\",\n  alternative: [],\n  correct: 0,\n  wrong: 0,\n  status: \"default\",\n  questioncount: 0\n};\n\nfunction counterReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'INCREMENT':\n      return {\n        message: 'INCREMENT',\n        count: state.count + 1\n      };\n\n    case 'DECREMENT':\n      return {\n        message: 'DECREMENT',\n        count: state.count - 1\n      };\n\n    case 'RESET':\n      return {\n        message: 'RESET',\n        count: initial.count\n      };\n    // 単語reducer\n\n    case 'START':\n      return startReduce(state, action);\n\n    case 'CHECK':\n      return checkReduce(state, action);\n\n    default:\n      return state;\n  }\n} // 選択肢作成のための処理\n\n\nfunction randomSelect(array, num) {\n  var newArray = [];\n\n  while (newArray.length < num && array.length > 0) {\n    // 配列からランダムな要素を選ぶ\n    var rand = Math.floor(Math.random() * array.length); // 選んだ要素を別の配列に登録する\n\n    newArray.push(array[rand]); // もとの配列からは削除する\n\n    array.splice(rand, 1);\n  }\n\n  return newArray;\n} // テスト開始のreduce処理\n\n\nfunction startReduce(state, action) {\n  var q = state.questioncount + 1;\n  return {\n    message: 'START',\n    count: 0,\n    data: state.dtata,\n    check: nill,\n    question: state.data[q].English,\n    answer: state.dtata[q].Japanese,\n    alternative: [state.dtata[q + 1].Japanese, state.dtata[q + 2].Japanese, state.dtata[q + 3].Japanese],\n    correct: state.correct,\n    wrong: state.wrong,\n    status: \"start\",\n    questioncount: q\n  };\n} // テスト答え合わせのreduce\n\n\nfunction checkReduce(state, action) {\n  var c = action.choise;\n  var a = state.data[state.questioncount].No;\n\n  if (a == c) {\n    check = \"correct\";\n    correct = state.correct + 1;\n  } else {\n    check = \"wrong\";\n    wrong = state.wrong + 1;\n  }\n\n  return {\n    message: 'START',\n    count: 0,\n    data: state.dtata,\n    check: check,\n    question: state.question,\n    answer: state.answer,\n    alternative: [],\n    correct: correct,\n    wrong: wrong,\n    status: \"check\",\n    questioncount: state.question\n  };\n}\n\nexport function checkTest() {\n  return {\n    type: 'CHECK',\n    choise: choise\n  };\n}\nexport function initStore() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial;\n  return createStore(counterReducer, state, applyMiddleware(thunkMiddleware));\n}","map":{"version":3,"sources":["/Users/fujitakosuke/Projects/TanngoNext/tanngo_app/store.js"],"names":["loadGetInitialProps","createStore","applyMiddleware","thunkMiddleware","initial","message","count","data","English","Japanese","No","check","question","answer","alternative","correct","wrong","status","questioncount","counterReducer","state","action","type","startReduce","checkReduce","randomSelect","array","num","newArray","length","rand","Math","floor","random","push","splice","q","dtata","nill","c","choise","a","checkTest","initStore"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,iCAApC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,OAAO,EAAC,OADM;AAEdC,EAAAA,KAAK,EAAE,CAFO;AAGd;AACAC,EAAAA,IAAI,EAAC,CAAC;AAACC,IAAAA,OAAO,EAAC,OAAT;AAAkBC,IAAAA,QAAQ,EAAC,KAA3B;AAAkCC,IAAAA,EAAE,EAAC;AAArC,GAAD,EACC;AAACF,IAAAA,OAAO,EAAC,QAAT;AAAmBC,IAAAA,QAAQ,EAAC,KAA5B;AAAmCC,IAAAA,EAAE,EAAC;AAAtC,GADD,EAEC;AAACF,IAAAA,OAAO,EAAC,WAAT;AAAsBC,IAAAA,QAAQ,EAAC,QAA/B;AAAyCC,IAAAA,EAAE,EAAC;AAA5C,GAFD,EAGC;AAACF,IAAAA,OAAO,EAAC,KAAT;AAAgBC,IAAAA,QAAQ,EAAC,GAAzB;AAA8BC,IAAAA,EAAE,EAAC;AAAjC,GAHD,EAIC;AAACF,IAAAA,OAAO,EAAC,OAAT;AAAkBC,IAAAA,QAAQ,EAAC,GAA3B;AAAgCC,IAAAA,EAAE,EAAC;AAAnC,GAJD,CAJS;AASdC,EAAAA,KAAK,EAAE,KATO;AAUdC,EAAAA,QAAQ,EAAE,QAVI;AAWdC,EAAAA,MAAM,EAAE,IAXM;AAYdC,EAAAA,WAAW,EAAC,EAZE;AAadC,EAAAA,OAAO,EAAC,CAbM;AAcdC,EAAAA,KAAK,EAAC,CAdQ;AAedC,EAAAA,MAAM,EAAE,SAfM;AAgBdC,EAAAA,aAAa,EAAE;AAhBD,CAAhB;;AAmBA,SAASC,cAAT,GAAkD;AAAA,MAAzBC,KAAyB,uEAAjBhB,OAAiB;AAAA,MAARiB,MAAQ;;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAO;AACLjB,QAAAA,OAAO,EAAC,WADH;AAELC,QAAAA,KAAK,EAACc,KAAK,CAACd,KAAN,GAAc;AAFf,OAAP;;AAIF,SAAK,WAAL;AACE,aAAO;AACLD,QAAAA,OAAO,EAAC,WADH;AAELC,QAAAA,KAAK,EAAEc,KAAK,CAACd,KAAN,GAAa;AAFf,OAAP;;AAIF,SAAK,OAAL;AACE,aAAO;AACLD,QAAAA,OAAO,EAAE,OADJ;AAELC,QAAAA,KAAK,EAACF,OAAO,CAACE;AAFT,OAAP;AAIF;;AACA,SAAK,OAAL;AACE,aAAOiB,WAAW,CAACH,KAAD,EAAQC,MAAR,CAAlB;;AACF,SAAK,OAAL;AACE,aAAOG,WAAW,CAACJ,KAAD,EAAQC,MAAR,CAAlB;;AAEF;AACE,aAAOD,KAAP;AAvBJ;AAyBD,C,CAED;;;AACA,SAASK,YAAT,CAAsBC,KAAtB,EAA6BC,GAA7B,EACA;AACE,MAAIC,QAAQ,GAAG,EAAf;;AAEA,SAAMA,QAAQ,CAACC,MAAT,GAAkBF,GAAlB,IAAyBD,KAAK,CAACG,MAAN,GAAe,CAA9C,EACA;AACE;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,KAAK,CAACG,MAAjC,CAAb,CAFF,CAGE;;AACAD,IAAAA,QAAQ,CAACM,IAAT,CAAcR,KAAK,CAACI,IAAD,CAAnB,EAJF,CAKE;;AACAJ,IAAAA,KAAK,CAACS,MAAN,CAAaL,IAAb,EAAmB,CAAnB;AACD;;AAED,SAAOF,QAAP;AACD,C,CAGD;;;AACA,SAASL,WAAT,CAAqBH,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,MAAIe,CAAC,GAAGhB,KAAK,CAACF,aAAN,GAAsB,CAA9B;AACA,SAAO;AACLb,IAAAA,OAAO,EAAC,OADH;AAELC,IAAAA,KAAK,EAAE,CAFF;AAILC,IAAAA,IAAI,EAACa,KAAK,CAACiB,KAJN;AAKL1B,IAAAA,KAAK,EAAC2B,IALD;AAML1B,IAAAA,QAAQ,EAAEQ,KAAK,CAACb,IAAN,CAAW6B,CAAX,EAAc5B,OANnB;AAOLK,IAAAA,MAAM,EAAEO,KAAK,CAACiB,KAAN,CAAYD,CAAZ,EAAe3B,QAPlB;AAQLK,IAAAA,WAAW,EAAC,CAACM,KAAK,CAACiB,KAAN,CAAYD,CAAC,GAAC,CAAd,EAAiB3B,QAAlB,EACAW,KAAK,CAACiB,KAAN,CAAYD,CAAC,GAAC,CAAd,EAAiB3B,QADjB,EAEAW,KAAK,CAACiB,KAAN,CAAYD,CAAC,GAAC,CAAd,EAAiB3B,QAFjB,CARP;AAWLM,IAAAA,OAAO,EAACK,KAAK,CAACL,OAXT;AAYLC,IAAAA,KAAK,EAACI,KAAK,CAACJ,KAZP;AAaLC,IAAAA,MAAM,EAAE,OAbH;AAcLC,IAAAA,aAAa,EAAEkB;AAdV,GAAP;AAgBD,C,CACD;;;AACA,SAASZ,WAAT,CAAqBJ,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,MAAIkB,CAAC,GAAGlB,MAAM,CAACmB,MAAf;AACA,MAAIC,CAAC,GAAGrB,KAAK,CAACb,IAAN,CAAWa,KAAK,CAACF,aAAjB,EAAgCR,EAAxC;;AACA,MAAI+B,CAAC,IAAEF,CAAP,EAAS;AACP5B,IAAAA,KAAK,GAAG,SAAR;AACAI,IAAAA,OAAO,GAAGK,KAAK,CAACL,OAAN,GAAgB,CAA1B;AACD,GAHD,MAGK;AACHJ,IAAAA,KAAK,GAAG,OAAR;AACAK,IAAAA,KAAK,GAAGI,KAAK,CAACJ,KAAN,GAAc,CAAtB;AACD;;AACD,SAAO;AACLX,IAAAA,OAAO,EAAC,OADH;AAELC,IAAAA,KAAK,EAAE,CAFF;AAILC,IAAAA,IAAI,EAACa,KAAK,CAACiB,KAJN;AAKL1B,IAAAA,KAAK,EAAEA,KALF;AAMLC,IAAAA,QAAQ,EAAEQ,KAAK,CAACR,QANX;AAOLC,IAAAA,MAAM,EAAEO,KAAK,CAACP,MAPT;AAQLC,IAAAA,WAAW,EAAC,EARP;AASLC,IAAAA,OAAO,EAACA,OATH;AAULC,IAAAA,KAAK,EAACA,KAVD;AAWLC,IAAAA,MAAM,EAAE,OAXH;AAYLC,IAAAA,aAAa,EAAEE,KAAK,CAACR;AAZhB,GAAP;AAcD;;AAED,OAAO,SAAS8B,SAAT,GAAqB;AAC1B,SAAO;AACLpB,IAAAA,IAAI,EAAE,OADD;AAELkB,IAAAA,MAAM,EAAEA;AAFH,GAAP;AAID;AAGD,OAAO,SAASG,SAAT,GAAoC;AAAA,MAAjBvB,KAAiB,uEAAThB,OAAS;AACzC,SAAOH,WAAW,CAACkB,cAAD,EAAiBC,KAAjB,EAAwBlB,eAAe,CAACC,eAAD,CAAvC,CAAlB;AACD","sourcesContent":["import { loadGetInitialProps } from 'next/dist/next-server/lib/utils';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nconst initial = {\n  message:'START',\n  count: 0,\n  // 単語ステート\n  data:[{English:'apple', Japanese:'りんご', No:1},\n        {English:'banana', Japanese:'バナナ', No:2},\n        {English:'chocolate', Japanese:'チョコレート', No:3},\n        {English:'red', Japanese:'赤', No:4},\n        {English:'white', Japanese:'白', No:5}],\n  check: \"NON\",\n  question: \"SAMPLE\",\n  answer: \"例題\",\n  alternative:[],\n  correct:0,\n  wrong:0,\n  status: \"default\",\n  questioncount: 0,\n}\n\nfunction counterReducer (state = initial, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return {\n        message:'INCREMENT',\n        count:state.count + 1\n      };\n    case 'DECREMENT':\n      return {\n        message:'DECREMENT',\n        count: state.count -1\n      };\n    case 'RESET':\n      return {\n        message: 'RESET',\n        count:initial.count\n      };\n    // 単語reducer\n    case 'START':\n      return startReduce(state, action);\n    case 'CHECK':\n      return checkReduce(state, action);\n\n    default:\n      return state;\n  }\n}\n\n// 選択肢作成のための処理\nfunction randomSelect(array, num)\n{\n  let newArray = [];\n  \n  while(newArray.length < num && array.length > 0)\n  {\n    // 配列からランダムな要素を選ぶ\n    const rand = Math.floor(Math.random() * array.length);\n    // 選んだ要素を別の配列に登録する\n    newArray.push(array[rand]);\n    // もとの配列からは削除する\n    array.splice(rand, 1);\n  }\n  \n  return newArray;\n}\n\n\n// テスト開始のreduce処理\nfunction startReduce(state, action) {\n  let q = state.questioncount + 1;\n  return {\n    message:'START',\n    count: 0,\n\n    data:state.dtata,\n    check:nill,\n    question: state.data[q].English,\n    answer: state.dtata[q].Japanese,\n    alternative:[state.dtata[q+1].Japanese,\n                state.dtata[q+2].Japanese,\n                state.dtata[q+3].Japanese],\n    correct:state.correct,\n    wrong:state.wrong,\n    status: \"start\",\n    questioncount: q,\n  }\n}\n// テスト答え合わせのreduce\nfunction checkReduce(state, action) {\n  let c = action.choise;\n  let a = state.data[state.questioncount].No;\n  if (a==c){\n    check = \"correct\";\n    correct = state.correct + 1;\n  }else{\n    check = \"wrong\";\n    wrong = state.wrong + 1;\n  }\n  return {\n    message:'START',\n    count: 0,\n\n    data:state.dtata,\n    check: check,\n    question: state.question,\n    answer: state.answer,\n    alternative:[],\n    correct:correct,\n    wrong:wrong,\n    status: \"check\",\n    questioncount: state.question,\n  }\n}\n\nexport function checkTest() {\n  return {\n    type: 'CHECK',\n    choise: choise\n  }\n}\n\n\nexport function initStore(state = initial) {\n  return createStore(counterReducer, state, applyMiddleware(thunkMiddleware))\n}\n"]},"metadata":{},"sourceType":"module"}