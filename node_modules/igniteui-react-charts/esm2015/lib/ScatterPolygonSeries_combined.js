/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ShapeSeriesBase } from "./ShapeSeriesBase";
import { ShapeAxisInfoCache } from "./ShapeAxisInfoCache";
import { StyleSelector } from "./StyleSelector";
import { DependencyProperty } from "igniteui-react-core";
import { Style } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { DataTemplate } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { Base, enumGetBox, typeCast, fromEnum, markType, markDep, PointUtil, runOn } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { ShapeSeriesViewBase } from "./ShapeSeriesViewBase";
import { MarkerSeries } from "./MarkerSeries";
import { DataContext } from "igniteui-react-core";
import { Marker } from "./Marker";
import { HashPool$2 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { RectUtil } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { DataTemplateMeasureInfo } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { DataTemplatePassInfo } from "igniteui-react-core";
import { DataTemplateRenderInfo } from "igniteui-react-core";
import { MarkerVisualData } from "./MarkerVisualData";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let ScatterPolygonSeries = /*@__PURE__*/ (() => {
    class ScatterPolygonSeries extends ShapeSeriesBase {
        constructor() {
            super();
            this.nj = null;
            this.ng = new ScalerParams(1, ScatterPolygonSeries.oi, ScatterPolygonSeries.oi, false);
            this.nh = new ScalerParams(1, ScatterPolygonSeries.oi, ScatterPolygonSeries.oi, false);
            this.nm = 2;
            this.ab = ScatterPolygonSeries.$;
        }
        mj() {
            return this.nl();
        }
        m1(a) {
            let b = a;
            b.cn(this.ok);
            b.co(this.nk);
            super.m1(a);
            if (this.cc(a)) {
                return;
            }
            let c, d;
            let e = a.getViewInfo(c, d);
            c = e.p0;
            d = e.p1;
            let f = this.getEffectiveViewport1(a);
            this.ng = new ScalerParams(1, d, c, this.l7.ca);
            this.ng.c = f;
            this.nh = new ScalerParams(1, d, c, this.l9.ca);
            this.nh.c = f;
            if (c.width < 1 || c.height < 1) {
                return;
            }
            this.nj = ((() => {
                let $ret = new ShapeAxisInfoCache();
                $ret.a = this.l7;
                $ret.b = this.l9;
                $ret.e = this.l7.ca;
                $ret.f = this.l9.ca;
                $ret.d = this.bz;
                $ret.c = this.mc;
                return $ret;
            })());
            if (this.nl()) {
                let g = new Dictionary$2(Base.$, OwnedPoint.$, 0);
                b.c5.l(g, 400, d, c, this.eu);
                b.c5.j(g, false);
            }
        }
        nl() {
            return this.n0 != null && ((this.nf != 1 && this.nf != 0) || this.n1 != null);
        }
        bf() {
            return new ScatterPolygonSeriesView(this);
        }
        iv(a) {
            super.iv(a);
            this.ni = a;
        }
        get_hasMarkers() {
            return true;
        }
        k7() {
            return this.oe;
        }
        k8() {
            return this.of;
        }
        j0() {
            return this.n0;
        }
        jp() {
            super.jp();
            if (this.n1 != null) {
                this.ni.dd();
            }
            else {
                let a = MarkerSeries.l3(this, this.nf);
                let b = MarkerSeries.mc(a);
                if (b == null) {
                    this.n0 = MarkerSeries.mo;
                }
                else {
                    this.ni.da(b);
                }
            }
            if (this.og != null) {
                this.ni.db();
            }
            else {
                this.oe = this.bs == null ? null : this.bs.mb(this.fh);
            }
            if (this.oh != null) {
                this.ni.dc();
            }
            else {
                this.of = this.bs == null ? null : this.bs.mc(this.fh);
            }
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case ScatterPolygonSeries.$$p[3]:
                case ScatterPolygonSeries.$$p[9]:
                case ScatterPolygonSeries.$$p[5]:
                case ScatterPolygonSeries.$$p[7]:
                case ScatterPolygonSeries.$$p[8]:
                    this.jp();
                    this.je(false);
                    break;
                case ScatterPolygonSeries.$$p[2]:
                    if (c == MarkerSeries.mo || d == MarkerSeries.mo || (c == null || d != null)) {
                        this.ni.df();
                        this.je(false);
                    }
                    this.je(false);
                    this.il();
                    break;
                case ScatterPolygonSeries.$$p[10]:
                    this.ni.cn(this.ok);
                    this.je(false);
                    this.il();
                    break;
                case ScatterPolygonSeries.$$p[11]:
                    this.ni.co(this.nk);
                    this.je(false);
                    this.il();
                    break;
                case ScatterPolygonSeries.$$p[4]:
                    this.je(false);
                    this.il();
                    break;
            }
        }
        ar(a, b) {
            let c = this.ni.c2(a);
            let d = null;
            if (c != null) {
                d = c.content;
            }
            if (d != null) {
                return d;
            }
            return super.ar(a, b);
        }
        nz(a, b) {
            let c = new List$1(Base.$, 0);
            for (let d of fromEnum(b.c)) {
                if (!a.containsKey(d)) {
                    c.add1(d);
                }
            }
            for (let e of fromEnum(c)) {
                b.g(e);
            }
        }
        ch(a, b, c) {
            if (!this.hasMarkers) {
                return false;
            }
            let d = this.l7;
            let e = new ScalerParams(1, this.bs.mr, this.lz, d.ca);
            e.c = this.getEffectiveViewport1(this.bi);
            let f = this.l9;
            let g = new ScalerParams(1, this.bs.mr, this.lz, f.ca);
            g.c = this.getEffectiveViewport1(this.bi);
            a.clear();
            this.ni.de((h) => {
                if (h._visibility == 0) {
                    let i = new SeriesPointOfInterest();
                    let j = h.n;
                    let k = h.o;
                    if (j < this.lz.left || j > this.lz.right || k < this.lz.top || k > this.lz.bottom) {
                        return;
                    }
                    i.b = d.d1(j, e);
                    i.c = f.d1(k, g);
                    i.a = h.content;
                    a.add(i);
                }
            });
            return true;
        }
        nd(a, b, c, d, e) {
            if (c == null || c.length != this.nj.d.count) {
                c = new Array(this.nj.d.count);
                for (let f = 0; f < this.nj.d.count; f++) {
                    c[f] = PointUtil.create();
                }
            }
            let g = ((() => {
                let $ret = new ScalerParams(1, d, e, this.l7.ca);
                $ret.c = this.getEffectiveViewport1(a);
                return $ret;
            })());
            let h = ((() => {
                let $ret = new ScalerParams(1, d, e, this.l9.ca);
                $ret.c = this.getEffectiveViewport1(a);
                return $ret;
            })());
            let i = this.nj.a.d1(g.d.left, g);
            let j = this.nj.a.d1(g.d.right, g);
            let k = this.nj.b.d1(h.d.bottom, h);
            let l = this.nj.b.d1(h.d.top, h);
            if (this.nj.e) {
                let m = i;
                i = j;
                j = m;
            }
            if (this.nj.f) {
                let n = k;
                k = l;
                l = n;
            }
            let o = this.nj;
            let p = o.a;
            let q = o.b;
            let r;
            let s;
            let t = g.d.left;
            let u = g.d.right;
            let v = h.d.top;
            let w = h.d.bottom;
            for (let x = 0; x < this.nj.d.count; x++) {
                r = 0;
                s = 0;
                let y = null;
                let z = a.b3.tryGetValue(x, y);
                y = z.p1;
                if (y == null) {
                    c[x].x = NaN;
                    c[x].y = NaN;
                }
                else {
                    let aa = y.c;
                    let ab = RectUtil.l(aa);
                    r = ab.x;
                    s = ab.y;
                    if (r >= t && r <= u && s >= v && s <= w) {
                        c[x].x = r;
                        c[x].y = s;
                    }
                    else {
                        c[x].x = NaN;
                        c[x].y = NaN;
                    }
                }
            }
            return c;
        }
        nc(a, b) {
            if (b == null || b.length != a.e) {
                b = new Array(a.e);
            }
            let c = 0;
            let d = this.bz;
            for (let e of fromEnum(a.c)) {
                b[c] = d.indexOf(e);
                c++;
            }
            return b;
        }
    }
    ScatterPolygonSeries.$t = /*@__PURE__*/ markType(ScatterPolygonSeries, 'ScatterPolygonSeries', ShapeSeriesBase.$);
    ScatterPolygonSeries.oi = /*@__PURE__*/ new Rect(0, 0, 0, 1, 1);
    ScatterPolygonSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ScatterPolygonSeries, 'raisePropertyChanged', ['ActualMarkerBrush:oe:n2', [Brush.$], 'ActualMarkerOutline:of:n3', [Brush.$], 'ActualMarkerTemplate:n0:n4', [DataTemplate.$, null], 'MarkerBrush:og:n5', [Brush.$], 'MarkerCollisionAvoidance:ne:n6', [CollisionAvoidanceType_$type, /*@__PURE__*/ enumGetBox(CollisionAvoidanceType_$type, 0)], 'MarkerOutline:oh:n7', [Brush.$], 'MarkerStyle:oj:n8', [Style.$], 'MarkerTemplate:n1:n9', [DataTemplate.$, null], 'MarkerThickness:nm:oa', [1], 'MarkerType:nf:ob', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 1)], 'ShapeStyle:ok:oc', [Style.$, null], 'ShapeStyleSelector:nk:od', [StyleSelector.$, null]]);
    return ScatterPolygonSeries;
})();
/**
 * @hidden
 */
export let ScatterPolygonSeriesView = /*@__PURE__*/ (() => {
    class ScatterPolygonSeriesView extends ShapeSeriesViewBase {
        constructor(a) {
            super(a);
            this.c1 = null;
            this.c0 = null;
            this.c6 = null;
            this.c4 = null;
            this.c8 = false;
            this.c7 = null;
            this.c9 = null;
            this.dm = null;
            this.c6 = a;
            this.c7 = new HashPool$2(Base.$, Marker.$);
            this.c9 = new List$1(Marker.$, 0);
            this.dg(this.c7);
            this.c4 = new NumericMarkerManager(1, (b) => this.c7.item(b), (b) => this.c6.nj.d.item(b), runOn(this, this.dk), runOn(this, this.cz), runOn(this, this.cy), () => this.c6.ne);
            this.c4.q = runOn(this, this.dn);
        }
        ap() {
            super.ap();
            if (!this.n) {
                this.e.bj = 8;
            }
        }
        get c5() {
            return this.c4;
        }
        dk(a) {
            this.c6.nz(a, this.c7);
        }
        cz() {
            this.c1 = this.c6.nd(this, this.c7, this.c1, this.bs, this.br);
            return this.c1;
        }
        cy() {
            this.c0 = this.c6.nc(this.c7, this.c0);
            return this.c0;
        }
        cu(a, b) {
            return this.cv(a, b, true);
        }
        cc(a, b) {
            super.cc(a, b);
            ShapeSeriesViewBase.cb(this, a, b);
        }
        ca(a, b) {
            let c = a;
            if (c == null) {
                return;
            }
            c.ak = b;
        }
        de(a) {
            this.c7.f(a);
        }
        dg(a) {
            a.create = runOn(this, this.c3);
            a.destroy = runOn(this, this.di);
            a.activate = runOn(this, this.dh);
            a.disactivate = runOn(this, this.dj);
        }
        c3() {
            let a = new Marker();
            if (!this.c8) {
                a.content = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this.e;
                    return $ret;
                })());
            }
            a.ah = this.e.n0;
            this.c9.add(a);
            return a;
        }
        di(a) {
            a.content = null;
            this.c9.remove(a);
        }
        dh(a) {
            a._visibility = 0;
        }
        dj(a) {
            if (a.content != null) {
                (typeCast(DataContext.$, a.content)).item = null;
            }
            a._visibility = 1;
        }
        dl(a) {
            this.c8 = a;
        }
        be(a, b) {
            super.be(a, b);
            let c = a;
            let d = c.content;
            if (d != null) {
                if (this.c6.oe != null) {
                    d.actualItemBrush = this.c6.oe;
                }
                else {
                    d.actualItemBrush = this.by.k4;
                }
                if (this.c6.oe != null) {
                    d.outline = this.c6.of;
                }
                else {
                    d.outline = this.by.k5;
                }
                d.thickness = 0.5;
            }
        }
        bf(a, b) {
            super.bf(a, b);
            let c = a;
            let d = this.bm(b);
            let e = c.content;
            if (e != null) {
                e.actualItemBrush = d;
                e.outline = d;
                e.thickness = 1 + 3;
            }
        }
        a2(a, b) {
            super.a2(a, b);
            let c = new DataTemplatePassInfo();
            c.isHitTestRender = b;
            c.context = a.g();
            c.viewportTop = this.br.top;
            c.viewportLeft = this.br.left;
            c.viewportWidth = this.br.width;
            c.viewportHeight = this.br.height;
            c.passID = "Markers";
            let d = new DataTemplateRenderInfo();
            d.passInfo = c;
            d.isHitTestRender = b;
            let e = new DataTemplateMeasureInfo();
            e.passInfo = c;
            let f = false;
            let g = a.g();
            e.context = g;
            d.context = g;
            let h = 0;
            let i = 0;
            if (this.c6.n0 != null && this.c6.n0.passStarting != null) {
                this.c6.n0.passStarting(c);
            }
            for (let j = 0; j < this.c9.count; j++) {
                let k = this.c9._inner[j];
                if (k._visibility == 1) {
                    continue;
                }
                this.bd(k, j, b);
                if (!f) {
                    e.width = k.width;
                    e.height = k.height;
                    e.renderOffsetX = 0;
                    e.renderOffsetY = 0;
                    e.renderContext = a;
                    let l = k.ah;
                    if (l.measure != null) {
                        e.data = k.content;
                        l.measure(e);
                        f = e.isConstant;
                        if (f) {
                            h = e.width;
                            i = e.height;
                        }
                    }
                    d.availableWidth = e.width;
                    d.availableHeight = e.height;
                    d.renderOffsetX = e.renderOffsetX;
                    d.renderOffsetY = e.renderOffsetY;
                    d.renderContext = a;
                }
                else {
                    d.availableWidth = h;
                    d.availableHeight = i;
                }
                if (!isNaN_(k.width) && !isInfinity(k.width)) {
                    d.availableWidth = k.width;
                }
                if (!isNaN_(k.height) && !isInfinity(k.height)) {
                    d.availableHeight = k.height;
                }
                a.p(d, k);
                k.m = d.availableWidth;
                k.l = d.availableHeight;
                k.ai = d.renderOffsetX;
                k.aj = d.renderOffsetY;
            }
            if (this.c6.n0 != null && this.c6.n0.passCompleted != null) {
                this.c6.n0.passCompleted(c);
            }
        }
        dd() {
            this.c6.n0 = null;
            this.c6.n0 = this.c6.n1;
        }
        db() {
            this.c6.oe = null;
            this.c6.oe = this.c6.og;
        }
        dc() {
            this.c6.of = null;
            this.c6.of = this.c6.oh;
        }
        da(a) {
            switch (a) {
                case "CircleMarkerTemplate":
                    this.c6.n0 = this.c6.bs.ko;
                    break;
                case "TriangleMarkerTemplate":
                    this.c6.n0 = this.c6.bs.kx;
                    break;
                case "PyramidMarkerTemplate":
                    this.c6.n0 = this.c6.bs.ku;
                    break;
                case "SquareMarkerTemplate":
                    this.c6.n0 = this.c6.bs.kv;
                    break;
                case "DiamondMarkerTemplate":
                    this.c6.n0 = this.c6.bs.kp;
                    break;
                case "PentagonMarkerTemplate":
                    this.c6.n0 = this.c6.bs.ks;
                    break;
                case "HexagonMarkerTemplate":
                    this.c6.n0 = this.c6.bs.kq;
                    break;
                case "TetragramMarkerTemplate":
                    this.c6.n0 = this.c6.bs.ks;
                    break;
                case "PentagramMarkerTemplate":
                    this.c6.n0 = this.c6.bs.kt;
                    break;
                case "HexagramMarkerTemplate":
                    this.c6.n0 = this.c6.bs.kr;
                    break;
            }
        }
        df() {
            for (let a of fromEnum(this.c9)) {
                a.ah = this.c6.n0;
            }
            this.an();
        }
        dn(a) {
            if (this.dm == null) {
                this.dm = new DataTemplateMeasureInfo();
                this.dm.context = this.h.g();
            }
            this.dm.width = a.width;
            this.dm.height = a.height;
            this.dm.data = a.content;
            let b = a.ah;
            if (b.measure != null) {
                b.measure(this.dm);
            }
            return new Size(1, this.dm.width, this.dm.height);
        }
        c2(a) {
            let b;
            let c;
            let d;
            let e;
            for (let f = this.c9.count - 1; f >= 0; f--) {
                let g = this.c9._inner[f];
                if (g._visibility == 1 || g._opacity == 0) {
                    continue;
                }
                b = (g.m / 2) + 3;
                c = (g.l / 2) + 3;
                d = g.ai;
                e = g.aj;
                if ((g.n + d) - b <= a.x && (g.n + d) + b >= a.x && (g.o + e) - c <= a.y && (g.o + e) + c >= a.y) {
                    return g;
                }
            }
            return null;
        }
        ai(a) {
            let b = a;
            super.ai(b);
            for (let c of fromEnum(this.c7.c)) {
                let d = this.c7.item(c);
                if (d._visibility != 1) {
                    let e = typeCast(ScatterPolygonSeries.$, this.e);
                    let f = this.e.a2.getMarkerVisualData(e, d, e.n0);
                    b.markerShapes.add(typeCast(MarkerVisualData.$, f));
                }
            }
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'><span";
            let b = this.e.a0.a$q(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.c6.fx + "</span><br/>";
            a += "</div>";
            return a;
        }
    }
    ScatterPolygonSeriesView.$t = /*@__PURE__*/ markType(ScatterPolygonSeriesView, 'ScatterPolygonSeriesView', ShapeSeriesViewBase.$);
    return ScatterPolygonSeriesView;
})();
//# sourceMappingURL=ScatterPolygonSeries_combined.js.map
