import { IgrVerticalStackedSeriesBase } from "./igr-vertical-stacked-series-base";
import { StackedBarSeries } from "./StackedBarSeries";
import { toPoint } from "igniteui-react-core";
/**
 * Represents a IgxDataChartComponent stacked bar series.
*/
export class IgrStackedBarSeries extends IgrVerticalStackedSeriesBase {
    constructor(props) {
        super(props);
    }
    createImplementation() {
        return new StackedBarSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the bar.
    */
    get radiusX() {
        return this.i.p7;
    }
    set radiusX(v) {
        this.i.p7 = +v;
    }
    /**
     * Gets or sets the y-radius of the ellipse that is used to round the corners of the bar.
    */
    get radiusY() {
        return this.i.p8;
    }
    set radiusY(v) {
        this.i.p8 = +v;
    }
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    */
    scrollIntoView(item) {
        let iv = this.i.c9(item);
        return (iv);
    }
    /**
     * Gets the index of the item that resides at the provided world coordinates.
    
    * @param world  * The world coordinates of the requested item.
    */
    getItemIndex(world) {
        let iv = this.i.e8(toPoint(world));
        return (iv);
    }
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world) {
        let iv = this.i.fp(toPoint(world));
        return (iv);
    }
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    getItemSpan() {
        let iv = this.i.eg();
        return (iv);
    }
}
//# sourceMappingURL=igr-stacked-bar-series.js.map
