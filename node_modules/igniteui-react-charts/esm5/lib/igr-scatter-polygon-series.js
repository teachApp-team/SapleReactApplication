import * as tslib_1 from "tslib";
import { IgrStyle } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { IgrShapeSeriesBase } from "./igr-shape-series-base";
import { ScatterPolygonSeries } from "./ScatterPolygonSeries";
import { ensureEnum, brushToString, stringToBrush } from "igniteui-react-core";
/**
 * Series class which renders polygons as Paths based on lists of points in the ItemsSource.
*/
var IgrScatterPolygonSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrScatterPolygonSeries, _super);
    function IgrScatterPolygonSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrScatterPolygonSeries.prototype.createImplementation = function () {
        return new ScatterPolygonSeries();
    };
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "hasMarkers", {
        /**
         * Returns whether the current series supports visual markers.
        */
        get: function () {
            return this.i.hasMarkers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "shapeStyle", {
        /**
         * The default style to apply to all Shapes in the series.
        */
        get: function () {
            if (this.i.ok == null) {
                return null;
            }
            if (!this.i.ok.externalObject) {
                var e = new IgrStyle();
                e._implementation = this.i.ok;
                this.i.ok.externalObject = e;
            }
            return this.i.ok.externalObject;
        },
        set: function (v) {
            v == null ? this.i.ok = null : this.i.ok = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        */
        get: function () {
            return this.i.nf;
        },
        set: function (v) {
            this.i.nf = ensureEnum(MarkerType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        */
        get: function () {
            return this.i.n1;
        },
        set: function (v) {
            this.i.n1 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerThickness", {
        /**
         * Gets or sets thickness of the marker outline
        */
        get: function () {
            return this.i.nm;
        },
        set: function (v) {
            this.i.nm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "actualMarkerTemplate", {
        /**
         * Gets the effective marker template for the current series object.
        */
        get: function () {
            return this.i.n0;
        },
        set: function (v) {
            this.i.n0 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        */
        get: function () {
            return brushToString(this.i.og);
        },
        set: function (v) {
            this.i.og = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "actualMarkerBrush", {
        /**
         * Gets the effective marker brush for the current series object.
        */
        get: function () {
            return brushToString(this.i.oe);
        },
        set: function (v) {
            this.i.oe = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        */
        get: function () {
            return brushToString(this.i.oh);
        },
        set: function (v) {
            this.i.oh = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "actualMarkerOutline", {
        /**
         * Gets the effective marker outline for the current series object.
        */
        get: function () {
            return brushToString(this.i.of);
        },
        set: function (v) {
            this.i.of = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrScatterPolygonSeries.prototype, "markerCollisionAvoidance", {
        /**
         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
        */
        get: function () {
            return this.i.ne;
        },
        set: function (v) {
            this.i.ne = ensureEnum(CollisionAvoidanceType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    IgrScatterPolygonSeries.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.shapeStyle && this.shapeStyle.name && this.shapeStyle.name == name) {
            return this.shapeStyle;
        }
        return null;
    };
    return IgrScatterPolygonSeries;
}(IgrShapeSeriesBase));
export { IgrScatterPolygonSeries };
//# sourceMappingURL=igr-scatter-polygon-series.js.map
