/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { SplineSeriesBase } from "./SplineSeriesBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { typeCast, runOn, markType } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { SplineSeriesBaseView } from "./SplineSeriesBaseView";
import { ISortingAxis_$type } from "./ISortingAxis";
/**
 * @hidden
 */
var SplineSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(SplineSeries, _super);
    function SplineSeries() {
        var _this = _super.call(this) || this;
        _this.qv = null;
        _this.qv = new CategoryLineRasterizer();
        _this.ab = SplineSeries.$;
        return _this;
    }
    SplineSeries.prototype.bf = function () {
        return new SplineSeriesView(this);
    };
    SplineSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.qw = a;
    };
    SplineSeries.prototype.preferredCategoryMode = function (a) {
        return 0;
    };
    SplineSeries.prototype.hw = function (a, b) {
        _super.prototype.hw.call(this, a, b);
        var c = b;
        c.c8();
    };
    SplineSeries.prototype.os = function (a, b) {
        _super.prototype.os.call(this, a, b);
        var c = b;
        var d = c.cn.d;
        var e = typeCast(SplineSeriesView.$, b);
        var f = a.f;
        var g = this.getEffectiveViewport1(b);
        this.ni.x(this, this.n3(), this.p2, runOn(this, this.m4), this.ob(b), this.oc(b));
        var h = false;
        var i = this.ni.c;
        if (i != null) {
            h = true;
        }
        if (h) {
            var j = new ScalerParams(0, b.bs, b.br, this.p2.ca, g);
            this.oo(f, -1, this.valueColumn.count, this.p2, j, b.n);
        }
        var k = e.de;
        var l = e.df;
        var m = e.dd;
        this.ni.ae(k, true, false, true, false);
        this.ni.ae(l, true, false, true, false);
        this.ni.ae(m, false, true, false, false);
        m._opacity = 0.75 * this.ni.i;
        if (b.cr(a)) {
            e.c9(f.count, f, true, 1, this.o0(f, f.count - 1, b.br, b.bs), d, this.eu);
            b.cu(a);
        }
    };
    Object.defineProperty(SplineSeries.prototype, "useHighMarkerFidelity", {
        get: function () {
            return this.n6;
        },
        enumerable: true,
        configurable: true
    });
    SplineSeries.$t = markType(SplineSeries, 'SplineSeries', SplineSeriesBase.$);
    return SplineSeries;
}(SplineSeriesBase));
export { SplineSeries };
/**
 * @hidden
 */
var SplineSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(SplineSeriesView, _super);
    function SplineSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.c7 = null;
        _this.dh = new Path();
        _this.dg = new Path();
        _this.di = new Path();
        _this.dc = new Path();
        _this.db = new Path();
        _this.da = new Path();
        _this.c7 = a;
        return _this;
    }
    Object.defineProperty(SplineSeriesView.prototype, "de", {
        get: function () {
            return this.dh;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplineSeriesView.prototype, "df", {
        get: function () {
            return this.di;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplineSeriesView.prototype, "dd", {
        get: function () {
            return this.dg;
        },
        enumerable: true,
        configurable: true
    });
    SplineSeriesView.prototype.c8 = function () {
        this.dg.ak = null;
        this.dh.ak = null;
        this.di.ak = null;
        this.an();
    };
    SplineSeriesView.prototype.c9 = function (a, b, c, d, e, f, g) {
        this.c7.qv.a = typeCast(ISortingAxis_$type, this.cp.fetchXAxis()) !== null ? true : false;
        this.c7.qv.m(this.dh, this.dg, this.di, a, b, c, d, e, f, g);
        this.an();
    };
    SplineSeriesView.prototype.a9 = function () {
        _super.prototype.a9.call(this);
        this.db.ak = this.dh.ak;
        this.dc.ak = this.di.ak;
        this.da.ak = this.dg.ak;
        var a = this.bl();
        this.db._stroke = a;
        this.db.ac = this.e.ey + 3;
        this.dc._stroke = a;
        this.dc.ac = this.e.ey + 3;
        this.da._fill = a;
        this.da._opacity = 1;
    };
    SplineSeriesView.prototype.a3 = function (a, b) {
        _super.prototype.a3.call(this, a, b);
        if (a.d) {
            if (b) {
                a.s(this.da);
                a.s(this.db);
                a.s(this.dc);
            }
            else {
                a.s(this.dg);
                a.s(this.dh);
                a.s(this.di);
            }
        }
    };
    SplineSeriesView.prototype.ai = function (a) {
        _super.prototype.ai.call(this, a);
        this.e.a2.exportPathData(a, this.dh, "lowerShape", ["Lower", "Main"]);
        this.e.a2.exportPathData(a, this.di, "upperShape", ["Upper"]);
        this.e.a2.exportPathData(a, this.dg, "translucentShape", ["Translucent"]);
    };
    SplineSeriesView.$t = markType(SplineSeriesView, 'SplineSeriesView', SplineSeriesBaseView.$);
    return SplineSeriesView;
}(SplineSeriesBaseView));
export { SplineSeriesView };
//# sourceMappingURL=SplineSeries_combined.js.map
