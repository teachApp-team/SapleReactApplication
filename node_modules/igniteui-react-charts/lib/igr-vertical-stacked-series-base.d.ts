import { IgrNumericXAxis } from "./igr-numeric-x-axis";
import { IgrCategoryYAxis } from "./igr-category-y-axis";
import { IgrStackedSeriesBase, IIgrStackedSeriesBaseProps } from "./igr-stacked-series-base";
import { VerticalStackedSeriesBase } from "./VerticalStackedSeriesBase";
import { IgrAxis } from "./igr-axis";
/**
 * Base class for stacked series with a numeric x-axis and a category y-axis.
*/
export declare abstract class IgrVerticalStackedSeriesBase<P extends IIgrVerticalStackedSeriesBaseProps = IIgrVerticalStackedSeriesBaseProps> extends IgrStackedSeriesBase<P> {
    /**
                                 * @hidden
                                 */
    readonly i: VerticalStackedSeriesBase;
    constructor(props: P);
    /**
     * Gets or sets the effective x-axis for the current CategorySeries object.
    */
    xAxis: IgrNumericXAxis;
    private _xAxisName;
    /**
    * Gets or sets the name to use to resolve xAxis from markup.
    */
    xAxisName: string;
    /**
     * Gets or sets the effective y-axis for the current CategorySeries object.
    */
    yAxis: IgrCategoryYAxis;
    private _yAxisName;
    /**
    * Gets or sets the name to use to resolve yAxis from markup.
    */
    yAxisName: string;
    /**
     * Gets whether or not the current series is vertical series
    */
    readonly isVertical: boolean;
    bindAxes(axes: IgrAxis[]): void;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
     * Returns the offset value for this series if grouped on a category axis.
    
    */
    getOffsetValue(): number;
    /**
     * Returns the width of the category grouping this series is in.
    
    */
    getCategoryWidth(): number;
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    */
    canUseAsYAxis(axis: any): boolean;
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    */
    canUseAsXAxis(axis: any): boolean;
}
export interface IIgrVerticalStackedSeriesBaseProps extends IIgrStackedSeriesBaseProps {
    /**
     * Gets or sets the effective x-axis for the current CategorySeries object.
    */
    xAxis?: IgrNumericXAxis;
    /**
    * Gets or sets the name to use to resolve xAxis from markup.
    */
    xAxisName?: string;
    /**
     * Gets or sets the effective y-axis for the current CategorySeries object.
    */
    yAxis?: IgrCategoryYAxis;
    /**
    * Gets or sets the name to use to resolve yAxis from markup.
    */
    yAxisName?: string;
}
