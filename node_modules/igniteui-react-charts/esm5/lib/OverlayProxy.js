/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, markType, getInstanceType } from "igniteui-react-core";
import { IOverlayProxy_$type } from "./IOverlayProxy";
import { stringEndsWith } from "igniteui-react-core";
/**
 * @hidden
 */
var OverlayProxy = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(OverlayProxy, _super);
    function OverlayProxy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OverlayProxy.prototype.matchesType = function (a) {
        if (stringEndsWith(getInstanceType(a).typeName, "Overlay")) {
            return true;
        }
        return false;
    };
    OverlayProxy.prototype.setCloseMemberPath = function (a, b) {
        a.od = b;
    };
    OverlayProxy.prototype.setHighMemberPath = function (a, b) {
        a.og = b;
    };
    OverlayProxy.prototype.setLowMemberPath = function (a, b) {
        a.ol = b;
    };
    OverlayProxy.prototype.setMultiplier = function (a, b) {
        if (getInstanceType(a).typeName == "BollingerBandsOverlay") {
            var s_ = a;
            var p_ = b;
            s_['multiplier'] = p_;
        }
    };
    OverlayProxy.prototype.setOpenMemberPath = function (a, b) {
        a.op = b;
    };
    OverlayProxy.prototype.setVolumeMemberPath = function (a, b) {
        a.ot = b;
    };
    OverlayProxy.prototype.setXAxis = function (a, b) {
        a.l9 = b;
    };
    OverlayProxy.prototype.setYAxis = function (a, b) {
        a.mu = b;
    };
    OverlayProxy.$t = markType(OverlayProxy, 'OverlayProxy', Base.$, [IOverlayProxy_$type]);
    return OverlayProxy;
}(Base));
export { OverlayProxy };
//# sourceMappingURL=OverlayProxy.js.map
