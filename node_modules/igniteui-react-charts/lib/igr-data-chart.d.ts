import * as React from 'react';
import { IgrAxis } from './igr-axis';
import { IgrSeries } from './igr-series';
import { GridMode } from './GridMode';
import { IgrSeriesViewer, IIgrSeriesViewerProps } from './igr-series-viewer';
import { XamDataChart } from './XamDataChart';
import { IgrSeriesCollection } from './igr-series-collection';
import { IgrAxisCollection } from './igr-axis-collection';
/**
 * Represents a chart area containing axes, series, an optional legend and other hosted content.
*/
export declare class IgrDataChart extends IgrSeriesViewer<IIgrDataChartProps> {
    contentAxes: IgrAxis[];
    contentSeries: IgrSeries[];
    private _height;
    private _width;
    height: string;
    /**
     * Gets or sets the legend used for the current chart.
    */
    legend: any;
    private _updateContentChildren;
    private _contentChildrenManager;
    private _getMainRef;
    private _elRef;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (ref: any) => void;
        children: any[];
    }, any>;
    protected _tooltipRef(t: any): void;
    componentDidMount(): void;
    width: string;
    /**
     * The series actually present in the chart. Do not directly modify this array.
     * This array's contents can be modified by causing React to reproject the child content.
     * Or adding and removing series from the manual series collection on the series property.
     */
    actualSeries: IgrSeries[];
    /**
     * The axes actually present in the chart. Do not directly modify this array.
     * This array's contents can be modified by causing React to reproject the child content.
     * Or adding and removing axes from the manual axes collection on the axes property.
     */
    actualAxes: IgrAxis[];
    private _container;
    private _series;
    /**
     * A collection or manually added series for the chart.
    */
    readonly series: IgrSeriesCollection;
    private _axes;
    /**
     * A collection or manually added axes for the chart.
    */
    readonly axes: IgrAxisCollection;
    constructor(props: IIgrDataChartProps);
    componentWillUnmount(): void;
    private _initialized;
    private _wrapper;
    protected createImplementation(): XamDataChart;
    private _chart;
    private _dataSource;
    dataSource: any;
    bindData(): void;
    private _axesAdapter;
    private _seriesAdapter;
    initializeContent(): void;
    private _ensureTooltipCreated;
    private _defaultTooltips;
    private _ensureDefaultTooltip;
    private _onDefaultTooltipsReady;
    private _activeTooltips;
    private _activeTooltipElements;
    private _currentTooltips;
    private _uniqueTooltipId;
    private createTooltip;
    private _updateTooltipState;
    /**
     * Gets or sets the channel with which to synchronize.
    *
    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.
    */
    syncChannel: string;
    /**
     * Gets or sets the bool used to display the window preview shadow.
    *
    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.
    */
    synchronizeVertically: boolean;
    /**
     * Gets or sets the bool used to display the window preview shadow.
    *
    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.
    */
    synchronizeHorizontally: boolean;
    /**
                             * @hidden
                             */
    readonly i: XamDataChart;
    /**
 * Gets or sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.
*
* Set `isSquare` to true to constrain the chart to a square, using the minimum of its height and width.
*
* ```ts
*  this.chart.isSquare="True";
* ```
*
* ```ts
*  <IgrDataChart
* 	IsHorizontalZoomEnabled="True"
*     dataSource={this.state.dataSource} >
*
*     <IgrCategoryXAxis name="xAxis" />
*     <IgrNumericYAxis name="yAxis" />
*
*     <IgrColumnSeries
*      name="series1"
*     xAxisName="xAxis"
* 	yAxisName="yAxis"
* 	valueMemberPath="Value" />
*  </IgrDataChart>
* ```
*/
    isSquare: boolean;
    /**
     * A number between 0 and 1 determining the scale of the horizontal zoom.
     * This property is effectively a shortcut to the Width of the WindowRect property.
    *
    * To programmatically change the horizontal zoom level, set `windowScaleHorizontal` to a value between 0 and 1.
    *
    * ```ts
    * this.chart.windowScaleHorizontal="0.75";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	windowScaleHorizontal="0.75"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    windowScaleHorizontal: number;
    /**
     * A number between 0 and 1 determining the scale of the vertical zoom.
     * This property is effectively a shortcut to the Height of the WindowRect property.
    *
    * To programmatically change the vertical zoom level, set `windowScaleVertical` to a value between 0 and 1.
    *
    * ```ts
    * this.chart.windowScaleVertical="0.75";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	windowScaleVertical="0.75"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    windowScaleVertical: number;
    /**
     * A number between 0 and 1 determining the scale of the horizontal zoom.
     * This property is effectively a shortcut to the Width of the ActualWindowRect property.
    */
    actualWindowScaleHorizontal: number;
    /**
     * A number between 0 and 1 determining the scale of the vertical zoom.
     * This property is effectively a shortcut to the Height of the ActualWindowRect property.
    */
    actualWindowScaleVertical: number;
    /**
     * Gets or sets horizontal zoomability of the current control
    *
    * Set `isHorizontalZoomEnabled` to enable or disable horizontal zooming.
    *
    * ```ts
    * this.chart.IsHorizontalZoomEnabled= true;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	IsHorizontalZoomEnabled="True"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    isHorizontalZoomEnabled: boolean;
    /**
     * Gets or sets vertical zoomability of the current control
    *
    * Set `isVerticalZoomEnabled` to enable or disable vertical zooming.
    *
    * ```ts
    * this.chart.isVerticalZoomEnabled="True";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	IsVerticalZoomEnabled="True"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    isVerticalZoomEnabled: boolean;
    /**
     * Gets or sets how grid lines are rendered in relation to series.
    *
    *  Try setting the `gridMode` property to bring your grid lines in front of the data series.
    */
    gridMode: GridMode;
    /**
     * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.
    */
    alignsGridLinesToPixels: boolean;
    /**
     * Gets or sets the palette of brushes to use for coloring the chart series.
    *
    * `brushes` can be set declaratively to a list of color strings.
    *
    * ```ts
    * this.chart.brushes="red" ;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	brushes="red"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    brushes: string[];
    /**
     * Gets or sets the MarkerBrushes property.
     * The brushes property defines the palette from which automatically assigned series brushes are selected.
    *
    * `markerBrushes` can be set declaratively to a list of color strings.
    *
    * ```ts
    * this.chart.markerBrushes="red,green,blue";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	MarkerBrushes="red,green,blue"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    markerBrushes: string[];
    /**
     * Gets or sets the palette of brushes to use for outlines on the chart series.
    *
    * `outlines` can be set declaratively to a list of color strings.
    *
    * ```ts
    * this.chart.outlines="red,green,blue";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     outlines="red,green,blue"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    outlines: string[];
    /**
     * Gets or sets the MarkerOutlines property.
     * The brushes property defines the palette from which automatically assigned series brushes are selected.
    *
    * `markerOutlines` can be set declaratively to a list of color strings.
    *
    * ```ts
    * this.chart.markerOutlines="red,green,blue";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     markerOutlines="red,green,blue"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    markerOutlines: string[];
    /**
     * Gets or sets the DefaultAxisStroke property.
     * The DefaultAxisStroke property defines the brush which is used by the axes when no Axis.Stroke is set.
    */
    defaultAxisStroke: string;
    /**
     * Gets or sets the DefaultAxisMajorStroke property.
     * The DefaultAxisMajorStroke property defines the brush which is used by the axes when no Axis.MajorStroke is set.
    */
    defaultAxisMajorStroke: string;
    /**
     * Gets or sets the DefaultAxisMinorStroke property.
     * The DefaultAxisMinorStroke property defines the brush which is used by the axes when no Axis.MinorStroke is set.
    */
    defaultAxisMinorStroke: string;
    /**
     * Margin applied to the left of the plot area.
    */
    plotAreaMarginLeft: number;
    /**
     * Margin applied above the plot area.
    */
    plotAreaMarginTop: number;
    /**
     * Margin applied to the right of the plot area.
    */
    plotAreaMarginRight: number;
    /**
     * Margin applied below the plot area.
    */
    plotAreaMarginBottom: number;
    findByName(name: string): any;
    /**
 * Notifies the chart that the CSS styles in effect have been updated.

*/
    styleUpdated(): void;
    /**
     * Export serialized visual data.
    
    */
    exportSerializedVisualData(): string;
}
export interface IIgrDataChartProps extends IIgrSeriesViewerProps {
    width?: string;
    height?: string;
    /**
  * Gets or sets the data for the chart to use. This can be overriden at the series and axis level.
  */
    dataSource?: any[];
    /**
 * Gets or sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.
*
* Set `isSquare` to true to constrain the chart to a square, using the minimum of its height and width.
*
* ```ts
*  this.chart.isSquare="True";
* ```
*
* ```ts
*  <IgrDataChart
* 	IsHorizontalZoomEnabled="True"
*     dataSource={this.state.dataSource} >
*
*     <IgrCategoryXAxis name="xAxis" />
*     <IgrNumericYAxis name="yAxis" />
*
*     <IgrColumnSeries
*      name="series1"
*     xAxisName="xAxis"
* 	yAxisName="yAxis"
* 	valueMemberPath="Value" />
*  </IgrDataChart>
* ```
*/
    isSquare?: boolean | string;
    /**
     * A number between 0 and 1 determining the scale of the horizontal zoom.
     * This property is effectively a shortcut to the Width of the WindowRect property.
    *
    * To programmatically change the horizontal zoom level, set `windowScaleHorizontal` to a value between 0 and 1.
    *
    * ```ts
    * this.chart.windowScaleHorizontal="0.75";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	windowScaleHorizontal="0.75"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    windowScaleHorizontal?: number | string;
    /**
     * A number between 0 and 1 determining the scale of the vertical zoom.
     * This property is effectively a shortcut to the Height of the WindowRect property.
    *
    * To programmatically change the vertical zoom level, set `windowScaleVertical` to a value between 0 and 1.
    *
    * ```ts
    * this.chart.windowScaleVertical="0.75";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	windowScaleVertical="0.75"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    windowScaleVertical?: number | string;
    /**
     * A number between 0 and 1 determining the scale of the horizontal zoom.
     * This property is effectively a shortcut to the Width of the ActualWindowRect property.
    */
    actualWindowScaleHorizontal?: number | string;
    /**
     * A number between 0 and 1 determining the scale of the vertical zoom.
     * This property is effectively a shortcut to the Height of the ActualWindowRect property.
    */
    actualWindowScaleVertical?: number | string;
    /**
     * Gets or sets horizontal zoomability of the current control
    *
    * Set `isHorizontalZoomEnabled` to enable or disable horizontal zooming.
    *
    * ```ts
    * this.chart.IsHorizontalZoomEnabled= true;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	IsHorizontalZoomEnabled="True"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    isHorizontalZoomEnabled?: boolean | string;
    /**
     * Gets or sets vertical zoomability of the current control
    *
    * Set `isVerticalZoomEnabled` to enable or disable vertical zooming.
    *
    * ```ts
    * this.chart.isVerticalZoomEnabled="True";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	IsVerticalZoomEnabled="True"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    isVerticalZoomEnabled?: boolean | string;
    /**
     * Gets or sets how grid lines are rendered in relation to series.
    *
    *  Try setting the `gridMode` property to bring your grid lines in front of the data series.
    */
    gridMode?: GridMode | string;
    /**
     * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.
    */
    alignsGridLinesToPixels?: boolean | string;
    /**
     * Gets or sets the palette of brushes to use for coloring the chart series.
    *
    * `brushes` can be set declaratively to a list of color strings.
    *
    * ```ts
    * this.chart.brushes="red" ;
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	brushes="red"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    brushes?: string[] | string;
    /**
     * Gets or sets the MarkerBrushes property.
     * The brushes property defines the palette from which automatically assigned series brushes are selected.
    *
    * `markerBrushes` can be set declaratively to a list of color strings.
    *
    * ```ts
    * this.chart.markerBrushes="red,green,blue";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    * 	MarkerBrushes="red,green,blue"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    markerBrushes?: string[] | string;
    /**
     * Gets or sets the palette of brushes to use for outlines on the chart series.
    *
    * `outlines` can be set declaratively to a list of color strings.
    *
    * ```ts
    * this.chart.outlines="red,green,blue";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     outlines="red,green,blue"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    outlines?: string[] | string;
    /**
     * Gets or sets the MarkerOutlines property.
     * The brushes property defines the palette from which automatically assigned series brushes are selected.
    *
    * `markerOutlines` can be set declaratively to a list of color strings.
    *
    * ```ts
    * this.chart.markerOutlines="red,green,blue";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     markerOutlines="red,green,blue"
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value" />
    *  </IgrDataChart>
    * ```
    */
    markerOutlines?: string[] | string;
    /**
     * Gets or sets the DefaultAxisStroke property.
     * The DefaultAxisStroke property defines the brush which is used by the axes when no Axis.Stroke is set.
    */
    defaultAxisStroke?: string;
    /**
     * Gets or sets the DefaultAxisMajorStroke property.
     * The DefaultAxisMajorStroke property defines the brush which is used by the axes when no Axis.MajorStroke is set.
    */
    defaultAxisMajorStroke?: string;
    /**
     * Gets or sets the DefaultAxisMinorStroke property.
     * The DefaultAxisMinorStroke property defines the brush which is used by the axes when no Axis.MinorStroke is set.
    */
    defaultAxisMinorStroke?: string;
    /**
     * Margin applied to the left of the plot area.
    */
    plotAreaMarginLeft?: number | string;
    /**
     * Margin applied above the plot area.
    */
    plotAreaMarginTop?: number | string;
    /**
     * Margin applied to the right of the plot area.
    */
    plotAreaMarginRight?: number | string;
    /**
     * Margin applied below the plot area.
    */
    plotAreaMarginBottom?: number | string;
}
