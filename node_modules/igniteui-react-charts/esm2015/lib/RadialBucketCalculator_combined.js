/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType, runOn, EnumUtil, typeCast, fromEnum, markDep } from "igniteui-react-core";
import { IBucketizer_$type } from "./IBucketizer";
import { NotImplementedException } from "igniteui-react-core";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { truncate } from "igniteui-react-core";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference_$type } from "./IHasCategoryModePreference";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { RadialFrame } from "./RadialFrame";
import { DependencyProperty } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { ScalerParams } from "./ScalerParams";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { RadialAxes } from "./RadialAxes";
import { Visibility_$type } from "igniteui-react-core";
import { SeriesRenderingArguments } from "./SeriesRenderingArguments";
import { PropertyMetadata } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let RadialBucketCalculator = /*@__PURE__*/ (() => {
    class RadialBucketCalculator extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.c = 0;
            this.d = 0;
            this.b = 0;
            this.a = a;
        }
        getBucket(a) {
            throw new NotImplementedException(0);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getErrorBucket(a, b) {
            return NaN;
        }
        getBucketInfo(a, b, c, d) {
            a = this.c;
            b = this.d;
            c = this.b;
            d = this.a.cn.eu;
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d
            };
        }
        e(a) {
            let b = this.a.bs;
            let c = this.a.br;
            let d = this.a.cn.m4;
            if (b.isEmpty || c.isEmpty || d == null || this.a.cn.bz == null || this.a.cn.bz.count == 0) {
                this.b = 0;
                return;
            }
            let e = Math.floor(d.lk(c, b));
            let f = Math.ceil(d.lj(c, b));
            if (d.ca) {
                f = Math.ceil(d.lk(c, b));
                e = Math.floor(d.lj(c, b));
            }
            if (f < e) {
                f = d.j5 + f;
            }
            let g = this.a.cn.m6;
            let h = g != null ? g.lq : 0.75;
            let i = Math.min(c.width, c.height) * 0.5 * (h) * 2 * Math.PI;
            let j = Math.floor((f - e + 1) * a / i);
            this.b = truncate(Math.max(1, j));
            this.c = truncate(Math.max(0, Math.floor(e / this.b) - 1));
            this.d = truncate(Math.ceil(f / this.b));
        }
        cacheValues() {
        }
        unCacheValues() {
        }
    }
    RadialBucketCalculator.$t = /*@__PURE__*/ markType(RadialBucketCalculator, 'RadialBucketCalculator', Base.$, [IBucketizer_$type]);
    return RadialBucketCalculator;
})();
/**
 * @hidden
 */
export let RadialBase = /*@__PURE__*/ (() => {
    class RadialBase extends MarkerSeries {
        constructor() {
            super();
            this.nc = null;
            this.na = new RadialFrame(3);
            this.nb = new RadialFrame(3);
            this.m9 = new RadialFrame(3);
            this.m7 = null;
            this.nc = new SeriesRenderer$2(RadialFrame.$, RadialBaseView.$, 1, runOn(this, this.no), runOn(this, this.np), runOn(this, this.ca), runOn(this, this.jm), runOn(this, this.nn), (a) => this.m8.co.e(this.eu));
        }
        iv(a) {
            super.iv(a);
            this.m8 = a;
        }
        nn() {
            if (this.bt.g) {
                this.bt.t();
            }
        }
        get categoryAxis() {
            return this.m4;
        }
        ap() {
            return this.m4;
        }
        ng(a) {
            if (!this.hasMarkers) {
                return false;
            }
            let b = this.m4;
            let c = new ScalerParams(1, this.bs.mr, this.lz, b.ca);
            c.c = this.getEffectiveViewport1(this.bi);
            let d = this.m6;
            let e = new ScalerParams(1, this.bs.mr, this.lz, d.ca);
            e.c = this.getEffectiveViewport1(this.bi);
            a.clear();
            this.l1.cc((f) => {
                if (f._visibility == 0) {
                    let g = new SeriesPointOfInterest();
                    let h = f.n;
                    let i = f.o;
                    if (h < this.lz.left || h > this.lz.right || i < this.lz.top || i > this.lz.bottom) {
                        return;
                    }
                    g.b = b.d1(h, c);
                    g.c = d.d1(i, e);
                    g.d = b.fl(f.ak);
                    g.a = f.content;
                    a.add(g);
                }
            });
            return true;
        }
        get_c2() {
            return true;
        }
        ag() {
            return [this.m4, this.m6];
        }
        ju(a, b) {
            this.m8.co.e(this.eu);
            this.je(false);
        }
        jt(a, b) {
            this.m8.co.e(this.eu);
            this.je(false);
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    if (c != null && d == null) {
                        if (this.m4 != null) {
                            this.m4.bx(this);
                        }
                        if (this.m6 != null) {
                            this.m6.bx(this);
                        }
                    }
                    if (c == null && d != null) {
                        if (this.m4 != null) {
                            this.m4.ck(this);
                        }
                        if (this.m6 != null) {
                            this.m6.ck(this);
                        }
                    }
                    this.m8.co.e(this.eu);
                    this.je(false);
                    break;
                case RadialBase.$$p[0]:
                    if (this.m4 != null && this.m6 != null) {
                        this.m7 = new RadialAxes(this.m6, this.m4);
                    }
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.ck(this);
                    }
                    this.m8.co.e(this.eu);
                    this.je(false);
                    break;
                case RadialBase.$$p[2]:
                    if (this.m4 != null && this.m6 != null) {
                        this.m7 = new RadialAxes(this.m6, this.m4);
                    }
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.ck(this);
                    }
                    this.m8.co.e(this.eu);
                    if (this.m6 == null || !this.m6.cn()) {
                        this.je(false);
                    }
                    break;
                case "SyncLink":
                    if (this.bn != null && this.bs != null) {
                        this.m8.co.e(this.eu);
                        this.je(false);
                    }
                    break;
                case "TransitionProgress":
                    this.nb.c(this.ez, this.na, this.m9);
                    if (this.cc(this.bi)) {
                        return;
                    }
                    if (this.ez == 1) {
                        this.np(this.m9, this.m8);
                    }
                    else {
                        this.np(this.nb, this.m8);
                    }
                    if (this.bs != null) {
                        this.bs.jk(this);
                    }
                    break;
                case RadialBase.$$p[1]:
                    this.je(false);
                    this.il();
                    break;
                case "VisibilityProxy":
                    if (EnumUtil.getEnumValue(Visibility_$type, c) != 0 && EnumUtil.getEnumValue(Visibility_$type, d) == 0) {
                        this.m8.co.e(this.eu);
                    }
                    break;
            }
        }
        ne(a) {
            if (typeCast(NumericRadiusAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        nd(a) {
            if (typeCast(CategoryAngleAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        fp(a) {
            let b = this.e8(a);
            return b >= 0 && this.bz != null && b < this.bz.count ? this.bz.item(b) : null;
        }
        nh(a) {
            let b = this.bi.bs;
            let c = this.bi.br;
            if (this.m4 != null && !b.isEmpty && !c.isEmpty && this.m7 != null) {
                let d = this.m7.c(a);
                if (d < 0) {
                    d += Math.PI * 2;
                }
                if (d > Math.PI * 2) {
                    d -= Math.PI * 2;
                }
                return d;
            }
            return NaN;
        }
        ni(a) {
            let b = this.bi.bs;
            let c = this.bi.br;
            let d = -1;
            if (this.m4 != null && !b.isEmpty && !c.isEmpty && this.m7 != null) {
                let e = this.m7.c(a);
                if (e < 0) {
                    e += Math.PI * 2;
                }
                if (e > Math.PI * 2) {
                    e -= Math.PI * 2;
                }
                let f = this.m4.getUnscaledAngle(e);
                if (this.m4.categoryMode != 0) {
                    f -= 0.5;
                }
                d = f;
            }
            return d;
        }
        e8(a) {
            let b = truncate(Math.round(this.ni(a)));
            if (this.bz != null && b == this.bz.count) {
                b = 0;
            }
            return b;
        }
        c9(a) {
            return false;
        }
        ic() {
            super.ic();
            if (this.m4 != null) {
                this.m4.hb(false);
            }
            if (this.m6 != null) {
                this.m6.hb(false);
            }
        }
        dw(a, b, c) {
            let d = true;
            let e = c;
            if (!super.dw(a, b, c) || !c.l() || b.isEmpty || a.isEmpty || this.m4 == null || this.m4.itemsSource == null || this.m6 == null || this.m7 == null || this.bz == null || this.m4.bh == null || this.m6.bh == null || this.m6.kb == this.m6.ka) {
                e.co.b = 0;
                d = false;
            }
            return d;
        }
        jf(a) {
            let b;
            let c;
            let d = this.getViewInfo(c, b);
            c = d.p0;
            b = d.p1;
            if (!this.dw(c, b, this.bi)) {
                this.hw(true, this.bi);
                return;
            }
            let e = new SeriesRenderingArguments(this, c, b, a, this.de);
            let f = this.nc.g(e, this.na, this.m9, this.nb, this.m8);
            this.na = f.p1;
            this.m9 = f.p2;
            this.nb = f.p3;
        }
        nj() {
            let a = 0;
            for (let b of fromEnum(this.bs.series)) {
                if (b == this) {
                    return a;
                }
                let c = typeCast(RadialBase.$, b);
                if (c != null && c.m4 == this.m4 && c.preferredCategoryMode(c.m4) == 2) {
                    a++;
                }
            }
            return -1;
        }
    }
    RadialBase.$t = /*@__PURE__*/ markType(RadialBase, 'RadialBase', MarkerSeries.$, [IHasCategoryModePreference_$type]);
    RadialBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, RadialBase, 'raisePropertyChanged', ['AngleAxis:m4:nq', [CategoryAngleAxis.$, null], 'ClipSeriesToBounds:nf:nr', [0, false], 'ValueAxis:m6:ns', [NumericRadiusAxis.$, null]]);
    return RadialBase;
})();
/**
 * @hidden
 */
export let RadialBaseView = /*@__PURE__*/ (() => {
    class RadialBaseView extends MarkerSeriesView {
        constructor(a) {
            super(a);
            this.co = null;
            this.cn = null;
            this.cp = null;
            this.cq = 0;
            this.cr = null;
            this.cn = a;
            this.cp = new Pool$1(Marker.$);
            this.cf(this.cp);
        }
        cc(a) {
            this.cp.c(a);
        }
    }
    RadialBaseView.$t = /*@__PURE__*/ markType(RadialBaseView, 'RadialBaseView', MarkerSeriesView.$);
    return RadialBaseView;
})();
//# sourceMappingURL=RadialBucketCalculator_combined.js.map
