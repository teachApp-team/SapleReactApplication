/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { NumericAxisBase } from "./NumericAxisBase";
import { NumericScaleMode_$type } from "./NumericScaleMode";
import { DependencyProperty } from "igniteui-react-core";
import { NumericScaler } from "./NumericScaler";
import { enumGetBox, typeCast, markType, markDep } from "igniteui-react-core";
import { ArgumentNullException } from "igniteui-react-core";
import { LogarithmicScaler } from "./LogarithmicScaler";
import { PropertyMetadata } from "igniteui-react-core";
import { NumericAxisBaseView } from "./NumericAxisBaseView";
/**
 * @hidden
 */
export let StraightNumericAxisBase = /*@__PURE__*/ (() => {
    class StraightNumericAxisBase extends NumericAxisBase {
        constructor() {
            super();
            this.ll = null;
            this.lp = false;
            this.lz();
        }
        a2() {
            return new StraightNumericAxisBaseView(this);
        }
        gx(a) {
            super.gx(a);
            this.lo = a;
        }
        get ln() {
            return this.c(StraightNumericAxisBase.l1);
        }
        set ln(a) {
            this.h(StraightNumericAxisBase.l1, a);
        }
        static lx(a, b) {
            let c = typeCast(StraightNumericAxisBase.$, a);
            c.lz();
            c.g5("Scaler", b.oldValue, b.newValue);
        }
        lm() {
            return null;
        }
        get_lk() {
            if (this.ll == null) {
                this.lz();
            }
            return this.ll;
        }
        set_lk(a) {
            let b = this.ll != a;
            if (b) {
                let c = this.ll;
                this.ll = a;
                this.g5("ActualScaler", c, a);
            }
        }
        get lk() {
            return this.get_lk();
        }
        set lk(a) {
            this.set_lk(a);
        }
        k6(a, b, c, d, e, f, g) {
            let h = this.lk.t(a, b, c, f, g);
            f = h.p3;
            g = h.p4;
            return {
                p5: f,
                p6: g
            };
        }
        ly(a) {
            let b = this.lp;
            this.lp = true;
            a();
            this.lp = b;
        }
        lz() {
            let a = this.ln;
            if (a == null) {
                a = this.jp();
            }
            this.lk = a;
            if (this.lk == null) {
                throw new ArgumentNullException(0, "ActualScaler");
            }
            this.lu();
        }
        lu() {
            this.lo.bh();
        }
        gz(a, b, c, d) {
            if (this.lp) {
                return;
            }
            super.gz(a, b, c, d);
            switch (b) {
                case NumericAxisBase.$$p[2]:
                    this.lz();
                    break;
                case NumericAxisBase.$$p[1]:
                    this.lz();
                    break;
                case StraightNumericAxisBase.$$p[0]:
                    this.lz();
                    break;
                case "Scaler":
                    this.lz();
                    break;
                case "ActualScaler":
                    this.jw = typeCast(LogarithmicScaler.$, this.lk) !== null;
                    this.lu();
                    this.cn();
                    this.hb(false);
                    break;
                case "ActualMaximumValue":
                    this.lv();
                    break;
                case "ActualMinimumValue":
                    this.lw();
                    this.lz();
                    break;
            }
        }
        lw() {
            this.lk.y(this.kb);
        }
        lv() {
            this.lk.x(this.ka);
        }
        lq(a, b) {
            if (a < this.kb) {
                a = this.kb;
            }
            else if (a > this.ka) {
                a = this.ka;
            }
            if (!b.ch) {
                return (a - this.kb) / (this.ka - this.kb);
            }
            else {
                return (a - this.ka) / (this.kb - this.ka);
            }
        }
    }
    StraightNumericAxisBase.$t = /*@__PURE__*/ markType(StraightNumericAxisBase, 'StraightNumericAxisBase', NumericAxisBase.$);
    StraightNumericAxisBase.l1 = /*@__PURE__*/ DependencyProperty.i("Scaler", NumericScaler.$, StraightNumericAxisBase.$, /*@__PURE__*/ new PropertyMetadata(2, null, StraightNumericAxisBase.lx));
    StraightNumericAxisBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StraightNumericAxisBase, 'g5', ['ScaleMode:lj:l0', [NumericScaleMode_$type, /*@__PURE__*/ enumGetBox(NumericScaleMode_$type, 0)]]);
    return StraightNumericAxisBase;
})();
/**
 * @hidden
 */
export let StraightNumericAxisBaseView = /*@__PURE__*/ (() => {
    class StraightNumericAxisBaseView extends NumericAxisBaseView {
        constructor(a) {
            super(a);
            this.bg = null;
            this.bg = a;
        }
        bh() {
            this.bg.lk.x(this.bg.ka);
            this.bg.lk.y(this.bg.kb);
        }
    }
    StraightNumericAxisBaseView.$t = /*@__PURE__*/ markType(StraightNumericAxisBaseView, 'StraightNumericAxisBaseView', NumericAxisBaseView.$);
    return StraightNumericAxisBaseView;
})();
//# sourceMappingURL=StraightNumericAxisBase_combined.js.map
