import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { Type } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { CategorySeries } from "./CategorySeries";
import { IIsCategoryBased } from "./IIsCategoryBased";
import { IHasHighLowValueCategory } from "./IHasHighLowValueCategory";
import { RangeCategoryFramePreparer } from "./RangeCategoryFramePreparer";
import { CategoryMode } from "./CategoryMode";
import { ICategoryScaler } from "./ICategoryScaler";
import { IScaler } from "./IScaler";
import { IBucketizer } from "./IBucketizer";
import { CategorySeriesView } from "./CategorySeriesView";
import { CategoryFrame } from "./CategoryFrame";
import { SeriesView } from "./SeriesView";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { List$1 } from "igniteui-react-core";
import { Polyline } from "igniteui-react-core";
import { Polygon } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { AxisRange } from "./AxisRange";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { IDetectsCollisions } from "./IDetectsCollisions";
import { RenderSurface } from "./RenderSurface";
/**
 * @hidden
 */
export declare class RangeCategoryBucketCalculator extends CategoryBucketCalculator {
    static $t: Type;
    j: RangeCategorySeriesView;
    constructor(a: RangeCategorySeriesView);
    getBucketWithoutUnknowns(a: number): number[];
    getBucket(a: number): number[];
    private l;
    private k;
    private i;
    private h;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class RangeCategorySeries extends CategorySeries implements IIsCategoryBased, IHasHighLowValueCategory {
    static $t: Type;
    protected bf(): SeriesView;
    getHostReferenceValue(): number;
    iv(a: SeriesView): void;
    o1: RangeCategorySeriesView;
    constructor();
    private _RangeFramePreparer;
    RangeFramePreparer: RangeCategoryFramePreparer;
    pa: string;
    fs(a: any, b: string): any;
    lowColumn: IFastItemColumn$1<number>;
    private o4;
    o7: string;
    highColumn: IFastItemColumn$1<number>;
    private o2;
    protected nk(): CategoryTransitionInMode;
    os(a: CategoryFrame, b: CategorySeriesView): void;
    protected pc(a: Polyline, b: Polygon, c: Polyline, d: number, e: List$1<number[]>, f: boolean): void;
    c9(a: any): boolean;
    protected i0(a: any, b: string, c: any, d: any): void;
    an(a: Axis): AxisRange;
    protected hz(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    dw(a: Rect, b: Rect, c: SeriesView): boolean;
    op(a: CategoryFrame, b: CategorySeriesView): void;
    readonly currentCategoryMode: CategoryMode;
    readonly scaler: ICategoryScaler;
    readonly yScaler: IScaler;
    readonly bucketizer: IBucketizer;
    readonly currentMode2Index: number;
    provideCollisionDetector(): IDetectsCollisions;
    readonly mayContainUnknowns: boolean;
    jg(a: Rect, b: RenderSurface): void;
    private oz;
    jd(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    eh(): number;
    readonly useHighMarkerFidelity: boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class RangeCategorySeriesView extends CategorySeriesView {
    static $t: Type;
    cw: RangeCategorySeries;
    constructor(a: RangeCategorySeries);
    cx(a: Polyline, b: Polygon, c: Polyline, d: number, e: List$1<number[]>, f: boolean): void;
    co(): CategoryBucketCalculator;
}
