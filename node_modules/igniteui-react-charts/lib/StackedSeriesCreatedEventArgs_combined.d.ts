import { EventArgs, Base, Type, Point, INotifyPropertyChanged, PropertyChangedEventArgs } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { DataTemplate } from "igniteui-react-core";
import { Visibility } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { Style } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { Series } from "./Series";
import { List$1 } from "igniteui-react-core";
import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategorySeries } from "./CategorySeries";
import { NumericAxisBase } from "./NumericAxisBase";
import { ISupportsMarkers } from "./ISupportsMarkers";
import { CategoryFrame } from "./CategoryFrame";
import { IDetectsCollisions } from "./IDetectsCollisions";
import { Rect } from "igniteui-react-core";
import { CategorySeriesView } from "./CategorySeriesView";
import { PointCollection } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { IChartLegend } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { RenderSurface } from "./RenderSurface";
import { Path } from "igniteui-react-core";
import { CategoryMode } from "./CategoryMode";
import { DependencyObject } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { SeriesViewer } from "./SeriesViewer";
import { IScaler } from "./IScaler";
import { IIsCategoryBased } from "./IIsCategoryBased";
import { NumericXAxis } from "./NumericXAxis";
import { CategoryYAxis } from "./CategoryYAxis";
import { AnchoredCategoryBucketCalculator } from "./AnchoredCategoryBucketCalculator";
import { SplineSeriesBase } from "./SplineSeriesBase";
import { CollisionAvoider } from "./CollisionAvoider";
import { ICategoryScaler } from "./ICategoryScaler";
import { IBucketizer } from "./IBucketizer";
import { CategoryFramePreparer } from "./CategoryFramePreparer";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { IBarSeries } from "./IBarSeries";
import { Color } from "igniteui-react-core";
import { DomRenderer } from "igniteui-react-core";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { IProvidesViewport } from "./IProvidesViewport";
import { ISupportsErrorBars } from "./ISupportsErrorBars";
import { ValuesHolder } from "./ValuesHolder";
import { PreparationParams } from "./PreparationParams";
import { RenderingContext } from "igniteui-react-core";
import { SplineSeriesBaseView } from "./SplineSeriesBaseView";
import { Canvas } from "igniteui-react-core";
import { Panel } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class StackedSeriesCreatedEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: StackedFragmentSeries);
    c: StackedFragmentSeries;
    brush: Brush;
    legendItemTemplate: DataTemplate;
    legendItemBadgeTemplate: DataTemplate;
    legendItemVisibility: Visibility;
    outline: Brush;
    dashArray: DoubleCollection;
    dashCap: PenLineCap;
    readonly index: number;
    thickness: number;
    title: any;
    markerBrush: Brush;
    markerOutline: Brush;
    markerStyle: Style;
    markerTemplate: DataTemplate;
    markerType: MarkerType;
    startCap: PenLineCap;
    endCap: PenLineCap;
}
/**
 * @hidden
 */
export declare abstract class FragmentBase extends HorizontalAnchoredCategorySeries {
    static $t: Type;
    constructor();
    ql: CategoryLineRasterizer;
    private _logicalSeriesLink;
    logicalSeriesLink: StackedFragmentSeries;
    private qn;
    parentSeries: StackedSeriesBase;
    protected get_cv(): boolean;
    protected get_cq(): boolean;
    protected get_cs(): boolean;
    e7(): number;
    fb(): number;
    resolveLegendIndex(): number;
    a6(): Series;
    na(): CategoryAxisBase;
    nu(): NumericAxisBase;
    qp(a: ISupportsMarkers, b: CategoryFrame, c: number[], d: IDetectsCollisions, e: number, f: number, g: number, h: number): boolean;
    op(a: CategoryFrame, b: CategorySeriesView): void;
    qr(a: PointCollection, b: List$1<number[]>, c: CategorySeriesView): void;
    dw(a: Rect, b: Rect, c: SeriesView): boolean;
    pb(a: CategorySeriesView): number;
    an(a: Axis): AxisRange;
    qq(): number;
    qs(a: IChartLegend): void;
    protected i0(a: any, b: string, c: any, d: any): void;
    jg(a: Rect, b: RenderSurface): void;
    readonly useHighMarkerFidelity: boolean;
}
/**
 * @hidden
 */
export declare class AreaFragment extends FragmentBase {
    static $t: Type;
    constructor();
    protected bf(): SeriesView;
    qt: AreaFragmentView;
    iv(a: SeriesView): void;
    protected get_ck(): boolean;
    protected qv(a: Point, b: boolean): boolean;
    dh(a: Point, b: boolean): boolean;
    private qu;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    hw(a: boolean, b: SeriesView): void;
    os(a: CategoryFrame, b: CategorySeriesView): void;
    jo(): void;
    readonly useHighMarkerFidelity: boolean;
}
/**
 * @hidden
 */
export declare class ColumnFragment extends FragmentBase {
    static $t: Type;
    constructor();
    protected bf(): SeriesView;
    qu: ColumnFragmentView;
    iv(a: SeriesView): void;
    qx: number;
    qy: number;
    readonly fragmentXAxis: CategoryAxisBase;
    readonly fragmentYAxis: NumericAxisBase;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    na(): CategoryAxisBase;
    nu(): NumericAxisBase;
    fetchXAxis(): Axis;
    fetchYAxis(): Axis;
    hw(a: boolean, b: SeriesView): void;
    an(a: Axis): AxisRange;
    dw(a: Rect, b: Rect, c: SeriesView): boolean;
    dt(): boolean;
    ob(a: SeriesView): number;
    oc(a: SeriesView): number;
    lv(a: Point): Rect;
    dh(a: Point, b: boolean): boolean;
    protected dk(a: Point, b: boolean): boolean;
    protected q3(a: Rect, b: number): Rect;
    fv(a: any, b: Point): any;
    fp(a: Point): any;
    fa(a: Point): number;
    e8(a: Point): number;
    qp(a: ISupportsMarkers, b: CategoryFrame, c: number[], d: IDetectsCollisions, e: number, f: number, g: number, h: number): boolean;
    private qw;
    jd(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    op(a: CategoryFrame, b: CategorySeriesView): void;
    os(a: CategoryFrame, b: CategorySeriesView): void;
    protected i0(a: any, b: string, c: any, d: any): void;
    readonly useHighMarkerFidelity: boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class BarFragment extends ColumnFragment {
    static $t: Type;
    constructor();
    readonly barFragmentXAxis: NumericXAxis;
    readonly barFragmentYAxis: CategoryYAxis;
    na(): CategoryAxisBase;
    eb(a: Point): number;
    nu(): NumericAxisBase;
    protected q3(a: Rect, b: number): Rect;
    lv(a: Point): Rect;
    dh(a: Point, b: boolean): boolean;
    qp(a: ISupportsMarkers, b: CategoryFrame, c: number[], d: IDetectsCollisions, e: number, f: number, g: number, h: number): boolean;
    fp(a: Point): any;
    fa(a: Point): number;
    pb(a: CategorySeriesView): number;
    protected i0(a: any, b: string, c: any, d: any): void;
    readonly useHighMarkerFidelity: boolean;
}
/**
 * @hidden
 */
export declare class AreaFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
    static $t: Type;
    constructor(a: AnchoredCategorySeriesView);
    getBucketWithoutUnknowns(a: number): number[];
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class LineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
    static $t: Type;
    constructor(a: AnchoredCategorySeriesView);
    getBucketWithoutUnknowns(a: number): number[];
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class SplineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
    static $t: Type;
    constructor(a: AnchoredCategorySeriesView);
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class StackedBucketCalculator extends CategoryBucketCalculator {
    static $t: Type;
    constructor(a: CategorySeriesView);
    getBucket(a: number): number[];
    getBucket1(a: AnchoredCategorySeries, b: number, c: number, d: Rect, e: Rect, f: CategoryFrame): number[];
}
/**
 * @hidden
 */
export declare class StackedBarBucketCalculator extends StackedBucketCalculator {
    static $t: Type;
    constructor(a: CategorySeriesView);
    g(a: number): void;
    getBucket(a: number): number[];
    getBucket1(a: AnchoredCategorySeries, b: number, c: number, d: Rect, e: Rect, f: CategoryFrame): number[];
}
/**
 * @hidden
 */
export declare class StackedColumnBucketCalculator extends StackedBucketCalculator {
    static $t: Type;
    constructor(a: CategorySeriesView);
    getBucket(a: number): number[];
    getBucket1(a: AnchoredCategorySeries, b: number, c: number, d: Rect, e: Rect, f: CategoryFrame): number[];
}
/**
 * @hidden
 */
export declare class LineFragment extends FragmentBase {
    static $t: Type;
    constructor();
    protected bf(): SeriesView;
    qt: LineFragmentView;
    iv(a: SeriesView): void;
    protected qv(a: Point, b: boolean): boolean;
    protected get_ck(): boolean;
    dh(a: Point, b: boolean): boolean;
    private qu;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    hw(a: boolean, b: SeriesView): void;
    os(a: CategoryFrame, b: CategorySeriesView): void;
    readonly useHighMarkerFidelity: boolean;
}
/**
 * @hidden
 */
export declare abstract class SplineFragmentBase extends SplineSeriesBase {
    static $t: Type;
    private _logicalSeriesLink;
    logicalSeriesLink: StackedFragmentSeries;
    qv: CategoryLineRasterizer;
    constructor();
    private qx;
    parentSeries: StackedSeriesBase;
    protected get_cq(): boolean;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    protected get_cs(): boolean;
    e7(): number;
    resolveLegendIndex(): number;
    fb(): number;
    a6(): Series;
    qo(a: CategoryFrame, b: number[], c: CollisionAvoider, d: number, e: number, f: CategorySeriesView, g: number): boolean;
    dw(a: Rect, b: Rect, c: SeriesView): boolean;
    an(a: Axis): AxisRange;
    qz(a: CategoryFrame, b: Rect, c: Rect, d: CategoryAxisBase, e: NumericYAxis, f: CategorySeriesView): void;
    op(a: CategoryFrame, b: CategorySeriesView): void;
    protected i0(a: any, b: string, c: any, d: any): void;
    readonly useHighMarkerFidelity: boolean;
}
/**
 * @hidden
 */
export declare class SplineAreaFragment extends SplineFragmentBase {
    static $t: Type;
    constructor();
    protected bf(): SeriesView;
    iv(a: SeriesView): void;
    private q0;
    ac(): void;
    protected get_ck(): boolean;
    protected q2(a: Point, b: boolean): boolean;
    dh(a: Point, b: boolean): boolean;
    private q1;
    q4: PointCollection;
    hw(a: boolean, b: SeriesView): void;
    os(a: CategoryFrame, b: CategorySeriesView): void;
    jg(a: Rect, b: RenderSurface): void;
    q3(a: PointCollection, b: List$1<number[]>, c: CategorySeriesView): void;
    pb(a: CategorySeriesView): number;
    jo(): void;
    readonly useHighMarkerFidelity: boolean;
}
/**
 * @hidden
 */
export declare class SplineFragment extends SplineFragmentBase {
    static $t: Type;
    constructor();
    protected bf(): SeriesView;
    q0: SplineFragmentView;
    iv(a: SeriesView): void;
    protected q2(a: Point, b: boolean): boolean;
    protected get_ck(): boolean;
    dh(a: Point, b: boolean): boolean;
    private q1;
    hw(a: boolean, b: SeriesView): void;
    os(a: CategoryFrame, b: CategorySeriesView): void;
    readonly useHighMarkerFidelity: boolean;
}
/**
 * @hidden
 */
export declare abstract class StackedSeriesBase extends CategorySeries implements IIsCategoryBased {
    static $t: Type;
    constructor();
    protected get_cv(): boolean;
    getHostReferenceValue(): number;
    protected bf(): SeriesView;
    o8: StackedSeriesView;
    iv(a: SeriesView): void;
    iw(a: Rect, b: Rect): void;
    private _series;
    series: StackedSeriesCollection;
    fg(): number;
    h8(a: (arg1: Series) => boolean): void;
    o9: boolean;
    pa: boolean;
    protected get_isStacked(): boolean;
    seriesCreated: (sender: any, e: StackedSeriesCreatedEventArgs) => void;
    px: Visibility;
    pg: number;
    pf: number;
    oz: number[];
    o0: number[];
    o7: StackedSeriesManager;
    o4: StackedSeriesCollection;
    readonly o3: StackedSeriesCollection;
    private pm;
    private ps;
    private pr;
    jl(a: Point): void;
    ng(a: CategorySeriesView): CategoryFramePreparer;
    op(a: CategoryFrame, b: CategorySeriesView): void;
    hw(a: boolean, b: SeriesView): void;
    pn(): void;
    pt(): void;
    c9(a: any): boolean;
    an(a: Axis): AxisRange;
    l4(): boolean;
    protected hz(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    o2(): CategorySeriesView;
    pd(): number;
    pe(): number;
    pi(a: StackedFragmentSeries): number;
    ph(a: Point): number;
    pb(a: AnchoredCategorySeries, b: Rect, c: Rect, d: SeriesView): boolean;
    private pc;
    po(): void;
    os(a: CategoryFrame, b: CategorySeriesView): void;
    pq(a: AnchoredCategorySeries, b: CategoryFrame, c: CategorySeriesView): void;
    protected pp(): void;
    protected i0(a: any, b: string, c: any, d: any): void;
    readonly currentCategoryMode: CategoryMode;
    readonly scaler: ICategoryScaler;
    readonly yScaler: IScaler;
    readonly bucketizer: IBucketizer;
    readonly currentMode2Index: number;
    provideCollisionDetector(): IDetectsCollisions;
    protected dc(): boolean;
    protected get_cq(): boolean;
    jg(a: Rect, b: RenderSurface): void;
    o1: CategoryFrame;
    jd(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    fo(): any;
    readonly mayContainUnknowns: boolean;
    readonly useHighMarkerFidelity: boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare abstract class HorizontalStackedSeriesBase extends StackedSeriesBase {
    static $t: Type;
    xAxis: CategoryAxisBase;
    yAxis: NumericYAxis;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    fetchXAxis(): Axis;
    fetchYAxis(): Axis;
    ag(): Axis[];
    n5(): boolean;
    jo(): void;
    protected i0(a: any, b: string, c: any, d: any): void;
    p1(a: any): boolean;
    p0(a: any): boolean;
    readonly useHighMarkerFidelity: boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedAreaSeries extends HorizontalStackedSeriesBase {
    static $t: Type;
    constructor();
    ac(): void;
    an(a: Axis): AxisRange;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    readonly useHighMarkerFidelity: boolean;
}
/**
 * @hidden
 */
export declare abstract class VerticalStackedSeriesBase extends StackedSeriesBase {
    static $t: Type;
    xAxis: NumericXAxis;
    yAxis: CategoryYAxis;
    na(): CategoryAxisBase;
    nu(): NumericAxisBase;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    protected get_isVertical(): boolean;
    fetchXAxis(): Axis;
    fetchYAxis(): Axis;
    n5(): boolean;
    protected i0(a: any, b: string, c: any, d: any): void;
    p1(a: any): boolean;
    p0(a: any): boolean;
    readonly useHighMarkerFidelity: boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedBarSeries extends VerticalStackedSeriesBase implements IIsCategoryBased, IBarSeries {
    static $t: Type;
    constructor();
    ac(): void;
    protected bf(): SeriesView;
    p6: StackedBarSeriesView;
    iv(a: SeriesView): void;
    p7: number;
    p8: number;
    getHostReferenceValue(): number;
    o2(): CategorySeriesView;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    od(): number;
    pd(): number;
    pe(): number;
    an(a: Axis): AxisRange;
    c9(a: any): boolean;
    dw(a: Rect, b: Rect, c: SeriesView): boolean;
    protected hz(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    e8(a: Point): number;
    fp(a: Point): any;
    pt(): void;
    ph(a: Point): number;
    pb(a: AnchoredCategorySeries, b: Rect, c: Rect, d: SeriesView): boolean;
    eg(): number;
    pq(a: AnchoredCategorySeries, b: CategoryFrame, c: CategorySeriesView): void;
    protected i0(a: any, b: string, c: any, d: any): void;
    getPreferredCategoryMode(): CategoryMode;
    readonly currentCategoryMode: CategoryMode;
    readonly scaler: ICategoryScaler;
    readonly yScaler: IScaler;
    readonly mayContainUnknowns: boolean;
    readonly useHighMarkerFidelity: boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedColumnSeries extends HorizontalStackedSeriesBase {
    static $t: Type;
    constructor();
    protected bf(): SeriesView;
    p6: StackedColumnSeriesView;
    iv(a: SeriesView): void;
    p7: number;
    p8: number;
    o2(): CategorySeriesView;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    an(a: Axis): AxisRange;
    eg(): number;
    pq(a: AnchoredCategorySeries, b: CategoryFrame, c: CategorySeriesView): void;
    protected i0(a: any, b: string, c: any, d: any): void;
    readonly useHighMarkerFidelity: boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedLineSeries extends HorizontalStackedSeriesBase {
    static $t: Type;
    constructor();
    ac(): void;
    an(a: Axis): AxisRange;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    readonly useHighMarkerFidelity: boolean;
}
/**
 * @hidden
 */
export declare class StackedSplineAreaSeries extends HorizontalStackedSeriesBase {
    static $t: Type;
    constructor();
    ac(): void;
    an(a: Axis): AxisRange;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    readonly useHighMarkerFidelity: boolean;
}
/**
 * @hidden
 */
export declare class StackedSplineSeries extends HorizontalStackedSeriesBase {
    static $t: Type;
    constructor();
    ac(): void;
    an(a: Axis): AxisRange;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    readonly useHighMarkerFidelity: boolean;
}
/**
 * @hidden
 */
export declare class StackedFragmentSeries extends DependencyObject implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    fu: Brush;
    fp: Brush;
    f3: DoubleCollection;
    f2: DoubleCollection;
    f7: PenLineCap;
    f4: PenLineCap;
    w: boolean;
    private q;
    s: boolean;
    aq: number;
    ai: number;
    f1: Color;
    f0: Color;
    aa: boolean;
    private r;
    v: boolean;
    ar: number;
    aj: number;
    as: number;
    ak: number;
    f8: PenLineCap;
    f5: PenLineCap;
    x: boolean;
    t: boolean;
    du: DataTemplate;
    dr: DataTemplate;
    dv: DataTemplate;
    ds: DataTemplate;
    ge: Visibility;
    gc: Visibility;
    fv: Brush;
    fq: Brush;
    fw: Brush;
    fr: Brush;
    gb: Style;
    ga: Style;
    dw: DataTemplate;
    dt: DataTemplate;
    l: MarkerType;
    k: MarkerType;
    b8: string;
    an: number;
    af: number;
    fx: Brush;
    fs: Brush;
    fy: Brush;
    ft: Brush;
    am: number;
    ae: number;
    ao: number;
    ag: number;
    ap: number;
    ah: number;
    f9: PenLineCap;
    f6: PenLineCap;
    at: number;
    al: number;
    ax: any;
    ay: any;
    aw: any;
    z: boolean;
    u: boolean;
    cq: string;
    gf: Visibility;
    gd: Visibility;
    private _parentSeries;
    parentSeries: StackedSeriesBase;
    av: number;
    o: SeriesViewer;
    p: IFastItemColumn$1<number>;
    private _visualSeriesLink;
    visualSeriesLink: AnchoredCategorySeries;
    ac: List$1<number>;
    ad: List$1<number>;
    ab: List$1<number[]>;
    y: boolean;
    au: DomRenderer;
    provideRenderer(a: DomRenderer): void;
    fz: Brush;
    dq(): void;
    c9(): void;
    da(): void;
    cx(): void;
    cy(): void;
    cz(): void;
    c1(): void;
    dg(): void;
    dh(): void;
    dp(): void;
    di(): void;
    dj(): void;
    c0(): void;
    c2(): void;
    c3(): void;
    c4(): void;
    c5(): void;
    c6(): void;
    c7(): void;
    c8(): void;
    db(): void;
    dc(): void;
    dd(): void;
    cw(): void;
    de(): void;
    df(): void;
    dk(): void;
    dl(): void;
    dm(): void;
    dn(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected cv(a: string, b: any, c: any): void;
    protected ct(a: any, b: string, c: any, d: any): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedSeriesCollection extends ObservableCollection$1<StackedFragmentSeries> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export declare class StackedSeriesFramePreparer extends CategoryFramePreparer {
    static $t: Type;
    constructor(a: number, b: IIsCategoryBased);
    constructor(a: number, b: IIsCategoryBased, c: ISupportsMarkers, d: IProvidesViewport, e: ISupportsErrorBars, f: IBucketizer);
    constructor(a: number, ..._rest: any[]);
    protected j(a: PreparationParams): ValuesHolder;
    protected t(a: PreparationParams, b: ValuesHolder, c: number, d: boolean, e: boolean): number;
    protected l(a: CategoryFrame, b: number[], c: IDetectsCollisions, d: number, e: number, f: number): boolean;
}
/**
 * @hidden
 */
export declare class AreaFragmentView extends AnchoredCategorySeriesView {
    static $t: Type;
    c6: AreaFragment;
    ap(): void;
    constructor(a: AreaFragment);
    c8: Path;
    da: Path;
    c9: Path;
    db: Path;
    c7(): void;
    co(): CategoryBucketCalculator;
    protected a8(): void;
    protected a9(): void;
    protected a3(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    ai(a: any): void;
}
/**
 * @hidden
 */
export declare class ColumnFragmentView extends AnchoredCategorySeriesView {
    static $t: Type;
    c6: ColumnFragment;
    ap(): void;
    constructor(a: ColumnFragment);
    protected da: List$1<Rectangle>;
    c7: Pool$1<Rectangle>;
    c8: List$1<number>;
    c9: List$1<number>;
    private df;
    private db;
    private dd;
    private dc;
    protected bb(a: any, b: number): void;
    de(a: Rectangle, b: number, c: number): void;
    protected bc(a: any, b: number): void;
    protected a3(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    ai(a: any): void;
    getDefaultTooltipTemplate(): string;
}
/**
 * @hidden
 */
export declare class LineFragmentView extends AnchoredCategorySeriesView {
    static $t: Type;
    c6: LineFragment;
    constructor(a: LineFragment);
    c9: Path;
    c8: Path;
    da: Path;
    c7(): void;
    co(): CategoryBucketCalculator;
    protected a8(): void;
    protected a9(): void;
    protected a3(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    ai(a: any): void;
}
/**
 * @hidden
 */
export declare class SplineAreaFragmentView extends SplineSeriesBaseView {
    static $t: Type;
    private c7;
    ap(): void;
    constructor(a: SplineAreaFragment);
    c9: Path;
    db: Path;
    da: Path;
    dc: Path;
    c8(): void;
    protected a8(): void;
    protected a9(): void;
    protected a3(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    ai(a: any): void;
}
/**
 * @hidden
 */
export declare class SplineFragmentView extends SplineSeriesBaseView {
    static $t: Type;
    c7: SplineFragment;
    constructor(a: SplineFragment);
    co(): CategoryBucketCalculator;
    da: Path;
    c9: Path;
    db: Path;
    c8(): void;
    protected a8(): void;
    protected a9(): void;
    protected a3(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    ai(a: any): void;
}
/**
 * @hidden
 */
export declare class StackedSeriesView extends CategorySeriesView {
    static $t: Type;
    cw: StackedSeriesBase;
    private readonly cx;
    readonly cy: Canvas;
    private readonly cz;
    readonly c0: Panel;
    constructor(a: StackedSeriesBase);
    co(): CategoryBucketCalculator;
    am(): void;
    ao(a: RenderingContext, b: RenderingContext): void;
    protected ac(): void;
}
/**
 * @hidden
 */
export declare class StackedBarSeriesView extends StackedSeriesView {
    static $t: Type;
    c1: StackedBarSeries;
    constructor(a: StackedBarSeries);
    co(): CategoryBucketCalculator;
}
/**
 * @hidden
 */
export declare class StackedColumnSeriesView extends StackedSeriesView {
    static $t: Type;
    constructor(a: StackedColumnSeries);
    co(): CategoryBucketCalculator;
}
/**
 * @hidden
 */
export declare class StackedSeriesManager extends Base {
    static $t: Type;
    constructor(a: StackedSeriesBase);
    b: StackedSeriesBase;
    f: ObservableCollection$1<AnchoredCategorySeries>;
    c: StackedSeriesCollection;
    e: ObservableCollection$1<AnchoredCategorySeries>;
    d: ObservableCollection$1<AnchoredCategorySeries>;
    j: Canvas;
    k: Panel;
    a(a: StackedFragmentSeries): AnchoredCategorySeries;
    private i;
    h(): void;
    private g;
}
