/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { TimeAxisBase } from "./TimeAxisBase";
import { TimeAxisDisplayType_$type } from "./TimeAxisDisplayType";
import { DependencyProperty } from "igniteui-react-core";
import { Base, enumGetBox, Number_$type, typeGetValue, typeCast, markType, markDep } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { NumericYAxis } from "./NumericYAxis";
import { LinearNumericSnapper } from "./LinearNumericSnapper";
import { LabelPosition } from "./LabelPosition";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, intDivide, isNaN_, isInfinity } from "igniteui-react-core";
import { dateMinValue, dateFromTicks } from "igniteui-react-core";
import { timeSpanFromMilliseconds } from "igniteui-react-core";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
/**
 * @hidden
 */
export let CategoryDateTimeXAxis = /*@__PURE__*/ (() => {
    class CategoryDateTimeXAxis extends TimeAxisBase {
        constructor() {
            super();
            this.mg = 0;
            this.mh = 0;
            this.ab = CategoryDateTimeXAxis.$;
            this.actualMinimumValue = (new Date());
            this.actualMaximumValue = (new Date());
        }
        get_b6() {
            return this.mb == 0;
        }
        a2() {
            return new CategoryDateTimeXAxisView(this);
        }
        gx(a) {
            super.gx(a);
            this.ma = a;
        }
        get mi() {
            return this.mg;
        }
        set mi(a) {
            if (this.mi != a) {
                let b = this.mg;
                this.mg = a;
                this.g5("ActualInterval", b, this.mi);
            }
        }
        d9() {
            return this.mi;
        }
        get mm() {
            return typeGetValue(this.c(CategoryDateTimeXAxis.mx));
        }
        set mm(a) {
            this.h(CategoryDateTimeXAxis.mx, a);
        }
        get mj() {
            return this.mh;
        }
        set mj(a) {
            if (this.mj != a) {
                let b = this.mh;
                this.mh = a;
                this.g5("ActualMinorInterval", b, this.mj);
            }
        }
        ct(a, b, c) {
            let d = super.ct(a, b, c);
            if (!d) {
                return false;
            }
            return +(this.actualMinimumValue) != +(this.actualMaximumValue);
        }
        dl() {
            return this.mi;
        }
        hc(a) {
            super.hc(a);
            let b = this.bh != null ? this.bh.mr : Rect.empty;
            let c = !b.isEmpty ? this.i8 : Rect.empty;
            let d = this.i3();
            let e = this.i2();
            let f = new ScalerParams(0, b, c, this.ca, d);
            if (this.k4 == null && !this.la() && !this.lb()) {
                return;
            }
            if (!b.isEmpty && !c.isEmpty && (this.mb != 1 || this.k4 != null)) {
                let g = c.bottom;
                let h = g - c.top;
                if (this.ah != null) {
                    let i = typeCast(NumericYAxis.$, this.ah);
                    if (i != null) {
                        let j = this.hf(g, h, b, c, d, c.top, c.bottom);
                        g = j.p0;
                        h = j.p1;
                    }
                }
                if (isNaN_(g)) {
                    g = 0;
                }
                this.gv(this.a3.ay(), g, c, this.a3.e(), true);
                this.au.a8 = h;
                let k = this.a3.a1();
                let l = this.a3.f();
                let m = this.a3.az();
                let n = this.a3.a0();
                let o = this.a3.g();
                if (this.mb == 1) {
                    let p = this.i$e(b, c, d, e);
                    let q = this.i$g(b, c, d, e);
                    if (p < 0 || q < 0) {
                        return;
                    }
                    let r = NaN;
                    for (let s = p; s <= q; s++) {
                        let t = this.ld == null ? s : this.ld._inner[s];
                        let u = this.dy(this.k4.item(t).getTime(), f);
                        if (u == r) {
                            continue;
                        }
                        r = u;
                        if (this.categoryMode == 2) {
                            u += this.ca ? -this.getGroupCenter(s, b, c, d) : this.getGroupCenter(s, b, c, d);
                        }
                        if (u < e.left || u > e.right) {
                            continue;
                        }
                        this.hk(m, u, c, l, false);
                        this.jt.add(u);
                        if (this.jm != null && s < this.jm.count) {
                            let v = this.jm.item(t);
                            let w = super.e8(v);
                            if (!isNaN_(u) && !isInfinity(u) && w != null) {
                                if ((typeof w === 'string') && Base.equalsStatic(w, "")) {
                                }
                                else {
                                    this.cx.add1(w);
                                    this.cy.add(new LabelPosition(u));
                                }
                            }
                        }
                    }
                }
                else {
                    let x = this.d1(e.left, f);
                    let y = this.d1(e.right, f);
                    let z = Math.min(x, y);
                    let aa = Math.max(x, y);
                    let ab = new LinearNumericSnapper(0, z, aa, e.width, this.eb());
                    let ac = this.k8 ? this.mf() : ab.g;
                    this.mt(truncate(ac));
                    let ad = truncate(Math.floor((z - this.actualMinimumValue.getTime()) / ac));
                    let ae = truncate(Math.ceil((aa - this.actualMinimumValue.getTime()) / ac));
                    let af = 0;
                    if (this.categoryMode == 2) {
                        af = this.getGroupCenter(0, b, c, d);
                        af = this.ca ? -af : af;
                    }
                    let ag = truncate(Math.ceil(e.right));
                    let ah = truncate(Math.floor(e.left));
                    let ai = this.dy(this.actualMinimumValue.getTime() + ad * ac, f) + af;
                    for (let aj = ad; aj <= ae; aj++) {
                        let ak = this.dy(this.actualMinimumValue.getTime() + (aj + 1) * ac, f) + af;
                        if (!isNaN_(ai) && !isInfinity(ai)) {
                            let al = truncate(Math.round(ai));
                            if (al <= ag) {
                                if (aj % 2 == 0) {
                                    this.hl(k, ai, ak, c);
                                }
                                this.hk(m, ai, c, l, false);
                                this.jt.add(ai);
                                if (this.cl) {
                                    let am = this.mk();
                                    if (am > 0 && am < ac) {
                                        if (ac / am < 20) {
                                            let an = ai;
                                            let ao = Math.abs(this.dy(this.actualMinimumValue.getTime() + am, f) - this.dy(this.actualMinimumValue.getTime(), f));
                                            while (an + ao < ak) {
                                                if (Math.abs(an + ao - ak) < 0.0001) {
                                                    break;
                                                }
                                                an += ao;
                                                if (an > 0) {
                                                    this.hk(n, an, c, o, false);
                                                }
                                            }
                                            this.mu(am);
                                        }
                                    }
                                    else {
                                        for (let ap = 1; ap < ab.i; ++ap) {
                                            let aq = this.dy(this.actualMinimumValue.getTime() + aj * ac + (ap * ac) / ab.i, f) + af;
                                            this.hk(n, aq, c, o, false);
                                        }
                                        if (ab.i > 0) {
                                            this.mu(truncate((ac / ab.i)));
                                        }
                                    }
                                }
                            }
                            if (al >= ah && al <= ag) {
                                let ar = this.actualMinimumValue.getTime() + aj * ac;
                                let ticks_ = truncate(Math.floor(ar));
                                let as = (new Date(ticks_));
                                let at = this.e8(as);
                                if (at != null) {
                                    this.cx.add1(at);
                                    this.cy.add(new LabelPosition(ai));
                                }
                            }
                        }
                        ai = ak;
                    }
                }
                if ((this.ax == null || this.ax.visibility == 0) && this.ah != null) {
                    if (this.ax != null && (this.ax.location == 4 || this.ax.location == 5)) {
                        this.bh.hu();
                    }
                }
                this.au.a1 = this.cx;
                this.au.a2 = this.cy;
                this.kt();
            }
        }
        mf() {
            return this.mi;
        }
        mk() {
            return this.mm;
        }
        mt(a) {
            this.mi = a;
        }
        mu(a) {
            this.mj = a;
        }
        md() {
            return this.ml != 0;
        }
        mc() {
            return this.mi == 0;
        }
        me(a) {
            return this.k4 == null ? dateMinValue() : this.k4.item(a);
        }
        ms(a, b) {
            if (a > b || this.jm == null || this.jm.count == 0) {
                return;
            }
            let c = (a.getTime() - this.actualMinimumValue.getTime()) / (this.actualMaximumValue.getTime() - this.actualMinimumValue.getTime());
            let d = (b.getTime() - this.actualMinimumValue.getTime()) / (this.actualMaximumValue.getTime() - this.actualMinimumValue.getTime());
            this.bh.m6 = new Rect(0, c, this.bh.m6.y, d - c, this.bh.m6.height);
        }
        gz(a, b, c, d) {
            super.gz(a, b, c, d);
            switch (b) {
                case CategoryDateTimeXAxis.$$p[0]:
                    this.ci = true;
                    this.au.ak = this.mb == 1;
                    this.hb(false);
                    break;
                case CategoryDateTimeXAxis.$$p[1]:
                    this.ci = true;
                    this.hb(false);
                    break;
            }
        }
        l0() {
            super.l0();
            if (this.md()) {
                this.mi = this.ml;
                let a = this.bh != null ? this.bh.mr : Rect.empty;
                let b = !a.isEmpty ? this.i8 : Rect.empty;
                let c = Math.abs(this.actualMaximumValue.getTime() - this.actualMinimumValue.getTime());
                this.k8 = this.mc() || (this.mb == 1) || (1 * c / this.mf() > (b.width / a.width)) ? false : true;
            }
            else {
                this.k8 = false;
            }
        }
        ly(a, b) {
            let c = b.getTime() - a.getTime();
            let timeOffset_ = truncate(Math.round(intDivide(c, this.j5) / 2));
            return timeOffset_ == 0 ? timeSpanFromMilliseconds(1) : timeSpanFromMilliseconds(timeOffset_);
        }
        get_b5() {
            return true;
        }
        get isVertical() {
            return this.ch;
        }
        j$c(a, b) {
            return this.d1.apply(this, arguments);
        }
        j$b(a, b) {
            return this.dy.apply(this, arguments);
        }
        j$d(a, b, c, d, e) {
            this.gr.apply(this, arguments);
        }
        j$e(a, b, c, d) {
            this.gs.apply(this, arguments);
        }
        j$f(a, b, c, d) {
            this.gt.apply(this, arguments);
        }
        get j$a() {
            return this.ca;
        }
        get i$a() {
            return this.b7;
        }
    }
    CategoryDateTimeXAxis.$t = /*@__PURE__*/ markType(CategoryDateTimeXAxis, 'CategoryDateTimeXAxis', TimeAxisBase.$);
    CategoryDateTimeXAxis.mx = /*@__PURE__*/ DependencyProperty.i("MinorInterval", Number_$type, CategoryDateTimeXAxis.$, /*@__PURE__*/ new PropertyMetadata(2, 0, (a, b) => {
        (typeCast(CategoryDateTimeXAxis.$, a)).g5("MinorInterval", b.oldValue, b.newValue);
        (typeCast(CategoryDateTimeXAxis.$, a)).hb(false);
    }));
    CategoryDateTimeXAxis.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CategoryDateTimeXAxis, 'g5', ['DisplayType:mb:mv', [TimeAxisDisplayType_$type, /*@__PURE__*/ enumGetBox(TimeAxisDisplayType_$type, 0)], 'Interval:ml:mw', [1, 0]]);
    return CategoryDateTimeXAxis;
})();
/**
 * @hidden
 */
export let CategoryDateTimeXAxisView = /*@__PURE__*/ (() => {
    class CategoryDateTimeXAxisView extends CategoryAxisBaseView {
        constructor(a) {
            super(a);
            this.bg = null;
            this.bg = a;
        }
        o(a) {
            let b = this.n(dateFromTicks(truncate(a)));
            return b;
        }
    }
    CategoryDateTimeXAxisView.$t = /*@__PURE__*/ markType(CategoryDateTimeXAxisView, 'CategoryDateTimeXAxisView', CategoryAxisBaseView.$);
    return CategoryDateTimeXAxisView;
})();
//# sourceMappingURL=CategoryDateTimeXAxis_combined.js.map
