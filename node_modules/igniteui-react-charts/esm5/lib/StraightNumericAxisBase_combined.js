/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { NumericAxisBase } from "./NumericAxisBase";
import { NumericScaleMode_$type } from "./NumericScaleMode";
import { DependencyProperty } from "igniteui-react-core";
import { NumericScaler } from "./NumericScaler";
import { enumGetBox, typeCast, markType, markDep } from "igniteui-react-core";
import { ArgumentNullException } from "igniteui-react-core";
import { LogarithmicScaler } from "./LogarithmicScaler";
import { PropertyMetadata } from "igniteui-react-core";
import { NumericAxisBaseView } from "./NumericAxisBaseView";
/**
 * @hidden
 */
var StraightNumericAxisBase = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(StraightNumericAxisBase, _super);
    function StraightNumericAxisBase() {
        var _this = _super.call(this) || this;
        _this.ll = null;
        _this.lp = false;
        _this.lz();
        return _this;
    }
    StraightNumericAxisBase.prototype.a2 = function () {
        return new StraightNumericAxisBaseView(this);
    };
    StraightNumericAxisBase.prototype.gx = function (a) {
        _super.prototype.gx.call(this, a);
        this.lo = a;
    };
    Object.defineProperty(StraightNumericAxisBase.prototype, "ln", {
        get: function () {
            return this.c(StraightNumericAxisBase.l1);
        },
        set: function (a) {
            this.h(StraightNumericAxisBase.l1, a);
        },
        enumerable: true,
        configurable: true
    });
    StraightNumericAxisBase.lx = function (a, b) {
        var c = typeCast(StraightNumericAxisBase.$, a);
        c.lz();
        c.g5("Scaler", b.oldValue, b.newValue);
    };
    StraightNumericAxisBase.prototype.lm = function () {
        return null;
    };
    StraightNumericAxisBase.prototype.get_lk = function () {
        if (this.ll == null) {
            this.lz();
        }
        return this.ll;
    };
    StraightNumericAxisBase.prototype.set_lk = function (a) {
        var b = this.ll != a;
        if (b) {
            var c = this.ll;
            this.ll = a;
            this.g5("ActualScaler", c, a);
        }
    };
    Object.defineProperty(StraightNumericAxisBase.prototype, "lk", {
        get: function () {
            return this.get_lk();
        },
        set: function (a) {
            this.set_lk(a);
        },
        enumerable: true,
        configurable: true
    });
    StraightNumericAxisBase.prototype.k6 = function (a, b, c, d, e, f, g) {
        var h = this.lk.t(a, b, c, f, g);
        f = h.p3;
        g = h.p4;
        return {
            p5: f,
            p6: g
        };
    };
    StraightNumericAxisBase.prototype.ly = function (a) {
        var b = this.lp;
        this.lp = true;
        a();
        this.lp = b;
    };
    StraightNumericAxisBase.prototype.lz = function () {
        var a = this.ln;
        if (a == null) {
            a = this.jp();
        }
        this.lk = a;
        if (this.lk == null) {
            throw new ArgumentNullException(0, "ActualScaler");
        }
        this.lu();
    };
    StraightNumericAxisBase.prototype.lu = function () {
        this.lo.bh();
    };
    StraightNumericAxisBase.prototype.gz = function (a, b, c, d) {
        if (this.lp) {
            return;
        }
        _super.prototype.gz.call(this, a, b, c, d);
        switch (b) {
            case NumericAxisBase.$$p[2]:
                this.lz();
                break;
            case NumericAxisBase.$$p[1]:
                this.lz();
                break;
            case StraightNumericAxisBase.$$p[0]:
                this.lz();
                break;
            case "Scaler":
                this.lz();
                break;
            case "ActualScaler":
                this.jw = typeCast(LogarithmicScaler.$, this.lk) !== null;
                this.lu();
                this.cn();
                this.hb(false);
                break;
            case "ActualMaximumValue":
                this.lv();
                break;
            case "ActualMinimumValue":
                this.lw();
                this.lz();
                break;
        }
    };
    StraightNumericAxisBase.prototype.lw = function () {
        this.lk.y(this.kb);
    };
    StraightNumericAxisBase.prototype.lv = function () {
        this.lk.x(this.ka);
    };
    StraightNumericAxisBase.prototype.lq = function (a, b) {
        if (a < this.kb) {
            a = this.kb;
        }
        else if (a > this.ka) {
            a = this.ka;
        }
        if (!b.ch) {
            return (a - this.kb) / (this.ka - this.kb);
        }
        else {
            return (a - this.ka) / (this.kb - this.ka);
        }
    };
    StraightNumericAxisBase.$t = markType(StraightNumericAxisBase, 'StraightNumericAxisBase', NumericAxisBase.$);
    StraightNumericAxisBase.l1 = DependencyProperty.i("Scaler", NumericScaler.$, StraightNumericAxisBase.$, new PropertyMetadata(2, null, StraightNumericAxisBase.lx));
    StraightNumericAxisBase.$$p = markDep(DependencyProperty, PropertyMetadata, StraightNumericAxisBase, 'g5', ['ScaleMode:lj:l0', [NumericScaleMode_$type, enumGetBox(NumericScaleMode_$type, 0)]]);
    return StraightNumericAxisBase;
}(NumericAxisBase));
export { StraightNumericAxisBase };
/**
 * @hidden
 */
var StraightNumericAxisBaseView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(StraightNumericAxisBaseView, _super);
    function StraightNumericAxisBaseView(a) {
        var _this = _super.call(this, a) || this;
        _this.bg = null;
        _this.bg = a;
        return _this;
    }
    StraightNumericAxisBaseView.prototype.bh = function () {
        this.bg.lk.x(this.bg.ka);
        this.bg.lk.y(this.bg.kb);
    };
    StraightNumericAxisBaseView.$t = markType(StraightNumericAxisBaseView, 'StraightNumericAxisBaseView', NumericAxisBaseView.$);
    return StraightNumericAxisBaseView;
}(NumericAxisBaseView));
export { StraightNumericAxisBaseView };
//# sourceMappingURL=StraightNumericAxisBase_combined.js.map
