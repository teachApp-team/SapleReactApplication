import { IgrValueBrushScale } from "./igr-value-brush-scale";
import { IgrContourValueResolver } from "./igr-contour-value-resolver";
import { IgrScatterTriangulationSeries, IIgrScatterTriangulationSeriesProps } from "./igr-scatter-triangulation-series";
import { ScatterContourSeries } from "./ScatterContourSeries";
/**
 * Series class for rendering isarithmic contours based on a triangulation of X+Y+Value points in the ItemsSource.
*/
export declare class IgrScatterContourSeries extends IgrScatterTriangulationSeries<IIgrScatterContourSeriesProps> {
    protected createImplementation(): ScatterContourSeries;
    /**
                                 * @hidden
                                 */
    readonly i: ScatterContourSeries;
    constructor(props: IIgrScatterContourSeriesProps);
    /**
     * Gets or set the name of the property from which to retrieve the numeric values from the ItemsSource items.
    */
    valueMemberPath: string;
    /**
     * Gets or sets the ValueBrushScale to use when determining Brushes for each contour line, based on the values found in ValueMemberPath.
    */
    fillScale: IgrValueBrushScale;
    /**
     * Gets or set the ContourValueResolver used to determine the numeric values of contours.
    */
    valueResolver: IgrContourValueResolver;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    getItemValue(item: any, memberPathName: string): any;
}
export interface IIgrScatterContourSeriesProps extends IIgrScatterTriangulationSeriesProps {
    /**
     * Gets or set the name of the property from which to retrieve the numeric values from the ItemsSource items.
    */
    valueMemberPath?: string;
    /**
     * Gets or sets the ValueBrushScale to use when determining Brushes for each contour line, based on the values found in ValueMemberPath.
    */
    fillScale?: IgrValueBrushScale;
    /**
     * Gets or set the ContourValueResolver used to determine the numeric values of contours.
    */
    valueResolver?: IgrContourValueResolver;
}
