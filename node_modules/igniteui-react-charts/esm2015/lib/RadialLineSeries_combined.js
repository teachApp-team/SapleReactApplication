/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnchoredRadialSeries } from "./AnchoredRadialSeries";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Array_$type, enumGetBox, markType, markDep } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { AnchoredRadialSeriesView } from "./AnchoredRadialSeriesView";
import { Path } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let RadialLineSeries = /*@__PURE__*/ (() => {
    class RadialLineSeries extends AnchoredRadialSeries {
        constructor() {
            super();
            this.ab = RadialLineSeries.$;
        }
        bf() {
            return new RadialLineSeriesView(this);
        }
        iv(a) {
            super.iv(a);
            this.ou = a;
        }
        ac() {
            super.ac();
        }
        preferredCategoryMode(a) {
            return 0;
        }
        hw(a, b) {
            super.hw(a, b);
            let c = b;
            c.cx();
        }
        np(a, b) {
            super.np(a, b);
            let c = b.bs;
            let d = b.br;
            let e = a.f;
            let f = e.count;
            let g = new List$1(Array_$type, 2, f);
            let h = 0;
            for (let i = 0; i < f; i++) {
                let j = new Array(4);
                g.add(j);
                j[0] = this.m7.d(a.f._inner[i][0], a.f._inner[i][1], c, d);
                j[1] = this.m7.e(a.f._inner[i][0], a.f._inner[i][1], c, d);
                j[2] = this.m7.d(a.f._inner[i][0], a.f._inner[i][2], c, d);
                let k = a.f._inner[i][2];
                j[3] = this.m7.e(a.f._inner[i][0], k, c, d);
                if (k > h) {
                    h = k;
                }
            }
            let l = b;
            l.cy(f, g, false, this.ov, this.nt(g, f - 1, b), l.co.b, this.eu);
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case RadialLineSeries.$$p[0]:
                    this.je(false);
                    this.il();
                    break;
            }
        }
        get_n3() {
            return true;
        }
    }
    RadialLineSeries.$t = /*@__PURE__*/ markType(RadialLineSeries, 'RadialLineSeries', AnchoredRadialSeries.$);
    RadialLineSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, RadialLineSeries, 'raisePropertyChanged', ['UnknownValuePlotting:ov:ox', [UnknownValuePlotting_$type, /*@__PURE__*/ enumGetBox(UnknownValuePlotting_$type, 1)]]);
    return RadialLineSeries;
})();
/**
 * @hidden
 */
export let RadialLineSeriesView = /*@__PURE__*/ (() => {
    class RadialLineSeriesView extends AnchoredRadialSeriesView {
        constructor(a) {
            super(a);
            this.cw = null;
            this.c0 = new Path();
            this.cz = new Path();
            this.c1 = new Path();
            this.cw = a;
        }
        cx() {
            this.c0.ak = null;
            this.cz.ak = null;
            this.c1.ak = null;
            this.an();
        }
        cy(a, b, c, d, e, f, g) {
            this.cs.nv.m(this.c0, this.cz, this.c1, a, b, c, d, e, f, g);
            this.an();
        }
        a8() {
            super.a8();
            this.c0._stroke = this.e.k4;
            this.c0.ac = this.e.ey;
            this.c0.ai = this.e.lc;
            this.c0.ad = this.e.ld;
            this.c1._stroke = this.e.k4;
            this.c1.ac = this.e.ey;
            this.c1.ai = this.e.lc;
            this.c1.ad = this.e.ld;
            this.cz._fill = this.e.k4;
            this.cz._opacity = 0.75;
        }
        a9() {
            super.a9();
            let a = this.bl();
            this.c0._stroke = a;
            this.c0.ac = this.e.ey + 3;
            this.c1._stroke = a;
            this.c1.ac = this.e.ey + 3;
            this.cz._fill = a;
            this.cz._opacity = 1;
        }
        a3(a, b) {
            super.a3(a, b);
            if (a.d) {
                a.s(this.cz);
                a.s(this.c0);
                a.s(this.c1);
            }
        }
        ai(a) {
            super.ai(a);
            this.e.a2.exportPathData(a, this.c0, "lowerShape", ["Lower", "Main"]);
            this.e.a2.exportPathData(a, this.c1, "upperShape", ["Upper"]);
            this.e.a2.exportPathData(a, this.cz, "translucentShape", ["Translucent"]);
        }
        ac() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.lb = a;
            this.e.ev = 3;
            this.e.ew = 1;
            this.e.ex = 4;
            this.e.du = false;
        }
    }
    RadialLineSeriesView.$t = /*@__PURE__*/ markType(RadialLineSeriesView, 'RadialLineSeriesView', AnchoredRadialSeriesView.$);
    return RadialLineSeriesView;
})();
//# sourceMappingURL=RadialLineSeries_combined.js.map
