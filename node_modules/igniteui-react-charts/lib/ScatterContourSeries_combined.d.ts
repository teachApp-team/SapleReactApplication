import { ScatterTriangulationSeries } from "./ScatterTriangulationSeries";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { ValueBrushScale } from "./ValueBrushScale";
import { ContourValueResolver } from "./ContourValueResolver";
import { SeriesView } from "./SeriesView";
import { Rect } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { List$1 } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class ScatterContourSeries extends ScatterTriangulationSeries {
    static $t: Type;
    constructor();
    fs(a: any, b: string): any;
    private nk;
    protected bf(): SeriesView;
    nq: string;
    private nm;
    nn: IFastItemColumn$1<number>;
    protected i0(a: any, b: string, c: any, d: any): void;
    hw(a: boolean, b: SeriesView): void;
    jf(a: boolean): void;
    jd(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected nt(a: SeriesView): void;
    nl: ValueBrushScale;
    private ni;
    nj: ContourValueResolver;
    private nu;
    dw(a: Rect, b: Rect, c: SeriesView): boolean;
    ar(a: Point, b: boolean): DataContext;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterContourSeriesView extends SeriesView {
    static $t: Type;
    private bw;
    private bv;
    constructor(a: ScatterContourSeries);
    protected by: List$1<Path>;
    private b5;
    private b1;
    private b2;
    private b3;
    private bx;
    private bu;
    bz(a: List$1<List$1<List$1<Point>>>, b: number[]): void;
    protected bb(a: any, b: number): void;
    protected bc(a: any, b: number): void;
    protected a3(a: RenderingContext, b: boolean): void;
    b0(a: boolean): void;
    ai(a: any): void;
    getDefaultTooltipTemplate(): string;
    b4(a: Point, b: boolean): Path;
}
