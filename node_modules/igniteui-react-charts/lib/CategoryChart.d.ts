import { XYChart } from "./XYChart";
import { Type } from "igniteui-react-core";
import { CategoryChartType } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { BrushCollection } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { Series } from "./Series";
import { XamDataChart } from "./XamDataChart";
import { Axis } from "./Axis";
import { DataSeries } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class CategoryChart extends XYChart {
    static $t: Type;
    protected gj(): void;
    protected gl(a: Series, b: number): void;
    protected g4(a: string, b: any, c: any): void;
    private qj;
    ql: number;
    private pj;
    pk: (time: number) => number;
    qo(): string;
    protected ge(a: XamDataChart): void;
    protected gk(a: Series, b: number): void;
    private o9;
    private pd;
    protected f3(): void;
    protected nh(a: Axis): void;
    private o3;
    o4: CategoryChartType;
    private o5;
    o6: CategorySeriesMarkerCollisionAvoidance;
    private pn;
    ps: boolean;
    private o7;
    o8: CategoryTransitionInMode;
    private ph;
    pi: TransitionInSpeedType;
    private pw;
    qa: number;
    private px;
    qb: number;
    private pv;
    p9: number;
    private py;
    qc: number;
    private pz;
    qf: number;
    private pp;
    pu: boolean;
    private qk;
    qm: number;
    private p1;
    qh: number;
    private p0;
    qg: number;
    private p2;
    qi: number;
    readonly p8: number;
    readonly p7: number;
    p4(): number;
    p6(): number;
    p3(): number;
    p5(): number;
    readonly qe: number;
    readonly qd: number;
    private oz;
    o1: BrushCollection;
    private o0;
    o2: BrushCollection;
    private po;
    pt: boolean;
    private pl;
    pq: boolean;
    private pm;
    pr: boolean;
    constructor();
    protected get_b5(): List$1<DataSeriesType>;
    protected readonly b5: List$1<DataSeriesType>;
    private rc;
    private rd;
    protected hl(): void;
    private _xAxis;
    private xAxis;
    private _yAxis;
    private yAxis;
    private pc;
    private pb;
    protected u(a: DataSeries): DataSeriesType;
    protected aq(a: DataSeries, b: DataSeriesType): Series;
    protected hj(a: DataSeries): void;
    protected hm(): void;
    protected get_b4(): List$1<IDataSeriesAdapterRule>;
    protected readonly b4: List$1<IDataSeriesAdapterRule>;
    protected f1(a: Series, b: number): void;
    private ra;
    private rb;
    protected id(): Axis;
    protected ie(): Axis;
    private pf;
    private pg;
    protected b1(a: string, b: boolean): List$1<Series>;
    protected hq(a: Series, b: Series, c: DataSeries): void;
    protected g3(a: string, b: any, c: any): void;
}
