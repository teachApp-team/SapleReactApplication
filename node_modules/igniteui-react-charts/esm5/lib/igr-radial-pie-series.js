import * as tslib_1 from "tslib";
import { IgrAnchoredRadialSeries } from "./igr-anchored-radial-series";
import { RadialPieSeries } from "./RadialPieSeries";
/**
 * Represents a IgxDataChartComponent radial pie series.
 * Compare values across categories by using radial pie slices.
*/
var IgrRadialPieSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrRadialPieSeries, _super);
    function IgrRadialPieSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrRadialPieSeries.prototype.createImplementation = function () {
        return new RadialPieSeries();
    };
    Object.defineProperty(IgrRadialPieSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialPieSeries.prototype, "radiusX", {
        /**
         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
        */
        get: function () {
            return this.i.ov;
        },
        set: function (v) {
            this.i.ov = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRadialPieSeries.prototype, "radiusY", {
        /**
         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
        */
        get: function () {
            return this.i.ow;
        },
        set: function (v) {
            this.i.ow = +v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    IgrRadialPieSeries.prototype.getItemSpan = function () {
        var iv = this.i.eg();
        return (iv);
    };
    return IgrRadialPieSeries;
}(IgrAnchoredRadialSeries));
export { IgrRadialPieSeries };
//# sourceMappingURL=igr-radial-pie-series.js.map
