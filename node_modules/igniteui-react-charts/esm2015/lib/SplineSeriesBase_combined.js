/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { SplineType_$type } from "./SplineType";
import { DependencyProperty } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { typeCast, Point_$type, enumGetBox, markType, markDep } from "igniteui-react-core";
import { CollisionAvoider } from "./CollisionAvoider";
import { ISortingAxis_$type } from "./ISortingAxis";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { SafeSortedReadOnlyDoubleCollection } from "./SafeSortedReadOnlyDoubleCollection";
import { Numeric } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_ } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let SplineSeriesBase = /*@__PURE__*/ (() => {
    class SplineSeriesBase extends HorizontalAnchoredCategorySeries {
        constructor() {
            super(...arguments);
            this.ql = null;
        }
        bf() {
            return new SplineSeriesBaseView(this);
        }
        iv(a) {
            super.iv(a);
            this.qm = a;
        }
        get_ck() {
            return true;
        }
        qs(a, b, c, d, e, f) {
            let g = typeCast(ISortingAxis_$type, d);
            let h = this.getEffectiveViewport1(f);
            if (g == null) {
                return;
            }
            let i = new ScalerParams(0, b, c, d.ca, h);
            let j = new ScalerParams(0, b, c, e.ca, h);
            j.b = this.eh();
            let k = this.l4();
            let l = 0;
            let m = this.qq(d, b, c, h);
            let n = (o) => o;
            let o = (p) => this.valueColumn.item(g.i$b._inner[p]);
            let p = this.nj.cn.f;
            let q = this.nj.cn.e;
            let r = truncate(Math.ceil(c.width / (p - q)));
            let s = new CollisionAvoider();
            let t = this.nj.cn.d;
            if (t <= 0 || (q <= 0 && p <= 0)) {
                this.nj.cq.count = l;
                return;
            }
            let u = 0;
            let v = 0;
            for (let w = q; w < p + 1; ++w) {
                let x = null;
                let y = w * t;
                if (g != null && g.i$b != null && y >= 0 && y < g.i$b.count) {
                    y = g.i$b._inner[y];
                }
                if (w >= (this.valueColumn.count - 1)) {
                    if (k && this.qo(a, a.f._inner[a.f.count - 1], s, Math.min(y, this.bz.count - 1), l, f, u - 1)) {
                        ++l;
                    }
                    break;
                }
                let z = n(w);
                let aa = o(w);
                let ab = n(w + 1);
                let ac = o(w + 1);
                let ad = ab - z;
                let ae = this.ql[w];
                let af = this.ql[w + 1];
                let ag = g.i$d(g.i$b._inner[w]);
                let ah = d.dy(ag, i) + m;
                let ai = e.dy(aa, j);
                a.f.add([ah, ai, ai]);
                u++;
                v = u;
                for (let aj = 1; aj < r; ++aj) {
                    let ak = aj / r;
                    let al = z + ad * ak;
                    let am = (ab - al) / ad;
                    let an = (al - z) / ad;
                    let ao = am * aa + an * ac + ((am * am * am - am) * ae + (an * an * an - an) * af) * (ad * ad) / 6;
                    let ap = g.i$d(g.i$b._inner[w]);
                    let aq = g.i$d(g.i$b._inner[w + 1]);
                    let ar = ap + (aq - ap) * ak;
                    al = d.dy(ar, i) + m;
                    ao = e.dy(ao, j);
                    a.f.add([al, ao, ao]);
                    u++;
                }
                if (k) {
                    x = [ah, ai, ai];
                }
                if (k && this.qo(a, x, s, Math.min(y, this.bz.count - 1), l, f, v - 1)) {
                    ++l;
                }
            }
            f.cq.count = l;
        }
        qo(a, b, c, d, e, f, g) {
            let h = b[0];
            let i = b[1];
            let j = new Rect(0, h - 5, i - 5, 11, 11);
            if (!isNaN_(h) && !isNaN_(i) && c.tryAdd(j)) {
                a.m.add({ $type: Point_$type, x: h, y: i });
                let k = f.cq.item(e);
                k.content.item = this.bz.item(d);
                k.al = g;
                return true;
            }
            return false;
        }
        aj(a, b, c, d, e, f) {
            if (a == null || a.cf || this.ob(this.bi) > 1 || this.ob(this.bi) == 0) {
                return super.aj(this.na(), this.nb.f, this.ob(this.bi), this.oc(this.bi), e, f);
            }
            if (this.nb.f.count == 0) {
                return null;
            }
            let g = this.qm.cn.f;
            let h = this.bi.br;
            let i = truncate(Math.ceil(h.width / (g - d)));
            let j = -1;
            let k = -1;
            let l = this.eb(e);
            let m = this.fe(e, f);
            let n = this.fc(e, f);
            let o = truncate(Math.floor(m / this.ob(this.bi)));
            let p = truncate(Math.floor(n / this.ob(this.bi)));
            j = o - this.oc(this.bi);
            k = p - this.oc(this.bi);
            let q = j * i;
            let r = k * i;
            let s = 0;
            if (m != n) {
                s = (l - m) / (n - m);
            }
            let t = truncate(Math.floor(q + s * (r - q)));
            j = t;
            k = t + 1;
            if (j < 0) {
                j = 0;
            }
            if (j > this.nb.f.count - 1) {
                j = this.nb.f.count - 1;
            }
            if (k < 0) {
                k = 0;
            }
            if (k > this.nb.f.count - 1) {
                k = this.nb.f.count - 1;
            }
            let u = this.nb.f._inner[j];
            let v = this.nb.f._inner[k];
            let w = new Array(2);
            w[0] = u;
            w[1] = v;
            return w;
        }
        op(a, b) {
            super.op(a, b);
            if (a.f.count <= 1) {
                return;
            }
            if (b.cn.d == 0) {
                return;
            }
            let c = b.bs;
            let d = b.br;
            let e = this.getEffectiveViewport1(b);
            let f = this.p2;
            let g = this.p8;
            let h = new ScalerParams(0, c, d, f.ca, e);
            let i = ((() => {
                let $ret = new ScalerParams(0, c, d, g.ca, e);
                $ret.b = this.eh();
                return $ret;
            })());
            a.f.clear();
            a.m.clear();
            let j = this.l4();
            let k = 0;
            let l = typeCast(ISortingAxis_$type, this.p2);
            if (l != null && l.i$b.count != this.bz.count) {
                return;
            }
            let m = this.qq(f, c, d, e);
            let n = (o) => o;
            let o = (p) => this.valueColumn.item(p);
            let p = b.cn.d;
            if ((this.ql == null || this.ql.length != this.valueColumn.count) && p == 1) {
                let q = this.qn == 0 ? NaN : 0;
                if (this.p2 != null && typeCast(ISortingAxis_$type, this.p2) !== null && this.p2.i$b != null) {
                    let r = new SafeSortedReadOnlyDoubleCollection(1, this.valueColumn, this.p2.i$b, NaN);
                    o = (s) => r.item(s);
                }
                this.ql = Numeric.c(this.valueColumn.count, n, o, q, q);
            }
            let s = b.cn.f;
            let t = b.cn.e;
            let u = truncate(Math.ceil(d.width / (s - t)));
            let v = new CollisionAvoider();
            if (l != null) {
                this.qs(a, c, d, f, g, b);
                return;
            }
            let w = b;
            w.c2();
            let x = 0;
            let y = 0;
            for (let z = t; z <= s; ++z) {
                let aa = null;
                if (p == 1) {
                    if (z >= (this.valueColumn.count - 1)) {
                        if (j && this.qo(a, a.f._inner[a.f.count - 1], v, Math.min(z * p, this.bz.count - 1), k, b, x - 1)) {
                            ++k;
                        }
                        break;
                    }
                    let ab = n(z);
                    let ac = o(z);
                    let ad = n(z + 1);
                    let ae = o(z + 1);
                    let af = ad - ab;
                    let ag = this.ql[z];
                    let ah = this.ql[z + 1];
                    let ai = f.dy(ab, h) + m;
                    let aj = g.dy(ac, i);
                    a.f.add([ai, aj, aj]);
                    x++;
                    y = x;
                    for (let ak = 1; ak < u; ++ak) {
                        let al = ab + af * ak / u;
                        let am = (ad - al) / af;
                        let an = (al - ab) / af;
                        let ao = am * ac + an * ae + ((am * am * am - am) * ag + (an * an * an - an) * ah) * (af * af) / 6;
                        al = f.dy(al, h) + m;
                        ao = g.dy(ao, i);
                        a.f.add([al, ao, ao]);
                        x++;
                    }
                    if (j) {
                        aa = b.cn.getBucket(z);
                        aa[0] = (f.dy(aa[0], h) + m);
                        aa[1] = g.dy(aa[1], i);
                        aa[2] = g.dy(aa[2], i);
                    }
                }
                else {
                    aa = b.cn.getBucket(z);
                    if (!isNaN_(aa[0])) {
                        aa[0] = (f.dy(aa[0], h) + m);
                        aa[1] = g.dy(aa[1], i);
                        aa[2] = g.dy(aa[2], i);
                        a.f.add(aa);
                        x++;
                    }
                }
                if (j && this.qo(a, aa, v, Math.min(z * p, this.bz.count - 1), k, b, y - 1)) {
                    ++k;
                }
            }
            w.c4();
            b.cq.count = k;
        }
        qp(a, b, c, d, e, f, g) {
            let h = d - b;
            let i = b + h * a;
            let j = (d - i) / h;
            let k = (i - b) / h;
            let l = j * c + k * e + ((j * j * j - j) * f + (k * k * k - k) * g) * (h * h) / 6;
            return l;
        }
        ef(a, b, c, d, e, f, g, h) {
            let i = NaN;
            if (c >= 0 && c < b.count) {
                i = b.item(c);
            }
            let j = NaN;
            if (d >= 0 && d < b.count) {
                j = b.item(d);
            }
            if (f == 0) {
                return j;
            }
            if (e == b.count - 1) {
                return i;
            }
            if (isNaN_(j) && g != 0 && a <= 0.5 && !h) {
                return i;
            }
            if (isNaN_(i) && g != 0 && a >= 0.5 && !h) {
                return j;
            }
            let k = e;
            let l = f;
            let m = i;
            let n = j;
            let o = NaN;
            let p = NaN;
            if (this.ql != null && e >= 0 && e < this.ql.length) {
                o = this.ql[e];
            }
            if (this.ql != null && f >= 0 && f < this.ql.length) {
                p = this.ql[f];
            }
            return this.qp(a, k, m, l, n, o, p);
        }
        qq(a, b, c, d) {
            let e = this.preferredCategoryMode(a);
            if (e == 0 && a.categoryMode != 0) {
                e = 1;
            }
            let f = 0;
            switch (e) {
                case 0:
                    f = 0;
                    break;
                case 1:
                    f = 0.5 * a.getCategorySize(b, c, d);
                    break;
                case 2:
                    f = a.getGroupCenter(this.fh, b, c, d);
                    break;
            }
            if (a.ca) {
                f = -f;
            }
            return f;
        }
        qt() {
            this.ql = null;
        }
        i0(a, b, c, d) {
            switch (b) {
                case "ValueColumn":
                case "FastItemsSource":
                    this.qt();
                    break;
            }
            super.i0(a, b, c, d);
            switch (b) {
                case SplineSeriesBase.$$p[0]:
                    this.qt();
                    this.je(false);
                    this.il();
                    break;
            }
        }
        hz(a, b, c, d) {
            this.qt();
            super.hz(a, b, c, d);
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    SplineSeriesBase.$t = /*@__PURE__*/ markType(SplineSeriesBase, 'SplineSeriesBase', HorizontalAnchoredCategorySeries.$);
    SplineSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, SplineSeriesBase, 'raisePropertyChanged', ['SplineType:qn:qu', [SplineType_$type, /*@__PURE__*/ enumGetBox(SplineType_$type, 0)]]);
    return SplineSeriesBase;
})();
/**
 * @hidden
 */
export let SplineSeriesBaseView = /*@__PURE__*/ (() => {
    class SplineSeriesBaseView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.c6 = null;
            this.c6 = a;
        }
        ac() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.lb = a;
            this.e.ev = 3;
            this.e.ew = 1;
            this.e.ex = 4;
            this.e.du = false;
        }
    }
    SplineSeriesBaseView.$t = /*@__PURE__*/ markType(SplineSeriesBaseView, 'SplineSeriesBaseView', AnchoredCategorySeriesView.$);
    return SplineSeriesBaseView;
})();
//# sourceMappingURL=SplineSeriesBase_combined.js.map
