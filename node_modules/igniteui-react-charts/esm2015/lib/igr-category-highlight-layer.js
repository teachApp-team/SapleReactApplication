import { IgrCategoryAxisBase } from "./igr-category-axis-base";
import { IgrAnnotationLayer } from "./igr-annotation-layer";
import { CategoryHighlightLayer } from "./CategoryHighlightLayer";
import { ensureBool } from "igniteui-react-core";
/**
 * Represents an annotation layer that targets a category axis, or all category axes in the chart.
 * If the axis contains any series that are aligned between major gridlines of the axis (column, waterfall, etc) this will render a shape that fills the current category.
 * Otherwise it will render a band with an adjustable thickness at the closest gridline to the pointer position.
 * Setting UseIterpolation to true will cause the x position in the latter case to become affixed to the x position of the pointer.
*/
export class IgrCategoryHighlightLayer extends IgrAnnotationLayer {
    createImplementation() {
        return new CategoryHighlightLayer();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets the axis to target this annotation to. If null, this annotation targets all category axes simultaneously.
    */
    get targetAxis() {
        if (this.i.m5 == null) {
            return null;
        }
        if (!this.i.m5.externalObject) {
            let e = IgrCategoryAxisBase._createFromInternal(this.i.m5);
            if (e) {
                e._implementation = this.i.m5;
            }
            this.i.m5.externalObject = e;
        }
        return this.i.m5.externalObject;
    }
    set targetAxis(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.m5 = null : this.i.m5 = v.i;
    }
    /**
     * Gets or sets whether to use value interpolation when drawing a line through the best value for the pointer position.
    */
    get useInterpolation() {
        return this.i.m8;
    }
    set useInterpolation(v) {
        this.i.m8 = ensureBool(v);
    }
    /**
     * Gets or sets the width to use for the highlight region if drawing a band rather than filling a category.
    */
    get bandHighlightWidth() {
        return this.i.m9;
    }
    set bandHighlightWidth(v) {
        this.i.m9 = +v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.targetAxis && this.targetAxis.name && this.targetAxis.name == name) {
            return this.targetAxis;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.targetAxis && this.targetAxis._styling) {
            this.targetAxis._styling(container, component, this);
        }
        this._inStyling = false;
    }
}
//# sourceMappingURL=igr-category-highlight-layer.js.map
