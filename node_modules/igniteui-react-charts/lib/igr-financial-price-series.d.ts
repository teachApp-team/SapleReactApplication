import { IgRect } from "igniteui-react-core";
import { IgPoint } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { PriceDisplayType } from "./PriceDisplayType";
import { IgrFinancialSeries, IIgrFinancialSeriesProps } from "./igr-financial-series";
import { FinancialPriceSeries } from "./FinancialPriceSeries";
/**
 * Represents a IgxDataChartComponent financial price series that renders as Candlestick or OHLC representations.
 * Default required members: Open, Low, High, Close
*
* The `IgrFinancialPriceSeries` class represents a IgxDataChartComponent financial price series that renders as Candlestick or OHLC representations.
*
* ```ts
* <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*
*
*     <IgrCategoryXAxis name="xAxis" label="Date" />
*     <IgrNumericYAxis  name="yAxis" />
*
*
*     <IgrFinancialPriceSeries
*     name="series2"
*     xAxisName="xAxis"
*     yAxisName="yAxis"
*     displayType="Candlestick"
*     lowMemberPath="Low"
*     highMemberPath="High"
*     openMemberPath="Open"
*     closeMemberPath="Close"
*     volumeMemberPath="Volume" />
*  </IgrDataChart>
* ```
*
* ```ts
* this.series = new IgrFinancialPriceSeries({name: "series"});
* this.series.dataSource = this.financialData;
* this.series.xAxis = this.timeXAxis;
* this.series.yAxis = this.numericYAxis;
* this.series.xAxisName = "timeXAxis";
* this.series.yAxisName = "numericYAxis";
* this.series.highMemberPath="High" ;
* this.series.lowMemberPath="Low";
* this.series.closeMemberPath="Close";
* this.series.openMemberPath="Open";
* this.series.volumeMemberPath="Volume";
* ```
*/
export declare class IgrFinancialPriceSeries extends IgrFinancialSeries<IIgrFinancialPriceSeriesProps> {
    protected createImplementation(): FinancialPriceSeries;
    /**
                                 * @hidden
                                 */
    readonly i: FinancialPriceSeries;
    constructor(props: IIgrFinancialPriceSeriesProps);
    /**
     * Gets or sets the trend type for the current financial series.
    *
    * Use the `trendLineType` property for the trend type of the current financial series.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * 	trendLineType={this.state.trendLineType}  />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.trendLineType= "CubicFit";
    * ```
    */
    trendLineType: TrendLineType;
    /**
     * Gets or sets the brush to use to draw the trend line.
    *
    * Use the `trendLineBrush` property to brush the the trend line.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * 	trendLineBrush="Blue" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.trendLineBrush="red";
    * ```
    */
    trendLineBrush: string;
    /**
     * Gets the effective TrendLineBrush for this FinancialPriceSeries.
    *
    * Use the `actualTrendLineBrush` property to Gets the effective TrendLineBrush for the FinancialIndicator.
    *
    * ````ts
    * <IgrDataChart
    *         ref={this.onChartRef}
    *         dataSource={this.data}
    *         width="100%"
    *         height="100%" >
    *
    *         <IgrCategoryXAxis name="xAxis" label="Label" />
    *         <IgrNumericYAxis name="yAxis" />
    *
    *         <IgrFinancialPriceSeries
    *             name="series1"
    *             xAxisName="xAxis"
    *             yAxisName="yAxis"
    *             highMemberPath="High"
    *             lowMemberPath="Low"
    *             closeMemberPath="Close"
    *             openMemberPath="Open"
    *             volumeMemberPath="Volume"
    *             trendLineType={this.state.trendLineType}
    *             displayType= "Candlestick"
    *             trendLinePeriod = {2}
    *             actualTrendLineBrush= "blue"/>
    *
    *     </IgrDataChart>
    *
    * 	```
    * ````
    */
    actualTrendLineBrush: string;
    /**
     * Gets or sets the thickness of the current FinancialPriceSeries object's trend line.
    *
    * Use the `trendLineThickness` property for the thickness of the current FinancialPriceSeries object's trend line.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * 	trendLineThickness="3"/>
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.trendLineThickness=5;
    * ```
    */
    trendLineThickness: number;
    /**
     * Gets or sets the trend line period for the current series.
     * The typical, and initial, value for trend line period is 7.
    *
    * Use the `trendLinePeriod` property for the periodo the the current series.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * 	trendLinePeriod={7} />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.trendLinePeriod= 7;
    * ```
    */
    trendLinePeriod: number;
    /**
     * Gets or sets the display type for the current FinancialPriceSeries object.
    *
    * Use the `displayType` property for the display type of the current FinancialPriceSeries object.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.displayType=PriceDisplayType.Candlestick;
    * ```
    */
    displayType: PriceDisplayType;
    /**
     * Brush to use for outlining negative elements in the series.
    *
    * Use the `negativeOutline` property to brush the outline negative elements in the series.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * 	negativeOutline="Red" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.negativeOutline="red";
    * ```
    */
    negativeOutline: string;
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinate for which to get a value bounding box for
    *
    * The `getSeriesValueBoundingBox` method return the best available value bounding box within the series that has the best value match for the world position provided.
    */
    getSeriesValueBoundingBox(world: IgPoint): IgRect;
    /**
     * Scrolls the series to display the item for the specified data item.
     * The categorySeries is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    *
    * The `scrollIntoView` methos scrolls the series to display the item for the specified data item.
    */
    scrollIntoView(item: any): boolean;
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    *
    * The `getItemSpan` method is used For a category plotted series, returns the current width of the items within the categories.
    *
    * This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned
    */
    getItemSpan(): number;
    setNegativeColors(negativeBrush: string, negativeOutline: string): void;
}
export interface IIgrFinancialPriceSeriesProps extends IIgrFinancialSeriesProps {
    /**
     * Gets or sets the trend type for the current financial series.
    *
    * Use the `trendLineType` property for the trend type of the current financial series.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * 	trendLineType={this.state.trendLineType}  />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.trendLineType= "CubicFit";
    * ```
    */
    trendLineType?: TrendLineType | string;
    /**
     * Gets or sets the brush to use to draw the trend line.
    *
    * Use the `trendLineBrush` property to brush the the trend line.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * 	trendLineBrush="Blue" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.trendLineBrush="red";
    * ```
    */
    trendLineBrush?: string;
    /**
     * Gets the effective TrendLineBrush for this FinancialPriceSeries.
    *
    * Use the `actualTrendLineBrush` property to Gets the effective TrendLineBrush for the FinancialIndicator.
    *
    * ````ts
    * <IgrDataChart
    *         ref={this.onChartRef}
    *         dataSource={this.data}
    *         width="100%"
    *         height="100%" >
    *
    *         <IgrCategoryXAxis name="xAxis" label="Label" />
    *         <IgrNumericYAxis name="yAxis" />
    *
    *         <IgrFinancialPriceSeries
    *             name="series1"
    *             xAxisName="xAxis"
    *             yAxisName="yAxis"
    *             highMemberPath="High"
    *             lowMemberPath="Low"
    *             closeMemberPath="Close"
    *             openMemberPath="Open"
    *             volumeMemberPath="Volume"
    *             trendLineType={this.state.trendLineType}
    *             displayType= "Candlestick"
    *             trendLinePeriod = {2}
    *             actualTrendLineBrush= "blue"/>
    *
    *     </IgrDataChart>
    *
    * 	```
    * ````
    */
    actualTrendLineBrush?: string;
    /**
     * Gets or sets the thickness of the current FinancialPriceSeries object's trend line.
    *
    * Use the `trendLineThickness` property for the thickness of the current FinancialPriceSeries object's trend line.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * 	trendLineThickness="3"/>
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.trendLineThickness=5;
    * ```
    */
    trendLineThickness?: number | string;
    /**
     * Gets or sets the trend line period for the current series.
     * The typical, and initial, value for trend line period is 7.
    *
    * Use the `trendLinePeriod` property for the periodo the the current series.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * 	trendLinePeriod={7} />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.trendLinePeriod= 7;
    * ```
    */
    trendLinePeriod?: number | string;
    /**
     * Gets or sets the display type for the current FinancialPriceSeries object.
    *
    * Use the `displayType` property for the display type of the current FinancialPriceSeries object.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.displayType=PriceDisplayType.Candlestick;
    * ```
    */
    displayType?: PriceDisplayType | string;
    /**
     * Brush to use for outlining negative elements in the series.
    *
    * Use the `negativeOutline` property to brush the outline negative elements in the series.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * 	negativeOutline="Red" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.negativeOutline="red";
    * ```
    */
    negativeOutline?: string;
}
