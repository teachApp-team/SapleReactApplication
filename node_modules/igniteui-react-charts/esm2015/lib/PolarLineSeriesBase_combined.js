/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { PolarBase } from "./PolarBase";
import { PathRenderer } from "./PathRenderer";
import { DefaultFlattener } from "./DefaultFlattener";
import { PolarBaseView } from "./PolarBaseView";
import { Number_$type, Point_$type, markType } from "igniteui-react-core";
import { PolarLinePlanner } from "./PolarLinePlanner";
import { List$1 } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let PolarLineSeriesBase = /*@__PURE__*/ (() => {
    class PolarLineSeriesBase extends PolarBase {
        constructor() {
            super();
            this.o3 = null;
            this.o5 = null;
            this.o4 = null;
            this.o3 = new PathRenderer(1, new DefaultFlattener());
            this.o5 = new PathRenderer(0);
        }
        bf() {
            return new PolarLineSeriesBaseView(this);
        }
        iv(a) {
            super.iv(a);
            this.o6 = a;
        }
        o7() {
            return 1;
        }
        get_pa() {
            return false;
        }
        get pa() {
            return this.get_pa();
        }
        get_pc() {
            return false;
        }
        get pc() {
            return this.get_pc();
        }
        od(a, b) {
            super.od(a, b);
            a.m.clear();
            let c = b.bs;
            let d = b.br;
            let e = this.nm != null ? this.nm.count : 0;
            let f = this.nn != null ? this.nn.count : 0;
            let g = Math.min(e, f);
            let h = ((() => {
                let $ret = new PolarLinePlanner();
                $ret.m = (i) => this.na.a.getScaledAngle1(this.nm.item(i), this.na.e, this.na.d);
                $ret.q = g;
                $ret.n = (i) => this.m8.lx(this.nn.item(i), this.na.g, this.na.f, this.na.i, this.na.h);
                $ret.l = this.eu;
                $ret.f = this.ns;
                $ret.b = this.o7();
                $ret.o = (i) => this.pd(a, i);
                $ret.p = (i) => this.pe(a, i);
                $ret.ab = d;
                $ret.ac = c;
                $ret.d = this.pc;
                $ret.c = this.pa;
                return $ret;
            })());
            let i = new List$1(Number_$type, 0);
            for (let j = 0; j < g; j++) {
                if (this.pb(j)) {
                    i.add(j);
                }
            }
            if (this.pc && i.count > 0) {
                i.add(i._inner[0]);
            }
            h.x(a.m, i);
        }
        pd(a, b) {
            return a.w._inner[b].x;
        }
        pe(a, b) {
            return a.w._inner[b].y;
        }
        o9() {
            return !this.o8();
        }
        o8() {
            let a = this.bs.mr;
            return !a.containsPoint({ $type: Point_$type, x: 0.5, y: 0.5 });
        }
        pb(a) {
            return (this.nm.item(a) >= this.na.a.kb && this.nm.item(a) <= this.na.a.ka && this.nn.item(a) >= this.na.b.kb && this.nn.item(a) <= this.na.b.ka) || (isNaN_(this.nm.item(a)) || isNaN_(this.nn.item(a)));
        }
        hw(a, b) {
            super.hw(a, b);
            this.pf(b);
        }
        of(a, b) {
            super.of(a, b);
            if (this.ns) {
                this.o4 = this.o3;
            }
            else {
                this.o4 = this.o5;
            }
            this.o4.b = this.o7();
            this.pf(b);
            this.pg(a, b);
        }
    }
    PolarLineSeriesBase.$t = /*@__PURE__*/ markType(PolarLineSeriesBase, 'PolarLineSeriesBase', PolarBase.$);
    return PolarLineSeriesBase;
})();
/**
 * @hidden
 */
export let PolarLineSeriesBaseView = /*@__PURE__*/ (() => {
    class PolarLineSeriesBaseView extends PolarBaseView {
        constructor(a) {
            super(a);
            this.cy = null;
            this.cy = a;
        }
        ac() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.lb = a;
            this.e.ev = 3;
            this.e.ew = 1;
            this.e.ex = 4;
            this.e.du = false;
        }
    }
    PolarLineSeriesBaseView.$t = /*@__PURE__*/ markType(PolarLineSeriesBaseView, 'PolarLineSeriesBaseView', PolarBaseView.$);
    return PolarLineSeriesBaseView;
})();
//# sourceMappingURL=PolarLineSeriesBase_combined.js.map
