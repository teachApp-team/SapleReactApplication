/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { TimeAxisBase } from "./TimeAxisBase";
import { ITimeRangeSelectorAxis_$type } from "./ITimeRangeSelectorAxis";
import { List$1 } from "igniteui-react-core";
import { TimeAxisBreak } from "./TimeAxisBreak";
import { TimeAxisBreakCollection } from "./TimeAxisBreakCollection";
import { TimeAxisLabelFormatCollection } from "./TimeAxisLabelFormatCollection";
import { OrderedDictionary$2 } from "./OrderedDictionary$2";
import { TimeAxisInterval } from "./TimeAxisInterval";
import { TimeAxisIntervalCollection } from "./TimeAxisIntervalCollection";
import { EventArgs, runOn, delegateCombine, Number_$type, fromEnum, fromEn, typeCast, Date_$type, markType } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { KeyValuePair$2 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { LabelPosition } from "./LabelPosition";
import { Extensions } from "igniteui-react-core";
import { SortedListView$1 } from "./SortedListView$1";
import { Dictionary$2 } from "igniteui-react-core";
import { truncate, intDivide, isNaN_ } from "igniteui-react-core";
import { dateFromTicks, dateMaxValue, dateAdd, dateSubtract, dateAddMonths, dateFromValues, dateGetMonth, dateGetTimeOfDay, dateAddDays, dateAddHours, dateMinValue } from "igniteui-react-core";
import { timeSpanTicks, timeSpanInit3, timeSpanInit1, timeSpanFromMilliseconds, timeSpanFromSeconds, timeSpanFromMinutes, timeSpanFromHours, timeSpanFromDays, timeSpanFromTicks, timeSpanTotalMilliseconds } from "igniteui-react-core";
import { dateToStringFormat } from "igniteui-react-core";
/**
 * @hidden
 */
export let TimeXAxis = /*@__PURE__*/ (() => {
    class TimeXAxis extends TimeAxisBase {
        constructor() {
            super();
            this.mt = 0;
            this.md = null;
            this.mj = null;
            this._omission = 0;
            this.mb = null;
            this.mh = null;
            this.m5 = 0;
            this.mp = dateMaxValue();
            this.mo = dateMinValue();
            this.m3 = 0;
            this.visibleRangeChanged = null;
            this.ab = TimeXAxis.$;
            this.omission = (0);
            this.mt = -2147483648;
            this.md = new TimeAxisBreakCollection();
            let a = this.breaks;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.m8));
            this.mh = new TimeAxisIntervalCollection();
            let b = this.intervals;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.m9));
            this.mj = new TimeAxisLabelFormatCollection();
            let c = this.labelFormats;
            c.collectionChanged = delegateCombine(c.collectionChanged, runOn(this, this.na));
            this.m5 = (0);
        }
        get_cd() {
            return this.breaks != null && this.breaks.count > 0;
        }
        dy(a, b) {
            let c = new KeyValuePair$2(TimeAxisBreak.$, Number_$type);
            let d = this.mt != -2147483648 ? this.mt : 0;
            let e = this.mb != null ? this.mb.count : 0;
            while (d < e) {
                let f = this.mb.item1(d);
                if (f.d.getTime() <= a && f.c.getTime() >= a) {
                    return NaN;
                }
                if (f.c.getTime() <= a) {
                    c = new KeyValuePair$2(TimeAxisBreak.$, Number_$type, 1, f, this.mb.item(f));
                    d++;
                }
                else {
                    break;
                }
            }
            if (d > 0) {
                d -= 1;
            }
            if (this.mt != -2147483648) {
                this.mt = d;
            }
            let g;
            let h;
            if (c.key != null) {
                g = c.value;
                h = c.key.c;
            }
            else {
                g = 0;
                h = this.actualMinimumValue;
            }
            let fromPrecedingBreak_ = +(dateFromTicks(truncate(a))) - +h;
            let i = (fromPrecedingBreak_ / ((this.actualMaximumValue.getTime() - this.actualMinimumValue.getTime()) - this.omission));
            let j = g + i;
            j -= b.e.left;
            j /= b.e.width;
            let k = b.d.left;
            let l = b.d.right;
            let m = b.d.width;
            if (this.categoryMode != 0) {
                let n = this.getCategorySize(b.e, b.d, b.c);
                k += n / 2;
                l -= n / 2;
                m -= n;
            }
            if (this.ca) {
                return l - m * j;
            }
            return k + m * j;
        }
        gs(a, b, c, d) {
            this.mt = 0;
            for (let e = b; e < c; e++) {
                a.item(e, this.dy(a.item(e), d));
            }
            this.mt = -2147483648;
        }
        startCursor() {
            this.mt = 0;
        }
        resetCursor() {
            this.mt = -2147483648;
        }
        d1(a, b) {
            let c = b.d.left;
            let d = b.d.width;
            if (this.categoryMode != 0) {
                let e = this.getCategorySize(b.e, b.d, b.c);
                c += e / 2;
                d -= e;
            }
            let f = b.e.left + b.e.width * (a - c) / d;
            if (this.ca) {
                f = 1 - f;
            }
            let g = new KeyValuePair$2(TimeAxisBreak.$, Number_$type);
            if (this.mb != null) {
                for (let h of fromEnum(this.mb)) {
                    if (h.value >= f && h.value <= f) {
                        return h.key.d.getTime();
                    }
                    if (h.value < f && h.value > g.value) {
                        g = h;
                    }
                }
            }
            let precedingBreakEnd_;
            let i;
            if (g.key != null) {
                i = g.value;
                precedingBreakEnd_ = g.key.c;
            }
            else {
                i = 0;
                precedingBreakEnd_ = this.actualMinimumValue;
            }
            let portionFromPrecedingBreak_ = f - i;
            let actualRange_ = +(this.actualMaximumValue) - +(this.actualMinimumValue) - this.omission;
            return (precedingBreakEnd_.getTime() + portionFromPrecedingBreak_ * actualRange_);
        }
        get breaks() {
            return this.md;
        }
        get labelFormats() {
            return this.mj;
        }
        gz(a, b, c, d) {
            super.gz(a, b, c, d);
            switch (b) {
                case "ActualMaximumValue":
                    this.m7();
                    break;
                case "DateTimeColumn":
                    this.m3 = this.m1();
                    break;
            }
        }
        hn(a, b) {
            super.hn(a, b);
            this.m6();
            this.l5();
        }
        hm(a, b) {
            super.hm(a, b);
            this.m6();
            this.l5();
        }
        cp() {
            let a = super.cp();
            this.m6();
            return a;
        }
        get omission() {
            return this._omission;
        }
        set omission(a) {
            this._omission = a;
        }
        m7() {
            let a = this.mm(this.breaks);
            let b = (0);
            for (let c of fromEnum(a)) {
                b += (+(c.c) - +(c.d));
            }
            this.omission = b;
        }
        mm(a) {
            let b = new List$1(TimeAxisBreak.$, 0);
            if (a == null || +(this.actualMaximumValue) == +(dateMaxValue())) {
                return b;
            }
            for (let c of fromEn(a)) {
                if (c.c >= this.actualMinimumValue && c.d <= this.actualMaximumValue) {
                    b.add(c);
                }
                if (c.i != (0)) {
                    let d = +(c.c) - +(c.d);
                    let e = dateAdd(+(c.d), +(c.i));
                    while (e <= this.actualMaximumValue) {
                        let f = this.mq(e, d);
                        let g = ((() => {
                            let $ret = new TimeAxisBreak();
                            $ret.d = e;
                            $ret.c = f;
                            return $ret;
                        })());
                        if (g.c >= this.actualMinimumValue && g.d <= this.actualMaximumValue) {
                            b.add(g);
                        }
                        if (dateSubtract(+(dateMaxValue()), +(c.i)) < g.d) {
                            break;
                        }
                        e = this.mq(g.d, c.i);
                    }
                }
            }
            return b;
        }
        mq(a, b) {
            let c = dateFromTicks(a.getTime());
            c.setMilliseconds(c.getMilliseconds() + b);
            return c;
        }
        m6() {
            this.mb = new OrderedDictionary$2(TimeAxisBreak.$, Number_$type);
            if (+(this.actualMaximumValue) == +(dateMaxValue()) || this.breaks == null || this.breaks.count == 0 || this.bh == null) {
                return;
            }
            let a = new List$1(TimeAxisBreak.$, 1, this.mm(this.breaks));
            a.aa((b, c) => b.d < c.d ? -1 : b.d > c.d ? 1 : 0);
            let b = this.bh.mr;
            let c = new ScalerParams(0, this.bh.mr, this.bh.m5, this.ca, this.bh.mv);
            let d = +(this.actualMaximumValue) - +(this.actualMinimumValue) - this.omission;
            let e = 0;
            for (let f of fromEnum(a)) {
                let g = timeSpanTicks((+(f.d) - +(this.actualMinimumValue))) / timeSpanTicks(d);
                let h = timeSpanTicks((+(f.c) - +(this.actualMinimumValue))) / timeSpanTicks(d);
                if (h < 0 || g - e > 1) {
                    continue;
                }
                this.mb.addItem(f, g - e);
                e += (h - g);
            }
        }
        fl(a) {
            if (isNaN_(a)) {
                return null;
            }
            let ticks_ = truncate(a);
            let b = (new Date(ticks_));
            let c = this.e8(b);
            if (c == null) {
                return null;
            }
            return c.toString();
        }
        e8(a) {
            if (!(typeCast(Date_$type, a) !== null)) {
                return super.e8(a);
            }
            let b = TimeXAxis.mu(a, this.m5, this.labelFormats, this.et);
            return b == null ? super.e8(a) : b;
        }
        static mu(a, b, c, d) {
            let e = null;
            if (b == (0)) {
                return null;
            }
            let f;
            if (c == null || c.count == 0) {
                f = TimeXAxis.mx(b);
            }
            else {
                for (let g of fromEnum(c)) {
                    if (g.f > b) {
                        continue;
                    }
                    if (e == null || g.f > e.f) {
                        e = g;
                    }
                }
                if (e == null) {
                    return null;
                }
                f = e.b;
            }
            return dateToStringFormat(a, f, d);
        }
        get_k8() {
            return super.get_k8() || (this.intervals != null && this.intervals.count > 0);
        }
        set_k8(a) {
            super.set_k8(a);
        }
        get intervals() {
            return this.mh;
        }
        mw() {
            return TimeXAxis.mx(this.m5);
        }
        static mx(a) {
            a = Math.abs(a);
            if (a > timeSpanInit3(1825, 0, 0, 0)) {
                return "yyyy";
            }
            if (a > timeSpanInit3(365, 0, 0, 0)) {
                return "MMM yyyy";
            }
            if (a > timeSpanInit3(4, 0, 0, 0)) {
                return "MMM dd";
            }
            if (a > timeSpanInit3(1, 0, 0, 0)) {
                return "MMM dd hh:mmtt";
            }
            if (a > timeSpanInit1(0, 10, 0)) {
                return "hh:mm";
            }
            return "hh:mm:ss";
        }
        static mc() {
            if (TimeXAxis.ma == null) {
                TimeXAxis.ma = ((() => {
                    let $ret = new OrderedDictionary$2(Number_$type, TimeAxisInterval.$);
                    $ret.addItem((0), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 0;
                        $ret.f = 1;
                        return $ret;
                    })()));
                    $ret.addItem(timeSpanFromMilliseconds(1), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 1;
                        $ret.f = 1;
                        return $ret;
                    })()));
                    $ret.addItem(timeSpanFromSeconds(1), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 2;
                        $ret.f = 1;
                        return $ret;
                    })()));
                    $ret.addItem(timeSpanFromSeconds(30), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 2;
                        $ret.f = 30;
                        return $ret;
                    })()));
                    $ret.addItem(timeSpanFromMinutes(2), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 3;
                        $ret.f = 2;
                        return $ret;
                    })()));
                    $ret.addItem(timeSpanFromMinutes(5), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 3;
                        $ret.f = 5;
                        return $ret;
                    })()));
                    $ret.addItem(timeSpanFromHours(1), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 4;
                        $ret.f = 1;
                        return $ret;
                    })()));
                    $ret.addItem(timeSpanFromDays(1), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 5;
                        $ret.f = 1;
                        return $ret;
                    })()));
                    $ret.addItem(timeSpanFromDays(2), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 5;
                        $ret.f = 2;
                        return $ret;
                    })()));
                    $ret.addItem(timeSpanFromDays(5), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 5;
                        $ret.f = 5;
                        return $ret;
                    })()));
                    $ret.addItem(timeSpanFromDays(10), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 5;
                        $ret.f = 10;
                        return $ret;
                    })()));
                    $ret.addItem(timeSpanFromDays(30), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 7;
                        $ret.f = 1;
                        return $ret;
                    })()));
                    $ret.addItem(timeSpanFromDays(60), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 7;
                        $ret.f = 3;
                        return $ret;
                    })()));
                    $ret.addItem(timeSpanFromDays(365), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 8;
                        $ret.f = 1;
                        return $ret;
                    })()));
                    $ret.addItem(timeSpanFromDays(365 * 10), ((() => {
                        let $ret = new TimeAxisInterval();
                        $ret.b = 8;
                        $ret.f = 10;
                        return $ret;
                    })()));
                    return $ret;
                })());
            }
            return TimeXAxis.ma;
        }
        mf() {
            if (this.cq && (this.ax == null || this.ax.angle == 0)) {
                let a = this.ea();
                let b = this.i8.width;
                let c = truncate(Math.floor(b / a));
                let d = Number.MAX_VALUE;
                let e = c == 0 ? d : timeSpanFromTicks((intDivide(timeSpanTicks(this.m5), c)));
                let f = null;
                for (let g of fromEnum(TimeXAxis.mc())) {
                    f = g.value;
                    if (g.key > e) {
                        break;
                    }
                }
                return f;
            }
            let h = this.m5;
            if (h == (0)) {
                return ((() => {
                    let $ret = new TimeAxisInterval();
                    $ret.b = 8;
                    $ret.f = 1;
                    return $ret;
                })());
            }
            if (h >= timeSpanFromDays(365 * 100)) {
                return ((() => {
                    let $ret = new TimeAxisInterval();
                    $ret.b = 8;
                    $ret.f = 10;
                    return $ret;
                })());
            }
            if (h >= timeSpanFromDays(365 * 5)) {
                return ((() => {
                    let $ret = new TimeAxisInterval();
                    $ret.b = 8;
                    $ret.f = 1;
                    return $ret;
                })());
            }
            if (h >= timeSpanFromDays(365 * 2)) {
                return ((() => {
                    let $ret = new TimeAxisInterval();
                    $ret.b = 7;
                    $ret.f = 3;
                    return $ret;
                })());
            }
            if (h >= timeSpanFromDays(150)) {
                return ((() => {
                    let $ret = new TimeAxisInterval();
                    $ret.b = 7;
                    $ret.f = 1;
                    return $ret;
                })());
            }
            if (h >= timeSpanFromDays(60)) {
                return ((() => {
                    let $ret = new TimeAxisInterval();
                    $ret.b = 5;
                    $ret.f = 10;
                    return $ret;
                })());
            }
            if (h >= timeSpanFromDays(30)) {
                return ((() => {
                    let $ret = new TimeAxisInterval();
                    $ret.b = 5;
                    $ret.f = 5;
                    return $ret;
                })());
            }
            if (h >= timeSpanFromDays(20)) {
                return ((() => {
                    let $ret = new TimeAxisInterval();
                    $ret.b = 5;
                    $ret.f = 2;
                    return $ret;
                })());
            }
            if (h >= timeSpanFromDays(4)) {
                return ((() => {
                    let $ret = new TimeAxisInterval();
                    $ret.b = 5;
                    $ret.f = 1;
                    return $ret;
                })());
            }
            if (h >= timeSpanFromDays(1)) {
                return ((() => {
                    let $ret = new TimeAxisInterval();
                    $ret.b = 4;
                    $ret.f = 12;
                    return $ret;
                })());
            }
            if (h >= timeSpanFromHours(6)) {
                return ((() => {
                    let $ret = new TimeAxisInterval();
                    $ret.b = 4;
                    $ret.f = 1;
                    return $ret;
                })());
            }
            if (h >= timeSpanFromMinutes(30)) {
                return ((() => {
                    let $ret = new TimeAxisInterval();
                    $ret.b = 3;
                    $ret.f = 5;
                    return $ret;
                })());
            }
            if (h >= timeSpanFromMinutes(10)) {
                return ((() => {
                    let $ret = new TimeAxisInterval();
                    $ret.b = 3;
                    $ret.f = 2;
                    return $ret;
                })());
            }
            return ((() => {
                let $ret = new TimeAxisInterval();
                $ret.b = 2;
                $ret.f = 30;
                return $ret;
            })());
        }
        mg() {
            if (this.intervals == null || this.intervals.count == 0) {
                return this.mf();
            }
            if (this.m5 == (0)) {
                return ((() => {
                    let $ret = new TimeAxisInterval();
                    $ret.b = 8;
                    $ret.f = 1;
                    return $ret;
                })());
            }
            let a = null;
            for (let b of fromEnum(this.intervals)) {
                if (b.k > this.m5) {
                    continue;
                }
                if (a == null || b.k > a.k) {
                    a = b;
                }
            }
            return a == null ? this.mf() : a;
        }
        hc(a) {
            super.hc(a);
            let b = this.bh != null ? this.bh.mr : Rect.empty;
            let c = !b.isEmpty ? this.i8 : Rect.empty;
            let d = this.i3();
            let e = this.i2();
            let f = new ScalerParams(0, b, c, this.ca, d);
            if (this.k4 == null && !this.la() && !this.lb()) {
                return;
            }
            if (!b.isEmpty && !c.isEmpty) {
                let g = c.bottom;
                let h = g - c.top;
                if (this.ah != null) {
                    let i = typeCast(NumericYAxis.$, this.ah);
                    if (i != null) {
                        let j = this.hf(g, h, b, c, d, c.top, c.bottom);
                        g = j.p0;
                        h = j.p1;
                    }
                }
                if (isNaN_(g)) {
                    g = 0;
                }
                this.gv(this.a3.ay(), g, c, this.a3.e(), true);
                this.au.a8 = h;
                let k = truncate(Math.ceil(e.right));
                let l = truncate(Math.floor(e.left));
                let m = this.a3.a1();
                let n = this.a3.f();
                let o = this.a3.az();
                this.l5();
                let p = new List$1(Date_$type, 1, this.ml());
                let q = new List$1(Number_$type, 0);
                for (let r = 0; r < p.count; r++) {
                    q.add(p._inner[r].getTime());
                }
                this.gs(q, 0, q.count, f);
                for (let s = 0; s < p.count; s++) {
                    let t = p._inner[s];
                    let u = q._inner[s];
                    let v = truncate(Math.round(u));
                    if (v <= k) {
                        if (s % 2 == 0) {
                            let w = s < q.count - 1 ? q._inner[s + 1] : e.right;
                            this.hl(m, u, w, c);
                        }
                        this.hk(o, u, c, n, false);
                        this.jt.add(u);
                    }
                    if (v >= l && v <= k) {
                        let x = this.e8(t);
                        if (x != null) {
                            this.cx.add1(x);
                            this.cy.add(new LabelPosition(u));
                        }
                    }
                }
            }
            if ((this.ax == null || this.ax.visibility == 0) && this.ah != null) {
                if (this.ax != null && (this.ax.location == 4 || this.ax.location == 5)) {
                    this.bh.hu();
                }
            }
            this.au.a1 = this.cx;
            this.au.a2 = this.cy;
            this.kt();
        }
        ml() {
            let a = this.bh != null ? this.bh.mr : Rect.empty;
            let b = !a.isEmpty ? this.i8 : Rect.empty;
            let c = this.i3();
            let d = this.i2();
            let e = new ScalerParams(0, a, b, this.ca, c);
            let f = this.mg();
            let g = this.visibleMinimum;
            if (!this.lb() && f != null) {
                if (f.b == 7 && g.getDate() != 1) {
                    g = dateAddMonths(g, 1);
                    g = dateFromValues(g.getFullYear(), dateGetMonth(g), 1, 0, 0, 0, 0);
                }
                else if (f.b == 5 && dateGetTimeOfDay(g) != (0)) {
                    g = dateAddDays(g, 1);
                    g = dateFromValues(g.getFullYear(), dateGetMonth(g), g.getDate(), 0, 0, 0, 0);
                }
                else if (f.b == 4 && g.getMinutes() != 0) {
                    g = dateAddHours(g, 1);
                    g = dateFromValues(g.getFullYear(), dateGetMonth(g), g.getDate(), g.getHours(), 0, 0, 0);
                }
            }
            let h = new List$1(Date_$type, 0);
            let i = 0;
            let j = 10000;
            if (f.f == 0) {
                return h;
            }
            while (g <= this.visibleMaximum && i++ < j) {
                let k = this.mn(g);
                let l = g;
                if (k.key != null) {
                    l = f.d(k.key.c);
                }
                h.add(l);
                while (g <= l) {
                    g = f.c(g);
                }
            }
            return h;
        }
        mn(a) {
            if (this.mb == null) {
                return new KeyValuePair$2(TimeAxisBreak.$, Number_$type);
            }
            for (let b of fromEnum(this.mb)) {
                if (b.key.d <= a && b.key.c >= a) {
                    return b;
                }
            }
            return new KeyValuePair$2(TimeAxisBreak.$, Number_$type);
        }
        get visibleMinimum() {
            return this.mp;
        }
        set visibleMinimum(a) {
            this.mp = a;
        }
        get visibleMaximum() {
            return this.mo;
        }
        set visibleMaximum(a) {
            this.mo = a;
        }
        l5() {
            super.l5();
            if (this.bh == null || !Extensions.b(this.bh.m5)) {
                return;
            }
            let a = new ScalerParams(0, this.bh.mr, this.bh.m5, this.ca, this.bh.mv);
            let b = this.bh.m5.left;
            let c = this.bh.m5.right;
            if (this.categoryMode != 0) {
                let d = this.getCategorySize(a.e, a.d, a.c);
                b += d / 2;
                c -= d / 2;
            }
            let e = truncate(this.d1(b, a));
            let f = truncate(this.d1(c, a));
            if (e < 0 || f < 0) {
                this.m5 = (0);
                return;
            }
            e = Math.min(dateMaxValue().getTime(), e);
            f = Math.min(dateMaxValue().getTime(), f);
            let g = dateFromTicks(Math.min(e, f));
            let h = dateFromTicks(Math.max(e, f));
            let i = +(this.visibleMinimum) != +g || +(this.visibleMaximum) != +h;
            this.visibleMinimum = g;
            this.visibleMaximum = h;
            if (i && this.visibleRangeChanged != null) {
                this.visibleRangeChanged(this, EventArgs.empty);
            }
            this.m5 = +(this.visibleMaximum) - +(this.visibleMinimum);
        }
        j0(a, b, c, d, e) {
            return 0;
        }
        i$f(a) {
            let b = this;
            if (b.i$b == null) {
                return -1;
            }
            let c = new SortedListView$1(Date_$type, this.k4, b.i$b);
            let ticks_ = a;
            let d = (new Date(ticks_));
            let e = this.lo(d, c);
            e = Math.max(0, Math.min(b.i$b.count - 1, e));
            let f = c.item(e);
            let g;
            let h;
            if (f < d) {
                g = e;
                h = g + 1;
            }
            else {
                h = e;
                g = e - 1;
            }
            if (g < 0) {
                return h;
            }
            if (h >= b.i$b.count) {
                return g;
            }
            let i = c.item(g);
            let j = c.item(h);
            let k = new ScalerParams(0, this.bh.m6, this.i8, this.ca, this.bh.mv);
            this.startCursor();
            let l = this.dy(i.getTime(), k);
            let m = this.dy(a, k);
            let n = this.dy(j.getTime(), k);
            this.resetCursor();
            if (i < this.visibleMinimum && j <= this.visibleMaximum) {
                return this.ld._inner[h];
            }
            if (j > this.visibleMaximum && i >= this.visibleMinimum) {
                return this.ld._inner[g];
            }
            if (Math.abs(l - m) < Math.abs(n - m)) {
                return this.ld._inner[g];
            }
            else {
                return this.ld._inner[h];
            }
        }
        m8(a, b) {
            this.m7();
            this.m6();
            if (this.au != null) {
                this.au.ak = this.breaks.count > 0;
            }
            this.hb(false);
            for (let c of fromEnum(this.cw())) {
                c.je(false);
            }
        }
        na(a, b) {
            this.hb(false);
        }
        m9(a, b) {
            this.hb(false);
        }
        get_b5() {
            return false;
        }
        getWindowRectForSelection(a, b) {
            let c = +(this.actualMaximumValue) - +(this.actualMinimumValue);
            let d = timeSpanTotalMilliseconds((+a - +(this.actualMinimumValue))) / timeSpanTotalMilliseconds(c);
            let e = 1 - (timeSpanTotalMilliseconds((+(this.actualMaximumValue) - +b)) / timeSpanTotalMilliseconds(c));
            e = Math.min(1, e);
            return new Rect(0, d, NaN, Math.max(0, e - d), NaN);
        }
        getCategorySize(a, b, c) {
            if (this.m5 != (0)) {
                let d = timeSpanFromTicks(truncate((timeSpanTicks(this.m5) * (a.width / (this.bh != null ? this.bh.mr.width : 1)))));
                let e = timeSpanTicks(d) / timeSpanTicks(this.m3);
                let f = b.width / 4;
                return Math.min(f, b.width / (e + 1));
            }
            return super.getCategorySize(a, b, c);
        }
        static m2(a, b) {
            let c = Math.min(5, b);
            let d = a(0);
            let e = new Dictionary$2(Number_$type, Number_$type, 0);
            let f = 0;
            let g = (0);
            for (let h = 0; h < c; h++) {
                let i = a(h);
                let j = +i - +d;
                if (!e.containsKey(j)) {
                    e.addItem(j, 0);
                }
                e.item(j, e.item(j) + 1);
                if (e.item(j) > f) {
                    f = e.item(j);
                    g = j;
                }
                d = i;
            }
            return g;
        }
        m1() {
            if (this.k4 == null || this.k4.count < 2 || this.ld == null) {
                return (0);
            }
            return TimeXAxis.m2((a) => this.k4.item(this.ld._inner[a]), this.k4.count);
        }
        l1() {
            super.l1();
            this.m3 = this.m1();
        }
        static mz(a) {
            if (a >= timeSpanFromDays(1)) {
                return "D";
            }
            return "g";
        }
        itemLabelFormat() {
            return TimeXAxis.mz(this.m3);
        }
        ln(a, b, c, d) {
            return this.lm(this.visibleMinimum);
        }
        lq(a, b, c, d) {
            return this.lp(this.visibleMaximum);
        }
        get isVertical() {
            return this.ch;
        }
        j$c(a, b) {
            return this.d1.apply(this, arguments);
        }
        j$b(a, b) {
            return this.dy.apply(this, arguments);
        }
        j$d(a, b, c, d, e) {
            this.gr.apply(this, arguments);
        }
        j$e(a, b, c, d) {
            this.gs.apply(this, arguments);
        }
        j$f(a, b, c, d) {
            this.gt.apply(this, arguments);
        }
        get j$a() {
            return this.ca;
        }
        get i$a() {
            return this.b7;
        }
    }
    TimeXAxis.$t = /*@__PURE__*/ markType(TimeXAxis, 'TimeXAxis', TimeAxisBase.$, [ITimeRangeSelectorAxis_$type]);
    TimeXAxis.ma = null;
    return TimeXAxis;
})();
//# sourceMappingURL=TimeXAxis.js.map
