/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { IUnknownValuePlotting_$type } from "igniteui-react-core";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { typeCast, runOn, enumGetBox, markType, markDep } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { PropertyMetadata } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { ISortingAxis_$type } from "./ISortingAxis";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
var LineSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(LineSeries, _super);
    function LineSeries() {
        var _this = _super.call(this) || this;
        _this.ql = null;
        _this.ql = new CategoryLineRasterizer();
        _this.ab = LineSeries.$;
        _this.p5 = 0;
        return _this;
    }
    LineSeries.prototype.bf = function () {
        return new LineSeriesView(this);
    };
    LineSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.qm = a;
    };
    LineSeries.prototype.get_ck = function () {
        return true;
    };
    LineSeries.prototype.preferredCategoryMode = function (a) {
        return this.p5;
    };
    LineSeries.prototype.hw = function (a, b) {
        _super.prototype.hw.call(this, a, b);
        var c = b;
        c.c7();
    };
    LineSeries.prototype.os = function (a, b) {
        _super.prototype.os.call(this, a, b);
        var c = b.cn.d;
        var d = typeCast(LineSeriesView.$, b);
        var e = a.f;
        var f = this.getEffectiveViewport1(b);
        this.ni.x(this, this.n3(), this.p2, runOn(this, this.m4), this.ob(b), this.oc(b));
        var g = false;
        var h = this.ni.c;
        if (h != null) {
            g = true;
        }
        if (g) {
            var i = new ScalerParams(0, b.bs, b.br, this.p2.ca, f);
            this.oo(e, -1, this.valueColumn.count, this.p2, i, b.n);
        }
        var j = d.dd;
        var k = d.de;
        var l = d.dc;
        this.ni.ae(j, true, false, true, false);
        this.ni.ae(k, true, false, true, false);
        this.ni.ae(l, false, true, false, false);
        l._opacity = 0.75 * this.ni.i;
        if (b.cr(a)) {
            d.c8(e.count, e, true, this.unknownValuePlotting, this.o0(e, e.count - 1, b.br, b.bs), c, this.eu);
            b.cu(a);
        }
    };
    LineSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case LineSeries.$$p[0]:
                this.nf.m = this.unknownValuePlotting == 0;
                this.je(false);
                this.il();
                break;
        }
    };
    Object.defineProperty(LineSeries.prototype, "useHighMarkerFidelity", {
        get: function () {
            return this.n6;
        },
        enumerable: true,
        configurable: true
    });
    LineSeries.$t = markType(LineSeries, 'LineSeries', HorizontalAnchoredCategorySeries.$, [IUnknownValuePlotting_$type]);
    LineSeries.$$p = markDep(DependencyProperty, PropertyMetadata, LineSeries, 'raisePropertyChanged', ['UnknownValuePlotting::qo', [UnknownValuePlotting_$type, enumGetBox(UnknownValuePlotting_$type, 1)]]);
    return LineSeries;
}(HorizontalAnchoredCategorySeries));
export { LineSeries };
/**
 * @hidden
 */
var LineSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(LineSeriesView, _super);
    function LineSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.c6 = null;
        _this.dg = new Path();
        _this.df = new Path();
        _this.dh = new Path();
        _this.db = new Path();
        _this.da = new Path();
        _this.c9 = new Path();
        _this.c6 = a;
        return _this;
    }
    Object.defineProperty(LineSeriesView.prototype, "dd", {
        get: function () {
            return this.dg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSeriesView.prototype, "de", {
        get: function () {
            return this.dh;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSeriesView.prototype, "dc", {
        get: function () {
            return this.df;
        },
        enumerable: true,
        configurable: true
    });
    LineSeriesView.prototype.c7 = function () {
        this.df.ak = null;
        this.dg.ak = null;
        this.dh.ak = null;
        this.an();
    };
    LineSeriesView.prototype.c8 = function (a, b, c, d, e, f, g) {
        this.c6.ql.a = typeCast(ISortingAxis_$type, this.cp.fetchXAxis()) !== null ? true : false;
        this.c6.ql.m(this.dg, this.df, this.dh, a, b, c, d, e, f, g);
        this.an();
    };
    LineSeriesView.prototype.a8 = function () {
        _super.prototype.a8.call(this);
    };
    LineSeriesView.prototype.a9 = function () {
        _super.prototype.a9.call(this);
        this.da.ak = this.dg.ak;
        this.db.ak = this.dh.ak;
        this.c9.ak = this.df.ak;
        var a = this.bl();
        this.da._stroke = a;
        this.da.ac = this.e.ey + 3;
        this.db._stroke = a;
        this.db.ac = this.e.ey + 3;
        this.c9._fill = a;
        this.c9._opacity = 1;
    };
    LineSeriesView.prototype.a3 = function (a, b) {
        _super.prototype.a3.call(this, a, b);
        if (a.d) {
            if (b) {
                a.s(this.c9);
                a.s(this.da);
                a.s(this.db);
            }
            else {
                a.s(this.df);
                a.s(this.dg);
                a.s(this.dh);
            }
        }
    };
    LineSeriesView.prototype.ai = function (a) {
        _super.prototype.ai.call(this, a);
        this.e.a2.exportPathData(a, this.dg, "lowerShape", ["Lower", "Main"]);
        this.e.a2.exportPathData(a, this.dh, "upperShape", ["Upper"]);
        this.e.a2.exportPathData(a, this.df, "translucentShape", ["Translucent"]);
    };
    LineSeriesView.prototype.ac = function () {
        var a = new Color();
        a.colorString = "rgba(95,95,95,0.5)";
        this.e.lb = a;
        this.e.ev = 3;
        this.e.ew = 1;
        this.e.ex = 4;
        this.e.du = false;
    };
    LineSeriesView.$t = markType(LineSeriesView, 'LineSeriesView', AnchoredCategorySeriesView.$);
    return LineSeriesView;
}(AnchoredCategorySeriesView));
export { LineSeriesView };
//# sourceMappingURL=LineSeries_combined.js.map
