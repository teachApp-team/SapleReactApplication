import * as tslib_1 from "tslib";
import { IgrHorizontalStackedSeriesBase } from "./igr-horizontal-stacked-series-base";
import { StackedColumnSeries } from "./StackedColumnSeries";
/**
 * Represents a IgxDataChartComponent stacked column series.
*/
var IgrStackedColumnSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrStackedColumnSeries, _super);
    function IgrStackedColumnSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrStackedColumnSeries.prototype.createImplementation = function () {
        return new StackedColumnSeries();
    };
    Object.defineProperty(IgrStackedColumnSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrStackedColumnSeries.prototype, "radiusX", {
        /**
         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
        */
        get: function () {
            return this.i.p7;
        },
        set: function (v) {
            this.i.p7 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrStackedColumnSeries.prototype, "radiusY", {
        /**
         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
        */
        get: function () {
            return this.i.p8;
        },
        set: function (v) {
            this.i.p8 = +v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    IgrStackedColumnSeries.prototype.getItemSpan = function () {
        var iv = this.i.eg();
        return (iv);
    };
    return IgrStackedColumnSeries;
}(IgrHorizontalStackedSeriesBase));
export { IgrStackedColumnSeries };
//# sourceMappingURL=igr-stacked-column-series.js.map
