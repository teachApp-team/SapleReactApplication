import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { IIsCategoryBased } from "./IIsCategoryBased";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { CategoryMode } from "./CategoryMode";
import { SeriesView } from "./SeriesView";
import { Type, IList$1 } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { CategoryFrame } from "./CategoryFrame";
import { List$1 } from "igniteui-react-core";
import { CategorySeriesView } from "./CategorySeriesView";
import { Path } from "igniteui-react-core";
import { UnknownValuePlotting } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { Clipper } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class StepLineSeries extends HorizontalAnchoredCategorySeries implements IIsCategoryBased {
    static $t: Type;
    protected bf(): SeriesView;
    getHostReferenceValue(): number;
    iv(a: SeriesView): void;
    qm: StepLineSeriesView;
    constructor();
    ql: CategoryLineRasterizer;
    ac(): void;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    protected get_ck(): boolean;
    hw(a: boolean, b: SeriesView): void;
    protected bd(): SeriesHitTestMode;
    ef(a: number, b: IList$1<number>, c: number, d: number, e: number, f: number, g: number, h: boolean): number;
    private qn;
    os(a: CategoryFrame, b: CategorySeriesView): void;
    readonly currentCategoryMode: CategoryMode;
    readonly useHighMarkerFidelity: boolean;
}
/**
 * @hidden
 */
export declare class StepLineSeriesView extends AnchoredCategorySeriesView {
    static $t: Type;
    protected c6: StepLineSeries;
    constructor(a: StepLineSeries);
    private dg;
    private df;
    private dh;
    readonly dd: Path;
    readonly de: Path;
    readonly dc: Path;
    c7(): void;
    c8(a: number, b: List$1<number[]>, c: boolean, d: UnknownValuePlotting, e: Clipper, f: number, g: number): void;
    private db;
    private da;
    private c9;
    protected a9(): void;
    protected a3(a: RenderingContext, b: boolean): void;
    ai(a: any): void;
    protected ac(): void;
}
