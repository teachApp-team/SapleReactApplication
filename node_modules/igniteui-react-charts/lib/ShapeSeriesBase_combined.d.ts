import { Series } from "./Series";
import { DependencyObject } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Point, Type } from "igniteui-react-core";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { List$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { FlattenedShape } from "./FlattenedShape";
import { SeriesView } from "./SeriesView";
import { RenderSurface } from "./RenderSurface";
import { Dictionary$2 } from "igniteui-react-core";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { FrameworkElement } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { Style } from "igniteui-react-core";
import { StyleShapeEventArgs } from "./StyleShapeEventArgs";
import { Path } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { StyleSelector } from "./StyleSelector";
import { PointCollection } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class ShapeSeriesBase extends Series {
    static $t: Type;
    constructor();
    hu(): void;
    ag(): Axis[];
    fs(a: any, b: string): any;
    mv: string;
    private mb;
    mc: IFastItemColumn$1<any>;
    l7: NumericXAxis;
    l9: NumericYAxis;
    private mf;
    private static mh;
    private convertToListList;
    protected by(a: string): IFastItemColumn$1<any>;
    protected i0(a: any, b: string, c: any, d: any): void;
    me(a: any): boolean;
    md(a: any): boolean;
    private l6;
    private l8;
    private mo;
    mk: List$1<Rect>;
    private m2;
    private na;
    private mm;
    private l2;
    private l4;
    private l3;
    private l1;
    protected get_mg(): boolean;
    protected readonly mg: boolean;
    protected mj(): boolean;
    jf(a: boolean): void;
    jd(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected m1(a: SeriesView): void;
    ic(): void;
    protected ju(a: Rect, b: Rect): void;
    protected jt(a: Rect, b: Rect): void;
    protected hz(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    dw(a: Rect, b: Rect, c: SeriesView): boolean;
    protected get_mi(): boolean;
    protected readonly mi: boolean;
    iv(a: SeriesView): void;
    private ma;
    private mn;
    private l5;
    private mz;
    m9: Rect;
    private m4;
    hw(a: boolean, b: SeriesView): void;
    private m0;
    private m3;
    ar(a: Point, b: boolean): DataContext;
    ms(a: number): any;
    protected get_dq(): boolean;
    protected set_dq(a: boolean): void;
    mp: number;
    mq: number;
    an(a: Axis): AxisRange;
    protected get_c5(): boolean;
    nb(a: any, b: DependencyObject, c: Style): Style;
    styleShape: (sender: any, e: StyleShapeEventArgs) => void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare abstract class ShapeSeriesViewBase extends SeriesView {
    static $t: Type;
    constructor(a: ShapeSeriesBase);
    b3: Dictionary$2<number, FlattenedShape>;
    protected b0(): Pool$1<FrameworkElement>;
    b2(a: Rect): boolean;
    static b5(a: List$1<FlattenedShape>): List$1<PointCollection>;
    protected by: ShapeSeriesBase;
    private b4;
    b8(a: number, b: any, c: Rect, d: List$1<FlattenedShape>): void;
    protected ct(a: number, b: any): FrameworkElement;
    protected abstract ca(a: FrameworkElement, b: PathGeometry): void;
    static cb(a: ShapeSeriesViewBase, b: Path, c: any): void;
    protected cc(a: FrameworkElement, b: any): void;
    protected ce(a: FrameworkElement): void;
    private b9;
    private cm;
    protected abstract cu(a: number, b: List$1<PointCollection>): PathGeometry;
    cj(): void;
    ci(): void;
    private b7;
    cl(a: number, b: number): void;
    cd(): void;
    protected b6: List$1<Path>;
    cq(): FrameworkElement;
    cf(a: FrameworkElement): void;
    cg(a: FrameworkElement): void;
    ch(a: FrameworkElement): void;
    protected b1: Pool$1<FrameworkElement>;
    cv(a: number, b: List$1<PointCollection>, c: boolean): PathGeometry;
    protected bb(a: any, b: number): void;
    protected bc(a: any, b: number): void;
    protected a3(a: RenderingContext, b: boolean): void;
    private bz;
    private cw;
    readonly cx: Style;
    co(a: StyleSelector): void;
    cn(a: Style): void;
    cr(a: Point, b: boolean): FrameworkElement;
    cs(a: Point, b: boolean, c: boolean): FrameworkElement;
    private bv;
    private bx;
    private bw;
    private bu;
    ck(a: number[], b: number[], c: number[], d: number[]): void;
    cp(): void;
    ai(a: any): void;
}
