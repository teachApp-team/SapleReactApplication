import { RadialBucketCalculator } from "./RadialBucketCalculator";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { RadialBase } from "./RadialBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { RadialFrame } from "./RadialFrame";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { RadialBaseView } from "./RadialBaseView";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { Clipper } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { RadialTrendLineManager } from "./RadialTrendLineManager";
import { PointCollection } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class AnchoredRadialBucketCalculator extends RadialBucketCalculator {
    static $t: Type;
    private f;
    constructor(a: AnchoredRadialSeriesView);
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare abstract class AnchoredRadialSeries extends RadialBase {
    static $t: Type;
    protected bf(): SeriesView;
    hu(): void;
    fs(a: any, b: string): any;
    iv(a: SeriesView): void;
    nu: AnchoredRadialSeriesView;
    constructor();
    nv: CategoryLineRasterizer;
    fe(a: Point, b: boolean): number;
    fc(a: Point, b: boolean): number;
    d9(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    en(a: Point, b: boolean, c: boolean): number;
    lm(a: Point, b: boolean, c: boolean): Point;
    oc: string;
    n0: IFastItemColumn$1<number>;
    private nz;
    ny: TrendLineType;
    oq: Brush;
    op: Brush;
    static readonly og: DependencyProperty;
    n8: number;
    os: PenLineCap;
    or: DoubleCollection;
    n9: number;
    oa: number;
    an(a: Axis): AxisRange;
    protected i0(a: any, b: string, c: any, d: any): void;
    protected hz(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    dw(a: Rect, b: Rect, c: SeriesView): boolean;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    protected get_n3(): boolean;
    protected readonly n3: boolean;
    protected n5(a: CategoryAngleAxis, b: Rect, c: Rect, d: Rect): number;
    no(a: RadialFrame, b: RadialBaseView): void;
    private n6;
    private n7;
    private n4;
    nt(a: List$1<number[]>, b: number, c: SeriesView): Clipper;
    protected ot: Point;
    of(a: PointCollection, b: PointCollection, c: PointCollection, d: PointCollection, e: boolean): void;
    private n2;
    private n1;
    hw(a: boolean, b: SeriesView): void;
    np(a: RadialFrame, b: RadialBaseView): void;
    private oe;
    protected jp(): void;
    fv(a: any, b: Point): any;
    c9(a: any): boolean;
    nx: RadialFrame;
    jg(a: Rect, b: RenderSurface): void;
    private nw;
    jd(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected h5(a: any): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AnchoredRadialSeriesView extends RadialBaseView {
    static $t: Type;
    cs: AnchoredRadialSeries;
    constructor(a: AnchoredRadialSeries);
    ct: RadialTrendLineManager;
    cu(a: Rect, b: Rect, c: Rect, d: Rect): void;
    cv(): void;
    protected a2(a: RenderingContext, b: boolean): void;
    getDefaultTooltipTemplate(): string;
}
