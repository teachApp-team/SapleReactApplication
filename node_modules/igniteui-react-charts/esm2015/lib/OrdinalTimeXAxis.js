/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { FastItemDateTimeColumn } from "igniteui-react-core";
import { CategoryXAxis } from "./CategoryXAxis";
import { ITimeRangeSelectorAxis_$type } from "./ITimeRangeSelectorAxis";
import { TimeAxisLabelFormatCollection } from "./TimeAxisLabelFormatCollection";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { EventArgs, runOn, delegateCombine, typeCast, Date_$type, markType } from "igniteui-react-core";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { TimeAxisBase } from "./TimeAxisBase";
import { TimeXAxis } from "./TimeXAxis";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { truncate } from "igniteui-react-core";
import { dateMaxValue, dateMinValue } from "igniteui-react-core";
/**
 * @hidden
 */
export let OrdinalTimeXAxis = /*@__PURE__*/ (() => {
    class OrdinalTimeXAxis extends CategoryXAxis {
        constructor() {
            super();
            this.lw = dateMaxValue();
            this.lv = dateMinValue();
            this.l0 = dateMaxValue();
            this.lz = dateMinValue();
            this.l5 = null;
            this.lt = null;
            this.lr = null;
            this.mc = 0;
            this.ly = dateMinValue();
            this.lx = dateMaxValue();
            this.visibleRangeChanged = null;
            FastItemDateTimeColumn.o();
            this.lr = new TimeAxisLabelFormatCollection();
            let a = this.ls;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.me));
            this.li = 0;
        }
        d0(a, b, c) {
            return this.dy(a, new ScalerParams(0, b, c, this.ca, this.i3()));
        }
        dz(a, b, c) {
            return this.dy(a, b);
        }
        dy(a, b) {
            let c = this.lh;
            let d = this.li;
            let e = this.lh - this.li;
            let f = e >= 1 ? (a - d) / (c - d) : e == 0 ? 0.5 : NaN;
            if (this.cb) {
                f = 1 - f;
            }
            let g = b.d;
            let h = b.e;
            return g.left + g.width * (f - h.left) / h.width;
        }
        gr(a, b, c, d, e) {
            let f = this.k3(a);
            let g = f != null;
            for (let h = 0; h < b.count; h++) {
                for (let i = c; i < d; i++) {
                    let j = g ? f[i] : a.item(i);
                    j[h] = this.dy(j[h], e);
                }
            }
        }
        gs(a, b, c, d) {
            for (let e = b; e < c; e++) {
                a.item(e, this.dy(a.item(e), d));
            }
        }
        d3(a, b, c) {
            return this.d1(a, new ScalerParams(0, b, this.i8, this.ca, this.i3()));
        }
        getUnscaledValue3(a, b, c, d) {
            return this.d1(a, new ScalerParams(0, b, this.i8, this.ca, this.i3()));
        }
        d1(a, b) {
            let c = b.e;
            let d = b.d;
            let e = c.left + (a - d.left) * c.width / d.width;
            if (this.cb) {
                e = 1 - e;
            }
            return this.li + e * (this.lh - this.li);
        }
        d2(a, b, c) {
            return this.d1(a, b);
        }
        gt(a, b, c, d) {
            for (let e = b; e < c; e++) {
                a.item(e, this.d1(a.item(e), d));
            }
        }
        gz(a, b, c, d) {
            super.gz(a, b, c, d);
            switch (b) {
                case "FastItemsSource":
                    let e = typeCast(IFastItemsSource_$type, c);
                    if (e != null) {
                        e.deregisterColumn(this.lu);
                        this.lu = null;
                    }
                    if (this.jm != null) {
                        this.lu = TimeAxisBase.k6(this.dateTimeMemberPath, this);
                    }
                    break;
                case "DateTimeMemberPath":
                    if (this.jm != null) {
                        this.jm.deregisterColumn(this.lu);
                        this.lu = TimeAxisBase.k6(this.dateTimeMemberPath, this);
                    }
                    break;
                case "DateTimeColumn":
                    this.cn();
                    this.mc = this.mb();
                    break;
                case "MinimumValue":
                case "MaximumValue":
                    this.cn();
                    this.ha();
                    break;
            }
        }
        get actualMinimumValue() {
            return this.lw;
        }
        set actualMinimumValue(a) {
            this.lw = a;
        }
        get actualMaximumValue() {
            return this.lv;
        }
        set actualMaximumValue(a) {
            this.lv = a;
        }
        get visibleMinimum() {
            return this.l0;
        }
        set visibleMinimum(a) {
            this.l0 = a;
        }
        get visibleMaximum() {
            return this.lz;
        }
        set visibleMaximum(a) {
            this.lz = a;
        }
        mf() {
            if (this.lu == null || this.lu.count == 0 || this.lu.count < this.li - 1) {
                this.actualMinimumValue = dateMinValue();
                this.actualMaximumValue = dateMaxValue();
                return;
            }
            let a = Math.max(0, Math.min(this.li, this.lu.count - 1));
            let b = Math.max(0, Math.min(this.lh, this.lu.count - 1));
            let c = +(this.actualMinimumValue) != +(this.lu.item(a)) || +(this.actualMaximumValue) != +(this.lu.item(b));
            if (c) {
                let d = this.actualMinimumValue;
                let e = this.actualMaximumValue;
                this.actualMinimumValue = this.lu.item(a);
                this.actualMaximumValue = this.lu.item(b);
                this.mg();
            }
        }
        mg() {
            if (this.lu == null || this.lu.count == 0 || this.bh == null) {
                let a = +(this.visibleMinimum) != +(this.actualMinimumValue) || +(this.visibleMaximum) != +(this.actualMaximumValue);
                this.visibleMinimum = this.actualMinimumValue;
                this.visibleMaximum = this.actualMaximumValue;
                if (a && this.visibleRangeChanged != null) {
                    this.visibleRangeChanged(this, EventArgs.empty);
                }
                return;
            }
            let b = new ScalerParams(1, this.bh.m6, this.bh.m5, this.ca);
            let c = truncate(Math.ceil(this.d1(this.bh.m5.left, b)));
            let d = truncate(Math.ceil(this.d1(this.bh.m5.right, b)));
            let e = c >= 0 && c < this.lu.count ? this.lu.item(c) : this.actualMinimumValue;
            let f = d >= 0 && d < this.lu.count ? this.lu.item(d) : this.actualMaximumValue;
            let g = +(this.visibleMinimum) != +e || +(this.visibleMaximum) != +f;
            this.visibleMinimum = e;
            this.visibleMaximum = f;
            if (g && this.visibleRangeChanged != null) {
                this.visibleRangeChanged(this, EventArgs.empty);
            }
        }
        get dateTimeMemberPath() {
            return this.l5;
        }
        set dateTimeMemberPath(a) {
            let b = this.dateTimeMemberPath;
            if (a != b) {
                this.l5 = a;
                this.g5("DateTimeMemberPath", b, this.dateTimeMemberPath);
            }
        }
        get lu() {
            return this.lt;
        }
        set lu(a) {
            if (this.lt != a) {
                let b = this.lt;
                this.lt = a;
                this.g5("DateTimeColumn", b, this.lt);
            }
        }
        hn(a, b) {
            super.hn(a, b);
            this.mg();
        }
        getWindowRectForSelection(a, b) {
            if (this.lu == null) {
                return Rect.empty;
            }
            let c = a > b;
            let d = c ? b : a;
            let e = c ? a : b;
            let f = -1;
            while (++f < this.lu.count && this.lu.item(f) < d) {
                ;
            }
            let g = this.lu.count;
            while (--g >= 0 && this.lu.item(g) > e) {
                ;
            }
            let h = new ScalerParams(0, new Rect(0, 0, 0, 1, 1), new Rect(0, 0, 0, 1, 1), this.ca, this.bh.mv);
            let i = this.dy(f, h);
            let j = this.dy(g + 1, h);
            return new Rect(0, i, NaN, Math.max(0, j - i), NaN);
        }
        get ls() {
            return this.lr;
        }
        me(a, b) {
            this.hb(false);
        }
        g1(a) {
            super.g1(a);
            this.dateTimeMemberPath = a;
        }
        e8(a) {
            if (this.as != null) {
                return this.as(a);
            }
            if (this.bf != null) {
                return this.bf.i(a);
            }
            if (!(typeCast(Date_$type, a) !== null)) {
                return super.e8(a);
            }
            let b = TimeXAxis.mu(a, this.md, this.ls, this.et);
            return b == null ? super.e8(a) : b;
        }
        fl(a) {
            let b = 0;
            if (this.categoryMode == 0) {
                b = truncate(Math.round(a));
            }
            else {
                b = truncate(Math.floor(a));
            }
            if (b < 0 || b > this.j6 - 1) {
                return super.fl(a);
            }
            let c = this.lu.item(b);
            let d = this.e8(c);
            if (d == null) {
                return null;
            }
            return d.toString();
        }
        get md() {
            return +(this.visibleMaximum) - +(this.visibleMinimum);
        }
        k5() {
            return this.lu;
        }
        hm(a, b) {
            super.hm(a, b);
            this.mg();
        }
        lb(a, b) {
            let c = this.categoryMode == 0 ? 0 : 0.5;
            return super.lb(a + c, b);
        }
        la(a, b, c, d) {
            return b;
        }
        mb() {
            if (this.lu == null || this.lu.count < 2) {
                return (0);
            }
            return TimeXAxis.m2((a) => this.lu.item(a), this.lu.count);
        }
        itemLabelFormat() {
            return TimeXAxis.mz(this.mc);
        }
        get minimumValue() {
            return this.ly;
        }
        set minimumValue(a) {
            let b = this.minimumValue;
            if (+a != +b) {
                this.ly = a;
                this.gz(this, "MinimumValue", b, this.minimumValue);
            }
        }
        get maximumValue() {
            return this.lx;
        }
        set maximumValue(a) {
            let b = this.maximumValue;
            if (+a != +b) {
                this.lx = a;
                this.gz(this, "MaximumValue", b, this.maximumValue);
            }
        }
        cp() {
            if (+(this.minimumValue) == +(dateMaxValue()) || +(this.maximumValue) == +(dateMinValue())) {
                return super.cp();
            }
            if (this.ci && this.cq) {
                this.ba = this.a9();
            }
            if (this.jm == null || this.lu == null) {
                return false;
            }
            let a = this.li;
            if (+(this.minimumValue) != +(dateMinValue())) {
                let b = -1;
                while (b++ <= this.lu.count) {
                    if (this.lu.item(b) >= this.minimumValue) {
                        break;
                    }
                }
                a = b;
            }
            let c = this.categoryMode == 0 ? this.jm.count - 1 : this.jm.count;
            if (+(this.maximumValue) != +(dateMaxValue())) {
                let d = this.jm.count;
                while (d-- > 0) {
                    if (this.lu.item(d) <= this.maximumValue) {
                        break;
                    }
                }
                c = d;
            }
            if (a != this.li || c != this.lh) {
                let e = new AxisRangeChangedEventArgs(0, this.li, a, this.lh, c);
                this.li = a;
                this.lh = c;
                this.g6(e);
                this.mf();
                this.ki();
                return true;
            }
            return false;
        }
        kr(a) {
            super.kr(a);
            this.co(true);
        }
        get isVertical() {
            return this.ch;
        }
        j$c(a, b) {
            return this.d1.apply(this, arguments);
        }
        j$b(a, b) {
            return this.dy.apply(this, arguments);
        }
        j$d(a, b, c, d, e) {
            this.gr.apply(this, arguments);
        }
        j$e(a, b, c, d) {
            this.gs.apply(this, arguments);
        }
        j$f(a, b, c, d) {
            this.gt.apply(this, arguments);
        }
        get j$a() {
            return this.ca;
        }
    }
    OrdinalTimeXAxis.$t = /*@__PURE__*/ markType(OrdinalTimeXAxis, 'OrdinalTimeXAxis', CategoryXAxis.$, [ITimeRangeSelectorAxis_$type]);
    return OrdinalTimeXAxis;
})();
//# sourceMappingURL=OrdinalTimeXAxis.js.map
