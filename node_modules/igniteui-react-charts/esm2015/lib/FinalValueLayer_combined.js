/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnnotationLayer } from "./AnnotationLayer";
import { Series } from "./Series";
import { DependencyProperty } from "igniteui-react-core";
import { FinalValueSelectionMode_$type } from "./FinalValueSelectionMode";
import { Brush } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FinalValueLayerFrame } from "./FinalValueLayerFrame";
import { List$1 } from "igniteui-react-core";
import { Axis } from "./Axis";
import { Dictionary$2 } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { AxisAnnotation } from "./AxisAnnotation";
import { enumGetBox, fromEnum, Point_$type, markType, markDep } from "igniteui-react-core";
import { AxisAnnotationFrameManager } from "./AxisAnnotationFrameManager";
import { PropertyMetadata } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { BrushUtil } from "igniteui-react-core";
/**
 * @hidden
 */
export let FinalValueLayer = /*@__PURE__*/ (() => {
    class FinalValueLayer extends AnnotationLayer {
        constructor() {
            super();
            this.axisAnnotationFormatLabel = null;
            this.nb = null;
            this.na = null;
            let a = new FinalValueLayerFrame();
            let b = new FinalValueLayerFrame();
            let c = new FinalValueLayerFrame();
            let d = this.fi / 1000;
            this.l3 = a;
            this.l2 = b;
            this.l4 = c;
            this.ab = FinalValueLayer.$;
        }
        bf() {
            return new FinalValueLayerView(this);
        }
        iv(a) {
            super.iv(a);
            this.m6 = a;
        }
        get oa() {
            return new Thickness(1, this.nd, this.nf, this.ne, this.nc);
        }
        m9() {
            return this.axisAnnotationFormatLabel != null;
        }
        mm(a, b) {
            if (this.m8 == null || this.m8 == a) {
                if (!this.aq.c) {
                    this.je(b);
                }
            }
        }
        mo(a, b) {
            super.mo(a, b);
            let c = a;
            c.f.clear();
            c.q.clear();
            c.p.clear();
            c.aa.clear();
            c.o.clear();
            c.z.clear();
            c.g.clear();
            c.h.clear();
            c.j.clear();
            c.l.clear();
            c.k.clear();
            c.i.clear();
            c.m.clear();
            c.n.clear();
            c.r.clear();
            c.s.clear();
            c.u.clear();
            c.w.clear();
            c.v.clear();
            c.t.clear();
            c.x.clear();
            c.y.clear();
            if (this.l9(this.m8)) {
                this.nt(this.m8, c);
            }
            else {
                for (let d of fromEnum(this.bs.series)) {
                    if (this.l9(d)) {
                        this.nt(d, c);
                    }
                }
            }
        }
        l9(a) {
            if (!super.l9(a)) {
                return false;
            }
            return true;
        }
        ip() {
            super.ip();
            if (!this.aq.c && !this.ca()) {
                return;
            }
            if (this.ca()) {
                this.nu(this.l4, false);
            }
            else {
                this.nu(this.l2, false);
            }
        }
        n9(a) {
            let b = NaN;
            let c = NaN;
            let d = this.m7;
            if (d == 0) {
                d = 1;
            }
            let e = false;
            if (d == 2) {
                e = true;
            }
            if (a.isVertical) {
                let f = a.ap();
                if (f != null) {
                    if (d == 1 || d == 2) {
                        if (f.ca) {
                            c = a.lp({ $type: Point_$type, x: this.lz.right, y: this.lz.bottom }).y;
                        }
                        else {
                            c = a.lp({ $type: Point_$type, x: this.lz.right, y: this.lz.top }).y;
                        }
                    }
                    else {
                        if (f.ca) {
                            c = 1;
                        }
                        else {
                            c = 0;
                        }
                    }
                }
                return a.lm({ $type: Point_$type, x: 0, y: c }, e, true);
            }
            else {
                let g = a.ap();
                if (g != null) {
                    if (d == 1 || d == 2) {
                        if (g.ca) {
                            b = a.lp({ $type: Point_$type, x: this.lz.left, y: this.lz.top }).x;
                        }
                        else {
                            b = a.lp({ $type: Point_$type, x: this.lz.right, y: this.lz.top }).x;
                        }
                    }
                    else {
                        if (g.ca) {
                            b = 0;
                        }
                        else {
                            b = 1;
                        }
                    }
                }
                if (a.cr) {
                    return a.lm({ $type: Point_$type, x: b, y: 0 }, e, true);
                }
                else {
                    return a.lm({ $type: Point_$type, x: b, y: 0 }, e, true);
                }
            }
        }
        nt(a, b) {
            let c = this.n9(a);
            let d = this.lp(c);
            let e = this.k4;
            if (e == null) {
                e = this.k6;
            }
            if (e == null) {
                e = a.k4;
                if (e != null) {
                    e = this.m6.b2(e);
                }
            }
            AxisAnnotationFrameManager.c(b, c, a, this.bs, this.getEffectiveViewport(), e, this.n6, this.n8, this.n7, this.oa, this.ng, this.n6, this.n8, this.n7, this.oa, this.ng, a.isVertical, !a.isVertical);
        }
        nu(a, b) {
            let c = false;
            if (this.na == null) {
                c = true;
                this.nb = new List$1(Axis.$, 0);
                this.na = new Dictionary$2(Axis.$, Pool$1.$.specialize(AxisAnnotation.$), 0);
            }
            AxisAnnotationFrameManager.d(this, a, c, this.na, this.nb, b, this.nh, this.nh, this.axisAnnotationFormatLabel, this.axisAnnotationFormatLabel);
        }
        mr(a, b) {
            super.mr(a, b);
            if (this.ca()) {
                this.nu(this.l4, true);
            }
            else {
                this.nu(this.l2, false);
            }
        }
        c8() {
            return true;
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case FinalValueLayer.$$p[10]:
                    this.je(true);
                    break;
                case FinalValueLayer.$$p[0]:
                case FinalValueLayer.$$p[2]:
                case FinalValueLayer.$$p[4]:
                case FinalValueLayer.$$p[6]:
                case FinalValueLayer.$$p[5]:
                case FinalValueLayer.$$p[3]:
                case FinalValueLayer.$$p[7]:
                case FinalValueLayer.$$p[8]:
                case FinalValueLayer.$$p[9]:
                    this.je(true);
                    break;
                case "SeriesViewer":
                    let e = this.nb;
                    let f = this.na;
                    if (f != null) {
                        for (let g of fromEnum(f)) {
                            let h = g.value;
                            h.c((i) => g.key.al.remove(i));
                            h.clear();
                        }
                        e.clear();
                        f.clear();
                    }
                    break;
            }
        }
    }
    FinalValueLayer.$t = /*@__PURE__*/ markType(FinalValueLayer, 'FinalValueLayer', AnnotationLayer.$);
    FinalValueLayer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, FinalValueLayer, 'raisePropertyChanged', ['AxisAnnotationBackground:n6:nv', [Brush.$, null], 'AxisAnnotationInterpolatedValuePrecision:nh:nw', [1, -1], 'AxisAnnotationOutline:n7:nx', [Brush.$, null], 'AxisAnnotationPaddingBottom:nc:ny', [1, NaN], 'AxisAnnotationPaddingLeft:nd:nz', [1, NaN], 'AxisAnnotationPaddingRight:ne:n0', [1, NaN], 'AxisAnnotationPaddingTop:nf:n1', [1, NaN], 'AxisAnnotationStrokeThickness:ng:n2', [1, NaN], 'AxisAnnotationTextColor:n8:n3', [Brush.$, null], 'FinalValueSelectionMode:m7:n4', [FinalValueSelectionMode_$type, /*@__PURE__*/ enumGetBox(FinalValueSelectionMode_$type, 0)], 'TargetSeries:m8:n5', [Series.$, null]]);
    return FinalValueLayer;
})();
/**
 * @hidden
 */
export let FinalValueLayerView = /*@__PURE__*/ (() => {
    class FinalValueLayerView extends AnnotationLayerView {
        constructor(a) {
            super(a);
            this.b1 = null;
            this.b1 = a;
        }
        ap() {
            super.ap();
        }
        b2(a) {
            if (a == null) {
                return a;
            }
            return BrushUtil.l(a, 0.1);
        }
        ai(a) {
            super.ai(a);
        }
    }
    FinalValueLayerView.$t = /*@__PURE__*/ markType(FinalValueLayerView, 'FinalValueLayerView', AnnotationLayerView.$);
    return FinalValueLayerView;
})();
//# sourceMappingURL=FinalValueLayer_combined.js.map
