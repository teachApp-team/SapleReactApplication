import { IgPoint } from "igniteui-react-core";
import { IgrCategoryAngleAxis } from "./igr-category-angle-axis";
import { IgrNumericRadiusAxis } from "./igr-numeric-radius-axis";
import { IgrMarkerSeries, IIgrMarkerSeriesProps } from "./igr-marker-series";
import { RadialBase } from "./RadialBase";
import { IgrAxis } from "./igr-axis";
/**
 * Represents the base class for all IgxDataChartComponent radial series
*/
export declare abstract class IgrRadialBase<P extends IIgrRadialBaseProps = IIgrRadialBaseProps> extends IgrMarkerSeries<P> {
    /**
                                 * @hidden
                                 */
    readonly i: RadialBase;
    constructor(props: P);
    /**
     * Checks if this series is a radial series
    */
    readonly isRadial: boolean;
    /**
     * Gets the effective angle axis for the current series object.
    */
    angleAxis: IgrCategoryAngleAxis;
    private _angleAxisName;
    /**
    * Gets or sets the name to use to resolve angleAxis from markup.
    */
    angleAxisName: string;
    /**
     * Gets the effective value axis for the current series object.
    */
    valueAxis: IgrNumericRadiusAxis;
    private _valueAxisName;
    /**
    * Gets or sets the name to use to resolve valueAxis from markup.
    */
    valueAxisName: string;
    /**
     * Gets or sets whether to clip the series to the bounds.
     * Setting this property to true will decrease chart performance.
    */
    clipSeriesToBounds: boolean;
    bindAxes(axes: IgrAxis[]): void;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
     * Determine if object can be used as ValueAxis
    
    * @param axis  * The object to check
    */
    canUseAsValueAxis(axis: any): boolean;
    /**
     * Determine if object can be used as AngleAxis
    
    * @param axis  * The object to check
    */
    canUseAsAngleAxis(axis: any): boolean;
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world: IgPoint): any;
    /**
     * Gets the angle to the provided world position from the center of the radial series.
    
    * @param world  * The world position to get the angle for
    */
    getAngleFromWorld(world: IgPoint): number;
    /**
     * Gets the precise item index, if possible, based on the closeness to the previous or next whole integer. If the series cannot provide this information, GetExactItemIndex will return the same integer value as GetItemIndex.
    
    * @param world  * The world position for which to return the index.
    */
    getExactItemIndex(world: IgPoint): number;
    /**
     * Get the index of the item near the provided world coordinates.
    
    * @param world  * The world coordinates for which to getch the item index.
    */
    getItemIndex(world: IgPoint): number;
    /**
     * Scrolls the specified item into the view.
    
    * @param item  * The item to scroll into view.
    */
    scrollIntoView(item: any): boolean;
    /**
     * Returns the offset value for this series if grouped on a category axis.
    
    */
    getOffsetValue(): number;
    /**
     * Returns the width of the category grouping this series is in.
    
    */
    getCategoryWidth(): number;
}
export interface IIgrRadialBaseProps extends IIgrMarkerSeriesProps {
    /**
     * Gets the effective angle axis for the current series object.
    */
    angleAxis?: IgrCategoryAngleAxis;
    /**
    * Gets or sets the name to use to resolve angleAxis from markup.
    */
    angleAxisName?: string;
    /**
     * Gets the effective value axis for the current series object.
    */
    valueAxis?: IgrNumericRadiusAxis;
    /**
    * Gets or sets the name to use to resolve valueAxis from markup.
    */
    valueAxisName?: string;
    /**
     * Gets or sets whether to clip the series to the bounds.
     * Setting this property to true will decrease chart performance.
    */
    clipSeriesToBounds?: boolean | string;
}
