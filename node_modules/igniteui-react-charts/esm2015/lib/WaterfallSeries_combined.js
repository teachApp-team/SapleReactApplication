/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { Brush } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { runOn, markType, markDep, fromEnum } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { ArrayExtension } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
/**
 * @hidden
 */
export let WaterfallSeries = /*@__PURE__*/ (() => {
    class WaterfallSeries extends HorizontalAnchoredCategorySeries {
        constructor() {
            super();
            this.ab = WaterfallSeries.$;
        }
        bf() {
            return new WaterfallSeriesView(this);
        }
        iv(a) {
            super.iv(a);
            this.ql = a;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        get_cz() {
            return true;
        }
        jj(a, b) {
            super.jj(a, b);
            this.qw = a;
            this.qx = b;
        }
        la() {
            return this.qw;
        }
        get_nz() {
            return true;
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case WaterfallSeries.$$p[3]:
                case WaterfallSeries.$$p[2]:
                case WaterfallSeries.$$p[0]:
                case WaterfallSeries.$$p[1]:
                    this.je(false);
                    break;
            }
        }
        dh(a, b) {
            if (this.dk(a, b)) {
                return true;
            }
            if (this.l5(a, b)) {
                return true;
            }
            return false;
        }
        lv(a) {
            if (this.ql == null || this.ql.c7 == null || this.ql.c7.count == 0 || this.xAxis == null) {
                return Rect.empty;
            }
            let b = this.ql.c7;
            let c = this.lh(a);
            let d = -1;
            let e = this.xAxis.ca;
            let f = this.lz.right * 2;
            if (e) {
                d = ArrayExtension.binarySearch$1(Rectangle.$, b, (g) => {
                    let h = this.ql.de(g);
                    return (f - c.x) < (f - (h.left + h.width / 2)) ? -1 : ((f - c.x) > (f - (h.left + h.width / 2)) ? 1 : 0);
                });
            }
            else {
                d = ArrayExtension.binarySearch$1(Rectangle.$, b, (g) => {
                    let h = this.ql.de(g);
                    return c.x < (h.left + h.width / 2) ? -1 : (c.x > (h.left + h.width / 2) ? 1 : 0);
                });
            }
            if (d < 0) {
                d = ~d;
                d--;
            }
            if (d < 0) {
                d = 0;
            }
            if (d > b.count - 1) {
                d = b.count - 1;
            }
            let g = d;
            let h = d;
            if (g < 0) {
                g--;
            }
            if (h < b.count - 1) {
                h++;
            }
            let i = this.qy(g);
            let j = this.qy(d);
            let k = this.qy(h);
            let l = i.left + i.width / 2;
            let m = j.left + j.width / 2;
            let n = k.left + k.width / 2;
            let o = Math.abs(l - c.x);
            let p = Math.abs(m - c.x);
            let q = Math.abs(n - c.x);
            let r = i.containsPoint(c);
            let s = j.containsPoint(c);
            let t = k.containsPoint(c);
            if (p <= o && p <= q) {
                if (!e && t) {
                    return k;
                }
                if (e && r) {
                    return i;
                }
                return j;
            }
            if (o <= p && o <= q) {
                if (!e && s) {
                    return j;
                }
                return i;
            }
            if (q <= p && q <= o) {
                if (e && s) {
                    return j;
                }
                return k;
            }
            return Rect.empty;
        }
        qy(a) {
            return this.ql.dd(a);
        }
        nk() {
            return 1;
        }
        hw(a, b) {
            super.hw(a, b);
            this.ql.c7.count = 0;
        }
        eg() {
            return this.p2.jy(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
        }
        os(a, b) {
            let c = b;
            super.os(a, b);
            let d = b.bs;
            let e = b.br;
            let f = this.getEffectiveViewport1(b);
            let g = this.p2.jy(d, e, f);
            let h = this.qm;
            let i = this.qn;
            let j;
            let k = this.pb(b);
            let l = NaN;
            let m = c.c7;
            let n;
            let o = 0;
            this.ni.x(this, this.n3(), this.p2, runOn(this, this.m4), this.ob(b), this.oc(b));
            this.ni.p = this.qm;
            this.ni.q = this.qn;
            this.ni.j = this.qm;
            this.ni.k = this.qn;
            let p = false;
            let q = this.ni.c;
            if (q != null) {
                p = true;
            }
            let r = this.p2.cf;
            let s = this.valueColumn.count;
            let t = a.f;
            let u = this.p2;
            let v = new ScalerParams(0, d, e, this.p2.ca, f);
            let w = this.k4;
            let x = this.qw;
            let y = this.k5;
            let z = this.qx || y;
            if (a.f.count > 0) {
                j = a.f._inner[0][0] - 0.5 * g;
                let aa = a.f._inner[0][1];
                if (!isNaN_(aa)) {
                    if (aa > k) {
                        n = m.item(o);
                        o++;
                        c.dc(n, j, k);
                        n.width = g;
                        n.height = Math.abs(k - aa);
                        this.ni.al = x;
                        this.ni.ah = x;
                        this.ni.am = z;
                        this.ni.ai = z;
                        this.ni.f = true;
                        if (p) {
                            this.oo(t, 0, s, u, v, b.n);
                        }
                        this.ni.ae(n, false, false, false, false);
                        n.am = this.ni.j;
                        n.an = this.ni.k;
                    }
                    else {
                        n = m.item(o);
                        o++;
                        c.dc(n, j, aa);
                        n.width = g;
                        n.height = Math.abs(aa - k);
                        this.ni.al = w;
                        this.ni.ah = w;
                        this.ni.am = y;
                        this.ni.ai = y;
                        this.ni.f = false;
                        if (p) {
                            this.oo(t, 0, s, u, v, b.n);
                        }
                        this.ni.ae(n, false, false, false, false);
                        n.am = this.ni.j;
                        n.an = this.ni.k;
                    }
                    l = aa;
                }
                else {
                    l = k;
                }
            }
            for (let ab = 1; ab < a.f.count; ++ab) {
                let ac = a.f._inner[ab];
                j = a.f._inner[ab][0] - 0.5 * g;
                let ad = ac[1];
                if (!isNaN_(ad)) {
                    n = m.item(o);
                    o++;
                    c.dc(n, j, Math.min(l, ad));
                    n.width = g;
                    n.height = Math.abs(l - ad);
                    this.ni.al = w;
                    this.ni.ah = w;
                    this.ni.am = y;
                    this.ni.ai = y;
                    this.ni.f = false;
                    if (l > ad) {
                        if (p) {
                            this.oo(t, ab, s, u, v, b.n);
                        }
                    }
                    else {
                        this.ni.al = x;
                        this.ni.ah = x;
                        this.ni.am = z;
                        this.ni.ai = z;
                        this.ni.f = true;
                        if (p) {
                            this.oo(t, ab, s, u, v, b.n);
                        }
                    }
                    this.ni.ae(n, false, false, false, false);
                    n.am = this.ni.j;
                    n.an = this.ni.k;
                    l = ad;
                }
            }
            m.count = o;
            b.cu(a);
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    WaterfallSeries.$t = /*@__PURE__*/ markType(WaterfallSeries, 'WaterfallSeries', HorizontalAnchoredCategorySeries.$);
    WaterfallSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, WaterfallSeries, 'raisePropertyChanged', ['NegativeBrush:qw:qs', [Brush.$, null], 'NegativeOutline:qx:qt', [Brush.$, null], 'RadiusX:qm:qu', [1, 2], 'RadiusY:qn:qv', [1, 2]]);
    return WaterfallSeries;
})();
/**
 * @hidden
 */
export let WaterfallSeriesView = /*@__PURE__*/ (() => {
    class WaterfallSeriesView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.c6 = null;
            this.c8 = null;
            this.df = new Rectangle();
            this.c7 = null;
            this.c6 = a;
            this.c7 = ((() => {
                let $ret = new Pool$1(Rectangle.$);
                $ret.create = runOn(this, this.dg);
                $ret.activate = runOn(this, this.c9);
                $ret.disactivate = runOn(this, this.db);
                $ret.destroy = runOn(this, this.da);
                return $ret;
            })());
        }
        ap() {
            super.ap();
            this.c8 = new List$1(Rectangle.$, 0);
            if (!this.n) {
                this.e.eu = 4;
                this.c6.qw = ((() => {
                    let $ret = new Brush();
                    $ret.fill = "#C62828";
                    return $ret;
                })());
                this.c6.qx = ((() => {
                    let $ret = new Brush();
                    $ret.fill = "#C62828";
                    return $ret;
                })());
                this.e.bj = 5;
            }
        }
        dg() {
            let a = new Rectangle();
            this.c8.add(a);
            a._visibility = 1;
            return a;
        }
        c9(a) {
            a._visibility = 0;
        }
        db(a) {
            a._visibility = 1;
        }
        da(a) {
            this.c8.remove(a);
        }
        dc(a, b, c) {
            let d = false;
            if (a.o != c) {
                d = true;
                a.o = c;
            }
            if (a.n != b) {
                d = true;
                a.n = b;
            }
            if (d) {
                this.an();
            }
        }
        z(a) {
            return this.c8._inner[a];
        }
        y(a) {
            let b = this.c8._inner[a];
            this.df._visibility = b._visibility;
            this.df.n = b.n;
            this.df.o = b.o;
            this.df.width = b.width;
            this.df.height = b.height;
            let c = this.bm(a);
            this.df._fill = c;
            this.df._stroke = c;
            this.df.ac = this.e.ey + 3;
            return this.df;
        }
        a3(a, b) {
            super.a3(a, b);
            if (a.d) {
                for (let c = 0; c < this.c8.count; c++) {
                    let d = this.x(c, b);
                    this.ba(d, c, b);
                    a.v(d);
                }
            }
        }
        ai(a) {
            super.ai(a);
            let b = 0;
            let c = new List$1(Rectangle.$, 0);
            for (let d of fromEnum(this.c7.a)) {
                c.add(d);
            }
            c.aa((e, f) => {
                if (e.n < f.n) {
                    return -1;
                }
                else if (e.n > f.n) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            for (let e of fromEnum(c)) {
                let f = "Negative";
                if (e._fill == this.e.k4) {
                    f = "Positive";
                }
                this.e.a2.exportRectangleData(a, e, "column" + b, ["Main", f]);
            }
            b++;
        }
        dd(a) {
            let b = this.c7.item(a);
            return new Rect(0, b.n, b.o, b.width, b.height);
        }
        de(a) {
            return new Rect(0, a.n, a.o, a.width, a.height);
        }
    }
    WaterfallSeriesView.$t = /*@__PURE__*/ markType(WaterfallSeriesView, 'WaterfallSeriesView', AnchoredCategorySeriesView.$);
    return WaterfallSeriesView;
})();
//# sourceMappingURL=WaterfallSeries_combined.js.map
