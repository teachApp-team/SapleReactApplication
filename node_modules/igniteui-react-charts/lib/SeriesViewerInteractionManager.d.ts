import { Base, Point, Type } from "igniteui-react-core";
import { ISeriesViewerInteractionManager } from "./ISeriesViewerInteractionManager";
import { IHighlightingManager } from "./IHighlightingManager";
import { Rect } from "igniteui-react-core";
import { TileZoomManager } from "./TileZoomManager";
import { Series } from "./Series";
import { DataContext } from "igniteui-react-core";
import { ChartHitTestMode } from "./ChartHitTestMode";
import { SeriesViewer } from "./SeriesViewer";
import { Key } from "igniteui-react-core";
import { SeriesCollection } from "./SeriesCollection";
import { RenderingContext } from "igniteui-react-core";
import { EventProxy } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class SeriesViewerInteractionManager extends Base implements ISeriesViewerInteractionManager {
    static $t: Type;
    constructor();
    readonly f$b: IHighlightingManager;
    f$a(a: SeriesViewer): ChartHitTestMode;
    f$al(a: SeriesViewer): void;
    f$ae(a: SeriesViewer): void;
    f$p(a: SeriesViewer, b: Point): void;
    private ab;
    private aa;
    f$ac(a: SeriesViewer, b: Point): void;
    f$q(a: SeriesViewer, b: Point, c: boolean): void;
    f$o(a: SeriesViewer, b: Point): void;
    private r;
    private s;
    private af;
    private o;
    private p;
    private n;
    private q;
    private h;
    ag: Rect;
    ai: Rect;
    f$aj(a: SeriesViewer): void;
    f$ab(a: SeriesViewer, b: Point): void;
    f$ak(a: SeriesViewer, b: Point, c: number, d: number, e: number): void;
    f$aa(a: SeriesViewer, b: number): void;
    f$ag(a: SeriesViewer, b: Point, c: number, d: number, e: number): void;
    f$x(a: SeriesViewer, b: Point): void;
    private x;
    f$z(a: SeriesViewer, b: number): void;
    f$r(a: SeriesViewer, b: Point): void;
    f$af(a: SeriesViewer, b: Point, c: number, d: number, e: number): void;
    private w;
    private y;
    f$m(a: SeriesViewer, b: Point, c: boolean): void;
    protected ad(a: SeriesViewer, b: Point, c: boolean): void;
    f$ai(a: SeriesViewer): void;
    f$ah(a: SeriesViewer): void;
    j: boolean;
    f$am(a: SeriesViewer): void;
    f$j(a: SeriesViewer): void;
    f$g(a: SeriesViewer): void;
    readonly f: TileZoomManager;
    private e;
    private ac;
    z(a: SeriesViewer): void;
    f$i(a: SeriesViewer): void;
    private b;
    ah: Rect;
    private l;
    private m;
    private k;
    f$l(a: SeriesViewer, b: Point, c: boolean): void;
    f$k(a: SeriesViewer, b: Point, c: boolean): void;
    f$ad(a: SeriesViewer): void;
    private ak;
    f$d(a: SeriesViewer, b: Key): boolean;
    f$e(a: SeriesViewer, b: Point, c: number): boolean;
    private v;
    f$n(a: SeriesViewer, b: Point): void;
    f$h(a: SeriesViewer): void;
    aj(): Rect;
    f$c(a: SeriesViewer, b: SeriesCollection, c: RenderingContext, d: Point, e: boolean, f: DataContext, g: boolean): {
        ret: Series;
        p5: DataContext;
    };
    f$f(a: SeriesViewer, b: Point): boolean;
    private c;
    f$v(a: SeriesViewer, b: SeriesCollection, c: RenderingContext, d: Point, e: boolean, f: boolean): void;
    f$u(a: SeriesViewer, b: Point): void;
    f$t(a: SeriesViewer, b: EventProxy, c: Point): void;
    f$w(a: SeriesViewer, b: EventProxy, c: Point): void;
    f$s(a: SeriesViewer, b: Point, c: boolean): void;
    private ae;
    f$y(a: SeriesViewer, b: boolean): void;
    protected d: Series;
    protected a: DataContext;
    private g;
    protected readonly i: boolean;
}
