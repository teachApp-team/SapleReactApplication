/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { MarkerSeries } from "./MarkerSeries";
import { Base, runOn, Number_$type, enumGetBox, typeCast, Point_$type, fromEnum, markType, markDep } from "igniteui-react-core";
import { PolarAxisInfoCache } from "./PolarAxisInfoCache";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { PolarFrame } from "./PolarFrame";
import { DependencyProperty } from "igniteui-react-core";
import { NumericAngleAxis } from "./NumericAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { TrendLineType_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { PolarAxes } from "./PolarAxes";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { SeriesRenderingArguments } from "./SeriesRenderingArguments";
import { AxisRange } from "./AxisRange";
import { HashPool$2 } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { Dictionary$2 } from "igniteui-react-core";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { PolarTrendLineManager } from "./PolarTrendLineManager";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { GeometryGroup } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let PolarBase = /*@__PURE__*/ (() => {
    class PolarBase extends MarkerSeries {
        constructor() {
            super();
            this.nc = null;
            this.m5 = null;
            this.na = null;
            this.o2 = null;
            this.o1 = null;
            this.ni = null;
            this.nk = null;
            this.nl = null;
            this.nf = new PolarFrame();
            this.nh = new PolarFrame();
            this.ne = new PolarFrame();
            this.m9 = null;
            this.ng = null;
            this.nd = null;
            this.ng = new PolarFrame();
            this.nh.x = runOn(this, this.o0);
            this.nf.x = runOn(this, this.o0);
            this.ne.x = runOn(this, this.o0);
            this.ni = new SeriesRenderer$2(PolarFrame.$, PolarBaseView.$, 0, runOn(this, this.od), runOn(this, this.of), runOn(this, this.ca), runOn(this, this.jm), runOn(this, this.ob));
        }
        bf() {
            return new PolarBaseView(this);
        }
        iv(a) {
            super.iv(a);
            this.nb = a;
        }
        hu() {
            super.hu();
            this.m7 = null;
            this.m8 = null;
        }
        get_c0() {
            return true;
        }
        nr(a) {
            if (!this.hasMarkers) {
                return false;
            }
            let b = this.m7;
            let c = new ScalerParams(1, this.bs.mr, this.lz, b.ca);
            c.c = this.getEffectiveViewport1(this.bi);
            let d = this.m8;
            let e = new ScalerParams(1, this.bs.mr, this.lz, d.ca);
            e.c = this.getEffectiveViewport1(this.bi);
            a.clear();
            this.l1.cc((f) => {
                if (f._visibility == 0) {
                    let g = new SeriesPointOfInterest();
                    let h = f.n;
                    let i = f.o;
                    if (h < this.lz.left || h > this.lz.right || i < this.lz.top || i > this.lz.bottom) {
                        return;
                    }
                    g.b = b.d1(h, c);
                    g.c = d.d1(i, e);
                    g.a = f.content;
                    a.add(g);
                }
            });
            return true;
        }
        ob() {
            if (this.bt.g) {
                this.bt.t();
            }
        }
        oc() {
            this.m9.e(this.nc.w, this.nm, this.nn, this.o2, this.o1, (a, b) => Math.cos(b), (a, b) => Math.sin(b), true);
        }
        get nm() {
            return this.nk;
        }
        set nm(a) {
            if (this.nk != a) {
                let b = this.nm;
                this.nk = a;
                this.raisePropertyChanged("AngleColumn", b, this.nm);
            }
        }
        get nn() {
            return this.nl;
        }
        set nn(a) {
            if (this.nl != a) {
                let b = this.nn;
                this.nl = a;
                this.raisePropertyChanged("RadiusColumn", b, this.nn);
            }
        }
        get ov() {
            return this.c(PolarBase.og);
        }
        set ov(a) {
            this.h(PolarBase.og, a);
        }
        ic() {
            super.ic();
            if (this.m8 != null) {
                this.m8.hb(false);
            }
            if (this.m7 != null) {
                this.m7.hb(false);
            }
        }
        hz(a, b, c, d) {
            let e = false;
            this.nb.cr.g$e(a, b, c, d);
            if (this.m7 != null && !this.m7.cn()) {
                e = true;
            }
            if (this.m8 != null && !this.m8.cn()) {
                e = true;
            }
            if (e) {
                this.je(true);
            }
        }
        jt(a, b) {
            this.je(false);
        }
        ju(a, b) {
            this.je(false);
        }
        dw(a, b, c) {
            let d = true;
            if (!super.dw(a, b, c) || !c.l() || b.isEmpty || a.isEmpty || this.m7 == null || this.m8 == null || this.nm == null || this.nn == null || this.nm.count == 0 || this.nn.count == 0 || this.bz == null || this.bz.count != this.nm.count || this.bz.count != this.nn.count || this.m9 == null || this.m7.bh == null || this.m8.bh == null || this.m7.kb == this.m7.ka || this.m8.kb == this.m8.ka) {
                d = false;
            }
            return d;
        }
        jf(a) {
            let b;
            let c;
            let d = this.getViewInfo(c, b);
            c = d.p0;
            b = d.p1;
            if (!this.dw(c, b, this.bi)) {
                this.hw(true, this.bi);
                return;
            }
            this.o2 = b;
            this.o1 = c;
            this.na = new PolarAxisInfoCache(this.m7, this.m8, this.bz);
            let e = new SeriesRenderingArguments(this, c, b, a, this.de);
            let f = this.ni.g(e, this.nf, this.ne, this.nh, this.nb);
            this.nf = f.p1;
            this.ne = f.p2;
            this.nh = f.p3;
        }
        o0(a) {
            let b = this.m9.h(a.x, a.y, this.o2, this.o1, this.na.e, this.na.d, this.na.g, this.na.f, this.na.i, this.na.h);
            return b;
        }
        an(a) {
            if (a != null && a == this.m7 && this.nm != null) {
                return new AxisRange(this.nm.minimum, this.nm.maximum);
            }
            if (a != null && a == this.m8 && this.nn != null) {
                return new AxisRange(this.nn.minimum, this.nn.maximum);
            }
            return null;
        }
        c9(a) {
            let b = this.bi.bs;
            b = b.copy();
            let c = this.bi.br;
            let d = !b.isEmpty && !c.isEmpty && this.bz != null ? this.bz.indexOf(a) : -1;
            if (this.m7 == null || this.nm == null || this.m8 == null || this.nn == null) {
                return false;
            }
            if (d < 0 || d > this.nm.count - 1 || d > this.nn.count - 1) {
                return false;
            }
            let e = this.m7.getScaledAngle(this.nm.item(d));
            let f = this.m8.lw(this.nn.item(d));
            let g = 0.5 + (Math.cos(e) * f);
            let h = 0.5 + (Math.sin(e) * f);
            if (!isNaN_(g)) {
                if (g < b.left + 0.1 * b.width) {
                    g = g + 0.4 * b.width;
                    b.x = g - 0.5 * b.width;
                }
                if (g > b.right - 0.1 * b.width) {
                    g = g - 0.4 * b.width;
                    b.x = g - 0.5 * b.width;
                }
            }
            if (!isNaN_(h)) {
                if (h < b.top + 0.1 * b.height) {
                    h = h + 0.4 * b.height;
                    b.y = h - 0.5 * b.height;
                }
                if (h > b.bottom - 0.1 * b.height) {
                    h = h - 0.4 * b.height;
                    b.y = h - 0.5 * b.height;
                }
            }
            if (this.bn != null) {
                this.bn.ap(this.bs, b, true);
            }
            return d >= 0;
        }
        fp(a) {
            return null;
        }
        e8(a) {
            return -1;
        }
        ag() {
            return [this.m7, this.m8];
        }
        fs(a, b) {
            let c = this.gv(b);
            if (c == PolarBase.$$p[1]) {
                return this.ft(a, b, this.n0);
            }
            if (c == PolarBase.$$p[5]) {
                return this.ft(a, b, this.n6);
            }
            return super.fs(a, b);
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            if (this.nb.cr.g$b(a, b, c, d)) {
                this.je(false);
                this.il();
            }
            switch (b) {
                case "FastItemsSource":
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.nm);
                        c.deregisterColumn(this.nn);
                        this.nm = null;
                        this.nn = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.nm = this.bw(this.n0);
                        this.nn = this.bw(this.n6);
                    }
                    if ((this.m8 != null && !this.m8.cn()) || (this.m7 != null && !this.m7.cn())) {
                        this.je(false);
                    }
                    break;
                case PolarBase.$$p[0]:
                    if (this.m7 != null && this.m8 != null) {
                        this.m9 = new PolarAxes(this.m8, this.m7);
                    }
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.ck(this);
                    }
                    if (this.m7 != null && !this.m7.cn()) {
                        this.je(false);
                    }
                    else if (c != null && d == null) {
                        this.hw(true, this.bi);
                    }
                    break;
                case PolarBase.$$p[4]:
                    if (this.m7 != null && this.m8 != null) {
                        this.m9 = new PolarAxes(this.m8, this.m7);
                    }
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.ck(this);
                    }
                    if (this.m8 != null && !this.m8.cn()) {
                        this.je(false);
                    }
                    else if (c != null && d == null) {
                        this.hw(true, this.bi);
                    }
                    if (this.m7 != null && !this.m7.cn()) {
                        this.m7.g7();
                    }
                    break;
                case PolarBase.$$p[1]:
                    if (this.bz != null) {
                        this.bz.deregisterColumn(this.nm);
                        this.nm = this.bw(this.n0);
                    }
                    break;
                case "AngleColumn":
                    this.nb.cr.g$i();
                    if (this.m7 != null && !this.m7.cn()) {
                        this.je(false);
                    }
                    break;
                case PolarBase.$$p[5]:
                    if (this.bz != null) {
                        this.bz.deregisterColumn(this.nn);
                        this.nn = this.bw(this.n6);
                    }
                    break;
                case "RadiusColumn":
                    this.nb.cr.g$i();
                    if (this.m8 != null && !this.m8.cn()) {
                        this.je(false);
                    }
                    break;
                case PolarBase.$$p[6]:
                    this.je(false);
                    this.il();
                    break;
                case PolarBase.$$p[3]:
                    this.je(false);
                    this.il();
                    break;
                case "TransitionProgress":
                    this.na = new PolarAxisInfoCache(this.m7, this.m8, this.bz);
                    this.o2 = this.bi.bs;
                    this.o1 = this.bi.br;
                    this.nh.v = this.ns;
                    this.nh.c(this.ez, this.nf, this.ne);
                    if (this.cc(this.bi)) {
                        return;
                    }
                    if (this.ez == 1) {
                        this.of(this.ne, this.nb);
                    }
                    else {
                        this.of(this.nh, this.nb);
                    }
                    if (this.bs != null) {
                        this.bs.jk(this);
                    }
                    break;
                case "TrendLineBrush":
                    this.jp();
                    break;
                case PolarBase.$$p[2]:
                    this.je(false);
                    this.il();
                    break;
                case "TrendLineType":
                    this.il();
                    break;
            }
        }
        np(a) {
            if (typeCast(NumericRadiusAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        no(a) {
            if (typeCast(NumericAngleAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        hw(a, b) {
            super.hw(a, b);
            let c = b;
            if (a) {
                c.cs.clear();
            }
            c.cr.g$d();
        }
        m6(a, b) {
            let c = a.top - 10;
            let d = a.bottom + 10;
            let e = a.left - 10;
            let f = a.right + 10;
            let g = ((() => {
                let $ret = new Clipper(1, e, d, f, c, false);
                $ret.i = b;
                return $ret;
            })());
            return g;
        }
        oa(a, b, c, d) {
            a.g = new Dictionary$2(Base.$, OwnedPoint.$, 1, b);
            let e = this.bz;
            for (let f = 0; f < b; f++) {
                let g = a.w._inner[f];
                if (!isInfinity(g.x) && !isInfinity(g.y)) {
                    let h = { $type: Point_$type, x: this.nm.item(f), y: this.nn.item(f) };
                    let i = { $type: Point_$type, x: g.x, y: g.y };
                    a.g.addItem(e.item(f), ((() => {
                        let $ret = new OwnedPoint();
                        $ret.a = e.item(f);
                        $ret.b = h;
                        $ret.c = i;
                        return $ret;
                    })()));
                }
            }
        }
        od(a, b) {
            let c = b.bs;
            let d = b.br;
            a.j.clear();
            a.n.clear();
            let e = Math.min(this.nm != null ? this.nm.count : 0, this.nn != null ? this.nn.count : 0);
            if (e < 1) {
                return;
            }
            this.na = new PolarAxisInfoCache(this.m7, this.m8, this.bz);
            this.nc = a;
            this.o1 = d;
            this.o2 = c;
            b.cp.l(a.j, this.nv, c, d, this.eu);
            if (e <= this.nv) {
                this.oa(a, e, c, d);
            }
            let f = this.m6(d, a.n);
            let g = Math.min(this.m7.kb, this.m7.ka);
            let h = Math.max(this.m7.ka, this.m7.kb);
            b.cr.q = this.ns;
            b.cr.p = 0;
            b.cr.s = this.m8.lq;
            b.cr.r = this.m8.lp;
            b.cr.t = (i, j) => this.m9.c(i, j, c, d, Math.cos);
            b.cr.u = (i, j) => this.m9.d(i, j, c, d, Math.sin);
            let i = new List$1(Number_$type, 0);
            for (let j = 0; j < this.nm.count; j++) {
                if (this.nm.item(j) >= g && this.nm.item(j) <= h) {
                    i.add(this.nm.item(j));
                }
            }
            let k = this.nn;
            if (i.count != this.nm.count) {
                k = new List$1(Number_$type, 0);
                for (let l = 0; l < this.nm.count; l++) {
                    if (this.nm.item(l) >= g && this.nm.item(l) <= h) {
                        k.add(this.nn.item(l));
                    }
                }
            }
            b.cr.v(a.n, this.nj, i, k, this.nw, runOn(this.m7, this.m7.getScaledAngle), runOn(this.m8, this.m8.lw), ((() => {
                let $ret = new TrendResolutionParams();
                $ret.b = this.eu;
                $ret.f = d;
                $ret.g = c;
                return $ret;
            })()), f, g, h);
        }
        of(a, b) {
            let c = b.bs;
            let d = b.br;
            let e = this.getEffectiveViewport1(b);
            let f = this.lr(b);
            this.na = new PolarAxisInfoCache(this.m7, this.m8, this.bz);
            b.cp.j(a.j, this.l6);
            b.cj();
            let g = this.m6(d, b.cr.g$j.ak);
            b.cr.g$h(a.n, g);
            this.n9(d, c, e, f, b);
        }
        n9(a, b, c, d, e) {
            e.cu(a, b, c, d);
        }
        jp() {
            super.jp();
            if (this.fh < 0) {
                return;
            }
            this.nb.cw();
        }
        jg(a, b) {
            super.jg(a, b);
            if (!this.dl) {
                this.bi.az(b);
                return;
            }
            this.bi.az(b);
            if (this.cc(this.bh)) {
                return;
            }
            let c = this.bh;
            if (!this.df) {
                this.ng = new PolarFrame();
                this.od(this.ng, c);
            }
            this.df = false;
            this.of(this.ng, c);
            this.dl = false;
        }
        jd(a, b, c, d, e) {
            super.jd(a, b, c, d, e);
            let f = this.a0.a$h.item(d);
            let g = f;
            f.ay(c);
            if (this.cc(g)) {
                return;
            }
            if (this.nd == null) {
                this.nd = new PolarFrame();
            }
            this.od(this.nd, g);
            this.of(this.nd, g);
        }
        oe(a, b) {
            let c = new List$1(Base.$, 0);
            for (let d of fromEnum(b.c)) {
                if (!a.containsKey(d)) {
                    c.add1(d);
                }
            }
            for (let e of fromEnum(c)) {
                b.g(e);
            }
        }
        m4(a, b, c) {
            this.oc();
            return this.nc.w.toArray();
        }
        nt(a) {
            let b = new List$1(Number_$type, 0);
            let c = this.bz;
            for (let d of fromEnum(this.nb.cs.c)) {
                b.add(c.indexOf(d));
            }
            return b;
        }
        oz(a) {
            return { $type: Point_$type, x: this.nm.item(a), y: this.nn.item(a) };
        }
        h5(a) {
            super.h5(a);
            this.a2.exportTrendlineData(this, a, this.nb.cr.g$j);
        }
    }
    PolarBase.$t = /*@__PURE__*/ markType(PolarBase, 'PolarBase', MarkerSeries.$);
    PolarBase.og = /*@__PURE__*/ DependencyProperty.i("ActualTrendLineBrush", Brush.$, PolarBase.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    PolarBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, PolarBase, 'raisePropertyChanged', ['AngleAxis:m7:oh', [NumericAngleAxis.$, null], 'AngleMemberPath:n0:oi', [2], 'ClipSeriesToBounds:nq:oj', [0, false], 'MaximumMarkers:nv:ok', [1, 400], 'RadiusAxis:m8:ol', [NumericRadiusAxis.$, null], 'RadiusMemberPath:n6:om', [2], 'UseCartesianInterpolation:ns:ou', [0, true], 'TrendLineType:nj:os', [TrendLineType_$type, /*@__PURE__*/ enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness:nu:or', [1, 1.5], 'TrendLinePeriod:nw:oq', [1, 7], 'TrendLineZIndex:nx:ot', [1, 1], 'TrendLineBrush:ow:on', [Brush.$, null], 'TrendLineDashArray:ox:oo', [DoubleCollection.$], 'TrendLineDashCap:oy:op', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)]]);
    return PolarBase;
})();
/**
 * @hidden
 */
export let PolarBaseView = /*@__PURE__*/ (() => {
    class PolarBaseView extends MarkerSeriesView {
        constructor(a) {
            super(a);
            this.cq = null;
            this.cp = null;
            this.cr = null;
            this.cs = null;
            this.cq = a;
            this.cs = new HashPool$2(Base.$, Marker.$);
            this.ce(this.cs);
            this.cr = new PolarTrendLineManager();
        }
        ap() {
            super.ap();
            this.cp = this.co();
            if (!this.n) {
                this.cq.nv = 1000;
                this.by.l2 = 2;
            }
        }
        co() {
            let a = new NumericMarkerManager(0, (b) => this.cs.item(b), (b) => this.cq.na.c.item(b), runOn(this, this.cv), runOn(this, this.cn), runOn(this, this.ct));
            a.n = true;
            a.p = runOn(this.cq, this.cq.oz);
            return a;
        }
        cv(a) {
            this.cq.oe(a, this.cs);
        }
        cn() {
            return this.cq.m4(this.cs, this.bs, this.br);
        }
        ct() {
            return this.cq.nt(this.cs);
        }
        cu(a, b, c, d) {
            if (this.cq.nq) {
                let e = new GeometryGroup();
                this.cq.m8.l4(e, a, b, c, d);
            }
            else {
            }
        }
        cw() {
            if (this.cq.ow != null) {
                this.cq.ov = this.cq.ow;
            }
            else {
                this.cq.ov = this.cq.k4;
            }
        }
        cc(a) {
            this.cs.f(a);
        }
        a2(a, b) {
            if (a.d) {
                if (this.cq.nj != 0 && !b) {
                    let c = this.cr.g$j;
                    c.ac = this.cq.nu;
                    c._stroke = this.cq.ov;
                    c.ad = this.cq.oy;
                    c.ai = this.cq.ox;
                    a.u(c);
                }
            }
            super.a2(a, b);
        }
        cx() {
            return Rect.empty;
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'><span>" + "${item." + this.cq.n0 + "}" + "</span><br/><span";
            let b = this.e.a0.a$q(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.cq.fx + ": </span><span class='ui-priority-primary'>" + "${item." + this.cq.n6 + "}</span></div>";
            return a;
        }
    }
    PolarBaseView.$t = /*@__PURE__*/ markType(PolarBaseView, 'PolarBaseView', MarkerSeriesView.$);
    return PolarBaseView;
})();
//# sourceMappingURL=PolarBase_combined.js.map
