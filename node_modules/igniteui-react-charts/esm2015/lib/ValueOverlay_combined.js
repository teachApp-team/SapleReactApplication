/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Series } from "./Series";
import { IHasCategoryModePreference_$type } from "./IHasCategoryModePreference";
import { Axis } from "./Axis";
import { DependencyProperty } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { Point_$type, typeCast, Delegate_$type, markType, markDep } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { AxisAnnotationFrame } from "./AxisAnnotationFrame";
import { List$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { AxisAnnotation } from "./AxisAnnotation";
import { SeriesView } from "./SeriesView";
import { NotImplementedException } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { NumericAxisBase } from "./NumericAxisBase";
import { ScalerParams } from "./ScalerParams";
import { CategoryXAxis } from "./CategoryXAxis";
import { AxisAnnotationFrameManager } from "./AxisAnnotationFrameManager";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { stringFormat } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
/**
 * @hidden
 */
export let ValueOverlay = /*@__PURE__*/ (() => {
    class ValueOverlay extends Series {
        constructor() {
            super();
            this.mh = 0;
            this.mi = 0;
            this.me = 0;
            this.l2 = null;
            this.l8 = null;
            this.l7 = null;
            this.ab = ValueOverlay.$;
        }
        en(a, b, c) {
            return this.mj;
        }
        mf(a, b) {
            let c = Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
            let d = Math.acos((a.x - b.x) / c);
            if ((a.y - b.y) < 0) {
                d = (2 * Math.PI) - d;
            }
            return d;
        }
        lm(a, b, c) {
            if (this.l1 == null) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            let d = this.mg();
            let e = NaN;
            let f = NaN;
            let g = NaN;
            let h = { $type: Point_$type, x: 0.5, y: 0.5 };
            let i = NaN;
            switch (this.l1.a0) {
                case 2:
                    i = Math.sqrt(Math.pow(a.x - h.x, 2) + Math.pow(a.y - h.y, 2));
                    g = d;
                    e = h.x + Math.cos(g) * i;
                    f = h.y + Math.sin(g) * i;
                    f = this.bi.br.top + this.bi.br.height * (f - this.bi.bs.top) / this.bi.bs.height;
                    e = this.bi.br.left + this.bi.br.width * (e - this.bi.bs.left) / this.bi.bs.width;
                    break;
                case 0:
                    e = d;
                    f = a.y;
                    f = this.bi.br.top + this.bi.br.height * (f - this.bi.bs.top) / this.bi.bs.height;
                    break;
                case 1:
                    f = d;
                    e = a.x;
                    e = this.bi.br.left + this.bi.br.width * (e - this.bi.bs.left) / this.bi.bs.width;
                    break;
                case 3:
                    g = this.mf(a, h);
                    i = d;
                    e = h.x + Math.cos(g) * i;
                    f = h.y + Math.sin(g) * i;
                    f = this.bi.br.top + this.bi.br.height * (f - this.bi.bs.top) / this.bi.bs.height;
                    e = this.bi.br.left + this.bi.br.width * (e - this.bi.bs.left) / this.bi.bs.width;
                    break;
            }
            return { $type: Point_$type, x: e, y: f };
        }
        e8(a) {
            throw new NotImplementedException(0);
        }
        fp(a) {
            return this;
        }
        c9(a) {
            return false;
        }
        an(a) {
            let b = typeCast(NumericAxisBase.$, a);
            let c = this.mj;
            if (isNaN_(c) || isInfinity(c)) {
                return null;
            }
            return new AxisRange(c, c);
        }
        jf(a) {
            this.hw(true, this.bi);
            if (!this.l6()) {
                if (this.l2 != null) {
                    this.m1(NaN, this.ca());
                }
                return;
            }
            if (this.da(a)) {
                if (this.ca()) {
                    if (this.bt.g) {
                        this.bt.t();
                    }
                    let b = this.mh;
                    this.mh = this.mi;
                    this.mi = b;
                }
                else {
                    this.mh = this.me;
                }
                this.me = this.mg();
                this.jm();
            }
            else {
                this.me = this.mg();
                this.m0(this.me, this.l4);
            }
        }
        mg() {
            let a, b;
            let c = this.getViewInfo(b, a);
            b = c.p0;
            a = c.p1;
            let d = this.getEffectiveViewport1(this.bi);
            let e = new ScalerParams(0, a, b, this.l1.ca, d);
            return this.l1.dy(this.mj, e);
        }
        m0(a, b) {
            if (this.l1 == null) {
                return;
            }
            let c = typeCast(CategoryAxisBase.$, this.l1);
            if (c != null && !c.b7) {
                if (this.mj > c.j6 - 1) {
                    return;
                }
                if (c.categoryMode == 2) {
                    let d = this.getEffectiveViewport1(b);
                    let e = 0.5 * c.getCategorySize(b.bs, b.br, d);
                    let f = false;
                    if (c.ch && !c.ca) {
                        f = true;
                    }
                    if (typeCast(CategoryXAxis.$, c) !== null && c.ca) {
                        f = true;
                    }
                    if (f) {
                        e = -e;
                    }
                    a += e;
                }
            }
            let g = typeCast(NumericAxisBase.$, this.l1);
            if (g != null) {
                if (this.mj < g.kb || this.mj > g.ka) {
                    return;
                }
                if (g.j1 && this.mj < 0) {
                    return;
                }
            }
            let h;
            switch (this.l1.a0) {
                case 2:
                case 3:
                    h = this.l1.i0(a, b.bs, b.br, this.getEffectiveViewport1(b), this.lr(b));
                    break;
                default:
                    h = this.l1.i0(a, b.bs, b.br);
                    break;
            }
            if (h != null) {
                b.bv(h);
            }
            this.m1(a, this.ca());
        }
        dw(a, b, c) {
            let d = true;
            d = super.dw(a, b, c);
            if (!c.l() || b.isEmpty || a.isEmpty || this.l1 == null || this.l1.bh == null) {
                d = false;
            }
            return d;
        }
        ju(a, b) {
            this.je(false);
        }
        jt(a, b) {
            this.je(false);
        }
        hz(a, b, c, d) {
            throw new NotImplementedException(0);
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case ValueOverlay.$$p[10]:
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.ck(this);
                    }
                    this.je(false);
                    this.il();
                    break;
                case "TransitionProgress":
                    this.mi = this.mh + this.ez * (this.me - this.mh);
                    if (this.cc(this.bi)) {
                        return;
                    }
                    if (this.ez == 1) {
                        this.m0(this.me, this.l4);
                    }
                    else {
                        this.m0(this.mi, this.l4);
                    }
                    if (this.bs != null) {
                        this.bs.jk(this);
                    }
                    break;
                case ValueOverlay.$$p[12]:
                    let e = typeCast(NumericAxisBase.$, this.l1);
                    if (e != null) {
                        e.cn();
                    }
                    this.je(true);
                    this.im();
                    break;
                case ValueOverlay.$$p[11]:
                case ValueOverlay.$$p[9]:
                case ValueOverlay.$$p[0]:
                case ValueOverlay.$$p[2]:
                case ValueOverlay.$$p[3]:
                case ValueOverlay.$$p[8]:
                case ValueOverlay.$$p[4]:
                case ValueOverlay.$$p[5]:
                case ValueOverlay.$$p[6]:
                case ValueOverlay.$$p[7]:
                    this.je(true);
                    break;
            }
        }
        ic() {
            super.ic();
            if (this.l1 != null) {
                this.l1.hb(false);
            }
        }
        hw(a, b) {
            super.hw(a, b);
            let c = b;
            c.bu();
        }
        l6() {
            if (this.l1 == null || this.l1.bh == null || isNaN_(this.mj) || this._visibility == 1) {
                return false;
            }
            let a = typeCast(CategoryAxisBase.$, this.l1);
            if (a != null && a.j6 == 0) {
                return false;
            }
            return true;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get categoryAxis() {
            return typeCast(CategoryAxisBase.$, this.l1);
        }
        bf() {
            return new ValueOverlayView(this);
        }
        iv(a) {
            super.iv(a);
            this.l4 = typeCast(ValueOverlayView.$, a);
        }
        jg(a, b) {
            super.jg(a, b);
            if (!this.dl) {
                this.bi.az(b);
                return;
            }
            this.bi.az(b);
            if (this.cc(this.bh) || !this.l6()) {
                return;
            }
            let c = this.getEffectiveViewport1(this.bi);
            let d = this.l1.dy(this.mj, new ScalerParams(0, this.bh.bs, a, this.l1.ca, c));
            this.m0(d, typeCast(ValueOverlayView.$, this.bh));
            this.dl = false;
        }
        getOffsetValue() {
            return 0;
        }
        getCategoryWidth() {
            return 0;
        }
        get ni() {
            return new Thickness(1, this.ma, this.mc, this.mb, this.l9);
        }
        ag() {
            return [this.l1];
        }
        m1(a, b) {
            if (isNaN_(a)) {
                if (this.l2 != null) {
                    AxisAnnotationFrameManager.b(this.l2);
                    AxisAnnotationFrameManager.d(this, this.l2, true, this.l7, this.l8, b, this.mk, this.mk, this.l3, this.l3);
                }
                return;
            }
            let c = false;
            if (this.l7 == null) {
                c = true;
                this.l8 = new List$1(Axis.$, 0);
                this.l7 = new Dictionary$2(Axis.$, Pool$1.$.specialize(AxisAnnotation.$), 0);
            }
            this.l2 = new AxisAnnotationFrame();
            let d = this.k4;
            if (d == null) {
                d = this.k6;
            }
            let e = this.l1.ch;
            AxisAnnotationFrameManager.c(this.l2, { $type: Point_$type, x: a, y: a }, this, this.bs, this.getEffectiveViewport(), d, this.nf, this.nh, this.ng, this.ni, this.md, this.nf, this.nh, this.ng, this.ni, this.md, !e && this.l5, e && this.l5);
            AxisAnnotationFrameManager.d(this, this.l2, c, this.l7, this.l8, b, this.mk, this.mk, this.l3, this.l3);
        }
        get_c6() {
            return true;
        }
        mw(a) {
            if (this.l1 != null) {
                return this.l1.fl(a);
            }
            return null;
        }
        get my() {
            let a = this.mw(this.mj);
            return a != null ? a : stringFormat("{0:0.##}", this.mj);
        }
    }
    ValueOverlay.$t = /*@__PURE__*/ markType(ValueOverlay, 'ValueOverlay', Series.$, [IHasCategoryModePreference_$type]);
    ValueOverlay.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ValueOverlay, 'raisePropertyChanged', ['AxisAnnotationBackground:nf:m2', [Brush.$, null], 'AxisAnnotationFormatLabel:l3:m3', [Delegate_$type], 'AxisAnnotationInterpolatedValuePrecision:mk:m4', [1, -1], 'AxisAnnotationOutline:ng:m5', [Brush.$, null], 'AxisAnnotationPaddingBottom:l9:m6', [1, NaN], 'AxisAnnotationPaddingLeft:ma:m7', [1, NaN], 'AxisAnnotationPaddingRight:mb:m8', [1, NaN], 'AxisAnnotationPaddingTop:mc:m9', [1, NaN], 'AxisAnnotationStrokeThickness:md:na', [1, NaN], 'AxisAnnotationTextColor:nh:nb', [Brush.$, null], 'Axis:l1:nc', [Axis.$, null], 'IsAxisAnnotationEnabled:l5:nd', [0, false], 'Value:mj:ne', [1, 0]]);
    return ValueOverlay;
})();
/**
 * @hidden
 */
export let ValueOverlayView = /*@__PURE__*/ (() => {
    class ValueOverlayView extends SeriesView {
        constructor(a) {
            super(a);
            this.bw = null;
            this.bw = new Path();
        }
        a8() {
            super.a8();
            this.bw._stroke = this.e.k4;
            this.bw.ac = this.e.ey;
            this.bw.ai = this.e.lc;
            this.bw.ad = this.e.ld;
        }
        a9() {
            super.a9();
            let a = this.bl();
            this.bw._stroke = a;
            this.bw.ac = this.e.ey + 3;
            this.bw._stroke = a;
            this.bw.ac = this.e.ey + 3;
        }
        bv(a) {
            this.bw.ak = a;
            this.an();
        }
        bu() {
            this.bw.ak = null;
            this.an();
        }
        a3(a, b) {
            super.a3(a, b);
            if (a.d) {
                a.s(this.bw);
            }
        }
        ai(a) {
            super.ai(a);
            this.e.a2.exportPathData(a, this.bw, "ValueOverlayPath", []);
        }
    }
    ValueOverlayView.$t = /*@__PURE__*/ markType(ValueOverlayView, 'ValueOverlayView', SeriesView.$);
    return ValueOverlayView;
})();
//# sourceMappingURL=ValueOverlay_combined.js.map
