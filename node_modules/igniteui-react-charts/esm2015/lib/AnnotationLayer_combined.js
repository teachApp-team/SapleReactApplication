/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Series } from "./Series";
import { DependencyProperty } from "igniteui-react-core";
import { Point_$type, Boolean_$type, runOn, delegateRemove, typeCast, delegateCombine, fromEnum, fromEn, markType, markDep } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { XamDataChart } from "./XamDataChart";
import { Tuple$2 } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
export let AnnotationLayer = /*@__PURE__*/ (() => {
    class AnnotationLayer extends Series {
        constructor() {
            super();
            this.m4 = null;
            this.l3 = null;
            this.l2 = null;
            this.l4 = null;
            this.m2 = { $type: Point_$type, x: NaN, y: NaN };
            this.l5 = false;
            this.m4 = { $type: Point_$type, x: NaN, y: NaN };
        }
        bf() {
            return new AnnotationLayerView(this);
        }
        iv(a) {
            super.iv(a);
            this.l1 = a;
        }
        l9(a) {
            if (a == null) {
                return false;
            }
            if (a.cj) {
                return false;
            }
            if (a.c6) {
                return false;
            }
            if (a == this) {
                return false;
            }
            return a.dw(a.bi.br, a.bi.bs, a.bi);
        }
        get_cm() {
            return this.l6;
        }
        bd() {
            if (this.be == 0) {
                return 1;
            }
            else {
                return super.bd();
            }
        }
        get_cw() {
            return this.mb || this.mc;
        }
        get_isUsableInLegend() {
            return this.mc;
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    let e = c;
                    let f = d;
                    if (e != null) {
                        this.mv(e.series);
                        let g = e.series;
                        g.collectionChanged = delegateRemove(g.collectionChanged, runOn(this, this.ms));
                        if (typeCast(XamDataChart.$, e) !== null) {
                            let h = e;
                            this.mu(h.axes);
                            let i = h.axes;
                            i.collectionChanged = delegateRemove(i.collectionChanged, runOn(this, this.mi));
                        }
                    }
                    if (f != null) {
                        this.mq(f.series);
                        let j = f.series;
                        j.collectionChanged = delegateCombine(j.collectionChanged, runOn(this, this.ms));
                        if (typeCast(XamDataChart.$, f) !== null) {
                            let k = f;
                            this.mp(k.axes);
                            let l = k.axes;
                            l.collectionChanged = delegateCombine(l.collectionChanged, runOn(this, this.mi));
                        }
                    }
                    break;
                case AnnotationLayer.$$p[3]:
                case AnnotationLayer.$$p[2]:
                    if (this.cw) {
                        if (this.fh == -1) {
                            this.fh = XamDataChart.of(this);
                        }
                    }
                    else {
                        this.fh = -1;
                        this.k4 = null;
                        this.k5 = null;
                    }
                    if (this.bs != null) {
                        this.bs.ij();
                    }
                    this.je(true);
                    break;
                case "TransitionProgress":
                    this.l4.c(this.ez, this.l3, this.l2);
                    if (this.cc(this.bi)) {
                        return;
                    }
                    if (this.ez == 1) {
                        this.mr(this.l2, this.bi);
                    }
                    else {
                        this.mr(this.l4, this.bi);
                    }
                    if (this.bs != null) {
                        this.bs.jk(this);
                    }
                    break;
                case AnnotationLayer.$$p[1]:
                    if (this.bs != null) {
                        this.bs.ih();
                    }
                    break;
                case AnnotationLayer.$$p[0]:
                    this.m4 = this.m3;
                    this.iq(this.m3);
                    break;
                case "ShouldRenderAsOverlay":
                    if (this.bs != null) {
                        this.bi.ah(this.bs);
                        this.bi.ad(this.bs);
                    }
                    break;
            }
        }
        mv(a) {
            for (let b of fromEnum(a)) {
                if (!(b == this)) {
                    b.renderRequested = delegateRemove(b.renderRequested, runOn(this, this.mt));
                }
            }
            this.je(true);
        }
        mu(a) {
            for (let b of fromEnum(a)) {
                b.renderRequested = delegateRemove(b.renderRequested, runOn(this, this.mj));
            }
            this.je(true);
        }
        mq(a) {
            for (let b of fromEnum(a)) {
                if (!(b == this)) {
                    b.renderRequested = delegateCombine(b.renderRequested, runOn(this, this.mt));
                }
            }
            this.je(true);
        }
        mp(a) {
            for (let b of fromEnum(a)) {
                b.renderRequested = delegateCombine(b.renderRequested, runOn(this, this.mj));
            }
            this.je(true);
        }
        l7(a) {
            if (a == null) {
                return false;
            }
            return true;
        }
        mj(a, b) {
            if (this.l7(a)) {
                this.ml(a, b.animate);
            }
        }
        l8(a) {
            if (a == null) {
                return false;
            }
            if (a.cj) {
                return false;
            }
            return true;
        }
        mt(a, b) {
            if (this.l8(a)) {
                this.mm(a, b.animate);
            }
        }
        ml(a, b) {
        }
        mm(a, b) {
        }
        ms(a, b) {
            this.mn(b);
        }
        mi(a, b) {
            this.mk(b);
        }
        m0() {
            if (this.k4 != null) {
                return this.k4;
            }
            return this.k6;
        }
        m1() {
            if (this.k5 != null) {
                return this.k5;
            }
            return this.k9;
        }
        mk(a) {
            if (a.oldItems != null) {
                for (let b of fromEn(a.oldItems)) {
                    b.renderRequested = delegateRemove(b.renderRequested, runOn(this, this.mj));
                }
            }
            if (a.newItems != null) {
                for (let c of fromEn(a.newItems)) {
                    c.renderRequested = delegateCombine(c.renderRequested, runOn(this, this.mj));
                }
            }
            this.je(true);
        }
        mn(a) {
            if (a.oldItems != null) {
                for (let b of fromEn(a.oldItems)) {
                    b.renderRequested = delegateRemove(b.renderRequested, runOn(this, this.mt));
                }
            }
            if (a.newItems != null) {
                for (let c of fromEn(a.newItems)) {
                    c.renderRequested = delegateCombine(c.renderRequested, runOn(this, this.mt));
                }
            }
            this.je(true);
        }
        ju(a, b) {
            this.je(false);
        }
        jt(a, b) {
            this.je(true);
        }
        jf(a) {
            super.jf(a);
            if (this.cc(this.bi)) {
                return;
            }
            if (this.da(a) && !this.de) {
                let b = this.l3;
                if (this.ca()) {
                    if (this.bt.g) {
                        this.bt.t();
                    }
                    this.l3 = this.l4;
                    this.l4 = b;
                }
                else {
                    this.l3 = this.l2;
                    this.l2 = b;
                }
                this.mo(this.l2, this.bi);
                this.jm();
            }
            else {
                if (!this.de) {
                    this.mo(this.l2, this.bi);
                }
                this.mr(this.l2, this.bi);
            }
        }
        get_cj() {
            return true;
        }
        mo(a, b) {
        }
        mr(a, b) {
            this.l1.by();
        }
        mh(a) {
            let b = { $type: Point_$type, x: this.m2.x, y: this.m2.y };
            if (a.isVertical) {
                if (isNaN_(this.m2.y)) {
                    return new Tuple$2(Boolean_$type, Point_$type, false, b);
                }
                if (isNaN_(this.m2.x)) {
                    b.x = 0;
                    return new Tuple$2(Boolean_$type, Point_$type, true, b);
                }
            }
            else {
                if (isNaN_(this.m2.x)) {
                    return new Tuple$2(Boolean_$type, Point_$type, false, b);
                }
                if (isNaN_(this.m2.y)) {
                    b.y = 0;
                    return new Tuple$2(Boolean_$type, Point_$type, true, b);
                }
            }
            return new Tuple$2(Boolean_$type, Point_$type, true, b);
        }
        iq(a) {
            super.iq(a);
            if (isNaN_(this.m4.x) && isNaN_(this.m4.y)) {
                if (isNaN_(a.x) && isNaN_(a.y)) {
                    this.l1.bx();
                    return;
                }
                else {
                    this.l1.bz();
                    this.m2 = a;
                }
            }
            else {
                this.l1.bz();
                this.m2 = this.m4;
            }
            this.je(true);
        }
        dw(a, b, c) {
            let d = super.dw(a, b, c);
            if (!this.bi.q()) {
                return d = false;
            }
            return d;
        }
        get_ds() {
            return this.ma;
        }
        get ma() {
            return this.l5;
        }
        set ma(a) {
            let b = this.l5;
            this.l5 = a;
            this.raisePropertyChanged("ShouldRenderAsOverlay", b, this.l5);
        }
    }
    AnnotationLayer.$t = /*@__PURE__*/ markType(AnnotationLayer, 'AnnotationLayer', Series.$);
    AnnotationLayer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, AnnotationLayer, 'raisePropertyChanged', ['CursorPosition:m3:mw', [Point_$type, { $type: Point_$type, x: NaN, y: NaN }], 'IsDefaultCrosshairDisabled:l6:mx', [0, true], 'UseIndex:mb:my', [0, false], 'UseLegend:mc:mz', [0, false]]);
    return AnnotationLayer;
})();
/**
 * @hidden
 */
export let AnnotationLayerView = /*@__PURE__*/ (() => {
    class AnnotationLayerView extends SeriesView {
        constructor(a) {
            super(a);
            this.bu = null;
            this.bv = false;
            this.bw = -1;
            this.bu = a;
        }
        b0() {
            if (this.bv) {
                this.bv = false;
                this.bw = -1;
                this.bu.m2 = { $type: Point_$type, x: NaN, y: NaN };
                this.bu.je(true);
            }
        }
        bx() {
            this.bv = true;
            if (this.e.e4 != null) {
                this.e.e4.setTimeout(runOn(this, this.b0), 300);
            }
            else {
                this.bw = window.setTimeout(runOn(this, this.b0), 300);
            }
        }
        bz() {
            if (this.bv == true) {
                this.bv = false;
                if (this.bw != -1) {
                    window.clearTimeout(this.bw);
                    this.bw = -1;
                }
            }
        }
        by() {
            this.an();
        }
    }
    AnnotationLayerView.$t = /*@__PURE__*/ markType(AnnotationLayerView, 'AnnotationLayerView', SeriesView.$);
    return AnnotationLayerView;
})();
//# sourceMappingURL=AnnotationLayer_combined.js.map
