import { IgPoint } from "igniteui-react-core";
import { IgrAxis } from "./igr-axis";
import { IgrSeries, IIgrSeriesProps } from "./igr-series";
import { ValueOverlay } from "./ValueOverlay";
/**
 * Represents the class of the value overlay. The value overlay is a line or circle representing a value on an axis.
*/
export declare class IgrValueOverlay extends IgrSeries<IIgrValueOverlayProps> {
    protected createImplementation(): ValueOverlay;
    /**
                                 * @hidden
                                 */
    readonly i: ValueOverlay;
    constructor(props: IIgrValueOverlayProps);
    /**
     * Gets or sets the axis used by the value overlay.
    */
    axis: IgrAxis;
    private _axisName;
    /**
    * Gets or sets the name to use to resolve axis from markup.
    */
    axisName: string;
    /**
     * Gets or sets the value of the overlay.
    */
    value: number;
    /**
     * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.
    */
    isAxisAnnotationEnabled: boolean;
    /**
     * Sets or gets a function which takes an object that produces a formatted label for the axis annotation.
    */
    axisAnnotationFormatLabel: (item: any) => string;
    /**
     * Gets or sets the color to use for the axis annotation text. Leave unset for an automatic value.
    */
    axisAnnotationTextColor: string;
    /**
     * Gets or sets the color to use for the axis annotation backing. Leave unset for an automatic value.
    */
    axisAnnotationBackground: string;
    /**
     * Gets or sets the precision to use displaying values for interpolated positions.
    */
    axisAnnotationInterpolatedValuePrecision: number;
    /**
     * Gets or sets the color to use for the axis annotation outline. Leave unset for an automatic value.
    */
    axisAnnotationOutline: string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    axisAnnotationPaddingLeft: number;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    axisAnnotationPaddingTop: number;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    axisAnnotationPaddingRight: number;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    axisAnnotationPaddingBottom: number;
    /**
     * Gets or sets the stroke thickness for the axis annotation backing. Leave unset for an automatic value.
    */
    axisAnnotationStrokeThickness: number;
    /**
     * Gets whether the series is a value overlay.
    */
    readonly isValueOverlay: boolean;
    readonly labelResolved: string;
    bindAxes(axes: IgrAxis[]): void;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    getSeriesValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;
    getSeriesValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;
    /**
     * Gets the item item index associated with the specified world position
    
    * @param world
    */
    getItemIndex(world: IgPoint): number;
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world: IgPoint): any;
    /**
     * Requests that the provided item should be brought into view if possible.
    
    * @param item  * The item to attempt to bring into view.
    */
    scrollIntoView(item: any): boolean;
    /**
     * Gets the label for a data item.
    
    * @param value  * The unscaled value to get a label for.
    */
    getLabel(value: number): string;
}
export interface IIgrValueOverlayProps extends IIgrSeriesProps {
    /**
     * Gets or sets the axis used by the value overlay.
    */
    axis?: IgrAxis;
    /**
    * Gets or sets the name to use to resolve axis from markup.
    */
    axisName?: string;
    /**
     * Gets or sets the value of the overlay.
    */
    value?: number | string;
    /**
     * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.
    */
    isAxisAnnotationEnabled?: boolean | string;
    /**
     * Sets or gets a function which takes an object that produces a formatted label for the axis annotation.
    */
    axisAnnotationFormatLabel?: (item: any) => string;
    /**
     * Gets or sets the color to use for the axis annotation text. Leave unset for an automatic value.
    */
    axisAnnotationTextColor?: string;
    /**
     * Gets or sets the color to use for the axis annotation backing. Leave unset for an automatic value.
    */
    axisAnnotationBackground?: string;
    /**
     * Gets or sets the precision to use displaying values for interpolated positions.
    */
    axisAnnotationInterpolatedValuePrecision?: number | string;
    /**
     * Gets or sets the color to use for the axis annotation outline. Leave unset for an automatic value.
    */
    axisAnnotationOutline?: string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    axisAnnotationPaddingLeft?: number | string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    axisAnnotationPaddingTop?: number | string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    axisAnnotationPaddingRight?: number | string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    axisAnnotationPaddingBottom?: number | string;
    /**
     * Gets or sets the stroke thickness for the axis annotation backing. Leave unset for an automatic value.
    */
    axisAnnotationStrokeThickness?: number | string;
}
