import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { Brush } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { Type, Point } from "igniteui-react-core";
import { CategoryMode } from "./CategoryMode";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { Rect } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { CategoryFrame } from "./CategoryFrame";
import { CategorySeriesView } from "./CategorySeriesView";
import { List$1 } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class WaterfallSeries extends HorizontalAnchoredCategorySeries {
    static $t: Type;
    protected bf(): SeriesView;
    iv(a: SeriesView): void;
    ql: WaterfallSeriesView;
    constructor();
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    protected get_cz(): boolean;
    jj(a: Brush, b: Brush): void;
    qw: Brush;
    la(): Brush;
    qm: number;
    qn: number;
    protected get_nz(): boolean;
    protected i0(a: any, b: string, c: any, d: any): void;
    dh(a: Point, b: boolean): boolean;
    lv(a: Point): Rect;
    private qy;
    protected nk(): CategoryTransitionInMode;
    hw(a: boolean, b: SeriesView): void;
    eg(): number;
    os(a: CategoryFrame, b: CategorySeriesView): void;
    qx: Brush;
    readonly useHighMarkerFidelity: boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class WaterfallSeriesView extends AnchoredCategorySeriesView {
    static $t: Type;
    ap(): void;
    protected c6: WaterfallSeries;
    constructor(a: WaterfallSeries);
    dg(): Rectangle;
    protected c8: List$1<Rectangle>;
    c9(a: Rectangle): void;
    db(a: Rectangle): void;
    da(a: Rectangle): void;
    dc(a: Rectangle, b: number, c: number): void;
    protected z(a: number): any;
    private df;
    protected y(a: number): any;
    protected a3(a: RenderingContext, b: boolean): void;
    c7: Pool$1<Rectangle>;
    ai(a: any): void;
    dd(a: number): Rect;
    de(a: Rectangle): Rect;
}
