import * as React from 'react';
import { HorizontalAlignment } from "igniteui-react-core";
import { VerticalAlignment } from "igniteui-react-core";
import { TreemapNodeStyle } from "./TreemapNodeStyle";
/**
 * Represents a style to apply to a treemap node.
*/
export declare class IgrTreemapNodeStyle<P extends IIgrTreemapNodeStyleProps = IIgrTreemapNodeStyleProps> extends React.Component<P, {}> {
    protected createImplementation(): TreemapNodeStyle;
    protected _implementation: any;
    /**
     * @hidden
     */
    readonly i: TreemapNodeStyle; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrTreemapNodeStyle;
    private onImplementationCreated;
    constructor(props: P);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): any;
    /**
     * Gets or sets the background to use for the header when it is hovered.
    */
    headerHoverBackground: string;
    /**
     * Gets or sets the background to use for the header.
    */
    headerBackground: string;
    /**
     * Gets or sets the text color to use for the header.
    */
    headerTextColor: string;
    /**
     * Gets or sets the label to use for the node.
    */
    label: string;
    /**
     * Gets or sets the text color to use for the nodes.
    */
    textColor: string;
    /**
     * Gets or sets the text color to use for the header.
    */
    headerHoverTextColor: string;
    /**
     * Gets or sets the left margin to use for the header.
    */
    headerLabelLeftMargin: number;
    /**
     * Gets or sets the top margin to use for the header.
    */
    headerLabelTopMargin: number;
    /**
     * Gets or sets the right margin to use for the header.
    */
    headerLabelRightMargin: number;
    /**
     * Gets or sets the bottom margin to use for the labels.
    */
    headerLabelBottomMargin: number;
    /**
     * Gets or sets the left margin to use for the labels.
    */
    labelLeftMargin: number;
    /**
     * Gets or sets the top margin to use for the labels.
    */
    labelTopMargin: number;
    /**
     * Gets or sets the right margin to use for the labels.
    */
    labelRightMargin: number;
    /**
     * Gets or sets the bottom margin to use for the labels.
    */
    labelBottomMargin: number;
    /**
     * Gets or sets the height to use for the header.
    */
    headerHeight: number;
    /**
     * Gets or sets the horizontal alignment to use for the node labels.
    */
    labelHorizontalAlignment: HorizontalAlignment;
    /**
     * Gets or sets the vertical alignment to use for the node labels.
    */
    labelVerticalAlignment: VerticalAlignment;
    /**
     * Gets or sets the fill color to use for the nodes.
    */
    fill: string;
    /**
     * Gets or sets the outline to use for the nodes.
    */
    outline: string;
    /**
     * Gets or sets the stroke thickness to use for the node outline.
    */
    strokeThickness: number;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
}
export interface IIgrTreemapNodeStyleProps {
    /**
     * Gets or sets the background to use for the header when it is hovered.
    */
    headerHoverBackground?: string;
    /**
     * Gets or sets the background to use for the header.
    */
    headerBackground?: string;
    /**
     * Gets or sets the text color to use for the header.
    */
    headerTextColor?: string;
    /**
     * Gets or sets the label to use for the node.
    */
    label?: string;
    /**
     * Gets or sets the text color to use for the nodes.
    */
    textColor?: string;
    /**
     * Gets or sets the text color to use for the header.
    */
    headerHoverTextColor?: string;
    /**
     * Gets or sets the left margin to use for the header.
    */
    headerLabelLeftMargin?: number | string;
    /**
     * Gets or sets the top margin to use for the header.
    */
    headerLabelTopMargin?: number | string;
    /**
     * Gets or sets the right margin to use for the header.
    */
    headerLabelRightMargin?: number | string;
    /**
     * Gets or sets the bottom margin to use for the labels.
    */
    headerLabelBottomMargin?: number | string;
    /**
     * Gets or sets the left margin to use for the labels.
    */
    labelLeftMargin?: number | string;
    /**
     * Gets or sets the top margin to use for the labels.
    */
    labelTopMargin?: number | string;
    /**
     * Gets or sets the right margin to use for the labels.
    */
    labelRightMargin?: number | string;
    /**
     * Gets or sets the bottom margin to use for the labels.
    */
    labelBottomMargin?: number | string;
    /**
     * Gets or sets the height to use for the header.
    */
    headerHeight?: number | string;
    /**
     * Gets or sets the horizontal alignment to use for the node labels.
    */
    labelHorizontalAlignment?: HorizontalAlignment | string;
    /**
     * Gets or sets the vertical alignment to use for the node labels.
    */
    labelVerticalAlignment?: VerticalAlignment | string;
    /**
     * Gets or sets the fill color to use for the nodes.
    */
    fill?: string;
    /**
     * Gets or sets the outline to use for the nodes.
    */
    outline?: string;
    /**
     * Gets or sets the stroke thickness to use for the node outline.
    */
    strokeThickness?: number | string;
}
