/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { MarkerSeries } from "./MarkerSeries";
import { ISupportsErrorBars_$type } from "./ISupportsErrorBars";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { ScatterAxisInfoCache } from "./ScatterAxisInfoCache";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Series } from "./Series";
import { TrendLineType_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { ScatterErrorBarSettings } from "./ScatterErrorBarSettings";
import { ScatterFrame } from "./ScatterFrame";
import { Base, enumGetBox, Number_$type, typeCast, fromEnum, Point_$type, markType, markDep, PointUtil, runOn } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { Dictionary$2 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { ErrorBarsHelper } from "./ErrorBarsHelper";
import { PathGeometry } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { DataTemplateMeasureInfo } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let ScatterBase = /*@__PURE__*/ (() => {
    class ScatterBase extends MarkerSeries {
        constructor() {
            super();
            this.m8 = null;
            this.ng = null;
            this.ni = null;
            this.oz = null;
            this.o0 = null;
            this.nd = null;
            this.nf = null;
            this.nc = null;
            this.ne = null;
            this.nb = null;
            this.ne = new ScatterFrame();
            this.o0 = Rect.empty;
            this.oz = Rect.empty;
        }
        bf() {
            return new ScatterBaseView(this);
        }
        hu() {
            super.hu();
            this.xAxis = null;
            this.yAxis = null;
        }
        iv(a) {
            super.iv(a);
            this.m9 = a;
        }
        get_c4() {
            return true;
        }
        ag() {
            return [this.xAxis, this.yAxis];
        }
        fs(a, b) {
            let c = this.gv(b);
            if (c == ScatterBase.$$p[4]) {
                return this.ft(a, b, this.nv);
            }
            if (c == ScatterBase.$$p[6]) {
                return this.ft(a, b, this.nz);
            }
            return null;
        }
        ch(a, b, c) {
            if (!this.hasMarkers) {
                return false;
            }
            let d = this.xAxis;
            let e = new ScalerParams(1, this.bs.mr, this.lz, d.ca);
            e.c = this.getEffectiveViewport1(this.bi);
            let f = this.yAxis;
            let g = new ScalerParams(1, this.bs.mr, this.lz, f.ca);
            g.c = this.getEffectiveViewport1(this.bi);
            a.clear();
            this.l1.cc((h) => {
                if (h._visibility == 0) {
                    let i = new SeriesPointOfInterest();
                    let j = h.n;
                    let k = h.o;
                    if (j < this.lz.left || j > this.lz.right || k < this.lz.top || k > this.lz.bottom) {
                        return;
                    }
                    i.b = d.d1(j, e);
                    i.c = f.d1(k, g);
                    i.a = h.content;
                    a.add(i);
                }
            });
            return true;
        }
        bd() {
            if (this.be == 0) {
                if (this.no <= 2000) {
                    return 1;
                }
                else {
                    return super.bd();
                }
            }
            else {
                return super.bd();
            }
        }
        lx(a) {
            if (!this.hasMarkers || !this.l4()) {
                return Rect.empty;
            }
            let b = this.l1.bv(this.lh(a));
            if (b != null) {
                return this.l1.cm(b);
            }
            return Rect.empty;
        }
        dh(a, b) {
            if (this.l5(a, b)) {
                return true;
            }
            return false;
        }
        get nh() {
            return this.ng;
        }
        set nh(a) {
            if (this.ng != a) {
                let b = this.nh;
                this.ng = a;
                this.raisePropertyChanged("XColumn", b, this.nh);
            }
        }
        get nj() {
            return this.ni;
        }
        set nj(a) {
            if (this.ni != a) {
                let b = this.nj;
                this.ni = a;
                this.raisePropertyChanged("YColumn", b, this.nj);
            }
        }
        get ow() {
            return this.c(ScatterBase.oh);
        }
        set ow(a) {
            this.h(ScatterBase.oh, a);
        }
        get GetErrorBarsXAxis() {
            return this.xAxis;
        }
        get GetErrorBarsYAxis() {
            return this.yAxis;
        }
        ic() {
            super.ic();
            if (this.xAxis != null) {
                this.xAxis.hb(false);
            }
            if (this.yAxis != null) {
                this.yAxis.hb(false);
            }
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            if (this.m9.ct.g$b(a, b, c, d)) {
                this.je(false);
                this.il();
            }
            switch (b) {
                case "FastItemsSource":
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.nh);
                        c.deregisterColumn(this.nj);
                        this.nh = null;
                        this.nj = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.nh = this.bw(this.nv);
                        this.nj = this.bw(this.nz);
                    }
                    if ((this.yAxis != null && !this.yAxis.cn()) || (this.xAxis != null && !this.xAxis.cn())) {
                        this.je(false);
                    }
                    break;
                case ScatterBase.$$p[3]:
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.ck(this);
                    }
                    if ((this.xAxis != null && !this.xAxis.cn()) || (d == null && c != null)) {
                        this.je(false);
                    }
                    this.il();
                    break;
                case ScatterBase.$$p[5]:
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.ck(this);
                    }
                    if ((this.yAxis != null && !this.yAxis.cn()) || (d == null && c != null)) {
                        this.je(false);
                    }
                    this.il();
                    break;
                case ScatterBase.$$p[4]:
                    if (this.bz != null) {
                        this.bz.deregisterColumn(this.nh);
                        this.nh = this.bw(this.nv);
                    }
                    break;
                case "XColumn":
                    this.m9.ct.g$i();
                    if (this.xAxis != null && !this.xAxis.cn()) {
                        this.je(false);
                    }
                    break;
                case ScatterBase.$$p[6]:
                    if (this.bz != null) {
                        this.bz.deregisterColumn(this.nj);
                        this.nj = this.bw(this.nz);
                    }
                    break;
                case "YColumn":
                    this.m9.ct.g$i();
                    if (this.yAxis != null && !this.yAxis.cn()) {
                        this.je(false);
                    }
                    break;
                case ScatterBase.$$p[1]:
                    this.je(false);
                    this.il();
                    break;
                case ScatterBase.$$p[2]:
                    this.je(false);
                    this.il();
                    break;
                case "TransitionProgress":
                    this.nf.c(this.ez, this.nd, this.nc);
                    this.n1();
                    try {
                        if (this.cc(this.bi)) {
                            return;
                        }
                        if ((Math.round(this.ez * 100000) / 100000) == 1) {
                            this.of(this.nc, this.m9);
                        }
                        else {
                            this.of(this.nf, this.m9);
                        }
                        if (this.bs != null) {
                            this.bs.jk(this);
                        }
                    }
                    finally {
                        this.og();
                    }
                    break;
                case "TrendLineBrush":
                    this.jp();
                    break;
                case ScatterBase.$$p[0]:
                    if (this.na != null) {
                        this.na.r = this;
                    }
                    this.je(false);
                    this.il();
                    break;
                case "TrendLineType":
                    this.il();
                    break;
            }
        }
        nl(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        nk(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        og() {
            this.oz = Rect.empty;
            this.o0 = Rect.empty;
        }
        n1() {
            let a = this.getViewInfo(this.oz, this.o0);
            this.oz = a.p0;
            this.o0 = a.p1;
        }
        nm(a, b) {
            if (b != 3) {
                return true;
            }
            if (a == null) {
                return true;
            }
            if (this.nv == a || this.nz == a) {
                return true;
            }
            return false;
        }
        hz(a, b, c, d) {
            let e = false;
            if (!this.nm(d, a)) {
                return;
            }
            this.m9.ct.g$e(a, b, c, d);
            if (this.xAxis != null && !this.xAxis.cn()) {
                e = true;
            }
            if (this.yAxis != null && !this.yAxis.cn()) {
                e = true;
            }
            if (e) {
                this.je(true);
            }
        }
        n9(a) {
            this.oa(a, null);
        }
        oa(a, b) {
            let c = this.nh != null ? this.nh.count : 0;
            let d = this.nj != null ? this.nj.count : 0;
            let e = Math.min(c, d);
            if (e <= this.no) {
                a.m.clear();
                let f = new List$1(OwnedPoint.$, 0);
                for (let g of fromEnum(a.u.values)) {
                    f.add(g);
                }
                let h = this.bz;
                f.aa((i, j) => {
                    let k = h.indexOf(i.a);
                    let l = h.indexOf(j.a);
                    if (k < l) {
                        return -1;
                    }
                    if (k > l) {
                        return 1;
                    }
                    return 0;
                });
                if (b != null) {
                    b.i = a.m;
                }
                for (let i of fromEnum(f)) {
                    if (h.indexOf(i.a) >= 0) {
                        if (b != null) {
                            b.j(i.c);
                        }
                        else {
                            a.m.add({ $type: Point_$type, x: i.c.x, y: i.c.y });
                        }
                    }
                }
            }
        }
        an(a) {
            if (a != null && a == this.xAxis && this.nh != null) {
                return new AxisRange(this.nh.minimum, this.nh.maximum);
            }
            if (a != null && a == this.yAxis && this.nj != null) {
                return new AxisRange(this.nj.minimum, this.nj.maximum);
            }
            return null;
        }
        fp(a) {
            return null;
        }
        e8(a) {
            return -1;
        }
        c9(a) {
            let b = this.bs != null ? this.bs.mr : Rect.empty;
            b = b.copy();
            let c = this.bs != null ? this.bs.m5 : Rect.empty;
            let d = new Rect(0, 0, 0, 1, 1);
            let e = this.lt(this.bi);
            let f = new ScalerParams(0, d, d, this.xAxis.ca, e);
            let g = ((() => {
                let $ret = new ScalerParams(0, d, d, this.yAxis.ca, e);
                $ret.b = this.eh();
                return $ret;
            })());
            let h = !b.isEmpty && !c.isEmpty && this.bz != null ? this.bz.indexOf(a) : -1;
            let i = this.xAxis != null && this.nh != null && h < this.nh.count ? this.xAxis.dy(this.nh.item(h), f) : NaN;
            let j = this.yAxis != null && this.nj != null && h < this.nj.count ? this.yAxis.dy(this.nj.item(h), g) : NaN;
            if (!isNaN_(i)) {
                if (i < b.left + 0.1 * b.width) {
                    i = i + 0.4 * b.width;
                    b.x = i - 0.5 * b.width;
                }
                if (i > b.right - 0.1 * b.width) {
                    i = i - 0.4 * b.width;
                    b.x = i - 0.5 * b.width;
                }
            }
            if (!isNaN_(j)) {
                if (j < b.top + 0.1 * b.height) {
                    j = j + 0.4 * b.height;
                    b.y = j - 0.5 * b.height;
                }
                if (j > b.bottom - 0.1 * b.height) {
                    j = j - 0.4 * b.height;
                    b.y = j - 0.5 * b.height;
                }
            }
            if (this.bn != null) {
                this.bn.ap(this.bs, b, true);
            }
            return h >= 0;
        }
        jt(a, b) {
            this.je(false);
        }
        ju(a, b) {
            this.je(false);
        }
        n2(a, b, c, d, e) {
            b.g = new Dictionary$2(Base.$, OwnedPoint.$, 1, c);
            let f = this.getEffectiveViewport1(a);
            let g = this.bz;
            let h;
            let i;
            let j = ((() => {
                let $ret = new ScalerParams(0, d, e, this.m8.d, f);
                $ret.c = this.getEffectiveViewport1(a);
                return $ret;
            })());
            let k = ((() => {
                let $ret = new ScalerParams(0, d, e, this.m8.e, f);
                $ret.c = this.getEffectiveViewport1(a);
                $ret.b = this.eh();
                return $ret;
            })());
            for (let l = 0; l < c; l++) {
                h = this.nh.item(l);
                i = this.nj.item(l);
                let m = { $type: Point_$type, x: this.m8.a.dy(h, j), y: this.m8.b.dy(i, k) };
                if (!isInfinity(m.x) && !isInfinity(m.y)) {
                    let n = g.item(l);
                    if (!b.g.containsKey(n)) {
                        let o = { $type: Point_$type, x: h, y: i };
                        let p = { $type: Point_$type, x: m.x, y: m.y };
                        b.g.addItem(n, ((() => {
                            let $ret = new OwnedPoint();
                            $ret.a = n;
                            $ret.b = o;
                            $ret.c = p;
                            return $ret;
                        })()));
                    }
                }
            }
        }
        n6(a, b) {
            a.j.clear();
            a.n.clear();
            a.h.clear();
            a.l.clear();
            a.i.clear();
            a.k.clear();
            let c = Math.min(this.nh != null ? this.nh.count : 0, this.nj != null ? this.nj.count : 0);
            let d = b.bs;
            let e = b.br;
            let f = this.getEffectiveViewport1(b);
            let g = new ScalerParams(0, d, e, this.xAxis.ca, f);
            g.c = this.getEffectiveViewport1(b);
            let h = ((() => {
                let $ret = new ScalerParams(0, d, e, this.yAxis.ca, f);
                $ret.b = this.eh();
                return $ret;
            })());
            ;
            h.c = this.getEffectiveViewport1(b);
            if (c < 1) {
                return;
            }
            this.m8 = ((() => {
                let $ret = new ScatterAxisInfoCache();
                $ret.a = this.xAxis;
                $ret.b = this.yAxis;
                $ret.d = this.xAxis.ca;
                $ret.e = this.yAxis.ca;
                $ret.c = this.bz;
                return $ret;
            })());
            let i = b;
            if (c <= this.no) {
                this.n2(i, a, c, d, e);
            }
            if (this.l4()) {
                b.cr.l(a.j, this.no, d, e, this.eu);
            }
            let j = ((() => {
                let $ret = new Clipper(0, e, false);
                $ret.i = a.n;
                return $ret;
            })());
            let k = this.lr(b);
            let l = this.xAxis.d1(k.left, g);
            let m = this.xAxis.d1(k.right, g);
            b.ct.p(a.n, this.trendLineType, this.nh, this.nj, this.trendLinePeriod, (n) => this.xAxis.dy(n, g), (n) => this.yAxis.dy(n, h), ((() => {
                let $ret = new TrendResolutionParams();
                $ret.b = this.eu;
                $ret.f = e;
                $ret.g = d;
                return $ret;
            })()), j, l, m);
            this.n4(a, b);
        }
        hw(a, b) {
            super.hw(a, b);
            let c = b;
            c.c0(a);
        }
        of(a, b) {
            let c = b.br;
            this.m8 = ((() => {
                let $ret = new ScatterAxisInfoCache();
                $ret.a = this.xAxis;
                $ret.b = this.yAxis;
                $ret.d = this.xAxis.ca;
                $ret.e = this.yAxis.ca;
                return $ret;
            })());
            if (this.l4()) {
                b.cr.j(a.j, this.l6);
            }
            b.cj();
            let d = ((() => {
                let $ret = new Clipper(1, NaN, c.bottom, NaN, c.top, false);
                $ret.i = b.ct.g$j.ak;
                return $ret;
            })());
            b.ct.g$h(a.n, d);
            this.oc(a, b);
        }
        n4(a, b) {
            let c = new ErrorBarsHelper(this, b);
            if (this.na == null) {
                return;
            }
            let d = this.na.u;
            let e = this.na.v;
            let f = 0;
            let g = 0;
            let h = 0;
            let i = 0;
            for (let j of fromEnum(a.j.keys)) {
                let k = a.j.item(j);
                if (d != null) {
                    switch (d.getCalculatorType()) {
                        case 1:
                            let l = this.n7(k, c, d, h, i, true);
                            h = l.p3;
                            i = l.p4;
                            break;
                        case 0:
                            let m = this.n5(k, c, d, h, i, true);
                            h = m.p3;
                            i = m.p4;
                            break;
                        case 2:
                            let n = this.n3(k, c, d, j, h, i, true);
                            h = n.p4;
                            i = n.p5;
                            break;
                        case 3:
                            let o = this.n8(c, d, f, h, i, true);
                            f = o.p2;
                            h = o.p3;
                            i = o.p4;
                            break;
                        case 4:
                            let p = this.n5(k, c, d, h, i, true);
                            h = p.p3;
                            i = p.p4;
                            break;
                    }
                    ;
                    let q = new OwnedPoint();
                    q.c = c.l(d, this.m8.a, k.c, f);
                    ;
                    q.a = k.a;
                    a.h.addItem(j, q);
                    a.i.addItem(j, [h, i]);
                }
                if (e != null) {
                    switch (e.getCalculatorType()) {
                        case 1:
                            let r = this.n7(k, c, e, h, i, false);
                            h = r.p3;
                            i = r.p4;
                            break;
                        case 0:
                            let s = this.n5(k, c, e, h, i, false);
                            h = s.p3;
                            i = s.p4;
                            break;
                        case 2:
                            let t = this.n3(k, c, e, j, h, i, false);
                            h = t.p4;
                            i = t.p5;
                            break;
                        case 3:
                            let u = this.n8(c, e, g, h, i, false);
                            g = u.p2;
                            h = u.p3;
                            i = u.p4;
                            break;
                        case 4:
                            let v = this.n5(k, c, e, h, i, false);
                            h = v.p3;
                            i = v.p4;
                            break;
                    }
                    ;
                    let w = new OwnedPoint();
                    w.c = c.m(e, this.m8.b, k.c, g);
                    ;
                    w.a = k.a;
                    a.l.addItem(j, w);
                    a.k.addItem(j, [h, i]);
                }
            }
        }
        n7(a, b, c, d, e, f) {
            if (f) {
                let g;
                let h, i;
                i = this.m8.a;
                if (this.na.s == 0) {
                    g = a.c.x;
                    h = this.m8.a;
                }
                else {
                    g = a.c.y;
                    h = this.m8.b;
                }
                let j = b.f(g, c, h, i, d, e);
                d = j.p4;
                e = j.p5;
            }
            else {
                let k;
                let l, m;
                m = this.m8.b;
                if (this.na.t == 0) {
                    k = a.c.x;
                    l = this.m8.a;
                }
                else {
                    k = a.c.y;
                    l = this.m8.b;
                }
                let n = b.f(k, c, l, m, d, e);
                d = n.p4;
                e = n.p5;
            }
            return {
                p3: d,
                p4: e
            };
        }
        n5(a, b, c, d, e, f) {
            if (f) {
                let g = b.j(a.c.x, c, this.m8.a, d, e);
                d = g.p3;
                e = g.p4;
            }
            else {
                let h = b.j(a.c.y, c, this.m8.b, d, e);
                d = h.p3;
                e = h.p4;
            }
            return {
                p3: d,
                p4: e
            };
        }
        n3(a, b, c, d, e, f, g) {
            let h = c.getItemColumn();
            let i = this.bz.indexOf(d);
            if (h != null && i < h.count) {
                let j = h.item(i);
                if (g) {
                    let k = b.h(a.c.x, j, this.m8.a, e, f);
                    e = k.p3;
                    f = k.p4;
                }
                else {
                    let l = b.h(a.c.y, j, this.m8.b, e, f);
                    e = l.p3;
                    f = l.p4;
                }
            }
            else {
                e = f = NaN;
            }
            return {
                p4: e,
                p5: f
            };
        }
        n8(a, b, c, d, e, f) {
            let g = a.i(b, c);
            c = g.p1;
            if (f) {
                let h = a.k(c, b, this.m8.a, d, e);
                d = h.p3;
                e = h.p4;
            }
            else {
                let i = a.k(c, b, this.m8.b, d, e);
                d = i.p3;
                e = i.p4;
            }
            return {
                p2: c,
                p3: d,
                p4: e
            };
        }
        oc(a, b) {
            if (!b.l() || this.na == null) {
                b.c1();
                return;
            }
            this.od(a, b);
            this.oe(a, b);
        }
        od(a, b) {
            b.cy();
            let c = new ErrorBarsHelper(this, b);
            let d = new PathGeometry();
            let e = this.na.u;
            for (let f of fromEnum(a.j.keys)) {
                if (e != null && a.i.containsKey(f)) {
                    let g = a.i.item(f)[0];
                    let h = a.i.item(f)[1];
                    if (!isNaN_(g) && !isNaN_(h)) {
                        let i = a.h.item(f).c;
                        if (this.na.o == 1 || this.na.o == 2) {
                            c.d(d, i, g, true);
                        }
                        if (this.na.o == 1 || this.na.o == 3) {
                            c.d(d, i, h, false);
                        }
                    }
                }
            }
            b.c2(d);
        }
        oe(a, b) {
            b.cz();
            let c = new ErrorBarsHelper(this, b);
            let d = new PathGeometry();
            let e = this.na.v;
            for (let f of fromEnum(a.j.keys)) {
                if (e != null && a.k.containsKey(f)) {
                    let g = a.k.item(f)[0];
                    let h = a.k.item(f)[1];
                    if (!isNaN_(g) && !isNaN_(h)) {
                        let i = a.l.item(f).c;
                        if (this.na.p == 1 || this.na.p == 2) {
                            c.e(d, i, g, true);
                        }
                        if (this.na.p == 1 || this.na.p == 3) {
                            c.e(d, i, h, false);
                        }
                    }
                }
            }
        }
        dw(a, b, c) {
            let d = true;
            if (!super.dw(a, b, c) || b.isEmpty || a.isEmpty || this.xAxis == null || this.yAxis == null || this.xAxis.bh == null || this.yAxis.bh == null || this.nh == null || this.nj == null || this.nh.count == 0 || this.nj.count == 0 || this.bz == null || this.bz.count != this.nh.count || this.bz.count != this.nj.count || this.xAxis.bh == null || this.yAxis.bh == null || this.xAxis.kb == this.xAxis.ka || this.yAxis.kb == this.yAxis.ka) {
                d = false;
            }
            return d;
        }
        getViewInfo(a, b) {
            if (!this.oz.isEmpty && !this.o0.isEmpty) {
                a = this.oz;
                b = this.o0;
                return {
                    p0: a,
                    p1: b
                };
            }
            a = this.bi.br;
            b = this.bi.bs;
            return {
                p0: a,
                p1: b
            };
        }
        jf(a) {
            this.n1();
            try {
                if (this.cc(this.bi)) {
                    return;
                }
                if (this.bz != null && this.bz.count > this.no) {
                    a = false;
                }
                if (this.da(a) && !this.de) {
                    let b = this.nd;
                    if (this.ca()) {
                        if (this.bt.g) {
                            this.bt.t();
                        }
                        this.nd = this.nf;
                        this.nf = b;
                    }
                    else {
                        this.nd = this.nc;
                        this.nc = b;
                    }
                    this.n6(this.nc, this.m9);
                    this.jm();
                }
                else {
                    if (!this.de) {
                        this.n6(this.nc, this.m9);
                    }
                    this.of(this.nc, this.m9);
                }
            }
            finally {
                this.og();
            }
        }
        jp() {
            super.jp();
            if (this.fh < 0) {
                return;
            }
            this.m9.c5();
        }
        jg(a, b) {
            super.jg(a, b);
            if (!this.dl) {
                this.bi.az(b);
                return;
            }
            this.bi.az(b);
            if (this.cc(this.bh)) {
                return;
            }
            let c = typeCast(ScatterBaseView.$, this.bh);
            if (!this.df) {
                this.ne = new ScatterFrame();
                this.n6(this.ne, c);
            }
            this.df = false;
            this.of(this.ne, c);
            this.dl = false;
        }
        jd(a, b, c, d, e) {
            super.jd(a, b, c, d, e);
            let f = this.a0.a$h.item(d);
            let g = f;
            f.ay(c);
            if (this.cc(g)) {
                return;
            }
            if (this.nb == null) {
                this.nb = new ScatterFrame();
            }
            this.n6(this.nb, g);
            this.of(this.nb, g);
        }
        ob(a, b) {
            let c = new List$1(Base.$, 0);
            for (let d of fromEnum(b.c)) {
                if (!a.containsKey(d)) {
                    c.add1(d);
                }
            }
            for (let e of fromEnum(c)) {
                b.g(e);
            }
        }
        m4(a, b, c, d, e) {
            if (c == null || c.length != this.m8.c.count) {
                c = new Array(this.m8.c.count);
                for (let f = 0; f < this.m8.c.count; f++) {
                    c[f] = PointUtil.create();
                }
            }
            let g = this.getEffectiveViewport1(a);
            let h = ((() => {
                let $ret = new ScalerParams(0, d, e, this.xAxis.ca, g);
                $ret.c = this.getEffectiveViewport1(a);
                return $ret;
            })());
            let i = ((() => {
                let $ret = new ScalerParams(0, d, e, this.yAxis.ca, g);
                $ret.c = this.getEffectiveViewport1(a);
                $ret.b = this.eh();
                return $ret;
            })());
            let j = this.lr(a);
            let k = this.m8.a.d1(j.left, h);
            let l = this.m8.a.d1(j.right, h);
            let m = this.m8.b.d1(j.bottom, i);
            let n = this.m8.b.d1(j.top, i);
            if (this.m8.d) {
                let o = k;
                k = l;
                l = o;
            }
            if (this.m8.e) {
                let p = m;
                m = n;
                n = p;
            }
            let q = this.m8;
            let r = q.a;
            let s = q.b;
            let t;
            let u;
            let v = this.nh;
            let w = this.nj;
            for (let x = 0; x < this.m8.c.count; x++) {
                t = v.item(x);
                u = w.item(x);
                if (t >= k && t <= l && u >= m && u <= n) {
                    c[x].x = r.dy(t, h);
                    c[x].y = s.dy(u, i);
                }
                else {
                    c[x].x = NaN;
                    c[x].y = NaN;
                }
            }
            return c;
        }
        nn(a, b) {
            if (b == null) {
                b = new List$1(Number_$type, 2, a.e);
            }
            else {
                b.clear();
            }
            let c = 0;
            let d = this.bz;
            for (let e of fromEnum(a.c)) {
                b.add(d.indexOf(e));
            }
            return b;
        }
        h5(a) {
            super.h5(a);
            this.a2.exportTrendlineData(this, a, this.m9.ct.g$j);
        }
        eh() {
            return Series.ei(this.nj, null);
        }
    }
    ScatterBase.$t = /*@__PURE__*/ markType(ScatterBase, 'ScatterBase', MarkerSeries.$, [ISupportsErrorBars_$type, ITrendLineSeries_$type]);
    ScatterBase.oh = /*@__PURE__*/ DependencyProperty.i("ActualTrendLineBrush", Brush.$, ScatterBase.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    ScatterBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ScatterBase, 'raisePropertyChanged', ['ErrorBarSettings:na:oi', [ScatterErrorBarSettings.$, null], 'MarkerCollisionAvoidance:m5:oj', [CollisionAvoidanceType_$type, /*@__PURE__*/ enumGetBox(CollisionAvoidanceType_$type, 0)], 'MaximumMarkers:no:ok', [1, 400], 'XAxis::os', [NumericXAxis.$, null], 'XMemberPath:nv:ot', [2, null], 'YAxis::ou', [NumericYAxis.$, null], 'YMemberPath:nz:ov', [2, null], 'TrendLineType::oq', [TrendLineType_$type, /*@__PURE__*/ enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness::op', [1, 1.5], 'TrendLinePeriod::oo', [1, 7], 'TrendLineBrush::ol', [Brush.$, null], 'TrendLineZIndex:np:or', [1, 1001], 'TrendLineDashArray:ox:om', [DoubleCollection.$], 'TrendLineDashCap:oy:on', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)]]);
    return ScatterBase;
})();
/**
 * @hidden
 */
export let ScatterBaseView = /*@__PURE__*/ (() => {
    class ScatterBaseView extends MarkerSeriesView {
        constructor(a) {
            super(a);
            this.cr = null;
            this.cp = null;
            this.cs = null;
            this.cx = null;
            this.c7 = null;
            this.c8 = null;
            this.ct = null;
            this.c6 = null;
            this.cu = null;
            this.cs = a;
            this.cu = new HashPool$2(Base.$, Marker.$);
            this.ce(this.cu);
            this.ct = new ScatterTrendLineManager();
        }
        ap() {
            super.ap();
            this.cr = this.cq();
            this.c7 = new Path();
            this.c8 = new Path();
            if (!this.n) {
                this.cs.no = 2000;
            }
        }
        c9(a) {
            if (this.c6 == null) {
                this.c6 = new DataTemplateMeasureInfo();
                this.c6.context = this.h.g();
            }
            this.c6.width = a.width;
            this.c6.height = a.height;
            this.c6.data = a.content;
            let b = a.ah;
            if (b.measure != null) {
                b.measure(this.c6);
            }
            return new Size(1, this.c6.width, this.c6.height);
        }
        cq() {
            let a = new NumericMarkerManager(1, (b) => this.cu.item(b), (b) => this.cs.m8.c.item(b), runOn(this, this.c4), runOn(this, this.cn), runOn(this, this.cv), () => this.cs.m5);
            a.q = runOn(this, this.c9);
            return a;
        }
        c4(a) {
            this.cs.ob(a, this.cu);
        }
        cw() {
            return this.b1;
        }
        co() {
            return this.cp;
        }
        cn() {
            this.cp = this.cs.m4(this, this.cu, this.cp, this.bs, this.br);
            return this.cp;
        }
        cv() {
            this.cx = this.cs.nn(this.cu, this.cx);
            return this.cx;
        }
        cy() {
        }
        c2(a) {
        }
        cz() {
        }
        c3(a) {
        }
        c5() {
            if (this.cs.trendLineBrush != null) {
                this.cs.ow = this.cs.trendLineBrush;
            }
            else {
                this.cs.ow = this.cs.k4;
            }
        }
        cc(a) {
            this.cu.f(a);
        }
        c1() {
        }
        a2(a, b) {
            super.a2(a, b);
            if (a.d) {
                if (this.cs.trendLineType != 0 && !b) {
                    let c = this.ct.g$j;
                    c.ac = this.cs.trendLineThickness;
                    c._stroke = this.cs.ow;
                    c.ai = this.cs.ox;
                    c.ad = this.cs.oy;
                    a.u(c);
                }
            }
        }
        c0(a) {
            if (a) {
                this.c1();
                this.cu.clear();
            }
            this.ct.g$d();
            this.an();
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'><span";
            let b = this.e.a0.a$q(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.cs.fx + "</span><br/><span>" + "x: </span><span class='ui-priority-primary'>${item." + this.cs.nv + "}</span><br/><span>" + "y: </span><span class='ui-priority-primary'>${item." + this.cs.nz + "}</span></div>";
            return a;
        }
    }
    ScatterBaseView.$t = /*@__PURE__*/ markType(ScatterBaseView, 'ScatterBaseView', MarkerSeriesView.$);
    return ScatterBaseView;
})();
//# sourceMappingURL=ScatterBase_combined.js.map
