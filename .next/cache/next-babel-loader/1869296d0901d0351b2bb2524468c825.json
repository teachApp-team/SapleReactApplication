{"ast":null,"code":"import { loadGetInitialProps } from 'next/dist/next-server/lib/utils';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nconst initial = {\n  message: 'START',\n  count: 0,\n  data: [{\n    English: 'apple',\n    Japanese: 'りんご'\n  }, {\n    English: 'banana',\n    Japanese: 'バナナ'\n  }, {\n    English: 'chocolate',\n    Japanese: 'チョコレート'\n  }, {\n    English: 'red',\n    Japanese: '赤'\n  }, {\n    English: 'white',\n    Japanese: '白'\n  }],\n  redult: 0\n};\n\nfunction counterReducer(state = initial, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return {\n        message: 'INCREMENT',\n        count: state.count + 1\n      };\n\n    case 'DECREMENT':\n      return {\n        message: 'DECREMENT',\n        count: state.count - 1\n      };\n\n    case 'RESET':\n      return {\n        message: 'RESET',\n        count: initial.count\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport function initStore(state = initial) {\n  return createStore(counterReducer, state, applyMiddleware(thunkMiddleware));\n}","map":{"version":3,"sources":["/Users/fujitakosuke/Projects/TanngoNext/tanngo_app/store.js"],"names":["loadGetInitialProps","createStore","applyMiddleware","thunkMiddleware","initial","message","count","data","English","Japanese","redult","counterReducer","state","action","type","initStore"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,iCAApC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,OAAO,EAAC,OADM;AAEdC,EAAAA,KAAK,EAAE,CAFO;AAGdC,EAAAA,IAAI,EAAC,CAAC;AAACC,IAAAA,OAAO,EAAC,OAAT;AAAkBC,IAAAA,QAAQ,EAAC;AAA3B,GAAD,EACC;AAACD,IAAAA,OAAO,EAAC,QAAT;AAAmBC,IAAAA,QAAQ,EAAC;AAA5B,GADD,EAEC;AAACD,IAAAA,OAAO,EAAC,WAAT;AAAsBC,IAAAA,QAAQ,EAAC;AAA/B,GAFD,EAGC;AAACD,IAAAA,OAAO,EAAC,KAAT;AAAgBC,IAAAA,QAAQ,EAAC;AAAzB,GAHD,EAIC;AAACD,IAAAA,OAAO,EAAC,OAAT;AAAkBC,IAAAA,QAAQ,EAAC;AAA3B,GAJD,CAHS;AAQRC,EAAAA,MAAM,EAAC;AARC,CAAhB;;AAWA,SAASC,cAAT,CAAyBC,KAAK,GAAGR,OAAjC,EAA0CS,MAA1C,EAAkD;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAO;AACLT,QAAAA,OAAO,EAAC,WADH;AAELC,QAAAA,KAAK,EAACM,KAAK,CAACN,KAAN,GAAc;AAFf,OAAP;;AAIF,SAAK,WAAL;AACE,aAAO;AACLD,QAAAA,OAAO,EAAC,WADH;AAELC,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,GAAa;AAFf,OAAP;;AAIF,SAAK,OAAL;AACE,aAAO;AACLD,QAAAA,OAAO,EAAE,OADJ;AAELC,QAAAA,KAAK,EAACF,OAAO,CAACE;AAFT,OAAP;;AAIF;AACE,aAAOM,KAAP;AAjBJ;AAmBD;;AAED,OAAO,SAASG,SAAT,CAAmBH,KAAK,GAAGR,OAA3B,EAAoC;AACzC,SAAOH,WAAW,CAACU,cAAD,EAAiBC,KAAjB,EAAwBV,eAAe,CAACC,eAAD,CAAvC,CAAlB;AACD","sourcesContent":["import { loadGetInitialProps } from 'next/dist/next-server/lib/utils';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nconst initial = {\n  message:'START',\n  count: 0,\n  data:[{English:'apple', Japanese:'りんご'},\n        {English:'banana', Japanese:'バナナ'},\n        {English:'chocolate', Japanese:'チョコレート'},\n        {English:'red', Japanese:'赤'},\n        {English:'white', Japanese:'白'} ],\n        redult:0\n}\n\nfunction counterReducer (state = initial, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return {\n        message:'INCREMENT',\n        count:state.count + 1\n      };\n    case 'DECREMENT':\n      return {\n        message:'DECREMENT',\n        count: state.count -1\n      };\n    case 'RESET':\n      return {\n        message: 'RESET',\n        count:initial.count\n      };\n    default:\n      return state;\n  }\n}\n\nexport function initStore(state = initial) {\n  return createStore(counterReducer, state, applyMiddleware(thunkMiddleware))\n}\n"]},"metadata":{},"sourceType":"module"}