/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { AnchoredRadialSeries } from "./AnchoredRadialSeries";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Array_$type, Point_$type, runOn, enumGetBox, markType, markDep } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ViewportUtils } from "./ViewportUtils";
import { Path } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { AnchoredRadialSeriesView } from "./AnchoredRadialSeriesView";
/**
 * @hidden
 */
var RadialAreaSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(RadialAreaSeries, _super);
    function RadialAreaSeries() {
        var _this = _super.call(this) || this;
        _this.ab = RadialAreaSeries.$;
        return _this;
    }
    RadialAreaSeries.prototype.bf = function () {
        return new RadialAreaSeriesView(this);
    };
    RadialAreaSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.ou = a;
    };
    RadialAreaSeries.prototype.preferredCategoryMode = function (a) {
        return 0;
    };
    RadialAreaSeries.prototype.hw = function (a, b) {
        _super.prototype.hw.call(this, a, b);
        this.ou.cx();
    };
    RadialAreaSeries.prototype.np = function (a, b) {
        _super.prototype.np.call(this, a, b);
        var c = b.bs;
        var d = b.br;
        var e = b;
        if (b.l() && !c.isEmpty && !d.isEmpty && this.m4 != null && this.m6 != null) {
            var f = a.f;
            var g = f.count;
            var h = new List$1(Array_$type, 2, g);
            var i = 0;
            for (var j = 0; j < g; j++) {
                var k = new Array(4);
                h.add(k);
                k[0] = this.m7.d(a.f._inner[j][0], a.f._inner[j][1], c, d);
                k[1] = this.m7.e(a.f._inner[j][0], a.f._inner[j][1], c, d);
                k[2] = this.m7.d(a.f._inner[j][0], a.f._inner[j][2], c, d);
                var l = a.f._inner[j][2];
                k[3] = this.m7.e(a.f._inner[j][0], l, c, d);
                if (l > i) {
                    i = l;
                }
            }
            var m = ViewportUtils.c(0.5, c, d);
            var n = ViewportUtils.f(0.5, c, d);
            this.ot = { $type: Point_$type, x: m, y: n };
            e.cy(a.f.count, h, false, this.ou.co.b, this.eu, runOn(this, this.of), this.ov);
            e.cz._opacity = this.d6;
            e.c0._opacity = this.d6 * 0.5;
        }
    };
    RadialAreaSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case RadialAreaSeries.$$p[0]:
                this.je(false);
                this.il();
                break;
        }
    };
    RadialAreaSeries.prototype.get_n3 = function () {
        return true;
    };
    RadialAreaSeries.$t = markType(RadialAreaSeries, 'RadialAreaSeries', AnchoredRadialSeries.$);
    RadialAreaSeries.$$p = markDep(DependencyProperty, PropertyMetadata, RadialAreaSeries, 'raisePropertyChanged', ['UnknownValuePlotting:ov:ox', [UnknownValuePlotting_$type, enumGetBox(UnknownValuePlotting_$type, 1)]]);
    return RadialAreaSeries;
}(AnchoredRadialSeries));
export { RadialAreaSeries };
/**
 * @hidden
 */
var RadialAreaSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(RadialAreaSeriesView, _super);
    function RadialAreaSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.cw = null;
        _this.cz = new Path();
        _this.c1 = new Path();
        _this.c0 = new Path();
        _this.c2 = new Path();
        _this.cw = a;
        return _this;
    }
    RadialAreaSeriesView.prototype.ap = function () {
        _super.prototype.ap.call(this);
        if (!this.n) {
            this.e.eu = 4;
            this.e.bj = 1;
        }
    };
    RadialAreaSeriesView.prototype.cx = function () {
        this.cz.ak = null;
        this.c1.ak = null;
        this.c0.ak = null;
        this.c2.ak = null;
        this.an();
    };
    RadialAreaSeriesView.prototype.cy = function (a, b, c, d, e, f, g) {
        this.cs.nv.i(this.cz, this.c1, this.c0, this.c2, a, b, c, d, e, f, g);
        this.an();
    };
    RadialAreaSeriesView.prototype.a8 = function () {
        _super.prototype.a8.call(this);
        this.cz._fill = this.e.k4;
        this.cz._opacity = this.e.d6;
        this.c0._fill = this.e.k4;
        this.c0._opacity = this.e.d6 * 0.5;
        this.c1._stroke = this.e.k5;
        this.c1.ac = this.e.ey;
        this.c1.ai = this.e.lc;
        this.c1.ad = this.e.ld;
        this.c2._stroke = this.e.k5;
        this.c2.ac = this.e.ey;
        this.c2.ai = this.e.lc;
        this.c2.ad = this.e.ld;
    };
    RadialAreaSeriesView.prototype.a9 = function () {
        _super.prototype.a9.call(this);
        var a = this.bl();
        this.c1._stroke = a;
        this.c1.ac = this.e.ey + 3;
        this.c2._stroke = a;
        this.c2.ac = this.e.ey + 3;
        this.cz._fill = a;
        this.cz._opacity = 1;
        this.c0._fill = a;
        this.c0._opacity = 1;
    };
    RadialAreaSeriesView.prototype.a3 = function (a, b) {
        _super.prototype.a3.call(this, a, b);
        if (a.d) {
            a.s(this.cz);
            a.s(this.c0);
            a.s(this.c1);
            a.s(this.c2);
        }
    };
    RadialAreaSeriesView.prototype.ai = function (a) {
        _super.prototype.ai.call(this, a);
        this.e.a2.exportPathData(a, this.c1, "lowerShape", ["Lower"]);
        this.e.a2.exportPathData(a, this.c2, "upperShape", ["Upper", "Main"]);
        this.e.a2.exportPathData(a, this.c0, "translucentShape", ["Translucent"]);
        this.e.a2.exportPathData(a, this.cz, "fillShape", ["Fill"]);
    };
    RadialAreaSeriesView.$t = markType(RadialAreaSeriesView, 'RadialAreaSeriesView', AnchoredRadialSeriesView.$);
    return RadialAreaSeriesView;
}(AnchoredRadialSeriesView));
export { RadialAreaSeriesView };
//# sourceMappingURL=RadialAreaSeries_combined.js.map
