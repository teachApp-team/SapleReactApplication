import * as tslib_1 from "tslib";
import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { ChartHitTestMode_$type } from "./ChartHitTestMode";
import { WindowResponse_$type } from "./WindowResponse";
import { Visibility_$type } from "igniteui-react-core";
import { InteractionState_$type } from "igniteui-react-core";
import { ModifierKeys_$type } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { IgrChartCursorEventArgs } from "./igr-chart-cursor-event-args";
import { IgrDataChartMouseButtonEventArgs } from "./igr-data-chart-mouse-button-event-args";
import { IgrChartMouseEventArgs } from "./igr-chart-mouse-event-args";
import { IgrRectChangedEventArgs } from "igniteui-react-core";
import { IgrRefreshCompletedEventArgs } from "./igr-refresh-completed-event-args";
import { TypeRegistrar } from "igniteui-react-core";
import { NamePatcher, getModifiedProps, isValidProp, fromPoint, toPoint, ensureBool, fromRect, toRect, ensureEnum, brushToString, stringToBrush, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
/**
 * Represents a control for viewing series objects.
*/
var IgrSeriesViewer = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrSeriesViewer, _super);
    function IgrSeriesViewer(props) {
        var _this = _super.call(this, props) || this;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._seriesCursorMouseMove = null;
        _this._seriesCursorMouseMove_wrapped = null;
        _this._seriesMouseLeftButtonDown = null;
        _this._seriesMouseLeftButtonDown_wrapped = null;
        _this._seriesMouseLeftButtonUp = null;
        _this._seriesMouseLeftButtonUp_wrapped = null;
        _this._seriesMouseMove = null;
        _this._seriesMouseMove_wrapped = null;
        _this._seriesMouseEnter = null;
        _this._seriesMouseEnter_wrapped = null;
        _this._seriesMouseLeave = null;
        _this._seriesMouseLeave_wrapped = null;
        _this._windowRectChanged = null;
        _this._windowRectChanged_wrapped = null;
        _this._sizeChanged = null;
        _this._sizeChanged_wrapped = null;
        _this._actualWindowRectChanged = null;
        _this._actualWindowRectChanged_wrapped = null;
        _this._gridAreaRectChanged = null;
        _this._gridAreaRectChanged_wrapped = null;
        _this._refreshCompleted = null;
        _this._refreshCompleted_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._implementation = _this.createImplementation();
        _this._implementation.externalObject = _this;
        _this.onImplementationCreated();
        return _this;
    }
    IgrSeriesViewer.prototype.createImplementation = function () {
        return null;
    };
    Object.defineProperty(IgrSeriesViewer.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: true,
        configurable: true
    });
    IgrSeriesViewer._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    IgrSeriesViewer.prototype.onImplementationCreated = function () {
    };
    IgrSeriesViewer.prototype.componentDidMount = function () {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    IgrSeriesViewer.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_2, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        return true;
    };
    IgrSeriesViewer.prototype.render = function () {
        return null;
    };
    Object.defineProperty(IgrSeriesViewer.prototype, "crosshairPoint", {
        /**
         * Gets or sets the cross hair point (in world coordinates)
         * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
         * case the relevant crosshair line is hidden.
        *
        * The `crosshairPoint` property is used to gets/sets the cross hair point (in world coordinates).
        *
        * ```ts
        * this.chart.crosshairPoint = {x:.8,y:.2};
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	crosshairVisibility="visible"
        *     crosshairPoint={x:.8,y:.2} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrAreaSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value"
        *     brush="Gray"
        *     outline="Black" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return fromPoint(this.i.mj);
        },
        set: function (v) {
            this.i.mj = toPoint(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "animateSeriesWhenAxisRangeChanges", {
        /**
         * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.
        *
        * `animateSeriesWhenAxisRangeChanges` is a Boolean property to override the default behavior in which series do not animate if an axis range changes.
        *
        * ```ts
        * this.chart.animateSeriesWhenAxisRangeChanges = true;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	animateSeriesWhenAxisRangeChanges={true}>
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrColumnSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.cd;
        },
        set: function (v) {
            this.i.cd = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "viewportRect", {
        /**
         * Gets the viewport rectangle associated with the SeriesViewer, the physical dimensions of the plot area.
        */
        get: function () {
            return fromRect(this.i.m5);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "effectiveViewport", {
        /**
         * Gets the EffectiveViewport rectangle, representing the effective viewport area after margins have been subtracted.
        *
        *  ``ts
        * let viewport: IgxRect = this.chart.effectiveViewport;
        *
        * ```
        *
        * ```
        */
        get: function () {
            return fromRect(this.i.mv);
        },
        set: function (v) {
            this.i.mv = toRect(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "contentViewport", {
        /**
         * Represents the subset area within the viewport into which content should be mapped.
         * This is the projection of the current EffectiveViewport into the viewport at current zoom level.
        */
        get: function () {
            return fromRect(this.i.mu);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "windowRect", {
        /**
         * A rectangle representing the portion of the SeriesViewer currently in view.
         * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
        *
        * You can set the `windowRect` to zoom in on an area of interest in the chart.
        *
        * ```ts
        * this.chart.windowRect = {left:0, top:1, width: .5, height: .5};
        * ```
        */
        get: function () {
            return fromRect(this.i.m6);
        },
        set: function (v) {
            this.i.m6 = toRect(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "useTiledZooming", {
        /**
         * Gets or sets whether the series viewer should use cached tiles during zooms rather than the default live content.
        */
        get: function () {
            return this.i.dj;
        },
        set: function (v) {
            this.i.dj = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "preferHigherResolutionTiles", {
        /**
         * Gets or sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
        */
        get: function () {
            return this.i.db;
        },
        set: function (v) {
            this.i.db = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "zoomTileCacheSize", {
        /**
         * Gets or sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
        */
        get: function () {
            return this.i.e6;
        },
        set: function (v) {
            this.i.e6 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "highlightingTransitionDuration", {
        /**
         * Gets or sets the duration the highlighting/de-highlighting effects.
        *
        * The `highlightingTransitionDuration` property is used to set the time for highlighting transition in milliseconds .
        *
        * ```ts
        * chart.HighlightingTransitionDuration=500;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	HighlightingTransitionDuration={500} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrAreaSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value"
        *     brush="Gray"
        *     outline="Black" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.e5;
        },
        set: function (v) {
            this.i.e5 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "isPagePanningAllowed", {
        /**
         * Gets or sets the whether the series viewer can allow the page to pan if a control pan is not possible in the requested direction.
        */
        get: function () {
            return this.i.cy;
        },
        set: function (v) {
            this.i.cy = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "contentHitTestMode", {
        /**
         * Determines the method of hit testing used when mousing over elements in the chart.
        *
        * ```ts
        * this.chart.contentHitTestMode = ChartHitTestMode.Computational;
        * ```
        */
        get: function () {
            return this.i.ap;
        },
        set: function (v) {
            this.i.ap = ensureEnum(ChartHitTestMode_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "actualContentHitTestMode", {
        /**
         * Resolved method of hit testing used when the pointer is over elements in the chart.
        *
        * ```ts
        * let actualContentHitTestMode: ChartHitTestMode  =this.chart.actualContentHitTestMode;
        * ```
        */
        get: function () {
            return this.i.ao;
        },
        set: function (v) {
            this.i.ao = ensureEnum(ChartHitTestMode_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "isSurfaceInteractionDisabled", {
        /**
         * Gets or sets whether all surface interactions with the plot area should be disabled.
        *
        * The `isSurfaceInteractionDisabled` property is used to enable/disable interactions with the plot surface.
        *
        * ```ts
        * chart.isSurfaceInteractionDisabled=true;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	 isSurfaceInteractionDisabled={true} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrAreaSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value"
        *     brush="Gray"
        *     outline="Black" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.cz;
        },
        set: function (v) {
            this.i.cz = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "isMap", {
        /**
         * Indicates if this SeriesViewer is a map.
        */
        get: function () {
            return this.i.cx;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "windowResponse", {
        /**
         * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
        *
        * The `windowResponse` property is used to set the response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.
        * The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
        *
        * ```ts
        * this.chart.windowResponse="deferred";
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	windowResponse="deferred">
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.ba;
        },
        set: function (v) {
            this.i.ba = ensureEnum(WindowResponse_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "windowRectMinWidth", {
        /**
         * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
         * Decrease this value if you want to allow for further zooming into the viewer.
         * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
        *
        * The `windowRectMinWidth` property is used to set or get the minimum width that the window rect is allowed to reach before being clamped.
        *
        * ```ts
        * this.chart.WindowRectMinWidth=".2";
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	WindowRectMinWidth=".2">
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.ex;
        },
        set: function (v) {
            this.i.ex = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "crosshairVisibility", {
        /**
         * Gets or sets the current SeriesViewer's crosshair visibility override.
        *
        * The `crosshairVisibility` property is used to gets or sets the current Chart's crosshair visibility override. Note: setting this property does not affect the mobile browser version of the chart.
        *
        * ```ts
        * this.chart.crosshairVisibility = Visibility.Visible;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	crosshairVisibility="visible"
        *     crosshairPoint={x:.8,y:.2} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrAreaSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value"
        *     brush="Gray"
        *     outline="Black" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.m9;
        },
        set: function (v) {
            this.i.m9 = ensureEnum(Visibility_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "plotAreaBackground", {
        /**
         * Gets or sets the brush used as the background for the current SeriesViewer object's plot area.
        *
        * `plotAreaBackground` property set the background brush to the current Chart object's plot area.
        *
        * ```ts
        * this.chart.plotAreaBackground="#F0F8FF";
        * ```
        *
        * ```ts
        *  <IgrDataChart
        * 	dataSource={this.state.dataSource}
        * 	plotAreaBackground="#F0F8FF" >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return brushToString(this.i.me);
        },
        set: function (v) {
            this.i.me = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "defaultInteraction", {
        /**
         * Gets or sets the DefaultInteraction property.
         * The default interaction state defines the SeriesViewer's response to mouse events.
        *
        * The default interaction state defines the chart's response to mouse events.
        *
        * ```ts
        * this.chart.defaultInteraction = InteractionState.DragPan;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	defaultInteraction="dragPan" >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrAreaSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value"
        *     brush="Gray"
        *     outline="Black" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.bc;
        },
        set: function (v) {
            this.i.bc = ensureEnum(InteractionState_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "rightButtonDefaultInteraction", {
        /**
         * Gets or sets the RightButtonDefaultInteraction property.
         * The default interaction state defines the SeriesViewer's response to right button mouse events.
        */
        get: function () {
            return this.i.be;
        },
        set: function (v) {
            this.i.be = ensureEnum(InteractionState_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "dragModifier", {
        /**
         * Gets or sets the current SeriesViewer's DragModifier property.
        *
        * `dragModifier` is useful to enable zooming when zooming is not the default interaction.
        *
        * ```ts
        * this.chart.dragModifier = ModifierKeys.Alt;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	isHorizontalZoomEnabled=true
        *     defaultInteraction="dragPan"
        *     dragModifier="alt" >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.l1;
        },
        set: function (v) {
            this.i.l1 = ensureEnum(ModifierKeys_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "panModifier", {
        /**
         * Gets or sets the current SeriesViewer's PanModifier property.
        *
        * `panModifier` is useful to enable panning when panning is not the default interaction.
        *
        * ```ts
        * this.chart.panModifier = ModifierKeys.Alt;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        * 	dataSource={this.state.dataSource}
        * 	isHorizontalZoomEnabled=true
        * 	defaultInteraction="dragZoom"
        * 	panModifier="alt" >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.l2;
        },
        set: function (v) {
            this.i.l2 = ensureEnum(ModifierKeys_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "previewRect", {
        /**
         * Gets or sets the preview rectangle.
         * The preview rectangle may be set to Rect.Empty, in which case the visible preview
         * strokePath is hidden.
        *
        * `previewRect` can be used to highlight an area of importance.
        *
        * ```ts
        * this.chart.previewRect = {left:0,top:0,height:.5,width:.5};
        * ```
        */
        get: function () {
            return fromRect(this.i.m1);
        },
        set: function (v) {
            this.i.m1 = toRect(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "windowPositionHorizontal", {
        /**
         * A number between 0 and 1 determining the position of the horizontal scroll.
         * This property is effectively a shortcut to the X position of the WindowRect property.
        *
        * ```ts
        * this.chart.windowPositionHorizontal = .2;
        * ```
        */
        get: function () {
            return this.i.ev;
        },
        set: function (v) {
            this.i.ev = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "windowPositionVertical", {
        /**
         * A number between 0 and 1 determining the position of the vertical scroll.
         * This property is effectively a shortcut to the Y position of the WindowRect property.
        *
        * ```ts
        * this.chart.windowPositionVertical = .2;
        * ```
        */
        get: function () {
            return this.i.ew;
        },
        set: function (v) {
            this.i.ew = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "chartTitle", {
        /**
         * Text to display above the plot area.
        *
        * The `chartTitle` property is used to set the title to display for the component.
        *
        * ```ts
        * this.chart.title="Items Sold";
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	title="Items Sold" >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.gr;
        },
        set: function (v) {
            this.i.gr = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "titleHorizontalAlignment", {
        /**
         * Gets or sets the TitleHorizontalAlignment property.
        *
        * The `subtitleHorizontalAlignment` property is used to set horizontal alignment for the subtitle.
        *
        * ```ts
        * this.chart.titleHorizontalAlignment="left";
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	titleHorizontalAlignment="left"
        *     subtitleHorizontalAlignment="left" >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.l0;
        },
        set: function (v) {
            this.i.l0 = ensureEnum(HorizontalAlignment_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "subtitleHorizontalAlignment", {
        /**
         * Gets or sets the SubtitleHorizontalAlignment property.
        *
        * The `subtitleBottomMargin` property is used to set the horizontal alignment for the subtitle.
        *
        * ```ts
        * this.chart.subtitleHorizontalAlignment="left";
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	subtitleHorizontalAlignment="left"	>
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.lz;
        },
        set: function (v) {
            this.i.lz = ensureEnum(HorizontalAlignment_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "titleTextStyle", {
        /**
         * Font settings for the title.
        */
        get: function () {
            return this.i.gy;
        },
        set: function (v) {
            this.i.gy = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "subtitleTextStyle", {
        /**
         * Font settings for the subtitle.
        */
        get: function () {
            return this.i.gm;
        },
        set: function (v) {
            this.i.gm = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "titleTextColor", {
        /**
         * Gets or sets the Color used for the Title Text.
        *
        * The `titleTextColor` property is used to set the title brush.
        *
        * ```ts
        * this.chart.titleTextColor="blue" ;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	titleTextColor="blue" >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return brushToString(this.i.mh);
        },
        set: function (v) {
            this.i.mh = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "subtitleTextColor", {
        /**
         * Gets or sets the Color used for the Subtitle Text.
        *
        * The `subtitleTextColor` property is used to set the color for the subtitle.
        *
        * ```ts
        * this.chart.subtitleTextColor="blue";
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	title="Date of Sale: 1/1/2018"
        *     subtitleTextColor="blue">
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return brushToString(this.i.mg);
        },
        set: function (v) {
            this.i.mg = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "titleTopMargin", {
        /**
         * Margin applied above the title.
        *
        * The `titleTopMargin` property is used to set the top margin for the title.
        *
        * ```ts
        * this.chart.titleTopMargin=10;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	titleLeftMarging= {10}
        *     titleTopMargin= {10 }
        *     titleRightMargin= {10}
        *     titleBottomMargin= {20}>
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.et;
        },
        set: function (v) {
            this.i.et = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "titleLeftMargin", {
        /**
         * Margin applied to the left of the title.
        *
        * The `titleLeftMarging` property is used to set the left margin for the title.
        *
        * ```ts
        * this.chart.titleLeftMarging=10;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	title="Items Sold"
        *     titleLeftMarging={10}
        *     titleTopMargin={10}
        *     titleRightMargin={10}
        *     titleBottomMargin= {20} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.er;
        },
        set: function (v) {
            this.i.er = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "titleRightMargin", {
        /**
         * Margin applied to the right of the title.
        *
        * The `titleRightMargin` property is used to set the right margin for the title.
        *
        * ```ts
        * this.chart.titleRightMargin=10;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	titleLeftMarging= {10}
        *     titleTopMargin= {10 }
        *     titleRightMargin= {10}
        *     titleBottomMargin= {20} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.es;
        },
        set: function (v) {
            this.i.es = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "titleBottomMargin", {
        /**
         * Margin applied below the title.
        *
        * The `titleBottomMargin` property is used to set the bottom margin for the title.
        *
        * ```ts
        * this.chart.titleBottomMargin=20;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	title="Items Sold"
        * 	titleLeftMarging= {10}
        *     titleTopMargin= {10 }
        *     titleRightMargin= {10}
        *     titleBottomMargin= {20}>
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.eq;
        },
        set: function (v) {
            this.i.eq = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "subtitleTopMargin", {
        /**
         * Margin applied above the subtitle.
        *
        * The `subtitleTopMargin` property is used to set the top margin for the subtitle.
        *
        * ```ts
        * this.chart.subtitleTopMargin =10;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	subtitleLeftMarging= {10}
        *     subtitleTopMargin={10}
        *     subtitleRightMargin={10}
        *     subtitleBottomMargin={20}>
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.ep;
        },
        set: function (v) {
            this.i.ep = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "subtitleLeftMargin", {
        /**
         * Margin applied to the left of the subtitle.
        *
        * The `subtitleLeftMarging` property is used to set the left margin for the subtitle.
        *
        * ```ts
        * this.chart.subtitleLeftMarging=10;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	subtitleLeftMarging= {10}
        *     subtitleTopMargin={10}
        *     subtitleRightMargin={10}
        *     subtitleBottomMargin={20}>
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.en;
        },
        set: function (v) {
            this.i.en = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "subtitleRightMargin", {
        /**
         * Margin applied to the right of the subtitle.
        *
        * The `subTitleRightMargin` property is used to set the right margin for the subtitle.
        *
        * ```ts
        * this.chart.subtitleLeftMarging=10;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	subtitleLeftMarging= {10}
        *     subtitleTopMargin= {10}
        *     subtitleRightMargin={10}
        *     subtitleBottomMargin={20} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.eo;
        },
        set: function (v) {
            this.i.eo = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "subtitleBottomMargin", {
        /**
         * Margin applied below the subtitle.
        *
        * The `subtitleBottomMargin` property is used to set the bottom margin for the subtitle.
        *
        * ```ts
        * this.chart.subtitleBottomMargin = 20;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	 subtitleBottomMargin={20} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.em;
        },
        set: function (v) {
            this.i.em = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "subtitle", {
        /**
         * Gets or sets the Subtitle property.
         * The Title property defines the Subtitle of the chart
        *
        * The `subtitle` property is used to display subtitle for the component.
        *
        * ```ts
        * this.chart.subtitle="Date of Sale: 1/1/2018";
        * ```
        *
        * ```ts
        *  <IgrDataChart
        * 	dataSource={this.state.dataSource}
        * 	subtitle="Date of Sale: 1/1/2018" >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.gf;
        },
        set: function (v) {
            this.i.gf = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "topMargin", {
        /**
         * Sets or gets the top margin to use around the chart content.
        *
        * The `topMargin` property is used to set the top margin.
        *
        * ```ts
        * this.chart.topMargin=30;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	leftMargin= {20}
        *     rightMargin={20}
        *     topMargin={30}
        *     bottomMargin= {20} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.eu;
        },
        set: function (v) {
            this.i.eu = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "leftMargin", {
        /**
         * Sets or gets the left margin to use around the chart content.
        *
        * The `leftMargin` property is used to set the left margin.
        *
        * ```ts
        *  this.chart.leftMargin = 20;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	 leftMargin={20} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value"
        * />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.ej;
        },
        set: function (v) {
            this.i.ej = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "rightMargin", {
        /**
         * Sets or gets the right margin to use around the chart content.
        *
        * The `rightMargin` property is used to set the left margin around the chart content in the canvas.
        *
        * ```ts
        * this.chart.rightMargin=20;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	leftMargin= {20}
        * 	rightMargin={20}
        * 	topMargin={30}
        * 	bottomMargin={20} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.el;
        },
        set: function (v) {
            this.i.el = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "bottomMargin", {
        /**
         * Sets or gets the bottom margin to use around the chart content.
        *
        * The `bottomMargin` property is used to gets/set the bottom margin around the chart content in the canvas.
        *
        * ```ts
        * this.chart.bottomMargin = 50;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	 bottomMargin={50} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrColumnSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value"
        *     brush="Gray"
        *     outline="Black" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.ef;
        },
        set: function (v) {
            this.i.ef = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "autoMarginWidth", {
        /**
         * Sets or gets the automatic width to add when automatically adding margins to the chart.
        *
        * The `autoMarginWidth` propertry is used find the automatic width to add when automatically adding margins to the chart.
        *
        * ```ts
        * this.chart.autoMarginWidth = 50;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	autoMarginWidth={50} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrColumnSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value"
        *     brush="Gray"
        *     outline="Black" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.ee;
        },
        set: function (v) {
            this.i.ee = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "autoMarginHeight", {
        /**
         * Sets or gets the automatic height to add when automatically adding margins to the chart.
        *
        * ```ts
        *  this.chart.autoMarginHeight = 50;
        * ```
        *
        * ```ts
        *  <IgrDataChart
        * 	autoMarginHeight={50}
        *     dataSource={this.state.dataSource} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrAreaSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value"
        *     brush="Gray"
        *     outline="Black" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.ed;
        },
        set: function (v) {
            this.i.ed = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "isAntiAliasingEnabledDuringInteraction", {
        /**
         * Gets or sets the IsAntiAliasingEnabledDuringInteraction property.
        */
        get: function () {
            return this.i.cp;
        },
        set: function (v) {
            this.i.cp = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "pixelScalingRatio", {
        /**
         * Gets or sets the scaling value used to affect the pixel density of the control.
         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
         * to appear blurry.
        */
        get: function () {
            return this.i.ek;
        },
        set: function (v) {
            this.i.ek = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "interactionPixelScalingRatio", {
        /**
         * Method of pixel scaling to use during end user interaction with the chart.
        */
        get: function () {
            return this.i.ei;
        },
        set: function (v) {
            this.i.ei = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "actualPixelScalingRatio", {
        /**
         * Gets the resolved pixel scaling ratio.
        *
        * A higher scaling ratio will produce crisper visuals at the expense of memory. Lower values will cause the control to appear blurry
        *
        * ```ts
        * let actualPixelScalingRatio: number = this.chart.actualPixelScalingRatio;
        * ```
        */
        get: function () {
            return this.i.ea;
        },
        set: function (v) {
            this.i.ea = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "actualInteractionPixelScalingRatio", {
        /**
         * Resolved method of pixel scaling to use during end user interaction with the chart.
        *
        * ```ts
        * let actualInteractionPixelScalingRatio: number = this.chart.actualInteractionPixelScalingRatio;
        * ```
        */
        get: function () {
            return this.i.d9;
        },
        set: function (v) {
            this.i.d9 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "actualWindowRect", {
        /**
         * Gets the actual value of the window rectangle, which represents the current zoom level.
        */
        get: function () {
            return fromRect(this.i.mr);
        },
        set: function (v) {
            this.i.mr = toRect(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "actualWindowPositionHorizontal", {
        /**
         * A number between 0 and 1 determining the position of the horizontal scroll.
         * This property is effectively a shortcut to the Left of the ActualWindowRect property.
        *
        * ```ts
        * let actualWindowPositionHorizontal: number = this.chart.actualWindowPositionHorizontal;
        * ```
        */
        get: function () {
            return this.i.eb;
        },
        set: function (v) {
            this.i.eb = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "actualWindowPositionVertical", {
        /**
         * A number between 0 and 1 determining the position of the vertical scroll.
         * This property is effectively a shortcut to the Top of the ActualWindowRect property.
        *
        * ```ts
        * let actualWindowPositionVertical: number = this.chart.actualWindowPositionVertical;
        * ``
        * ```
        */
        get: function () {
            return this.i.ec;
        },
        set: function (v) {
            this.i.ec = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgrSeriesViewer.prototype.findByName = function (name) {
        if (this.series != null && this.series.findByName && this.series.findByName(name)) {
            return this.series.findByName(name);
        }
        if (this.legend && this.legend.name && this.legend.name == name) {
            return this.legend;
        }
        return null;
    };
    Object.defineProperty(IgrSeriesViewer.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgrSeriesViewer.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrSeriesViewer.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("SeriesViewer");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    /**
     * Hides the active main tooltip, if displayed.
    
    *
    * ```ts
    * this.chart.hideToolTip();
    * ```
    */
    IgrSeriesViewer.prototype.hideToolTip = function () {
        this.i.hp();
    };
    /**
     * Manually starts a tiled zoom if one isn't already running.
    
    */
    IgrSeriesViewer.prototype.startTiledZoomingIfNecessary = function () {
        this.i.j8();
    };
    /**
     * Manually ends a tiled zoom if one is running.
    
    */
    IgrSeriesViewer.prototype.endTiledZoomingIfRunning = function () {
        this.i.hk();
    };
    /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom.
    
    */
    IgrSeriesViewer.prototype.clearTileZoomCache = function () {
        this.i.he();
    };
    /**
     * Resets the zoom level to default.
    
    */
    IgrSeriesViewer.prototype.resetZoom = function () {
        this.i.j2();
    };
    /**
     * Gets actual window scale for horizontal dimension of the control
    
    *
    * ```ts
    * let actualWindowScaleHorizontal: number = chart.getActualWindowScaleHorizontal();
    * ```
    */
    IgrSeriesViewer.prototype.getActualWindowScaleHorizontal = function () {
        var iv = this.i.eg();
        return (iv);
    };
    /**
     * Gets actual window scale for vertical dimension of the control
    
    *
    * ```ts
    * let actualWindowScaleVertical: number = chart.getActualWindowScaleVertical();
    * ```
    */
    IgrSeriesViewer.prototype.getActualWindowScaleVertical = function () {
        var iv = this.i.eh();
        return (iv);
    };
    /**
     * Notification from the containing object that the container has been resized.
    
    */
    IgrSeriesViewer.prototype.notifyContainerResized = function () {
        this.i.notifyContainerResized();
    };
    /**
     * Attaches the given series to the chart.
    
    * @param s  * The series to attach to the chart.
    */
    IgrSeriesViewer.prototype.attachSeries = function (s) {
        this.i.hc((s == null ? null : s.i));
    };
    IgrSeriesViewer.prototype.notifySetItem = function (source_, index, oldItem, newItem) {
        this.i.h1(source_, index, oldItem, newItem);
    };
    /**
     * Used to manually notify the SeriesViewer that the data source has reset or cleared its items.  Invoking this method is only necessary if that datasource is not observable.
    
    * @param source_  * The data source which was cleared or reset.
    *
    * ```ts
    * this.chart.notifyClearItems(this.data);
    * ```
    */
    IgrSeriesViewer.prototype.notifyClearItems = function (source_) {
        this.i.hw(source_);
    };
    IgrSeriesViewer.prototype.notifyInsertItem = function (source_, index, newItem) {
        this.i.hz(source_, index, newItem);
    };
    IgrSeriesViewer.prototype.notifyRemoveItem = function (source_, index, oldItem) {
        this.i.h0(source_, index, oldItem);
    };
    /**
     * Release any resources held by the control.
    
    */
    IgrSeriesViewer.prototype.destroy = function () {
        this.i.destroy();
    };
    IgrSeriesViewer.prototype.getCurrentActualWindowRect = function () {
        var iv = this.i.mx();
        return fromRect(iv);
    };
    IgrSeriesViewer.prototype.renderToImage = function (width, height) {
        var iv = this.i.e8(width, height);
        return (iv);
    };
    /**
     * Use to force the SeriesViewer to finish any deferred work before printing or evaluating its visual.
     * This should only be called if the visual of the SeriesViewer needs to be synchronously saved or evaluated.
     * Calling this method too often will hinder the performance of the SeriesViewer.
    
    *
    * ```ts
    * this.chart.flush();
    * ```
    */
    IgrSeriesViewer.prototype.flush = function () {
        this.i.flush();
    };
    Object.defineProperty(IgrSeriesViewer.prototype, "seriesCursorMouseMove", {
        /**
         * Occurs when the cursors are moved over a series in this SeriesViewer.
        */
        get: function () {
            return this._seriesCursorMouseMove;
        },
        set: function (ev) {
            var _this = this;
            if (this._seriesCursorMouseMove_wrapped !== null) {
                this.i.seriesCursorMouseMove = delegateRemove(this.i.seriesCursorMouseMove, this._seriesCursorMouseMove_wrapped);
                this._seriesCursorMouseMove_wrapped = null;
                this._seriesCursorMouseMove = null;
            }
            this._seriesCursorMouseMove = ev;
            this._seriesCursorMouseMove_wrapped = function (o, e) {
                var outerArgs = new IgrChartCursorEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeSeriesCursorMouseMove) {
                    _this.beforeSeriesCursorMouseMove(_this, outerArgs);
                }
                if (_this._seriesCursorMouseMove) {
                    _this._seriesCursorMouseMove(_this, outerArgs);
                }
            };
            this.i.seriesCursorMouseMove = delegateCombine(this.i.seriesCursorMouseMove, this._seriesCursorMouseMove_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "seriesMouseLeftButtonDown", {
        /**
         * Occurs when the left mouse button is pressed while the mouse pointer is over a Series.
        *
        * The `SeriesMouseLeftButtonDown` event occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.
        *
        * &lt;-- position: content member-->
        *
        * ```ts
        * public onSeriesMouseLeftButtonDown(event: {sender: any, args: DataChartMouseButtonEventArgs})
        * {
        *     var item = event.args.item;
        * }
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	seriesMouseLeftButtonDown= {this.onSeriesMouseLeftButtonDown}>
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this._seriesMouseLeftButtonDown;
        },
        set: function (ev) {
            var _this = this;
            if (this._seriesMouseLeftButtonDown_wrapped !== null) {
                this.i.seriesMouseLeftButtonDown = delegateRemove(this.i.seriesMouseLeftButtonDown, this._seriesMouseLeftButtonDown_wrapped);
                this._seriesMouseLeftButtonDown_wrapped = null;
                this._seriesMouseLeftButtonDown = null;
            }
            this._seriesMouseLeftButtonDown = ev;
            this._seriesMouseLeftButtonDown_wrapped = function (o, e) {
                var outerArgs = new IgrDataChartMouseButtonEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeSeriesMouseLeftButtonDown) {
                    _this.beforeSeriesMouseLeftButtonDown(_this, outerArgs);
                }
                if (_this._seriesMouseLeftButtonDown) {
                    _this._seriesMouseLeftButtonDown(_this, outerArgs);
                }
            };
            this.i.seriesMouseLeftButtonDown = delegateCombine(this.i.seriesMouseLeftButtonDown, this._seriesMouseLeftButtonDown_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "seriesMouseLeftButtonUp", {
        /**
         * Occurs when the left mouse button is released while the mouse pointer is over a Series.
        *
        * The `SeriesMouseLeftButtonUp` event occurs when the left mouse button is released while the mouse pointer is over an element of this chart.
        *
        * &lt;-- position: content member-->
        *
        * &lt;-- position: content member-->
        *
        * ```ts
        * public onSeriesMouseLeftButtonUp(event: {sender: any, args: DataChartMouseButtonEventArgs})
        * {
        *     var item = event.args.item;
        * }
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	seriesMouseLeftButtonUp ={this.onSeriesMouseLeftButtonUp}>
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        *
        * ```ts
        * public onSeriesMouseLeftButtonUp =(event: any, args: DataChartMouseButtonEventArgs )
        * {
        *
        * }
        * ```
        */
        get: function () {
            return this._seriesMouseLeftButtonUp;
        },
        set: function (ev) {
            var _this = this;
            if (this._seriesMouseLeftButtonUp_wrapped !== null) {
                this.i.seriesMouseLeftButtonUp = delegateRemove(this.i.seriesMouseLeftButtonUp, this._seriesMouseLeftButtonUp_wrapped);
                this._seriesMouseLeftButtonUp_wrapped = null;
                this._seriesMouseLeftButtonUp = null;
            }
            this._seriesMouseLeftButtonUp = ev;
            this._seriesMouseLeftButtonUp_wrapped = function (o, e) {
                var outerArgs = new IgrDataChartMouseButtonEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeSeriesMouseLeftButtonUp) {
                    _this.beforeSeriesMouseLeftButtonUp(_this, outerArgs);
                }
                if (_this._seriesMouseLeftButtonUp) {
                    _this._seriesMouseLeftButtonUp(_this, outerArgs);
                }
            };
            this.i.seriesMouseLeftButtonUp = delegateCombine(this.i.seriesMouseLeftButtonUp, this._seriesMouseLeftButtonUp_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "seriesMouseMove", {
        /**
         * Occurs when the mouse pointer moves while over a Series.
        *
        * The `SeriesMouseMove` event occurs when the left mouse pointer moves while over an element of this chart.
        *
        * &lt;-- position: content member-->
        *
        * &lt;-- position: content member-->
        *
        * ```ts
        * public onSeriesMouseMove(event: {sender: any, args: ChartMouseEventArgs})
        * {
        *     var item = event.args.item;
        * }
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	seriesMouseMove={this.onSeriesMouseMove} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        *
        * ```ts
        * public onSeriesMouseMove =( event: any, args: ChartMouseEventArgs) => {
        *                  }
        * ```
        */
        get: function () {
            return this._seriesMouseMove;
        },
        set: function (ev) {
            var _this = this;
            if (this._seriesMouseMove_wrapped !== null) {
                this.i.seriesMouseMove = delegateRemove(this.i.seriesMouseMove, this._seriesMouseMove_wrapped);
                this._seriesMouseMove_wrapped = null;
                this._seriesMouseMove = null;
            }
            this._seriesMouseMove = ev;
            this._seriesMouseMove_wrapped = function (o, e) {
                var outerArgs = new IgrChartMouseEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeSeriesMouseMove) {
                    _this.beforeSeriesMouseMove(_this, outerArgs);
                }
                if (_this._seriesMouseMove) {
                    _this._seriesMouseMove(_this, outerArgs);
                }
            };
            this.i.seriesMouseMove = delegateCombine(this.i.seriesMouseMove, this._seriesMouseMove_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "seriesMouseEnter", {
        /**
         * Occurs when the mouse pointer enters a Series.
        *
        * The `SeriesMouseEnter` event occurs when the left mouse pointer enters an element of this chart.
        *
        * &lt;-- position: content member-->
        *
        * ```ts
        * public onSeriesMouseEnter(event: {sender: any, args: ChartMouseEventArgs})
        * {
        *     var item = event.args.item;
        * }
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	seriesMouseEnter={this.onSeriesMouseEnter}>
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this._seriesMouseEnter;
        },
        set: function (ev) {
            var _this = this;
            if (this._seriesMouseEnter_wrapped !== null) {
                this.i.seriesMouseEnter = delegateRemove(this.i.seriesMouseEnter, this._seriesMouseEnter_wrapped);
                this._seriesMouseEnter_wrapped = null;
                this._seriesMouseEnter = null;
            }
            this._seriesMouseEnter = ev;
            this._seriesMouseEnter_wrapped = function (o, e) {
                var outerArgs = new IgrChartMouseEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeSeriesMouseEnter) {
                    _this.beforeSeriesMouseEnter(_this, outerArgs);
                }
                if (_this._seriesMouseEnter) {
                    _this._seriesMouseEnter(_this, outerArgs);
                }
            };
            this.i.seriesMouseEnter = delegateCombine(this.i.seriesMouseEnter, this._seriesMouseEnter_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "seriesMouseLeave", {
        /**
         * Occurs when the mouse pointer leaves a Series.
        *
        * The `SeriesMouseLeave` event occurs when the left mouse pointer leaves an element of this chart.
        *
        * ```ts
        * public onSeriesMouseLeave(event: {sender: any, args: ChartMouseEventArgs})
        * {
        *     var item = event.args.item;
        * }
        * ```
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	 seriesMouseLeave ={this.onSeriesMouseLeave}>
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this._seriesMouseLeave;
        },
        set: function (ev) {
            var _this = this;
            if (this._seriesMouseLeave_wrapped !== null) {
                this.i.seriesMouseLeave = delegateRemove(this.i.seriesMouseLeave, this._seriesMouseLeave_wrapped);
                this._seriesMouseLeave_wrapped = null;
                this._seriesMouseLeave = null;
            }
            this._seriesMouseLeave = ev;
            this._seriesMouseLeave_wrapped = function (o, e) {
                var outerArgs = new IgrChartMouseEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeSeriesMouseLeave) {
                    _this.beforeSeriesMouseLeave(_this, outerArgs);
                }
                if (_this._seriesMouseLeave) {
                    _this._seriesMouseLeave(_this, outerArgs);
                }
            };
            this.i.seriesMouseLeave = delegateCombine(this.i.seriesMouseLeave, this._seriesMouseLeave_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "windowRectChanged", {
        /**
         * Occurs just after the current SeriesViewer's window rectangle is changed.
        *
        * &lt;-- position: content member-->
        *
        * &lt;-- position: content member-->
        *
        * ```ts
        * <IgrDataChart
        * 	width="100%"
        * 	height="100%"
        * 	dataSource={this.data}
        * 	windowRectChanged={this.onWindowRectChanged} >
        * <IgrCategoryXAxis name="xAxis" label="Year"/>
        * <IgrNumericYAxis name="yAxis" minimumValue={0} />
        * <IgrLineSeries name="series3" title="Russia"
        *     valueMemberPath="Russia"
        *     xAxisName="xAxis"
        *     yAxisName="yAxis"
        *     markerType={this.state.markersType} />
        * </IgrDataChart>
        * ```
        *
        * ```ts
        * public onWindowRectChanged =( s:any, e: RectChangedEventArgs) => {
        *
        *        }
        * ```
        */
        get: function () {
            return this._windowRectChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._windowRectChanged_wrapped !== null) {
                this.i.windowRectChanged = delegateRemove(this.i.windowRectChanged, this._windowRectChanged_wrapped);
                this._windowRectChanged_wrapped = null;
                this._windowRectChanged = null;
            }
            this._windowRectChanged = ev;
            this._windowRectChanged_wrapped = function (o, e) {
                var outerArgs = new IgrRectChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeWindowRectChanged) {
                    _this.beforeWindowRectChanged(_this, outerArgs);
                }
                if (_this._windowRectChanged) {
                    _this._windowRectChanged(_this, outerArgs);
                }
            };
            this.i.windowRectChanged = delegateCombine(this.i.windowRectChanged, this._windowRectChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "sizeChanged", {
        /**
         * Occurs after the size of the series viewer changes.
        *
        * &lt;-- position: content member-->
        *
        * &lt;-- position: content member-->
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 	sizeChanged={this.onSizeChanged=} >
        *
        *     <IgrNumericXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrLineSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	valueMemberPath="Value" />
        *  </IgrDataChart>
        * ```
        *
        * ```ts
        * public onSizeChanged =(event: any, args: RectChangedEventArgs}){
        *
        * }
        * ```
        */
        get: function () {
            return this._sizeChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._sizeChanged_wrapped !== null) {
                this.i.sizeChanged = delegateRemove(this.i.sizeChanged, this._sizeChanged_wrapped);
                this._sizeChanged_wrapped = null;
                this._sizeChanged = null;
            }
            this._sizeChanged = ev;
            this._sizeChanged_wrapped = function (o, e) {
                var outerArgs = new IgrRectChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeSizeChanged) {
                    _this.beforeSizeChanged(_this, outerArgs);
                }
                if (_this._sizeChanged) {
                    _this._sizeChanged(_this, outerArgs);
                }
            };
            this.i.sizeChanged = delegateCombine(this.i.sizeChanged, this._sizeChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "actualWindowRectChanged", {
        /**
         * Raised when the actual window rectangle of the SeriesViewer changes.
        */
        get: function () {
            return this._actualWindowRectChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._actualWindowRectChanged_wrapped !== null) {
                this.i.actualWindowRectChanged = delegateRemove(this.i.actualWindowRectChanged, this._actualWindowRectChanged_wrapped);
                this._actualWindowRectChanged_wrapped = null;
                this._actualWindowRectChanged = null;
            }
            this._actualWindowRectChanged = ev;
            this._actualWindowRectChanged_wrapped = function (o, e) {
                var outerArgs = new IgrRectChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeActualWindowRectChanged) {
                    _this.beforeActualWindowRectChanged(_this, outerArgs);
                }
                if (_this._actualWindowRectChanged) {
                    _this._actualWindowRectChanged(_this, outerArgs);
                }
            };
            this.i.actualWindowRectChanged = delegateCombine(this.i.actualWindowRectChanged, this._actualWindowRectChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "gridAreaRectChanged", {
        /**
         * Occurs just after the current SeriesViewer's grid area rectangle is changed.
         * The grid area may change as the result of the SeriesViewer being resized, or
         * of an axis being added or changing size, possibly in another SeriesViewer.
        */
        get: function () {
            return this._gridAreaRectChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._gridAreaRectChanged_wrapped !== null) {
                this.i.gridAreaRectChanged = delegateRemove(this.i.gridAreaRectChanged, this._gridAreaRectChanged_wrapped);
                this._gridAreaRectChanged_wrapped = null;
                this._gridAreaRectChanged = null;
            }
            this._gridAreaRectChanged = ev;
            this._gridAreaRectChanged_wrapped = function (o, e) {
                var outerArgs = new IgrRectChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeGridAreaRectChanged) {
                    _this.beforeGridAreaRectChanged(_this, outerArgs);
                }
                if (_this._gridAreaRectChanged) {
                    _this._gridAreaRectChanged(_this, outerArgs);
                }
            };
            this.i.gridAreaRectChanged = delegateCombine(this.i.gridAreaRectChanged, this._gridAreaRectChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrSeriesViewer.prototype, "refreshCompleted", {
        /**
         * Raised when the SeriesViewer's processing for an update has completed.
        */
        get: function () {
            return this._refreshCompleted;
        },
        set: function (ev) {
            var _this = this;
            if (this._refreshCompleted_wrapped !== null) {
                this.i.refreshCompleted = delegateRemove(this.i.refreshCompleted, this._refreshCompleted_wrapped);
                this._refreshCompleted_wrapped = null;
                this._refreshCompleted = null;
            }
            this._refreshCompleted = ev;
            this._refreshCompleted_wrapped = function (o, e) {
                var outerArgs = new IgrRefreshCompletedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeRefreshCompleted) {
                    _this.beforeRefreshCompleted(_this, outerArgs);
                }
                if (_this._refreshCompleted) {
                    _this._refreshCompleted(_this, outerArgs);
                }
            };
            this.i.refreshCompleted = delegateCombine(this.i.refreshCompleted, this._refreshCompleted_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrSeriesViewer;
}(React.Component));
export { IgrSeriesViewer };
//# sourceMappingURL=igr-series-viewer.js.map
