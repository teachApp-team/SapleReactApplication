import * as tslib_1 from "tslib";
import { IgrHorizontalAnchoredCategorySeries } from "./igr-horizontal-anchored-category-series";
import { PointSeries } from "./PointSeries";
/**
 * Represents a IgxDataChartComponent point series.
*
* You can use the `IgrPointSeries` plot a value along a category or date.
*
* ```ts
* <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*
*     <IgrCategoryXAxis name="xAxis" label="Date" />
*     <IgrNumericYAxis  name="yAxis" />
*    <IgrPointSeries
*     name="series1"
*     xAxisName="xAxis"
*     yAxisName="yAxis"
*     volumeMemberPath="Volume" />
*  </IgrDataChart>
* ```
*
* ```ts
* const series1 = new IgrPointSeries({ name: "series1" });
* series1.xAxisName = "xAxis";
* series1.yAxisName = "yAxis";
* series1.markerType = MarkerType.Circle;
* series1.valueMemberPath = "USA";
* ```
*/
var IgrPointSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrPointSeries, _super);
    function IgrPointSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrPointSeries.prototype.createImplementation = function () {
        return new PointSeries();
    };
    Object.defineProperty(IgrPointSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPointSeries.prototype, "isMarkerlessDisplayPreferred", {
        /**
         * Overridden by derived series classes to indicate when markerless display is preferred or not.
        */
        get: function () {
            return this.i.cy;
        },
        enumerable: true,
        configurable: true
    });
    return IgrPointSeries;
}(IgrHorizontalAnchoredCategorySeries));
export { IgrPointSeries };
//# sourceMappingURL=igr-point-series.js.map
