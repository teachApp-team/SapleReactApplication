/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { EventArgs, Base, markType, Point_$type, typeCast, Number_$type, markDep, runOn, delegateCombine, fromEnum, Boolean_$type, enumGetBox, fromEn, String_$type, getInstanceType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, Array_$type, toNullable, TypeRegistrar } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { DataTemplate } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { Style } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { List$1 } from "igniteui-react-core";
import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategorySeries } from "./CategorySeries";
import { NumericAxisBase } from "./NumericAxisBase";
import { ISupportsMarkers_$type } from "./ISupportsMarkers";
import { CategoryFrame } from "./CategoryFrame";
import { Rect } from "igniteui-react-core";
import { CategorySeriesView } from "./CategorySeriesView";
import { ObservableCollection$1 } from "igniteui-react-core";
import { Axis } from "./Axis";
import { ScalerParams } from "./ScalerParams";
import { AxisRange } from "./AxisRange";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { isNaN_, isInfinity, truncate } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { ISortingAxis_$type } from "./ISortingAxis";
import { FrameworkElement } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DependencyProperty } from "igniteui-react-core";
import { DependencyObject } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { IScaler_$type } from "./IScaler";
import { IIsCategoryBased_$type } from "./IIsCategoryBased";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { PropertyMetadata } from "igniteui-react-core";
import { dateMinValue, dateMaxValue } from "igniteui-react-core";
import { NumericXAxis } from "./NumericXAxis";
import { CategoryYAxis } from "./CategoryYAxis";
import { AnchoredCategoryBucketCalculator } from "./AnchoredCategoryBucketCalculator";
import { IStacked100Series_$type } from "./IStacked100Series";
import { SplineSeriesBase } from "./SplineSeriesBase";
import { CollisionAvoider } from "./CollisionAvoider";
import { SafeSortedReadOnlyDoubleCollection } from "./SafeSortedReadOnlyDoubleCollection";
import { Numeric } from "igniteui-react-core";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { CategoryFramePreparer } from "./CategoryFramePreparer";
import { CategoryXAxis } from "./CategoryXAxis";
import { IBarSeries_$type } from "./IBarSeries";
import { Color } from "igniteui-react-core";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { SingleValuesHolder } from "./SingleValuesHolder";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { SplineSeriesBaseView } from "./SplineSeriesBaseView";
import { Canvas } from "igniteui-react-core";
import { Panel } from "igniteui-react-core";
import { PlatformConstants } from "igniteui-react-core";
/**
 * @hidden
 */
export let StackedSeriesCreatedEventArgs = /*@__PURE__*/ (() => {
    class StackedSeriesCreatedEventArgs extends EventArgs {
        constructor(a) {
            super();
            this.c = null;
            this.c = a;
        }
        get brush() {
            return this.c.fu;
        }
        set brush(a) {
            this.c.fu = a;
        }
        get legendItemTemplate() {
            return this.c.dv;
        }
        set legendItemTemplate(a) {
            this.c.dv = a;
        }
        get legendItemBadgeTemplate() {
            return this.c.du;
        }
        set legendItemBadgeTemplate(a) {
            this.c.du = a;
        }
        get legendItemVisibility() {
            return this.c.ge;
        }
        set legendItemVisibility(a) {
            this.c.ge = a;
        }
        get outline() {
            return this.c.fy;
        }
        set outline(a) {
            this.c.fy = a;
        }
        get dashArray() {
            return this.c.f3;
        }
        set dashArray(a) {
            this.c.f3 = a;
        }
        get dashCap() {
            return this.c.f7;
        }
        set dashCap(a) {
            this.c.f7 = a;
        }
        get index() {
            return this.c.av;
        }
        get thickness() {
            return this.c.at;
        }
        set thickness(a) {
            this.c.at = a;
        }
        get title() {
            return this.c.ax;
        }
        set title(a) {
            this.c.ax = a;
        }
        get markerBrush() {
            return this.c.fv;
        }
        set markerBrush(a) {
            this.c.fv = a;
        }
        get markerOutline() {
            return this.c.fw;
        }
        set markerOutline(a) {
            this.c.fw = a;
        }
        get markerStyle() {
            return this.c.gb;
        }
        set markerStyle(a) {
            this.c.gb = a;
        }
        get markerTemplate() {
            return this.c.dw;
        }
        set markerTemplate(a) {
            this.c.dw = a;
        }
        get markerType() {
            return this.c.l;
        }
        set markerType(a) {
            this.c.l = a;
        }
        get startCap() {
            return this.c.f6;
        }
        set startCap(a) {
            this.c.f9 = a;
        }
        get endCap() {
            return this.c.f5;
        }
        set endCap(a) {
            this.c.f8 = a;
        }
    }
    StackedSeriesCreatedEventArgs.$t = /*@__PURE__*/ markType(StackedSeriesCreatedEventArgs, 'StackedSeriesCreatedEventArgs', EventArgs.$);
    return StackedSeriesCreatedEventArgs;
})();
/**
 * @hidden
 */
export let FragmentBase = /*@__PURE__*/ (() => {
    class FragmentBase extends HorizontalAnchoredCategorySeries {
        constructor() {
            super();
            this.ql = null;
            this._logicalSeriesLink = null;
            this.qn = null;
            this.ql = new CategoryLineRasterizer();
        }
        get logicalSeriesLink() {
            return this._logicalSeriesLink;
        }
        set logicalSeriesLink(a) {
            this._logicalSeriesLink = a;
        }
        get parentSeries() {
            return this.qn;
        }
        set parentSeries(a) {
            this.qn = a;
        }
        get_cv() {
            return false;
        }
        get_cq() {
            return false;
        }
        get_cs() {
            return true;
        }
        e7() {
            let a = this.parentSeries;
            if (a.fh == -1 || a.o7 == null || a.o7.f.indexOf(this) == -1) {
                return -1;
            }
            return a.o7.f.indexOf(this);
        }
        fb() {
            let a = this.parentSeries;
            if (a.fh == -1 || a.series.count == 0 || a.series.indexOf(this.logicalSeriesLink) == -1) {
                return -1;
            }
            return a.series.indexOf(this.logicalSeriesLink);
        }
        resolveLegendIndex() {
            let a = this.parentSeries;
            if (a.pa) {
                return -1 + a.fh + a.o3.count - a.o7.f.indexOf(this);
            }
            return super.resolveLegendIndex();
        }
        a6() {
            return this.parentSeries;
        }
        na() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchXAxis();
        }
        nu() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchYAxis();
        }
        qp(a, b, c, d, e, f, g, h) {
            let i = c[0];
            let j = c[1];
            let k = new Rect(0, i - 5, j - 5, 11, 11);
            if (!isNaN_(i) && !isNaN_(j) && !isInfinity(i) && !isInfinity(j) && d.tryAdd(k)) {
                b.m.add({ $type: Point_$type, x: i, y: j });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        op(a, b) {
            a.u();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null) {
                return;
            }
            if (this.logicalSeriesLink.ad.count == 0 || this.logicalSeriesLink.ac.count == 0) {
                return;
            }
            this.ng(b).d(a, b);
        }
        qr(a, b, c) {
            let d = this.pb(c);
            let e = d;
            let f = this.logicalSeriesLink.y;
            let g = f ? this.parentSeries.o7.e : this.parentSeries.o7.d;
            let h = g.indexOf(this);
            if (a.count == 0) {
                return;
            }
            if (h == -1) {
                return;
            }
            let i = false;
            for (let j = h; j >= 0; j--) {
                if (i) {
                    break;
                }
                if (j == 0) {
                    a.add({ $type: Point_$type, x: a._inner[a.count - 1].x, y: e });
                    a.add({ $type: Point_$type, x: a._inner[0].x, y: e });
                    break;
                }
                let k = typeCast(FragmentBase.$, g._inner[j - 1]);
                if (k != null && k.ql != null && k.ql.o.count > 0 && this.bi != null && k.dw(this.bi.br, this.bi.bs, this.bi)) {
                    i = true;
                    for (let l = k.ql.o.count - 1; l >= 0; l--) {
                        a.add(k.ql.o._inner[l]);
                    }
                }
            }
        }
        dw(a, b, c) {
            let d = super.dw(a, b, c);
            let e = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let f = this.parentSeries.fetchYAxis();
            if (this.parentSeries == null || e == null || e.itemsSource == null || f == null || this.parentSeries.bz == null || e.bh == null || f.bh == null) {
                d = false;
            }
            if (this.valueColumn == null) {
                return false;
            }
            if (isInfinity(this.valueColumn.minimum) && isInfinity(this.valueColumn.maximum)) {
                d = false;
            }
            if (isNaN_(this.valueColumn.minimum) && isNaN_(this.valueColumn.maximum)) {
                d = false;
            }
            return d;
        }
        pb(a) {
            let b = 0;
            let c = a.bs;
            let d = a.br;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.yAxis.ca, e);
            f.b = this.eh();
            if (!c.isEmpty && !d.isEmpty && this.yAxis != null) {
                b = this.yAxis.dy(0, f);
            }
            return b;
        }
        an(a) {
            return null;
        }
        qq() {
            if (this.parentSeries == null) {
                return -1;
            }
            let a = this.parentSeries.fh;
            let b = 0;
            let c = 1;
            if (this.parentSeries.pa) {
                b = this.parentSeries.o3.count - 1;
                c = -1;
            }
            for (let d = b; this.parentSeries.pa ? d >= 0 : d < this.parentSeries.o3.count; d += c) {
                let e = this.parentSeries.o3._inner[d];
                if (e.visualSeriesLink == this) {
                    return a;
                }
                if (this.parentSeries.aw == null || e.gd != 0 || e.gc != 0) {
                    continue;
                }
                a++;
            }
            return -1;
        }
        qs(a) {
            if (a == null) {
            }
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            if (this.parentSeries == null) {
                return;
            }
            let e = typeCast(NumericAxisBase.$, this.parentSeries.fetchYAxis());
            if (e == null) {
                return;
            }
            switch (b) {
                case "ValueColumn":
                    if (this.o2.cz) {
                        this.o2.cy.g$i();
                    }
                    if (e != null && !e.cn()) {
                        this.parentSeries.o2().cn.g(this.eu);
                        this.je(false);
                    }
                    break;
                case "ActualBrush":
                    if (this.logicalSeriesLink != null) {
                        this.logicalSeriesLink.fp = this.k4;
                    }
                    break;
            }
        }
        jg(a, b) {
            super.jg(a, b);
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    FragmentBase.$t = /*@__PURE__*/ markType(FragmentBase, 'FragmentBase', HorizontalAnchoredCategorySeries.$);
    return FragmentBase;
})();
/**
 * @hidden
 */
export let AreaFragment = /*@__PURE__*/ (() => {
    class AreaFragment extends FragmentBase {
        constructor() {
            super();
            this.ab = AreaFragment.$;
        }
        bf() {
            return new AreaFragmentView(this);
        }
        iv(a) {
            super.iv(a);
            this.qt = a;
        }
        get_ck() {
            return true;
        }
        qv(a, b) {
            let c = this.qt.c8.ak;
            if (this.dj(a, c)) {
                return true;
            }
            let d = this.qt.c9.ak;
            if (this.dj(a, d)) {
                return true;
            }
            return false;
        }
        dh(a, b) {
            if (this.qu(a, b)) {
                return true;
            }
            if (this.qv(a, b)) {
                return true;
            }
            if (this.l5(a, b)) {
                return true;
            }
            return false;
        }
        qu(a, b) {
            let c = this.qt.da.ak;
            if (this.di(a, b, c)) {
                return true;
            }
            let d = this.qt.db.ak;
            if (this.di(a, b, d)) {
                return true;
            }
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        hw(a, b) {
            super.hw(a, b);
            let c = b;
            c.c7();
        }
        os(a, b) {
            super.os(a, b);
            this.ql.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = typeCast(AreaFragmentView.$, b);
            let d = c.cn.d;
            this.ql.i(c.c8, c.da, c.c9, c.db, a.f.count, a.f, true, d, this.eu, (e, f, g, h, i) => this.qr(e, a.f, b), 0);
            c.c8._opacity = this.d6;
            c.c9._opacity = 0.5 * this.d6;
        }
        jo() {
            let a = (typeCast(XamDataChart.$, this.bs));
            if (a != null) {
                this.d6 = isNaN_(this.d7) ? this.parentSeries.d6 : this.d7;
            }
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    AreaFragment.$t = /*@__PURE__*/ markType(AreaFragment, 'AreaFragment', FragmentBase.$);
    return AreaFragment;
})();
/**
 * @hidden
 */
export let ColumnFragment = /*@__PURE__*/ (() => {
    class ColumnFragment extends FragmentBase {
        constructor() {
            super();
            this.ab = ColumnFragment.$;
        }
        bf() {
            return new ColumnFragmentView(this);
        }
        iv(a) {
            super.iv(a);
            this.qu = a;
        }
        get fragmentXAxis() {
            return this.parentSeries != null ? typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis()) : null;
        }
        get fragmentYAxis() {
            return this.parentSeries != null ? typeCast(NumericYAxis.$, this.parentSeries.fetchYAxis()) : null;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        na() {
            return this.fragmentXAxis;
        }
        nu() {
            return this.fragmentYAxis;
        }
        fetchXAxis() {
            return null;
        }
        fetchYAxis() {
            return null;
        }
        hw(a, b) {
            super.hw(a, b);
            let c = b;
            if (a && c.c7 != null) {
                this.nb.m.clear();
                c.c7.count = 0;
            }
        }
        an(a) {
            if (this.valueColumn == null || this.valueColumn.count == 0) {
                return null;
            }
            return new AxisRange(this.valueColumn.minimum, this.valueColumn.maximum);
        }
        dw(a, b, c) {
            if (this.parentSeries == null) {
                return false;
            }
            return this.parentSeries.pb(this, a, b, this.qw(c));
        }
        dt() {
            return true;
        }
        ob(a) {
            if (this.parentSeries != null) {
                return this.parentSeries.ob(this.parentSeries.bi);
            }
            return super.ob(a);
        }
        oc(a) {
            if (this.parentSeries != null) {
                return this.parentSeries.oc(this.parentSeries.bi);
            }
            return super.ob(a);
        }
        lv(a) {
            if (this.na() == null || this.fragmentYAxis == null) {
                return Rect.empty;
            }
            let b = this.lh(a);
            let c = this.bi.bs;
            let d = this.bi.br;
            let e = this.getEffectiveViewport1(this.bi);
            let f = new ScalerParams(0, c, d, this.fragmentYAxis.ca, e);
            let g = this.aj(this.na(), this.nb.f, this.ob(this.bi), this.oc(this.bi), a, true);
            if (g == null) {
                return Rect.empty;
            }
            let h = g[0];
            let i = g[1];
            let j = Math.abs(b.x - h[0]);
            let k = Math.abs(b.x - i[0]);
            let l = this.na().jy(c, d, e);
            if (j < k) {
                let m = h[0] - 0.5 * l;
                let n = h[1];
                let o = h[2];
                return new Rect(0, m, Math.min(n, o), l, Math.max(n, o) - Math.min(n, o));
            }
            else {
                let p = i[0] - 0.5 * l;
                let q = i[1];
                let r = i[2];
                return new Rect(0, p, Math.min(q, r), l, Math.max(q, r) - Math.min(q, r));
            }
        }
        dh(a, b) {
            if (this.dk(a, b)) {
                return true;
            }
            if (this.l5(a, b)) {
                return true;
            }
            return false;
        }
        dk(a, b) {
            let c = this.lw(a);
            if (c.isEmpty) {
                return false;
            }
            let d = this.q3(c, this.ee(b));
            return d.containsPoint(a);
        }
        q3(a, b) {
            let c = a.left + a.width / 2;
            let d = a.top + a.height / 2;
            let e = c - ((a.width / 2) + b);
            let f = d - (a.height / 2);
            let g = a.height;
            let h = a.width + b * 2;
            return new Rect(0, e, f, h, g);
        }
        fv(a, b) {
            let c = typeCast(FrameworkElement.$, a);
            let d = c != null ? typeCast(DataContext.$, c.dataContext) : null;
            let e = d != null ? d.item : null;
            if (e == null) {
                let f = this.bi.br;
                let g = this.bs != null ? this.bs.mr : Rect.empty;
                let h = { $type: Point_$type, x: g.left + g.width * (b.x - f.left) / f.width, y: g.top + g.height * (b.y - f.top) / f.height };
                e = this.fp(h);
            }
            return e;
        }
        fp(a) {
            let b = 0;
            if (typeCast(ISortingAxis_$type, this.na()) !== null) {
                b = this.fa(a);
                if (b == -1) {
                    return null;
                }
            }
            else {
                b = this.e8(a);
            }
            return b >= 0 && this.bz != null && b < this.bz.count ? this.bz.item(b) : null;
        }
        fa(a) {
            let b = this.bi.bs;
            let c = this.bi.br;
            let d = this.getEffectiveViewport1(this.bi);
            if (b.isEmpty || c.isEmpty) {
                return -1;
            }
            let e = this.na();
            let f = new ScalerParams(0, b, c, e.ca, d);
            let g = typeCast(ISortingAxis_$type, this.fragmentXAxis);
            let h = this.lr(this.bi);
            let i = e.d1(h.left, f);
            let j = e.d1(h.right, f);
            let k = (a.x - b.left) / b.width;
            let l = i + ((j - i) * k);
            if (truncate(l) <= dateMinValue().getTime() || truncate(l) >= dateMaxValue().getTime()) {
                return -1;
            }
            let m = g.i$f(l);
            return m;
        }
        e8(a) {
            if (this.parentSeries == null) {
                return -1;
            }
            return this.parentSeries.ph(a);
        }
        qp(a, b, c, d, e, f, g, h) {
            let i = 0;
            let j = c[0];
            let k = e < i ? c[2] : c[1];
            let l = new Rect(0, j - 5, k - 5, 11, 11);
            if (!isNaN_(j) && !isNaN_(k) && !isInfinity(j) && !isInfinity(k) && d.tryAdd(l)) {
                b.m.add({ $type: Point_$type, x: j, y: k });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        qw(a) {
            if (a.m) {
                return this.parentSeries.a0.a$h.item(a.aa);
            }
            else if (a == this.bh) {
                return this.parentSeries.bh;
            }
            else {
                return this.parentSeries.nj;
            }
        }
        jd(a, b, c, d, e) {
            this.a0.a$r(this, a, b, d, e);
            let f = this.a0.a$h.item(d);
            let g = f;
            f.ay(c);
            let h = this.qw(f);
            h.cn.g(this.eu);
            if (this.cc(g)) {
                return;
            }
            if (this.o3 == null) {
                this.o3 = new CategoryFrame(3);
            }
            this.o3.u();
            this.op(this.o3, g);
            this.os(this.o3, g);
        }
        op(a, b) {
            a.u();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null || this.logicalSeriesLink.ac.count == 0 || this.logicalSeriesLink.ad.count == 0) {
                return;
            }
            let c;
            if (b.m) {
                c = this.parentSeries.o1;
            }
            else if (b == this.bh) {
                c = this.parentSeries.nd;
            }
            else {
                c = this.parentSeries.nb;
            }
            let d = typeCast(CategorySeriesView.$, this.qw(b));
            a.f.clear();
            a.m.clear();
            let e = d.cn.e;
            let f = d.cn.f;
            let g = this.parentSeries.nf.h.yScaler;
            let h = typeCast(ISortingAxis_$type, this.parentSeries.nf.h.scaler);
            let i = typeCast(NumericAxisBase.$, g) !== null && g.j1;
            let j = typeCast(StackedBucketCalculator.$, d.cn);
            let k = d.cn.d;
            let l = 0;
            for (let m = e; m <= f; m++) {
                let n = m * k;
                if (this._visibility != 0) {
                    break;
                }
                if (m >= this.valueColumn.count || m >= c.f.count + e) {
                    continue;
                }
                let o = this.valueColumn.item(m);
                let p = !i || (i && o > 0);
                let q;
                if (h == null) {
                    q = j.getBucket1(this, m, m, b.bs, b.br, c);
                }
                else {
                    q = j.getBucket1(this, m, h.i$b._inner[m], b.bs, b.br, c);
                }
                a.f.add(q);
                if (p) {
                    if (this.qp(b, a, q, this.nf.h.provideCollisionDetector(), o, n, l, m)) {
                        l++;
                    }
                }
            }
            b.cq.count = l;
        }
        os(a, b) {
            super.os(a, b);
            if (this.parentSeries == null) {
                return;
            }
            this.parentSeries.pq(this, a, b);
            CategoryMarkerManager.b(this, a.m, b.cq, this.l6);
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    ColumnFragment.$t = /*@__PURE__*/ markType(ColumnFragment, 'ColumnFragment', FragmentBase.$);
    ColumnFragment.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ColumnFragment, 'raisePropertyChanged', ['RadiusX:qx:q1', [1, 2], 'RadiusY:qy:q2', [1, 2]]);
    return ColumnFragment;
})();
/**
 * @hidden
 */
export let BarFragment = /*@__PURE__*/ (() => {
    class BarFragment extends ColumnFragment {
        constructor() {
            super();
            this.ab = BarFragment.$;
        }
        get barFragmentXAxis() {
            return this.parentSeries != null ? this.parentSeries.xAxis : null;
        }
        get barFragmentYAxis() {
            return this.parentSeries != null ? this.parentSeries.yAxis : null;
        }
        na() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchYAxis();
        }
        eb(a) {
            let b = this.bs != null ? this.bs.mr : Rect.empty;
            let c = this.bi.br;
            let d = this.lr(this.bi);
            let e = this.getEffectiveViewport1(this.bi);
            let f = this.na();
            let g = -1;
            if (f != null && !b.isEmpty && !c.isEmpty) {
                let h = new ScalerParams(0, b, c, f.ca, e);
                let i = f.d1(d.top, h);
                let j = f.d1(d.bottom, h);
                let k = (a.y - b.top) / b.height;
                let l = i + (k * (j - i));
                if (f.categoryMode != 0) {
                    l -= 0.5;
                }
                g = l;
            }
            return g;
        }
        nu() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchYAxis();
        }
        q3(a, b) {
            let c = a.left + a.width / 2;
            let d = a.top + a.height / 2;
            let e = c - (a.width / 2);
            let f = d - ((a.height / 2) + b);
            let g = a.height + b * 2;
            let h = a.width;
            return new Rect(0, e, f, h, g);
        }
        lv(a) {
            if (this.na() == null) {
                return Rect.empty;
            }
            let b = this.lh(a);
            let c = this.bi.bs;
            let d = this.bi.br;
            let e = this.getEffectiveViewport1(this.bi);
            let f = this.na();
            let g = new ScalerParams(0, c, d, f.ca, e);
            let h = this.aj(this.na(), this.nb.f, this.ob(this.bi), this.oc(this.bi), a, true);
            if (h == null) {
                return Rect.empty;
            }
            let i = h[0];
            let j = h[1];
            let k = Math.abs(b.y - i[0]);
            let l = Math.abs(b.y - j[0]);
            let m = f.jy(c, d, e);
            if (k < l) {
                let n = i[0] - 0.5 * m;
                let o = i[2];
                let p = i[1];
                return new Rect(0, o, n, Math.max(p, o) - Math.min(p, o), m);
            }
            else {
                let q = j[0] - 0.5 * m;
                let r = j[2];
                let s = j[1];
                return new Rect(0, r, q, Math.max(s, r) - Math.min(s, r), m);
            }
        }
        dh(a, b) {
            if (this.dk(a, b)) {
                return true;
            }
            if (this.l5(a, b)) {
                return true;
            }
            return false;
        }
        qp(a, b, c, d, e, f, g, h) {
            let i = c[0];
            let j = e < 0 ? c[2] : c[1];
            let k = new Rect(0, j - 5, i - 5, 11, 11);
            if (!isNaN_(j) && !isNaN_(i) && !isInfinity(j) && !isInfinity(i) && d.tryAdd(k)) {
                b.m.add({ $type: Point_$type, x: j, y: i });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        fp(a) {
            let b = 0;
            if (typeCast(ISortingAxis_$type, this.barFragmentYAxis) !== null) {
                b = this.fa(a);
                if (b == -1) {
                    return null;
                }
            }
            else {
                b = this.e8(a);
            }
            return b >= 0 && this.bz != null && b < this.bz.count ? this.bz.item(b) : null;
        }
        fa(a) {
            let b = this.bi.bs;
            let c = this.bi.br;
            if (b.isEmpty || c.isEmpty) {
                return -1;
            }
            let d = this.getEffectiveViewport1(this.bi);
            let e = new ScalerParams(0, b, c, this.barFragmentYAxis.ca, d);
            let f = typeCast(ISortingAxis_$type, this.barFragmentYAxis);
            let g = this.lr(this.bi);
            let h = this.barFragmentYAxis.d1(g.top, e);
            let i = this.barFragmentYAxis.d1(g.bottom, e);
            let j = (a.y - b.top) / b.height;
            let k = h + ((i - h) * j);
            if (truncate(k) <= dateMinValue().getTime() || truncate(k) >= dateMaxValue().getTime()) {
                return -1;
            }
            let l = f.i$f(k);
            return l;
        }
        pb(a) {
            let b = 0;
            let c = a.bs;
            let d = a.br;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.barFragmentXAxis.ca, e);
            if (!c.isEmpty && !d.isEmpty && this.barFragmentXAxis != null) {
                b = this.barFragmentXAxis.dy(0, f);
            }
            return b;
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            if (this.parentSeries == null || this.barFragmentXAxis == null) {
                return;
            }
            let e = this.barFragmentXAxis;
            switch (b) {
                case "ValueColumn":
                    if (this.o2.cz) {
                        this.o2.cy.g$i();
                    }
                    if (e != null && !e.cn()) {
                        this.parentSeries.o2().cn.g(this.eu);
                        this.je(false);
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    BarFragment.$t = /*@__PURE__*/ markType(BarFragment, 'BarFragment', ColumnFragment.$);
    return BarFragment;
})();
/**
 * @hidden
 */
export let AreaFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class AreaFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.cw.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.cw.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = this.i.cw;
            let g = f.parentSeries;
            let h = typeCast(IStacked100Series_$type, g) !== null;
            let i = this.i.cw.valueColumn;
            let j = g.oz;
            let k = g.o0;
            let l = f.logicalSeriesLink.ad;
            let m = f.logicalSeriesLink.ac;
            for (let n = b; n <= c; ++n) {
                let o = i.item(n);
                if (isNaN_(o) || isInfinity(o)) {
                    o = 0;
                }
                let p = Math.abs(k[n]) + j[n];
                if (h) {
                    if (p == 0) {
                        o = 0;
                    }
                    else if (o < 0) {
                        o = (l._inner[n] + o) / p * 100;
                    }
                    else {
                        o = (m._inner[n] + o) / p * 100;
                    }
                }
                else {
                    o = o < 0 ? l._inner[n] + o : m._inner[n] + o;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(o)) {
                        d = Math.min(d, o);
                        e = Math.max(e, o);
                    }
                }
                else {
                    d = o;
                    e = o;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    AreaFragmentBucketCalculator.$t = /*@__PURE__*/ markType(AreaFragmentBucketCalculator, 'AreaFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return AreaFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let LineFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class LineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.cw.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.cw.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = typeCast(FragmentBase.$, this.i.cw);
            let g = f.parentSeries;
            for (let h = b; h <= c; ++h) {
                let i = this.i.cw.valueColumn.item(h);
                let j = Math.abs(g.o0[h]) + g.oz[h];
                if (isNaN_(i) || isInfinity(i)) {
                    i = 0;
                }
                if (typeCast(IStacked100Series_$type, g) !== null) {
                    if (j == 0) {
                        i = 0;
                    }
                    else if (i < 0) {
                        i = (f.logicalSeriesLink.ad._inner[h] + i) / j * 100;
                    }
                    else {
                        i = (f.logicalSeriesLink.ac._inner[h] + i) / j * 100;
                    }
                }
                else {
                    i = i < 0 ? f.logicalSeriesLink.ad._inner[h] + i : f.logicalSeriesLink.ac._inner[h] + i;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(i)) {
                        d = Math.min(d, i);
                        e = Math.max(e, i);
                    }
                }
                else {
                    d = i;
                    e = i;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    LineFragmentBucketCalculator.$t = /*@__PURE__*/ markType(LineFragmentBucketCalculator, 'LineFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return LineFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let SplineFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class SplineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.cw.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.cw.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = typeCast(SplineFragmentBase.$, this.i.cw);
            let g = f.parentSeries;
            for (let h = b; h <= c; ++h) {
                let i = this.i.cw.valueColumn.item(h);
                let j = Math.abs(g.o0[h]) + g.oz[h];
                if (isNaN_(i) || isInfinity(i)) {
                    i = 0;
                }
                if (typeCast(IStacked100Series_$type, g) !== null) {
                    if (j == 0) {
                        i = 0;
                    }
                    else if (i < 0) {
                        i = (f.logicalSeriesLink.ad._inner[h] + i) / j * 100;
                    }
                    else {
                        i = (f.logicalSeriesLink.ac._inner[h] + i) / j * 100;
                    }
                }
                else {
                    i = i < 0 ? f.logicalSeriesLink.ad._inner[h] + i : f.logicalSeriesLink.ac._inner[h] + i;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(i)) {
                        d = Math.min(d, i);
                        e = Math.max(e, i);
                    }
                }
                else {
                    d = i;
                    e = i;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    SplineFragmentBucketCalculator.$t = /*@__PURE__*/ markType(SplineFragmentBucketCalculator, 'SplineFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return SplineFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedBucketCalculator = /*@__PURE__*/ (() => {
    class StackedBucketCalculator extends CategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            let b = typeCast(StackedSeriesBase.$, this.c.cp);
            let c = Math.min(b.o0 != null ? b.o0.length : 0, b.oz != null ? b.oz.length : 0);
            let d = Math.min(a * this.d, c - 1);
            let e = Math.min(d + this.d - 1, c - 1);
            let f = NaN;
            let g = NaN;
            for (let h = d; h <= e; ++h) {
                let i = Math.min(b.o0[h], b.oz[h]);
                let j = Math.max(b.o0[h], b.oz[h]);
                if (!isNaN_(f)) {
                    if (!isNaN_(i)) {
                        f = Math.min(f, i);
                        g = Math.max(g, i);
                    }
                    if (!isNaN_(j)) {
                        f = Math.min(f, j);
                        g = Math.max(g, j);
                    }
                }
                else {
                    f = i;
                    g = j;
                }
            }
            if (!isNaN_(f) && !isNaN_(g)) {
                return [0.5 * (d + e), f, g];
            }
            return [NaN, NaN, NaN];
        }
        getBucket1(a, b, c, d, e, f) {
            return null;
        }
    }
    StackedBucketCalculator.$t = /*@__PURE__*/ markType(StackedBucketCalculator, 'StackedBucketCalculator', CategoryBucketCalculator.$);
    return StackedBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedBarBucketCalculator = /*@__PURE__*/ (() => {
    class StackedBarBucketCalculator extends StackedBucketCalculator {
        constructor(a) {
            super(a);
        }
        g(a) {
            let b = this.c.bs;
            let c = this.c.br;
            let d = typeCast(StackedBarSeries.$, this.c.cp);
            let e = this.c.cp.bz;
            if (b.isEmpty || c.isEmpty || d.yAxis == null || e == null || e.count == 0) {
                this.d = 0;
                return;
            }
            let f = d.getEffectiveViewport1(this.c);
            let g = new ScalerParams(0, b, c, d.yAxis.ca, f);
            let h = d.lr(this.c);
            let i = Math.floor(d.yAxis.d2(h.top, g, 0));
            let j = Math.ceil(d.yAxis.d2(h.bottom, g, 0));
            if (!d.yAxis.ca) {
                j = Math.ceil(d.yAxis.d2(h.top, g, 0));
                i = Math.floor(d.yAxis.d2(h.bottom, g, 0));
            }
            let k = Math.floor((j - i + 1) * a / h.height);
            this.d = truncate(Math.max(1, k));
            this.e = truncate(Math.max(0, Math.floor(i / this.d) - 1));
            this.f = truncate(Math.ceil(j / this.d));
        }
        getBucket(a) {
            return super.getBucket(a);
        }
        getBucket1(a, b, c, d, e, f) {
            let g = [NaN, NaN, NaN];
            let h = typeCast(BarFragment.$, a);
            if (h == null || h.logicalSeriesLink == null) {
                return g;
            }
            let i = typeCast(StackedBarSeries.$, this.c.cp);
            let j = a.valueColumn.item(c);
            let k = 0;
            let l = NaN;
            let m = NaN;
            let n = Number.NEGATIVE_INFINITY;
            let o = Number.POSITIVE_INFINITY;
            let p = i.getEffectiveViewport1(this.c);
            let q = Math.min(i.o0 != null ? i.o0.length : 0, i.oz != null ? i.oz.length : 0);
            let r = c * this.d;
            let s = Math.min(r + this.d - 1, q - 1);
            for (let t = r; t <= s; ++t) {
                j = a.valueColumn.item(t);
                if (j < k) {
                    o = Math.min(o, h.logicalSeriesLink.ad._inner[t] + j);
                    n = Math.max(n, h.logicalSeriesLink.ad._inner[t]);
                }
                else {
                    o = Math.min(o, h.logicalSeriesLink.ac._inner[t]);
                    n = Math.max(n, h.logicalSeriesLink.ac._inner[t] + j);
                }
                if (!isNaN_(l)) {
                    if (!isNaN_(o)) {
                        l = Math.min(l, o);
                        m = Math.max(m, o);
                    }
                    if (!isNaN_(n)) {
                        l = Math.min(l, n);
                        m = Math.max(m, n);
                    }
                }
                else {
                    l = o;
                    m = n;
                }
            }
            let u = new ScalerParams(0, d, e, i.xAxis.ca, p);
            g = [f.f._inner[b - this.e][0], i.xAxis.dy(m, u), i.xAxis.dy(l, u)];
            return g;
        }
    }
    StackedBarBucketCalculator.$t = /*@__PURE__*/ markType(StackedBarBucketCalculator, 'StackedBarBucketCalculator', StackedBucketCalculator.$);
    return StackedBarBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedColumnBucketCalculator = /*@__PURE__*/ (() => {
    class StackedColumnBucketCalculator extends StackedBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            return super.getBucket(a);
        }
        getBucket1(a, b, c, d, e, f) {
            let g = [NaN, NaN, NaN];
            let h = typeCast(ColumnFragment.$, a);
            if (h == null || h.logicalSeriesLink == null) {
                return g;
            }
            let i = typeCast(StackedColumnSeries.$, this.c.cp);
            let j = a.valueColumn.item(c);
            let k = 0;
            let l = NaN;
            let m = NaN;
            let n = Number.NEGATIVE_INFINITY;
            let o = Number.POSITIVE_INFINITY;
            let p = i.getEffectiveViewport1(this.c);
            let q = Math.min(i.o0 != null ? i.o0.length : 0, i.oz != null ? i.oz.length : 0);
            let r = c * this.d;
            let s = Math.min(r + this.d - 1, q - 1);
            for (let t = r; t <= s; ++t) {
                j = a.valueColumn.item(t);
                if (j < k) {
                    o = Math.min(o, h.logicalSeriesLink.ad._inner[t] + j);
                    n = Math.max(n, h.logicalSeriesLink.ad._inner[t]);
                }
                else {
                    o = Math.min(o, h.logicalSeriesLink.ac._inner[t]);
                    n = Math.max(n, h.logicalSeriesLink.ac._inner[t] + j);
                }
                if (!isNaN_(l)) {
                    if (!isNaN_(o)) {
                        l = Math.min(l, o);
                        m = Math.max(m, o);
                    }
                    if (!isNaN_(n)) {
                        l = Math.min(l, n);
                        m = Math.max(m, n);
                    }
                }
                else {
                    l = o;
                    m = n;
                }
            }
            let u = new ScalerParams(0, d, e, i.yAxis.ca, p);
            g = [f.f._inner[b - this.e][0], i.yAxis.dy(m, u), i.yAxis.dy(l, u)];
            return g;
        }
    }
    StackedColumnBucketCalculator.$t = /*@__PURE__*/ markType(StackedColumnBucketCalculator, 'StackedColumnBucketCalculator', StackedBucketCalculator.$);
    return StackedColumnBucketCalculator;
})();
/**
 * @hidden
 */
export let LineFragment = /*@__PURE__*/ (() => {
    class LineFragment extends FragmentBase {
        constructor() {
            super();
            this.ab = LineFragment.$;
        }
        bf() {
            return new LineFragmentView(this);
        }
        iv(a) {
            super.iv(a);
            this.qt = a;
        }
        qv(a, b) {
            let c = this.qt.c8.ak;
            if (this.dj(a, c)) {
                return true;
            }
            return false;
        }
        get_ck() {
            return true;
        }
        dh(a, b) {
            if (this.qu(a, b)) {
                return true;
            }
            if (this.qv(a, b)) {
                return true;
            }
            if (this.l5(a, b)) {
                return true;
            }
            return false;
        }
        qu(a, b) {
            let c = this.qt.c9.ak;
            if (this.di(a, b, c)) {
                return true;
            }
            let d = this.qt.da.ak;
            if (this.di(a, b, d)) {
                return true;
            }
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        hw(a, b) {
            super.hw(a, b);
            let c = b;
            c.c7();
        }
        os(a, b) {
            super.os(a, b);
            let c = (d) => a.f._inner[d][0];
            let d = (e) => a.f._inner[e][1];
            let e = (f) => a.f._inner[f][0];
            let f = (g) => a.f._inner[g][2];
            this.ql.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let g = b.cn.d;
            let h = typeCast(LineFragmentView.$, b);
            this.ql.m(h.c9, h.c8, h.da, a.f.count, a.f, true, 0, this.o0(a.f, a.f.count - 1, b.br, b.bs), g, this.eu);
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    LineFragment.$t = /*@__PURE__*/ markType(LineFragment, 'LineFragment', FragmentBase.$);
    return LineFragment;
})();
/**
 * @hidden
 */
export let SplineFragmentBase = /*@__PURE__*/ (() => {
    class SplineFragmentBase extends SplineSeriesBase {
        constructor() {
            super();
            this._logicalSeriesLink = null;
            this.qv = null;
            this.qx = null;
            this.qv = new CategoryLineRasterizer();
        }
        get logicalSeriesLink() {
            return this._logicalSeriesLink;
        }
        set logicalSeriesLink(a) {
            this._logicalSeriesLink = a;
        }
        get parentSeries() {
            return this.qx;
        }
        set parentSeries(a) {
            this.qx = a;
        }
        get_cq() {
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get_cs() {
            return true;
        }
        e7() {
            let a = this.parentSeries;
            if (a.fh == -1 || a.o7 == null || a.o7.f.indexOf(this) == -1) {
                return -1;
            }
            return a.o7.f.indexOf(this);
        }
        resolveLegendIndex() {
            let a = this.parentSeries;
            if (a.pa) {
                return -1 + a.fh + a.o3.count - a.o7.f.indexOf(this);
            }
            return super.resolveLegendIndex();
        }
        fb() {
            let a = this.parentSeries;
            if (a.fh == -1 || a.series.count == 0 || a.series.indexOf(this.logicalSeriesLink) == -1) {
                return -1;
            }
            return a.series.indexOf(this.logicalSeriesLink);
        }
        a6() {
            return this.parentSeries;
        }
        qo(a, b, c, d, e, f, g) {
            let h = b[0];
            let i = b[1];
            let j = new Rect(0, h - 5, i - 5, 11, 11);
            if (!isNaN_(h) && !isNaN_(i) && !isInfinity(h) && !isInfinity(i) && c.tryAdd(j)) {
                a.m.add({ $type: Point_$type, x: h, y: i });
                let k = f.cq.item(e);
                k.content.item = this.bz.item(d);
                k.al = g;
                return true;
            }
            return false;
        }
        dw(a, b, c) {
            let d = super.dw(a, b, c);
            let e = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let f = this.parentSeries.fetchYAxis();
            if (this.parentSeries == null || e == null || e.itemsSource == null || f == null || this.parentSeries.bz == null || e.bh == null || f.bh == null) {
                d = false;
            }
            if (this.valueColumn == null) {
                return false;
            }
            if (isInfinity(this.valueColumn.minimum) && isInfinity(this.valueColumn.maximum)) {
                d = false;
            }
            if (isNaN_(this.valueColumn.minimum) && isNaN_(this.valueColumn.maximum)) {
                d = false;
            }
            return d;
        }
        an(a) {
            return null;
        }
        qz(a, b, c, d, e, f) {
            let g = typeCast(ISortingAxis_$type, d);
            if (g == null) {
                return;
            }
            let h = this.getEffectiveViewport1(f);
            let i = new ScalerParams(0, b, c, d.ca, h);
            let j = new ScalerParams(0, b, c, e.ca, h);
            let k = d.d1(2, i) - d.d1(1, i);
            let l = this.l4();
            let m = 0;
            let n = this.qq(d, b, c, h);
            let o = (p) => Math.abs(this.parentSeries.o0[p]) + this.parentSeries.oz[p];
            let p = (q) => q;
            let q = (r) => {
                let s = g.i$b._inner[r];
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    return this.valueColumn.item(s) < 0 ? (this.logicalSeriesLink.ad._inner[s] + this.valueColumn.item(s)) / o(s) * 100 : (this.logicalSeriesLink.ac._inner[s] + this.valueColumn.item(s)) / o(s) * 100;
                }
                else {
                    return this.valueColumn.item(s) < 0 ? this.logicalSeriesLink.ad._inner[s] + this.valueColumn.item(s) : this.logicalSeriesLink.ac._inner[s] + this.valueColumn.item(s);
                }
            };
            let r = this.nj.cn.f;
            let s = this.nj.cn.e;
            let t = truncate(Math.ceil(c.width / (r - s)));
            let u = new CollisionAvoider();
            let v = this.nj.cn.d;
            if (v <= 0 || (s <= 0 && r <= 0)) {
                this.nj.cq.count = m;
                return;
            }
            let w = 0;
            for (let x = s; x < r + 1; ++x) {
                let y = null;
                let z = x * v;
                if (g != null && g.i$b != null && z >= 0 && z < g.i$b.count) {
                    z = g.i$b._inner[z];
                }
                if (x >= (this.valueColumn.count - 1)) {
                    if (l && this.qo(a, a.f._inner[a.f.count - 1], u, Math.min(z, this.bz.count - 1), m, f, w - 1)) {
                        ++m;
                    }
                    break;
                }
                let aa = p(x);
                let ab = q(x);
                let ac = p(x + 1);
                let ad = q(x + 1);
                let ae = ac - aa;
                let af = this.ql[x];
                let ag = this.ql[x + 1];
                let ah = g.i$d(g.i$b._inner[x]);
                let ai = d.dy(ah, i) + n;
                let aj = e.dy(ab, j);
                a.f.add([ai, aj, aj]);
                w++;
                for (let ak = 1; ak < t; ++ak) {
                    let al = ak / t;
                    let am = aa + ae * al;
                    let an = (ac - am) / ae;
                    let ao = (am - aa) / ae;
                    let ap = an * ab + ao * ad + ((an * an * an - an) * af + (ao * ao * ao - ao) * ag) * (ae * ae) / 6;
                    let aq = g.i$d(g.i$b._inner[x]);
                    let ar = g.i$d(g.i$b._inner[x + 1]);
                    if (aq == ar && ab == ad) {
                        break;
                    }
                    let as = aq + (ar - aq) * al;
                    am = d.dy(as, i) + n;
                    ap = e.dy(ap, j);
                    a.f.add([am, ap, ap]);
                    w++;
                }
                if (l) {
                    y = [ai, aj, aj];
                }
                if (l && this.qo(a, y, u, Math.min(z, this.bz.count - 1), m, f, w - 1)) {
                    ++m;
                }
            }
            this.nj.cq.count = m;
        }
        op(a, b) {
            a.u();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null) {
                return;
            }
            if (this.logicalSeriesLink.ad.count == 0 || this.logicalSeriesLink.ac.count == 0) {
                return;
            }
            if (this.nj.cn.d == 0) {
                return;
            }
            super.op(a, b);
            if (a.f.count <= 1) {
                return;
            }
            let c = b.bs;
            let d = b.br;
            let e = this.getEffectiveViewport1(b);
            let f = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let g = typeCast(NumericYAxis.$, this.parentSeries.fetchYAxis());
            let h = new ScalerParams(0, c, d, f.ca, e);
            let i = new ScalerParams(0, c, d, g.ca, e);
            a.f.clear();
            a.m.clear();
            let j = this.l4();
            let k = 0;
            let l;
            let m;
            if (b.m) {
                l = this.parentSeries.o1;
                m = this.parentSeries.a0.a$h.item(b.aa);
            }
            else if (b == this.bh) {
                l = this.parentSeries.nd;
                m = typeCast(CategorySeriesView.$, this.parentSeries.bh);
            }
            else {
                l = this.parentSeries.nb;
                m = this.parentSeries.nj;
            }
            let n = m.cn.d;
            let o = typeCast(ISortingAxis_$type, f);
            if (o != null && o.i$b.count != this.bz.count) {
                return;
            }
            let p = this.preferredCategoryMode(f);
            if (p == 0 && f.categoryMode != 0) {
                p = 1;
            }
            let q = 0;
            switch (p) {
                case 0:
                    q = 0;
                    break;
                case 1:
                    q = 0.5 * f.getCategorySize(c, d, e);
                    break;
                case 2:
                    let r = this.fh;
                    q = f.getGroupCenter(this.fh, c, d, e);
                    break;
            }
            if (f.ca) {
                q = -q;
            }
            let s = (t) => Math.abs(this.parentSeries.o0[t]) + this.parentSeries.oz[t];
            let t = (u) => u;
            let u = (v) => {
                let w = this.valueColumn.item(v);
                if (isNaN_(w) || isInfinity(w)) {
                    w = 0;
                }
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    if (s(v) == 0) {
                        return 0;
                    }
                    return w < 0 ? (this.logicalSeriesLink.ad._inner[v] + w) / s(v) * 100 : (this.logicalSeriesLink.ac._inner[v] + w) / s(v) * 100;
                }
                return w < 0 ? this.logicalSeriesLink.ad._inner[v] + w : this.logicalSeriesLink.ac._inner[v] + w;
            };
            let v = b.cn.d;
            let w = this.qn == 0 ? NaN : 0;
            if (f != null && typeCast(ISortingAxis_$type, f) !== null && f.i$b != null) {
                let x = new SafeSortedReadOnlyDoubleCollection(0, this.valueColumn, f.i$b);
                u = (y) => x.item(y);
            }
            this.ql = Numeric.c(this.valueColumn.count, t, u, w, w);
            let y = m.cn.e;
            let z = m.cn.f;
            let aa = truncate(Math.ceil(d.width / (z - y)));
            let ab = new CollisionAvoider();
            if (o != null) {
                this.qz(a, c, d, f, g, b);
                return;
            }
            let ac = 0;
            let ad = 0;
            for (let ae = y; ae < z + 1; ++ae) {
                if (ae >= this.valueColumn.count) {
                    break;
                }
                let af = null;
                if (v == 1) {
                    if (ae >= (this.valueColumn.count - 1)) {
                        if (j && a.f.count > 0 && this.qo(a, a.f._inner[a.f.count - 1], ab, Math.min(ae * v, this.bz.count - 1), k, b, ac - 1)) {
                            ++k;
                        }
                        break;
                    }
                    let ag = t(ae);
                    let ah = t(ae + 1);
                    let ai = u(ae);
                    let aj = u(ae + 1);
                    let ak = ah - ag;
                    let al = this.ql[ae];
                    let am = this.ql[ae + 1];
                    let an = f.dy(ag, h) + q;
                    let ao = g.dy(ai, i);
                    a.f.add([an, ao, ao]);
                    ac++;
                    ad = ac;
                    for (let ap = 1; ap < aa; ++ap) {
                        let aq = ag + ak * ap / aa;
                        let ar = (ah - aq) / ak;
                        let as = (aq - ag) / ak;
                        let at = ar * ai + as * aj + ((ar * ar * ar - ar) * al + (as * as * as - as) * am) * (ak * ak) / 6;
                        aq = f.dy(aq, h) + q;
                        at = g.dy(at, i);
                        a.f.add([aq, at, at]);
                        ac++;
                    }
                    if (j) {
                        af = [an, ao, ao];
                    }
                }
                else {
                    af = b.cn.getBucket(ae);
                    if (!isNaN_(af[0])) {
                        af[0] = f.dy(af[0], h) + q;
                        af[1] = g.dy(af[1], i);
                        af[2] = g.dy(af[2], i);
                        a.f.add(af);
                    }
                }
                if (j && this.qo(a, af, ab, Math.min(ae * v, this.bz.count - 1), k, b, ad - 1)) {
                    ++k;
                }
            }
            b.cq.count = k;
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case "ActualBrush":
                    if (this.logicalSeriesLink != null) {
                        this.logicalSeriesLink.fp = this.k4;
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    SplineFragmentBase.$t = /*@__PURE__*/ markType(SplineFragmentBase, 'SplineFragmentBase', SplineSeriesBase.$);
    return SplineFragmentBase;
})();
/**
 * @hidden
 */
export let SplineAreaFragment = /*@__PURE__*/ (() => {
    class SplineAreaFragment extends SplineFragmentBase {
        constructor() {
            super();
            this.q4 = null;
            this.ab = SplineAreaFragment.$;
        }
        bf() {
            return new SplineAreaFragmentView(this);
        }
        iv(a) {
            super.iv(a);
            this.q0 = typeCast(SplineAreaFragmentView.$, a);
        }
        ac() {
            super.ac();
            this.je(false);
        }
        get_ck() {
            return true;
        }
        q2(a, b) {
            let c = this.q0.c9.ak;
            if (this.dj(a, c)) {
                return true;
            }
            let d = this.q0.da.ak;
            if (this.dj(a, d)) {
                return true;
            }
            return false;
        }
        dh(a, b) {
            if (this.q1(a, b)) {
                return true;
            }
            if (this.q2(a, b)) {
                return true;
            }
            if (this.l5(a, b)) {
                return true;
            }
            return false;
        }
        q1(a, b) {
            let c = this.q0.db.ak;
            if (this.di(a, b, c)) {
                return true;
            }
            let d = this.q0.dc.ak;
            if (this.di(a, b, d)) {
                return true;
            }
            return false;
        }
        hw(a, b) {
            super.hw(a, b);
            let c = b;
            c.c8();
        }
        os(a, b) {
            super.os(a, b);
            this.qv.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = typeCast(SplineAreaFragmentView.$, b);
            let d = b.cn.d;
            this.qv.i(c.c9, c.db, c.da, c.dc, a.f.count, a.f, true, d, this.eu, (e, f, g, h, i) => this.q3(e, a.f, b), 1);
            c.c9._opacity = this.d6;
            c.da._opacity = 0.5 * this.d6;
        }
        jg(a, b) {
            super.jg(a, b);
        }
        q3(a, b, c) {
            let d = this.pb(c);
            let e = d;
            let f = this.logicalSeriesLink.y;
            let g = f ? this.parentSeries.o7.e : this.parentSeries.o7.d;
            let h = g.indexOf(this);
            if (a.count == 0) {
                return;
            }
            if (h == -1) {
                return;
            }
            let i = false;
            for (let j = h; j >= 0; j--) {
                if (i) {
                    break;
                }
                if (j == 0) {
                    a.add({ $type: Point_$type, x: a._inner[a.count - 1].x, y: e });
                    a.add({ $type: Point_$type, x: a._inner[0].x, y: e });
                    break;
                }
                let k = typeCast(SplineFragmentBase.$, g._inner[j - 1]);
                if (k != null && k.qv != null && k.qv.o.count > 0 && this.bi != null && k.dw(this.bi.br, this.bi.bs, this.bi)) {
                    i = true;
                    for (let l = k.qv.o.count - 1; l >= 0; l--) {
                        a.add(k.qv.o._inner[l]);
                    }
                }
            }
        }
        pb(a) {
            let b = 0;
            let c = a.bs;
            let d = a.br;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.yAxis.ca, e);
            if (!c.isEmpty && !d.isEmpty && this.yAxis != null) {
                b = this.yAxis.dy(0, f);
            }
            return b;
        }
        jo() {
            let a = (typeCast(XamDataChart.$, this.bs));
            if (a != null) {
                this.d6 = isNaN_(this.d7) ? this.parentSeries.d6 : this.d7;
            }
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    SplineAreaFragment.$t = /*@__PURE__*/ markType(SplineAreaFragment, 'SplineAreaFragment', SplineFragmentBase.$);
    return SplineAreaFragment;
})();
/**
 * @hidden
 */
export let SplineFragment = /*@__PURE__*/ (() => {
    class SplineFragment extends SplineFragmentBase {
        constructor() {
            super();
            this.ab = SplineFragment.$;
        }
        bf() {
            return new SplineFragmentView(this);
        }
        iv(a) {
            super.iv(a);
            this.q0 = a;
        }
        q2(a, b) {
            let c = this.q0.c9.ak;
            if (this.dj(a, c)) {
                return true;
            }
            return false;
        }
        get_ck() {
            return true;
        }
        dh(a, b) {
            if (this.q1(a, b)) {
                return true;
            }
            if (this.q2(a, b)) {
                return true;
            }
            if (this.l5(a, b)) {
                return true;
            }
            return false;
        }
        q1(a, b) {
            let c = this.q0.da.ak;
            if (this.di(a, b, c)) {
                return true;
            }
            let d = this.q0.db.ak;
            if (this.di(a, b, d)) {
                return true;
            }
            return false;
        }
        hw(a, b) {
            super.hw(a, b);
            let c = b;
            c.c8();
        }
        os(a, b) {
            super.os(a, b);
            this.qv.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = typeCast(SplineFragmentView.$, b);
            let d = c.cn.d;
            this.qv.m(c.da, c.c9, c.db, a.f.count, a.f, true, 1, this.o0(a.f, a.f.count - 1, b.br, b.bs), d, this.eu);
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    SplineFragment.$t = /*@__PURE__*/ markType(SplineFragment, 'SplineFragment', SplineFragmentBase.$);
    return SplineFragment;
})();
/**
 * @hidden
 */
export let StackedSeriesBase = /*@__PURE__*/ (() => {
    class StackedSeriesBase extends CategorySeries {
        constructor() {
            super();
            this._series = null;
            this.seriesCreated = null;
            this.pg = 0;
            this.pf = 0;
            this.oz = null;
            this.o0 = null;
            this.o7 = null;
            this.o4 = null;
            this.pc = new Dictionary$2(String_$type, Boolean_$type, 0);
            this.o1 = null;
            this.series = new StackedSeriesCollection();
            let a = this.series;
            a.collectionResetting = delegateCombine(a.collectionResetting, runOn(this, this.ps));
            let b = this.series;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.pr));
            this.nf = new StackedSeriesFramePreparer(1, this, this.o8, this, this, this.o8.cn);
            this.o7 = new StackedSeriesManager(this);
            this.o4 = new StackedSeriesCollection();
            let c = this.o4;
            c.collectionChanged = delegateCombine(c.collectionChanged, runOn(this, this.pr));
            let d = this.o4;
            d.collectionResetting = delegateCombine(d.collectionResetting, runOn(this, this.pm));
        }
        get_cv() {
            return false;
        }
        getHostReferenceValue() {
            return this.eh();
        }
        bf() {
            return new StackedSeriesView(this);
        }
        iv(a) {
            super.iv(a);
            this.o8 = a;
        }
        iw(a, b) {
            super.iw(a, b);
            for (let c of fromEnum(this.series)) {
                c.visualSeriesLink.bi.br = b;
            }
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        fg() {
            if (this.series == null) {
                return -1;
            }
            return this.series.count;
        }
        h8(a) {
            for (let b = 0; b < this.o7.f.count; b++) {
                let c = this.o7.f._inner[b];
                if (!a(c)) {
                    break;
                }
            }
        }
        get_isStacked() {
            return true;
        }
        get o3() {
            return this.o9 ? this.o4 : this.series;
        }
        pm(a, b) {
            for (let c of fromEnum(this.o4)) {
                if (this.o7 != null && this.o7.c.contains(c)) {
                    c.parentSeries = null;
                    this.o7.c.remove(c);
                }
            }
        }
        ps(a, b) {
            for (let c of fromEnum(this.series)) {
                if (this.o7 != null && this.o7.c.contains(c)) {
                    c.parentSeries = null;
                    this.o7.c.remove(c);
                }
            }
        }
        pr(a, b) {
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    if (this.o7 != null && this.o7.c.contains(c)) {
                        c.parentSeries = null;
                        this.o7.c.remove(c);
                    }
                }
            }
            if (b.newItems != null) {
                let d = b.newStartingIndex;
                for (let e of fromEn(b.newItems)) {
                    if (this.o7 != null && !this.o7.c.contains(e)) {
                        e.parentSeries = this;
                        e.c1();
                        e.dg();
                        e.dh();
                        e.dp();
                        e.di();
                        e.dj();
                        e.cx();
                        e.cy();
                        e.cz();
                        e.c0();
                        e.c2();
                        e.c3();
                        e.c4();
                        e.c5();
                        e.c9();
                        e.da();
                        e.c6();
                        e.c7();
                        e.c8();
                        e.c9();
                        e.db();
                        e.dc();
                        e.dd();
                        e.cw();
                        e.de();
                        e.df();
                        e.dk();
                        e.dl();
                        e.dm();
                        e.dn();
                        e.dq();
                        if (!this.o9) {
                            this.o7.c.insert(d, e);
                            d++;
                        }
                    }
                }
            }
            if (!this.o9) {
                this.pt();
            }
        }
        jl(a) {
            this.bq.bn.c2(a, true, false);
        }
        ng(a) {
            if (a != null && a.n) {
                if (a.m) {
                    return new StackedSeriesFramePreparer(1, typeCast(IIsCategoryBased_$type, this), typeCast(ISupportsMarkers_$type, a), a, this, a.cn);
                }
                else {
                    let b = typeCast(CategorySeriesView.$, this.bh);
                    return new StackedSeriesFramePreparer(1, this, typeCast(ISupportsMarkers_$type, b), this.bs.bn.m, this, b.cn);
                }
            }
            else {
                return this.nf;
            }
        }
        op(a, b) {
            a.u();
            this.pp();
            this.ng(b).d(a, b);
        }
        hw(a, b) {
            super.hw(a, b);
            for (let c of fromEnum(this.o3)) {
                if (c.visualSeriesLink != null) {
                    c.visualSeriesLink.hw(a, c.visualSeriesLink.bi);
                }
            }
        }
        pn() {
            this.pp();
        }
        pt() {
            let a = this.fetchXAxis();
            if (a != null) {
                a.co(true);
            }
            let b = this.fetchYAxis();
            if (b != null) {
                b.co(true);
            }
        }
        c9(a) {
            let b = this.bz != null ? this.bz.indexOf(a) : -1;
            let c = this.bs != null ? this.bs.mr : Rect.empty;
            c = c.copy();
            let d = this.bi.br;
            let e = new Rect(0, 0, 0, 1, 1);
            let f = this.lt(this.bi);
            if (b >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                let g = this.fetchXAxis();
                if (g != null) {
                    let h = new ScalerParams(0, e, e, g.ca, f);
                    let i = g.dy(b, h);
                    if (i < c.left + 0.1 * c.width) {
                        i = i + 0.4 * c.width;
                    }
                    if (i > c.right - 0.1 * c.width) {
                        i = i - 0.4 * c.width;
                    }
                    c.x = i - 0.5 * c.width;
                }
                let j = this.fetchYAxis();
                if (j != null && this.oz != null && b < this.oz.length) {
                    let k = new ScalerParams(0, e, e, j.ca, f);
                    let l = j.dy(this.oz[b], k);
                    let m = j.dy(this.o0[b], k);
                    if (!isNaN_(l) && !isNaN_(m)) {
                        let n = Math.abs(m - l);
                        if (c.height < n) {
                            c.height = n;
                            c.y = Math.min(m, l);
                        }
                        else {
                            if (m < c.top + 0.1 * c.height) {
                                m = m + 0.4 * c.height;
                            }
                            if (m > c.bottom - 0.1 * c.height) {
                                m = m - 0.4 * c.height;
                            }
                            c.y = m - 0.5 * c.height;
                        }
                    }
                }
                this.bn.ap(this.bs, c, true);
            }
            return b >= 0;
        }
        an(a) {
            if (this.o0 == null || this.o0.length == 0 || this.oz == null || this.oz.length == 0) {
                return null;
            }
            if (a == this.fetchXAxis()) {
                let b = Math.min(this.o0.length, this.oz.length);
                return new AxisRange(0, b - 1);
            }
            if (a == this.fetchYAxis()) {
                return new AxisRange(this.pg, this.pf);
            }
            return null;
        }
        l4() {
            return false;
        }
        hz(a, b, c, d) {
            this.pp();
            this.n5();
            this.je(false);
        }
        o2() {
            return this.o8;
        }
        pd() {
            let a = 0;
            let b = this.bi.bs;
            let c = this.bi.br;
            let d = this.getEffectiveViewport1(this.bi);
            let e = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (!b.isEmpty && !c.isEmpty && e != null) {
                let f = new ScalerParams(0, b, c, e.ca, d);
                a = e.dy(e.kl, f);
            }
            return a;
        }
        pe() {
            let a = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (a != null) {
                return a.kl;
            }
            return 0;
        }
        pi(a) {
            return this.fh < 0 || this.o3 == null || this.o3.count == 0 ? -1 : this.fh + this.o3.indexOf(a);
        }
        ph(a) {
            let b = this.bs != null ? this.bs.mr : Rect.empty;
            let c = this.bi.br;
            let d = this.getEffectiveViewport1(this.bi);
            let e = typeCast(CategoryAxisBase.$, this.fetchXAxis());
            let f = -1;
            if (e != null && !b.isEmpty && !c.isEmpty) {
                let g = new ScalerParams(0, b, c, e.ca, d);
                let h = this.lr(this.bi);
                let i = e.d1(h.left, g);
                let j = e.d1(h.right, g);
                let k = (a.x - b.left) / b.width;
                let l = i + (k * (j - i));
                if (e.categoryMode != 0) {
                    l -= 0.5;
                }
                let m = truncate(Math.round(l));
                f = m;
            }
            return f;
        }
        pb(a, b, c, d) {
            let e = true;
            let f = typeCast(CategoryAxisBase.$, this.fetchXAxis());
            let g = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (!d.l() || c.isEmpty || b.isEmpty || f == null || f.itemsSource == null || g == null || this.bz == null || f.bh == null || g.bh == null || g.kb == g.ka) {
                e = false;
            }
            let h = d;
            let i = h.cn.d;
            if (a.valueColumn == null || a.valueColumn.count == 0 || i < 1 || a._visibility != 0) {
                e = false;
            }
            return e;
        }
        po() {
            if (this.bs == null || this.o7 == null) {
                return;
            }
            if (!this.o9) {
                this.o4.clear();
                for (let a of fromEnum(this.series)) {
                    if (!this.o7.c.contains(a)) {
                        this.o7.c.add(a);
                    }
                }
                this.pt();
                return;
            }
        }
        os(a, b) {
            super.os(a, b);
            this.o7.h();
        }
        pq(a, b, c) {
        }
        pp() {
            if (this.bz == null) {
                return;
            }
            let a = this.bz.count;
            this.oz = new Array(a);
            this.o0 = new Array(a);
            for (let b = 0; b < a; b++) {
                this.oz[b] = 0;
                this.o0[b] = 0;
            }
            this.pg = Number.POSITIVE_INFINITY;
            this.pf = Number.NEGATIVE_INFINITY;
            let c = 0;
            for (let d of fromEnum(this.o3)) {
                this.bz.deregisterColumn(d.p);
                d.p = this.bw(d.cq);
                if (d.visualSeriesLink != null) {
                    d.visualSeriesLink.pa = true;
                    d.visualSeriesLink.valueColumn = d.p;
                    d.visualSeriesLink.pa = false;
                }
                d.y = true;
                if (d.p != null) {
                    d.ac.clear();
                    d.ad.clear();
                    for (let e = 0; e < d.p.count; e++) {
                        let f = d.p.item(e);
                        if (f < c) {
                            d.ac.add(c);
                            d.ad.add(this.o0[e]);
                            this.o0[e] = this.o0[e] + f;
                            if (d.y) {
                                d.y = false;
                            }
                        }
                        else if (f >= c) {
                            d.ac.add(this.oz[e]);
                            d.ad.add(c);
                            this.oz[e] = this.oz[e] + f;
                        }
                        else if (isNaN_(f) || isInfinity(f)) {
                            d.ac.add(this.oz[e]);
                            d.ad.add(this.o0[e]);
                        }
                    }
                }
            }
            for (let g = 0; g < a; g++) {
                this.pg = Math.min(this.pg, this.o0[g]);
                this.pf = Math.max(this.pf, this.oz[g]);
            }
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    if (c != null && d == null) {
                        this.h0(this.fetchXAxis());
                        this.h0(this.fetchYAxis());
                    }
                    if (c == null && d != null) {
                        this.i5(this.fetchXAxis());
                        this.i5(this.fetchYAxis());
                    }
                    if (this.o3 != null) {
                        for (let e of fromEnum(this.o3)) {
                            e.o = this.bs;
                        }
                        this.je(false);
                    }
                    break;
                case "ItemsSource":
                    if (this.o3 != null) {
                        for (let f of fromEnum(this.o3)) {
                            if (f.visualSeriesLink != null) {
                                f.visualSeriesLink.itemsSource = d;
                            }
                        }
                    }
                    break;
                case "FastItemsSource":
                    if (this.o9) {
                        this.po();
                    }
                    if (!this.n5()) {
                        this.o8.cn.g(this.eu);
                    }
                    this.je(false);
                    break;
                case StackedSeriesBase.$$p[0]:
                    this.po();
                    break;
                case StackedSeriesBase.$$p[1]:
                    if (this.bs != null) {
                        this.bs.ik(this.o7.f);
                    }
                    break;
                case StackedSeriesBase.$$p[2]:
                    for (let g of fromEnum(this.o3)) {
                        g.dq();
                    }
                    break;
                case "Brush":
                    for (let h of fromEnum(this.o3)) {
                        h.cx();
                    }
                    break;
                case "DashArray":
                    for (let i of fromEnum(this.o3)) {
                        i.cy();
                    }
                    break;
                case "DashCap":
                    for (let j of fromEnum(this.o3)) {
                        j.cz();
                    }
                    break;
                case "IsDropShadowEnabled":
                    for (let k of fromEnum(this.o3)) {
                        k.c1();
                    }
                    break;
                case "ShadowBlur":
                    for (let l of fromEnum(this.o3)) {
                        l.dg();
                    }
                    break;
                case "ShadowColor":
                    for (let m of fromEnum(this.o3)) {
                        m.dh();
                    }
                    break;
                case "UseSingleShadow":
                    for (let n of fromEnum(this.o3)) {
                        n.dp();
                    }
                    break;
                case "ShadowOffsetX":
                    for (let o of fromEnum(this.o3)) {
                        o.di();
                    }
                    break;
                case "ShadowOffsetY":
                    for (let p of fromEnum(this.o3)) {
                        p.dj();
                    }
                    break;
                case "EndCap":
                    for (let q of fromEnum(this.o3)) {
                        q.c0();
                    }
                    break;
                case "IsHitTestVisible":
                    for (let r of fromEnum(this.o3)) {
                        r.c2();
                    }
                    break;
                case "LegendItemBadgeTemplate":
                    for (let s of fromEnum(this.o3)) {
                        s.c3();
                    }
                    break;
                case "LegendItemTemplate":
                    for (let t of fromEnum(this.o3)) {
                        t.c4();
                    }
                    break;
                case "LegendItemVisibility":
                    for (let u of fromEnum(this.o3)) {
                        u.c5();
                    }
                    break;
                case "MarkerTemplate":
                    for (let v of fromEnum(this.o3)) {
                        v.c9();
                    }
                    break;
                case "MarkerType":
                    for (let w of fromEnum(this.o3)) {
                        w.da();
                    }
                    break;
                case "MarkerBrush":
                    for (let x of fromEnum(this.o3)) {
                        x.c6();
                    }
                    break;
                case "MarkerOutline":
                    for (let y of fromEnum(this.o3)) {
                        y.c7();
                    }
                    break;
                case "MarkerStyle":
                    for (let z of fromEnum(this.o3)) {
                        z.c8();
                    }
                    break;
                case "Opacity":
                    for (let aa of fromEnum(this.o3)) {
                        aa.db();
                    }
                    break;
                case "OpacityMask":
                    for (let ab of fromEnum(this.o3)) {
                        ab.dc();
                    }
                    break;
                case "AreaFillOpacity":
                    for (let ac of fromEnum(this.o3)) {
                        ac.cw();
                    }
                    break;
                case "Outline":
                    for (let ad of fromEnum(this.o3)) {
                        ad.dd();
                    }
                    break;
                case "StartCap":
                    for (let ae of fromEnum(this.o3)) {
                        ae.dk();
                    }
                    break;
                case "Thickness":
                    for (let af of fromEnum(this.o3)) {
                        af.dl();
                    }
                    break;
                case "ToolTip":
                    for (let ag of fromEnum(this.o3)) {
                        ag.dm();
                    }
                    break;
                case "UseLightweightMarkers":
                    for (let ah of fromEnum(this.o3)) {
                        ah.dn();
                    }
                    break;
            }
        }
        get currentCategoryMode() {
            return this.preferredCategoryMode(typeCast(CategoryAxisBase.$, this.fetchXAxis()));
        }
        get scaler() {
            return typeCast(ICategoryScaler_$type, this.fetchXAxis());
        }
        get yScaler() {
            return typeCast(IScaler_$type, this.fetchYAxis());
        }
        get bucketizer() {
            return this.nj.cn;
        }
        get currentMode2Index() {
            return this.od();
        }
        provideCollisionDetector() {
            return new CollisionAvoider();
        }
        dc() {
            return false;
        }
        get_cq() {
            return false;
        }
        jg(a, b) {
            let c = this.dl;
            super.jg(a, b);
            if (!c) {
                this.bi.az(b);
                return;
            }
            this.bi.az(b);
            if (this.cc(this.bh)) {
                return;
            }
            for (let d of fromEnum(this.series)) {
                d.visualSeriesLink.jg(a, b);
            }
            this.dl = false;
        }
        jd(a, b, c, d, e) {
            super.jd(a, b, c, d, e);
            let f = this.a0.a$h.item(d);
            f.cn.g(this.eu);
            f.ay(c);
            if (this.cc(f)) {
                return;
            }
            if (this.o1 == null) {
                this.o1 = new CategoryFrame(3);
            }
            this.o1.u();
            this.pp();
            this.ng(f).d(this.o1, f);
            this.os(this.o1, f);
            for (let g of fromEnum(this.series)) {
                g.visualSeriesLink.jd(a, b, c, d, e);
            }
        }
        fo() {
            let a = this.a2.exportStackedVisualData(this, this.lz);
            for (let b of fromEnum(this.series)) {
                let c = this.a2.createFragmentVisualData(this, this.lz, getInstanceType(b).typeName, b.b8);
                b.visualSeriesLink.bi.ai(c);
                this.a2.addSubSeriesVisualData(a, c);
            }
            this.h5(a);
            this.bi.ai(a);
            return a;
        }
        get mayContainUnknowns() {
            return true;
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    StackedSeriesBase.$t = /*@__PURE__*/ markType(StackedSeriesBase, 'StackedSeriesBase', CategorySeries.$, [IIsCategoryBased_$type]);
    StackedSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedSeriesBase, 'raisePropertyChanged', ['AutoGenerateSeries:o9:pu', [0, false], 'ReverseLegendOrder:pa:pv', [0, false], 'SeriesVisibility:px:pw', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)]]);
    return StackedSeriesBase;
})();
/**
 * @hidden
 */
export let HorizontalStackedSeriesBase = /*@__PURE__*/ (() => {
    class HorizontalStackedSeriesBase extends StackedSeriesBase {
        getOffsetValue() {
            return this.nf.r(this.xAxis, this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
        }
        getCategoryWidth() {
            return this.xAxis.getCategorySize(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
        }
        fetchXAxis() {
            return this.xAxis;
        }
        fetchYAxis() {
            return this.yAxis;
        }
        ag() {
            return [this.fetchXAxis(), this.fetchYAxis()];
        }
        n5() {
            return this.yAxis != null && this.yAxis.cn();
        }
        jo() {
            let a = (typeCast(XamDataChart.$, this.bs));
            if (a != null) {
                this.d6 = isNaN_(this.d7) ? a.nl.ff : this.d7;
                for (let b of fromEnum(this.o3)) {
                    b.cw();
                }
            }
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case HorizontalStackedSeriesBase.$$p[0]:
                    if (c != d) {
                        this.h0(typeCast(Axis.$, c));
                        this.i5(typeCast(Axis.$, d));
                        this.nj.cn.g(this.eu);
                        this.je(false);
                        this.il();
                    }
                    break;
                case HorizontalStackedSeriesBase.$$p[1]:
                    if (c != d) {
                        this.h0(typeCast(Axis.$, c));
                        this.i5(typeCast(Axis.$, d));
                        this.nj.cn.g(this.eu);
                        this.n5();
                        this.je(false);
                        this.il();
                    }
                    break;
            }
        }
        p1(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        p0(a) {
            if (typeCast(CategoryXAxis.$, a) !== null || a.b7) {
                return true;
            }
            return false;
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    HorizontalStackedSeriesBase.$t = /*@__PURE__*/ markType(HorizontalStackedSeriesBase, 'HorizontalStackedSeriesBase', StackedSeriesBase.$);
    HorizontalStackedSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, HorizontalStackedSeriesBase, 'raisePropertyChanged', ['XAxis::p4', [CategoryAxisBase.$, null], 'YAxis::p5', [NumericYAxis.$, null]]);
    return HorizontalStackedSeriesBase;
})();
/**
 * @hidden
 */
export let StackedAreaSeries = /*@__PURE__*/ (() => {
    class StackedAreaSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedAreaSeries.$;
        }
        ac() {
            super.ac();
            this.je(false);
        }
        an(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.bz.count - 1);
            }
            if (a == this.yAxis) {
                this.pp();
                return new AxisRange(this.pg, this.pf);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    StackedAreaSeries.$t = /*@__PURE__*/ markType(StackedAreaSeries, 'StackedAreaSeries', HorizontalStackedSeriesBase.$);
    return StackedAreaSeries;
})();
/**
 * @hidden
 */
export let VerticalStackedSeriesBase = /*@__PURE__*/ (() => {
    class VerticalStackedSeriesBase extends StackedSeriesBase {
        na() {
            return this.yAxis;
        }
        nu() {
            return this.xAxis;
        }
        getOffsetValue() {
            return this.nf.r(this.yAxis, this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
        }
        getCategoryWidth() {
            return this.yAxis.getCategorySize(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
        }
        get_isVertical() {
            return true;
        }
        fetchXAxis() {
            return this.xAxis;
        }
        fetchYAxis() {
            return this.yAxis;
        }
        n5() {
            return this.xAxis != null && this.xAxis.cn();
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case VerticalStackedSeriesBase.$$p[0]:
                    if (c != d) {
                        this.h0(typeCast(Axis.$, c));
                        this.i5(typeCast(Axis.$, d));
                        this.nj.cn.g(this.eu);
                        this.je(false);
                        this.il();
                    }
                    break;
                case VerticalStackedSeriesBase.$$p[1]:
                    if (c != d) {
                        this.h0(typeCast(Axis.$, c));
                        this.i5(typeCast(Axis.$, d));
                        this.nj.cn.g(this.eu);
                        this.n5();
                        this.je(false);
                        this.il();
                    }
                    break;
            }
        }
        p1(a) {
            if (typeCast(CategoryYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        p0(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    VerticalStackedSeriesBase.$t = /*@__PURE__*/ markType(VerticalStackedSeriesBase, 'VerticalStackedSeriesBase', StackedSeriesBase.$);
    VerticalStackedSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, VerticalStackedSeriesBase, 'raisePropertyChanged', ['XAxis::p4', [NumericXAxis.$, null], 'YAxis::p5', [CategoryYAxis.$, null]]);
    return VerticalStackedSeriesBase;
})();
/**
 * @hidden
 */
export let StackedBarSeries = /*@__PURE__*/ (() => {
    class StackedBarSeries extends VerticalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedBarSeries.$;
        }
        ac() {
            super.ac();
            this.je(false);
        }
        bf() {
            return new StackedBarSeriesView(this);
        }
        iv(a) {
            super.iv(a);
            this.p6 = a;
        }
        getHostReferenceValue() {
            return this.eh();
        }
        o2() {
            return this.p6;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        od() {
            let a = 0;
            for (let b of fromEnum(this.bs.series)) {
                if (b == this) {
                    return a;
                }
                let c = typeCast(IBarSeries_$type, b);
                if (c != null && c.yAxis == this.yAxis && c.getPreferredCategoryMode() == 2) {
                    a++;
                }
            }
            return -1;
        }
        pd() {
            let a = 0;
            let b = this.bs != null ? this.bs.mr : Rect.empty;
            let c = this.bi.br;
            if (!b.isEmpty && !c.isEmpty && this.xAxis != null) {
                let d = this.getEffectiveViewport1(this.bi);
                let e = new ScalerParams(0, b, c, this.xAxis.ca, d);
                a = this.xAxis.dy(this.xAxis.kl, e);
            }
            return a;
        }
        pe() {
            if (this.xAxis != null) {
                return this.xAxis.kl;
            }
            return 0;
        }
        an(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.yAxis) {
                return new AxisRange(0, this.bz.count - 1);
            }
            if (a == this.xAxis) {
                this.pp();
                return new AxisRange(this.pg, this.pf);
            }
            return null;
        }
        c9(a) {
            let b = this.bz != null ? this.bz.indexOf(a) : -1;
            let c = this.bs != null ? this.bs.mr : Rect.empty;
            c = c.copy();
            let d = this.bi.br;
            let e = new Rect(0, 0, 0, 1, 1);
            let f = this.lt(this.bi);
            let g = new ScalerParams(0, e, e, this.xAxis.ca, f);
            let h = new ScalerParams(0, e, e, this.yAxis.ca, f);
            if (b >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                if (this.yAxis != null) {
                    let i = this.yAxis.dy(b, h);
                    if (i < c.top + 0.1 * c.height) {
                        i = i + 0.4 * c.height;
                    }
                    if (i > c.bottom - 0.1 * c.height) {
                        i = i - 0.4 * c.height;
                    }
                    c.y = i - 0.5 * c.height;
                }
                if (this.xAxis != null && this.oz != null && b < this.oz.length) {
                    let j = this.xAxis.dy(this.oz[b], g);
                    let k = this.xAxis.dy(this.o0[b], g);
                    if (!isNaN_(j) && !isNaN_(k)) {
                        let l = Math.abs(k - j);
                        if (c.width < l) {
                            c.width = l;
                            c.x = Math.min(k, j);
                        }
                        else {
                            if (k < c.left + 0.1 * c.width) {
                                k = k + 0.4 * c.width;
                            }
                            if (k > c.right - 0.1 * c.width) {
                                k = k - 0.4 * c.width;
                            }
                            c.x = k - 0.5 * c.width;
                        }
                    }
                }
                this.bn.ap(this.bs, c, true);
            }
            return b >= 0;
        }
        dw(a, b, c) {
            let d = true;
            let e = c;
            if (!c.l() || b.isEmpty || a.isEmpty || this.yAxis == null || this.yAxis.itemsSource == null || this.xAxis == null || this.bz == null || this.xAxis.bh == null || this.yAxis.bh == null || this.xAxis.kb == this.xAxis.ka) {
                e.cn.d = 0;
                d = false;
            }
            return d;
        }
        hz(a, b, c, d) {
            switch (a) {
                case 4:
                case 1:
                case 0:
                    this.nj.cn.g(this.eu);
                    break;
            }
            switch (a) {
                case 4:
                    if (this.xAxis != null && !this.xAxis.cn()) {
                        this.je(true);
                    }
                    break;
                case 1:
                    if (this.xAxis != null && !this.xAxis.cn()) {
                        this.je(true);
                    }
                    break;
                case 0:
                    if (this.xAxis != null && !this.xAxis.cn()) {
                        this.je(true);
                    }
                    break;
                case 2:
                    if (this.nj.cn.d > 0) {
                        this.je(true);
                    }
                    break;
                case 3:
                    if (this.xAxis != null && !this.xAxis.cn()) {
                        this.je(true);
                    }
                    break;
            }
        }
        e8(a) {
            let b = this.bs != null ? this.bs.mr : Rect.empty;
            let c = this.bi.br;
            let d = this.getEffectiveViewport1(this.bi);
            let e = -1;
            if (this.yAxis != null && !b.isEmpty && !c.isEmpty) {
                let f = new ScalerParams(0, b, c, this.yAxis.ca, d);
                let g = this.lr(this.bi);
                let h = this.yAxis.d1(g.top, f);
                let i = this.yAxis.d1(g.bottom, f);
                let j = (a.y - b.top) / b.height;
                let k = h + (j * (i - h));
                if (this.yAxis.categoryMode != 0) {
                    k -= 0.5;
                }
                let l = truncate(Math.round(k));
                e = l;
            }
            return e;
        }
        fp(a) {
            let b = this.e8(a);
            return b >= 0 && this.bz != null && b < this.bz.count ? this.bz.item(b) : null;
        }
        pt() {
            if (this.xAxis != null) {
                this.xAxis.co(true);
            }
            if (this.yAxis != null) {
                this.yAxis.co(true);
            }
        }
        ph(a) {
            return this.e8(a);
        }
        pb(a, b, c, d) {
            let e = true;
            if (!d.l() || c.isEmpty || b.isEmpty || this.yAxis == null || this.yAxis.itemsSource == null || this.xAxis == null || this.bz == null || this.xAxis.bh == null || this.yAxis.bh == null) {
                e = false;
            }
            let f = d;
            if (a.valueColumn == null || a.valueColumn.count == 0 || f.cn.d < 1) {
                e = false;
            }
            return e;
        }
        eg() {
            return this.yAxis.jy(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
        }
        pq(a, b, c) {
            let d = typeCast(BarFragment.$, a);
            let e = typeCast(ColumnFragmentView.$, c);
            if (!this.dw(c.br, c.bs, c) || d == null || e == null) {
                return;
            }
            let f = this.yAxis.jy(c.bs, c.br, this.getEffectiveViewport1(c));
            if (isNaN_(f) || isInfinity(f)) {
                d.qu.c7.count = 0;
                return;
            }
            let g = 0;
            for (let h of fromEnum(b.f)) {
                if (isInfinity(h[0]) || isNaN_(h[0]) || isInfinity(h[1]) || isInfinity(h[2]) || isNaN_(h[1]) || isNaN_(h[2])) {
                    continue;
                }
                let i = h[0] - 0.5 * f;
                let j = h[1];
                let k = h[2];
                k = Math.max(k, -100);
                j = Math.min(j, c.br.right + 100);
                let l = e.c7.item(g);
                l.height = f;
                l.width = Math.abs(j - k);
                e.de(l, Math.min(j, k), i);
                g++;
            }
            e.c7.count = g;
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case StackedBarSeries.$$p[0]:
                case StackedBarSeries.$$p[1]:
                    for (let e of fromEnum(this.o3)) {
                        e.de();
                        e.df();
                    }
                    this.je(false);
                    break;
                case "SyncLink":
                    if (this.xAxis != null) {
                        this.xAxis.cn();
                    }
                    break;
                case "FastItemsSource":
                    if (this.xAxis != null && !this.xAxis.cn()) {
                        this.p6.cn.g(this.eu);
                    }
                    this.je(false);
                    break;
                case "SeriesViewer":
                    if (c != null && d == null) {
                        this.h0(this.xAxis);
                        this.h0(this.yAxis);
                    }
                    if (c == null && d != null) {
                        this.i5(this.xAxis);
                        this.i5(this.yAxis);
                    }
                    this.p6.cn.g(this.eu);
                    this.je(false);
                    if (this.xAxis != null) {
                        this.xAxis.cn();
                    }
                    break;
            }
        }
        getPreferredCategoryMode() {
            return this.preferredCategoryMode(this.yAxis);
        }
        get currentCategoryMode() {
            return this.preferredCategoryMode(this.yAxis);
        }
        get scaler() {
            return this.yAxis;
        }
        get yScaler() {
            return this.xAxis;
        }
        get mayContainUnknowns() {
            return true;
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    StackedBarSeries.$t = /*@__PURE__*/ markType(StackedBarSeries, 'StackedBarSeries', VerticalStackedSeriesBase.$, [IIsCategoryBased_$type, IBarSeries_$type]);
    StackedBarSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedBarSeries, 'raisePropertyChanged', ['RadiusX:p7:qb', [1, 2], 'RadiusY:p8:qc', [1, 2]]);
    return StackedBarSeries;
})();
/**
 * @hidden
 */
export let StackedColumnSeries = /*@__PURE__*/ (() => {
    class StackedColumnSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedColumnSeries.$;
        }
        bf() {
            return new StackedColumnSeriesView(this);
        }
        iv(a) {
            super.iv(a);
            this.p6 = a;
        }
        o2() {
            return this.p6;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        an(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.bz.count - 1);
            }
            if (a == this.yAxis) {
                this.pp();
                return new AxisRange(this.pg, this.pf);
            }
            return null;
        }
        eg() {
            let a = this.getEffectiveViewport1(this.bi);
            return this.xAxis.jy(this.bi.bs, this.bi.br, a);
        }
        pq(a, b, c) {
            let d = typeCast(ColumnFragment.$, a);
            let e = typeCast(ColumnFragmentView.$, c);
            if (!this.dw(c.br, c.bs, c) || d == null || e == null) {
                return;
            }
            if (d == null) {
                return;
            }
            let f = this.getEffectiveViewport1(c);
            let g = this.xAxis.jy(c.bs, c.br, f);
            if (isNaN_(g) || isInfinity(g)) {
                d.qu.c7.count = 0;
                return;
            }
            let h = 0;
            for (let i of fromEnum(b.f)) {
                if (isInfinity(i[0]) || isNaN_(i[0]) || isInfinity(i[1]) || isInfinity(i[2]) || isNaN_(i[1]) || isNaN_(i[2])) {
                    continue;
                }
                let j = i[0] - 0.5 * g;
                let k = i[1];
                let l = i[2];
                k = Math.max(k, -100);
                l = Math.min(l, c.br.bottom + 100);
                let m = e.c7.item(h);
                m.width = g;
                m.height = Math.abs(l - k);
                e.de(m, j, Math.min(l, k));
                h++;
            }
            e.c7.count = h;
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case StackedColumnSeries.$$p[0]:
                case StackedColumnSeries.$$p[1]:
                    for (let e of fromEnum(this.o3)) {
                        e.de();
                        e.df();
                    }
                    this.je(false);
                    break;
                case "SyncLink":
                    if (this.yAxis != null) {
                        this.yAxis.cn();
                    }
                    break;
                case "SeriesViewer":
                    if (this.yAxis != null) {
                        this.yAxis.cn();
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    StackedColumnSeries.$t = /*@__PURE__*/ markType(StackedColumnSeries, 'StackedColumnSeries', HorizontalStackedSeriesBase.$);
    StackedColumnSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedColumnSeries, 'raisePropertyChanged', ['RadiusX:p7:qb', [1, 2], 'RadiusY:p8:qc', [1, 2]]);
    return StackedColumnSeries;
})();
/**
 * @hidden
 */
export let StackedLineSeries = /*@__PURE__*/ (() => {
    class StackedLineSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedLineSeries.$;
        }
        ac() {
            super.ac();
            this.je(false);
        }
        an(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.bz.count - 1);
            }
            if (a == this.yAxis) {
                this.pp();
                return new AxisRange(this.pg, this.pf);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    StackedLineSeries.$t = /*@__PURE__*/ markType(StackedLineSeries, 'StackedLineSeries', HorizontalStackedSeriesBase.$);
    return StackedLineSeries;
})();
/**
 * @hidden
 */
export let StackedSplineAreaSeries = /*@__PURE__*/ (() => {
    class StackedSplineAreaSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedSplineAreaSeries.$;
        }
        ac() {
            super.ac();
            this.je(false);
        }
        an(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.bz.count - 1);
            }
            if (a == this.yAxis) {
                this.pp();
                return new AxisRange(this.pg, this.pf);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    StackedSplineAreaSeries.$t = /*@__PURE__*/ markType(StackedSplineAreaSeries, 'StackedSplineAreaSeries', HorizontalStackedSeriesBase.$);
    return StackedSplineAreaSeries;
})();
/**
 * @hidden
 */
export let StackedSplineSeries = /*@__PURE__*/ (() => {
    class StackedSplineSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedSplineSeries.$;
        }
        ac() {
            super.ac();
            this.je(false);
        }
        an(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.bz.count - 1);
            }
            if (a == this.yAxis) {
                this.pp();
                return new AxisRange(this.pg, this.pf);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    StackedSplineSeries.$t = /*@__PURE__*/ markType(StackedSplineSeries, 'StackedSplineSeries', HorizontalStackedSeriesBase.$);
    return StackedSplineSeries;
})();
/**
 * @hidden
 */
export let StackedFragmentSeries = /*@__PURE__*/ (() => {
    class StackedFragmentSeries extends DependencyObject {
        constructor() {
            super();
            this.q = false;
            this.r = false;
            this._parentSeries = null;
            this.av = 0;
            this.o = null;
            this.p = null;
            this._visualSeriesLink = null;
            this.ac = null;
            this.ad = null;
            this.ab = null;
            this.y = false;
            this.au = null;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.ac = new List$1(Number_$type, 0);
            this.ad = new List$1(Number_$type, 0);
            this.ab = new List$1(Array_$type, 0);
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.ct(a, b.propertyName, b.oldValue, b.newValue));
        }
        get parentSeries() {
            return this._parentSeries;
        }
        set parentSeries(a) {
            this._parentSeries = a;
        }
        get visualSeriesLink() {
            return this._visualSeriesLink;
        }
        set visualSeriesLink(a) {
            this._visualSeriesLink = a;
        }
        provideRenderer(a) {
            this.au = a;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.provideRenderer(a);
            }
        }
        dq() {
            if (this.parentSeries == null) {
                return;
            }
            this.gd = this.parentSeries._visibility != 0 ? 1 : this.gf;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink._visibility = this.gd;
            }
        }
        c9() {
            if (this.parentSeries == null) {
                return;
            }
            this.dt = this.dw != null ? this.dw : this.parentSeries.mn;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.mn = this.dt;
            }
        }
        da() {
            if (this.parentSeries == null) {
                return;
            }
            let a = this.l == 0 ? 1 : this.l;
            this.k = this.l == 0 ? this.parentSeries.l2 : a;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.l2 = this.k;
            }
        }
        cx() {
            if (this.parentSeries == null) {
                return;
            }
            this.fz = this.fu != null ? this.fu : this.parentSeries.k6;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.k6 = this.fz;
            }
        }
        cy() {
            if (this.parentSeries == null) {
                return;
            }
            this.f2 = this.f3 != null ? this.f3 : this.parentSeries.lc;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.lc = this.f2;
            }
        }
        cz() {
            if (this.parentSeries == null) {
                return;
            }
            this.f4 = this.f7;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ld = this.f4;
            }
        }
        c1() {
            if (this.parentSeries == null) {
                return;
            }
            if (!this.q) {
                this.s = this.parentSeries.cp;
            }
            else {
                this.s = this.w;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.cp = this.s;
            }
        }
        dg() {
            if (this.parentSeries == null) {
                return;
            }
            this.ai = !isNaN_(this.aq) ? this.aq : this.parentSeries.ev;
            if (this.visualSeriesLink != null && !isNaN_(this.ai)) {
                this.visualSeriesLink.ev = this.ai;
            }
        }
        dh() {
            if (this.parentSeries == null) {
                return;
            }
            this.f0 = Color.e(toNullable(Color.$, this.f1), toNullable(Color.$, null)) ? this.f1 : this.parentSeries.lb;
            if (this.visualSeriesLink != null && Color.e(toNullable(Color.$, this.f0), toNullable(Color.$, null))) {
                this.visualSeriesLink.lb = this.f0;
            }
        }
        dp() {
            if (this.parentSeries == null) {
                return;
            }
            if (!this.r) {
                this.v = this.parentSeries.du;
            }
            else {
                this.v = this.aa;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.du = this.v;
            }
        }
        di() {
            if (this.parentSeries == null) {
                return;
            }
            this.aj = !isNaN_(this.ar) ? this.ar : this.parentSeries.ew;
            if (this.visualSeriesLink != null && !isNaN_(this.aj)) {
                this.visualSeriesLink.ew = this.aj;
            }
        }
        dj() {
            if (this.parentSeries == null) {
                return;
            }
            this.ak = !isNaN_(this.as) ? this.as : this.parentSeries.ex;
            if (this.visualSeriesLink != null && !isNaN_(this.ak)) {
                this.visualSeriesLink.ex = this.ak;
            }
        }
        c0() {
            if (this.parentSeries == null) {
                return;
            }
            this.f5 = this.f8;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.le = this.f5;
            }
        }
        c2() {
            if (this.parentSeries == null) {
                return;
            }
            this.t = this.x;
        }
        c3() {
            if (this.parentSeries == null) {
                return;
            }
            this.dr = this.du != null ? this.du : this.parentSeries.legendItemBadgeTemplate;
            if (this.visualSeriesLink != null) {
                if (this.dr != null) {
                    this.visualSeriesLink.legendItemBadgeTemplate = this.dr;
                }
                else {
                    this.visualSeriesLink.legendItemBadgeTemplate = null;
                }
            }
        }
        c4() {
            if (this.parentSeries == null) {
                return;
            }
            this.ds = this.dv != null ? this.dv : this.parentSeries.legendItemTemplate;
            if (this.visualSeriesLink != null) {
                if (this.ds != null) {
                    this.visualSeriesLink.legendItemTemplate = this.ds;
                }
                else {
                    this.visualSeriesLink.legendItemTemplate = null;
                }
            }
        }
        c5() {
            if (this.parentSeries == null) {
                return;
            }
            this.gc = this.parentSeries.l0 != 0 ? 1 : this.ge;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.l0 = this.gc;
            }
        }
        c6() {
            if (this.parentSeries == null) {
                return;
            }
            this.fq = this.fv != null ? this.fv : this.parentSeries.m1;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.m1 = this.fq;
            }
        }
        c7() {
            if (this.parentSeries == null) {
                return;
            }
            this.fr = this.fw != null ? this.fw : this.parentSeries.m2;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.m2 = this.fr;
            }
        }
        c8() {
            if (this.parentSeries == null) {
                return;
            }
            this.ga = this.gb != null ? this.gb : this.parentSeries.m3;
            if (this.visualSeriesLink != null) {
                if (this.ga != null) {
                    this.visualSeriesLink.m3 = this.ga;
                }
                else {
                    this.visualSeriesLink.m3 = null;
                }
            }
        }
        db() {
            if (this.parentSeries == null) {
                return;
            }
            this.af = !isNaN_(this.an) ? this.an : this.parentSeries._opacity;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink._opacity = this.af;
            }
        }
        dc() {
        }
        dd() {
            if (this.parentSeries == null) {
                return;
            }
            this.ft = this.fy != null ? this.fy : this.parentSeries.k9;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.k9 = this.ft;
            }
        }
        cw() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (typeCast(StackedAreaSeries.$, this.parentSeries) !== null) {
                a = this.parentSeries.d6;
            }
            if (typeCast(StackedSplineAreaSeries.$, this.parentSeries) !== null) {
                a = this.parentSeries.d6;
            }
            this.ae = !isNaN_(this.am) ? this.am : a;
            if (this.visualSeriesLink != null) {
                if (typeCast(AreaFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.d7 = this.ae;
                }
                if (typeCast(SplineAreaFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.d7 = this.ae;
                }
            }
        }
        de() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (typeCast(StackedColumnSeries.$, this.parentSeries) !== null) {
                a = this.parentSeries.p7;
            }
            if (typeCast(StackedBarSeries.$, this.parentSeries) !== null) {
                a = this.parentSeries.p7;
            }
            this.ag = !isNaN_(a) ? a : this.ao;
            if (this.visualSeriesLink != null) {
                if (typeCast(ColumnFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.qx = this.ag;
                }
                if (typeCast(BarFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.qx = this.ag;
                }
            }
        }
        df() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (typeCast(StackedColumnSeries.$, this.parentSeries) !== null) {
                a = this.parentSeries.p8;
            }
            if (typeCast(StackedBarSeries.$, this.parentSeries) !== null) {
                a = this.parentSeries.p8;
            }
            this.ah = !isNaN_(a) ? a : this.ap;
            if (this.visualSeriesLink != null) {
                if (typeCast(ColumnFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.qy = this.ah;
                }
                if (typeCast(BarFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.qy = this.ah;
                }
            }
        }
        dk() {
            if (this.parentSeries == null) {
                return;
            }
            this.f6 = this.f9;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.lf = this.f6;
            }
        }
        dl() {
            if (this.parentSeries == null) {
                return;
            }
            this.al = !isNaN_(this.at) ? this.at : this.parentSeries.ey;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ey = this.al;
            }
        }
        dm() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.toolTip = this.ay;
            }
        }
        dn() {
            if (this.parentSeries == null) {
                return;
            }
            this.u = this.z;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.l6 = this.u;
            }
        }
        cv(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        ct(a, b, c, d) {
            if (this.parentSeries == null) {
                return;
            }
            switch (b) {
                case StackedFragmentSeries.$$p[58]:
                    if (this.parentSeries == null || this.visualSeriesLink == null) {
                        return;
                    }
                    this.visualSeriesLink.fx = d;
                    break;
                case StackedFragmentSeries.$$p[63]:
                    this.dq();
                    break;
                case StackedFragmentSeries.$$p[31]:
                    this.cx();
                    break;
                case StackedFragmentSeries.$$p[32]:
                    this.cy();
                    break;
                case StackedFragmentSeries.$$p[33]:
                    this.cz();
                    break;
                case StackedFragmentSeries.$$p[35]:
                    this.q = true;
                    this.c1();
                    break;
                case StackedFragmentSeries.$$p[52]:
                    this.dg();
                    break;
                case StackedFragmentSeries.$$p[53]:
                    this.dh();
                    break;
                case StackedFragmentSeries.$$p[61]:
                    this.q = true;
                    this.dp();
                    break;
                case StackedFragmentSeries.$$p[54]:
                    this.di();
                    break;
                case StackedFragmentSeries.$$p[55]:
                    this.dj();
                    break;
                case StackedFragmentSeries.$$p[34]:
                    this.c0();
                    break;
                case StackedFragmentSeries.$$p[36]:
                    this.c2();
                    break;
                case StackedFragmentSeries.$$p[43]:
                    this.c9();
                    break;
                case StackedFragmentSeries.$$p[44]:
                    this.da();
                    break;
                case StackedFragmentSeries.$$p[37]:
                    this.c3();
                    break;
                case StackedFragmentSeries.$$p[38]:
                    this.c4();
                    break;
                case StackedFragmentSeries.$$p[39]:
                    this.c5();
                    break;
                case StackedFragmentSeries.$$p[40]:
                    this.c6();
                    break;
                case StackedFragmentSeries.$$p[41]:
                    this.c7();
                    break;
                case StackedFragmentSeries.$$p[42]:
                    this.c8();
                    break;
                case StackedFragmentSeries.$$p[47]:
                    this.db();
                    break;
                case StackedFragmentSeries.$$p[46]:
                    this.dc();
                    break;
                case StackedFragmentSeries.$$p[48]:
                    this.dd();
                    break;
                case StackedFragmentSeries.$$p[30]:
                    this.cw();
                    break;
                case StackedFragmentSeries.$$p[50]:
                    this.de();
                    break;
                case StackedFragmentSeries.$$p[51]:
                    this.df();
                    break;
                case StackedFragmentSeries.$$p[56]:
                    this.dk();
                    break;
                case StackedFragmentSeries.$$p[57]:
                    this.dl();
                    break;
                case StackedFragmentSeries.$$p[59]:
                    this.dm();
                    break;
                case StackedFragmentSeries.$$p[60]:
                    this.dn();
                    break;
            }
            this.parentSeries.je(false);
        }
    }
    StackedFragmentSeries.$t = /*@__PURE__*/ markType(StackedFragmentSeries, 'StackedFragmentSeries', DependencyObject.$, [INotifyPropertyChanged_$type]);
    StackedFragmentSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedFragmentSeries, 'cv', ['ActualAreaFillOpacity:ae:dx', [1, 1], 'ActualBrush:fp:dy', [Brush.$], 'ActualDashArray:f2:dz', [DoubleCollection.$], 'ActualDashCap:f4:d0', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)], 'ActualEndCap:f5:d1', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'ActualIsDropShadowEnabled:s:d2', [0, false], 'ActualIsHitTestVisible:t:d3', [0, true], 'ActualLegendItemBadgeTemplate:dr:d4', [DataTemplate.$], 'ActualLegendItemTemplate:ds:d5', [DataTemplate.$], 'ActualLegendItemVisibility:gc:d6', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'ActualMarkerBrush:fq:d7', [Brush.$], 'ActualMarkerOutline:fr:d8', [Brush.$], 'ActualMarkerStyle:ga:d9', [Style.$], 'ActualMarkerTemplate:dt:ea', [DataTemplate.$], 'ActualMarkerType:k:eb', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 1)], 'ActualOpacityMask:fs:ec', [Brush.$], 'ActualOpacity:af:ed', [1, 1], 'ActualOutline:ft:ee', [Brush.$], 'ActualRadiusX:ag:ef', [1, 0], 'ActualRadiusY:ah:eg', [1, 0], 'ActualShadowBlur:ai:eh', [1, NaN], 'ActualShadowColor:f0:ei', [Color.$], 'ActualShadowOffsetX:aj:ej', [1, NaN], 'ActualShadowOffsetY:ak:ek', [1, NaN], 'ActualStartCap:f6:el', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'ActualThickness:al:em', [1, 1], 'ActualToolTip:aw:en', [4], 'ActualUseLightweightMarkers:u:eo', [0, false], 'ActualUseSingleShadow:v:ep', [0, true], 'ActualVisibility:gd:eq', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'AreaFillOpacity:am:er', [1, NaN], 'Brush:fu:es', [Brush.$], 'DashArray:f3:et', [DoubleCollection.$], 'DashCap:f7:eu', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)], 'EndCap:f8:ev', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'IsDropShadowEnabled:w:ew', [0], 'IsHitTestVisible:x:ex', [0, true], 'LegendItemBadgeTemplate:du:ey', [DataTemplate.$, null], 'LegendItemTemplate:dv:ez', [DataTemplate.$, null], 'LegendItemVisibility:ge:e0', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'MarkerBrush:fv:e1', [Brush.$], 'MarkerOutline:fw:e2', [Brush.$], 'MarkerStyle:gb:e3', [Style.$], 'MarkerTemplate:dw:e4', [DataTemplate.$, null], 'MarkerType:l:e5', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 0)], 'Name:b8:e6', [2], 'OpacityMask:fx:e7', [Brush.$], 'Opacity:an:e8', [1, 1], 'Outline:fy:e9', [Brush.$, null], 'ParentOrLocalBrush:fz:fa', [Brush.$], 'RadiusX:ao:fb', [1, 2], 'RadiusY:ap:fc', [1, 2], 'ShadowBlur:aq:fd', [1, NaN], 'ShadowColor:f1:fe', [Color.$], 'ShadowOffsetX:ar:ff', [1, NaN], 'ShadowOffsetY:as:fg', [1, NaN], 'StartCap:f9:fh', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'Thickness:at:fi', [1, 1.5], 'Title:ax:fj', [4, "Series Title"], 'ToolTip:ay:fk', [4, null], 'UseLightweightMarkers:z:fl', [0, false], 'UseSingleShadow:aa:fm', [0], 'ValueMemberPath:cq:fn', [2, null], 'Visibility:gf:fo', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)]]);
    return StackedFragmentSeries;
})();
/**
 * @hidden
 */
export let StackedSeriesCollection = /*@__PURE__*/ (() => {
    class StackedSeriesCollection extends ObservableCollection$1 {
        constructor() {
            super(StackedFragmentSeries.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    StackedSeriesCollection.$t = /*@__PURE__*/ markType(StackedSeriesCollection, 'StackedSeriesCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(StackedFragmentSeries.$));
    return StackedSeriesCollection;
})();
/**
 * @hidden
 */
export let StackedSeriesFramePreparer = /*@__PURE__*/ (() => {
    class StackedSeriesFramePreparer extends CategoryFramePreparer {
        constructor(a, ..._rest) {
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        super(0, c);
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = _rest[4];
                        super(1, c, d, e, f, g);
                    }
                    break;
            }
        }
        j(a) {
            let b = new SingleValuesHolder();
            if (typeCast(StackedColumnSeries.$, this.h) !== null || typeCast(StackedBarSeries.$, this.h) !== null) {
                let c = typeCast(StackedSeriesBase.$, this.h);
                if (c.o3.count > 0) {
                    b.f = c.o3._inner[0].p;
                }
                return b;
            }
            let d = this.ab.valueColumn;
            b.f = d;
            return b;
        }
        t(a, b, c, d, e) {
            let f = 0;
            let g = false;
            let h;
            let i = a.d != null;
            let j = this.h.provideCollisionDetector();
            let k = a.f;
            let l = a.k;
            let m = this.h.mayContainUnknowns;
            let n = new ScalerParams(0, a.m, a.l, a.b.j$a, l);
            let o = new ScalerParams(0, a.m, a.l, a.c.j$a, l);
            o.b = this.h.getHostReferenceValue();
            let p = (a.b.j$c(2, n) - a.b.j$c(1, n));
            let q = a.m;
            let r = a.l;
            let s = typeCast(NumericAxisBase.$, a.c) !== null && a.c.j1;
            for (let t = a.i; t <= a.j; ++t) {
                let u;
                if (a.d == null) {
                    if (!m) {
                        u = this.g.getBucketWithoutUnknowns(t);
                    }
                    else {
                        u = this.g.getBucket(t);
                    }
                }
                else {
                    u = ((() => { let v = this.f(a, t, b, p, g, h, c); t = v.p1; g = v.p4; h = v.p5; return v.ret; })());
                }
                let v = !s || (s && u[1] > 0);
                let w = u[0];
                if (!isNaN_(u[0])) {
                    this.x(a, u, c, i, n, o);
                    a.a.f.add(u);
                    let x = t * a.h;
                    let y = x;
                    if (a.d != null && a.d.i$b != null && x >= 0 && x < a.d.i$b.count) {
                        x = a.d.i$b._inner[x];
                    }
                    let z = u;
                    if (k && x < b.e) {
                        z = new Array(u.length);
                        z[0] = w;
                        this.z(b, x, true, a.e);
                        z[1] = b.c;
                        z[2] = b.d;
                        this.x(a, z, c, i, n, o);
                    }
                    if (d && v && this.l(a.a, z, j, Math.min(x, b.e - 1), f, a.a.f.count - 1)) {
                        ++f;
                    }
                }
            }
            return f;
        }
        l(a, b, c, d, e, f) {
            let g = b[0];
            let h = b[1];
            if (typeCast(IBarSeries_$type, this.c) !== null) {
                h = b[0];
                g = b[1];
            }
            let i = new Rect(0, g - 5, h - 5, 11, 11);
            if (!isNaN_(g) && !isNaN_(h) && !isInfinity(g) && !isInfinity(h) && c.tryAdd(i)) {
                a.m.add({ $type: Point_$type, x: g, y: h });
                this.c.updateMarkerTemplate(e, d, f);
                return true;
            }
            return false;
        }
    }
    StackedSeriesFramePreparer.$t = /*@__PURE__*/ markType(StackedSeriesFramePreparer, 'StackedSeriesFramePreparer', CategoryFramePreparer.$);
    return StackedSeriesFramePreparer;
})();
/**
 * @hidden
 */
export let AreaFragmentView = /*@__PURE__*/ (() => {
    class AreaFragmentView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.c6 = null;
            this.c8 = new Path();
            this.da = new Path();
            this.c9 = new Path();
            this.db = new Path();
            this.c6 = a;
        }
        ap() {
            super.ap();
            if (!this.n) {
                this.e.bj = 1;
            }
        }
        c7() {
            this.c8.ak = null;
            this.c9.ak = null;
            this.da.ak = null;
            this.db.ak = null;
        }
        co() {
            return new AreaFragmentBucketCalculator(this);
        }
        a8() {
            super.a8();
            this.c8._fill = this.e.k4;
            this.c9._fill = this.e.k4;
            this.c8._opacity = this.e.d6;
            this.c9._opacity = 0.5 * this.e.d6;
            this.da._stroke = this.e.k5;
            this.da.ac = this.e.ey;
            this.da.ai = this.e.lc;
            this.da.ad = this.e.ld;
            this.db._stroke = this.e.k5;
            this.db.ac = this.e.ey;
            this.db.ai = this.e.lc;
            this.db.ad = this.e.ld;
        }
        a9() {
            super.a9();
            let a = this.bl();
            this.c8._fill = a;
            this.c9._fill = a;
            this.c8._opacity = 1;
            this.c9._opacity = 1;
            this.da._stroke = a;
            this.da.ac = this.e.ey + 3;
            this.db._stroke = a;
            this.db.ac = this.e.ey + 3;
        }
        a3(a, b) {
            super.a3(a, b);
            a.s(this.c8);
            a.s(this.c9);
            a.s(this.da);
            a.s(this.db);
        }
        get_index() {
            let a = this.c6.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.c6.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.bi.index;
            return e + d;
        }
        ai(a) {
            super.ai(a);
            this.e.a2.exportPathData(a, this.da, "lowerShape", ["Lower"]);
            this.e.a2.exportPathData(a, this.db, "upperShape", ["Upper", "Main"]);
            this.e.a2.exportPathData(a, this.c9, "translucentShape", ["Translucent"]);
            this.e.a2.exportPathData(a, this.c8, "fillShape", ["Fill"]);
        }
    }
    AreaFragmentView.$t = /*@__PURE__*/ markType(AreaFragmentView, 'AreaFragmentView', AnchoredCategorySeriesView.$);
    return AreaFragmentView;
})();
/**
 * @hidden
 */
export let ColumnFragmentView = /*@__PURE__*/ (() => {
    class ColumnFragmentView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.c6 = null;
            this.da = null;
            this.c7 = null;
            this.c8 = null;
            this.c9 = null;
            this.c6 = a;
            this.c8 = new List$1(Number_$type, 0);
            this.c9 = new List$1(Number_$type, 0);
            this.c7 = ((() => {
                let $ret = new Pool$1(Rectangle.$);
                $ret.create = runOn(this, this.df);
                $ret.activate = runOn(this, this.db);
                $ret.disactivate = runOn(this, this.dd);
                $ret.destroy = runOn(this, this.dc);
                return $ret;
            })());
            this.da = new List$1(Rectangle.$, 0);
        }
        ap() {
            super.ap();
            if (!this.n) {
                this.e.bj = 1;
            }
        }
        df() {
            let a = ((() => {
                let $ret = new Rectangle();
                $ret.dataContext = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this.e;
                    return $ret;
                })());
                return $ret;
            })());
            this.da.add(a);
            a._visibility = 1;
            return a;
        }
        db(a) {
            a._visibility = 0;
        }
        dd(a) {
            a._visibility = 1;
        }
        dc(a) {
            this.da.remove(a);
        }
        bb(a, b) {
            super.bb(a, b);
            let c = a;
            c._fill = this.e.k4;
            c._stroke = this.e.k5;
            c.ac = this.e.ey;
            c.ai = this.e.lc;
            c.ad = this.e.ld;
            c.am = this.c6.qx;
            c.an = this.c6.qy;
        }
        de(a, b, c) {
            let d = false;
            if (a.o != c) {
                d = true;
                a.o = c;
            }
            if (a.n != b) {
                d = true;
                a.n = b;
            }
            if (d) {
                this.an();
            }
        }
        bc(a, b) {
            super.bc(a, b);
            let c = a;
            let d = this.bm(b);
            c._fill = d;
            c._stroke = d;
            c.ac = this.e.ey + 3;
        }
        a3(a, b) {
            super.a3(a, b);
            if (a.d) {
                for (let c = 0; c < this.da.count; c++) {
                    let d = this.da._inner[c];
                    this.ba(d, c, b);
                    a.v(d);
                }
            }
        }
        get_index() {
            let a = this.c6.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.c6.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.bi.index;
            return e + d;
        }
        ai(a) {
            super.ai(a);
            let b = 0;
            let c = new List$1(Rectangle.$, 0);
            for (let d of fromEnum(this.c7.a)) {
                c.add(d);
            }
            c.aa((e, f) => {
                if (e.n < f.n) {
                    return -1;
                }
                else if (e.n > f.n) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            for (let e of fromEnum(c)) {
                this.e.a2.exportRectangleData(a, e, "column" + b, ["Main", "Fill"]);
            }
            b++;
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'>";
            let b = null;
            if (this.c6.na().b4) {
                b = this.c6.fragmentXAxis;
            }
            else if (this.c6.fragmentYAxis.b4) {
                b = this.c6.fragmentYAxis;
            }
            if (b.b7) {
                let c = b;
                a += "<span>${item." + c.dateTimeMemberPath + "}</span><br/>";
            }
            if (b != null && b.e9 != null) {
                a += "<span>${item." + b.e9 + "}</span><br/>";
            }
            a += "<span";
            let d = this.e.a0.a$q(this.e);
            if (!stringIsNullOrEmpty(d)) {
                a += " style='color:" + d + "'";
            }
            a += ">" + this.c6.fx + ": </span><span class='ui-priority-primary'>" + "${item." + this.c6.ph + "}</span></div>";
            return a;
        }
    }
    ColumnFragmentView.$t = /*@__PURE__*/ markType(ColumnFragmentView, 'ColumnFragmentView', AnchoredCategorySeriesView.$);
    return ColumnFragmentView;
})();
/**
 * @hidden
 */
export let LineFragmentView = /*@__PURE__*/ (() => {
    class LineFragmentView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.c6 = null;
            this.c9 = new Path();
            this.c8 = new Path();
            this.da = new Path();
            this.c6 = a;
        }
        c7() {
            this.c8.ak = null;
            this.c9.ak = null;
            this.da.ak = null;
        }
        co() {
            return new LineFragmentBucketCalculator(this);
        }
        a8() {
            super.a8();
            this.c9._stroke = this.e.k4;
            this.c9.ac = this.e.ey;
            this.c9.ai = this.e.lc;
            this.c9.ad = this.e.ld;
            this.da._stroke = this.e.k4;
            this.da.ac = this.e.ey;
            this.da.ai = this.e.lc;
            this.da.ad = this.e.ld;
            this.c8._fill = this.e.k4;
            this.c8._opacity = 0.75;
        }
        a9() {
            super.a9();
            let a = this.bl();
            this.c9._stroke = a;
            this.c9.ac = this.e.ey + 3;
            this.da._stroke = a;
            this.da.ac = this.e.ey + 3;
            this.c8._fill = a;
            this.c8._opacity = 1;
        }
        a3(a, b) {
            super.a3(a, b);
            if (a.d) {
                a.s(this.c8);
                a.s(this.c9);
                a.s(this.da);
            }
        }
        get_index() {
            let a = this.c6.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.c6.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.bi.index;
            return e + d;
        }
        ai(a) {
            super.ai(a);
            this.e.a2.exportPathData(a, this.c9, "lowerShape", ["Lower", "Main"]);
            this.e.a2.exportPathData(a, this.da, "upperShape", ["Upper"]);
            this.e.a2.exportPathData(a, this.c8, "translucentShape", ["Translucent"]);
        }
    }
    LineFragmentView.$t = /*@__PURE__*/ markType(LineFragmentView, 'LineFragmentView', AnchoredCategorySeriesView.$);
    return LineFragmentView;
})();
/**
 * @hidden
 */
export let SplineAreaFragmentView = /*@__PURE__*/ (() => {
    class SplineAreaFragmentView extends SplineSeriesBaseView {
        constructor(a) {
            super(a);
            this.c7 = null;
            this.c9 = new Path();
            this.db = new Path();
            this.da = new Path();
            this.dc = new Path();
            this.c7 = a;
        }
        ap() {
            super.ap();
            if (!this.n) {
                this.e.bj = 1;
            }
        }
        c8() {
            this.c9.ak = null;
            this.da.ak = null;
            this.db.ak = null;
            this.dc.ak = null;
        }
        a8() {
            super.a8();
            this.c9._fill = this.e.k4;
            this.da._fill = this.e.k4;
            this.c9._opacity = this.e.d6;
            this.da._opacity = 0.5 * this.e.d6;
            this.db._stroke = this.e.k5;
            this.db.ac = this.e.ey;
            this.db.ai = this.e.lc;
            this.db.ad = this.e.ld;
            this.dc._stroke = this.e.k5;
            this.dc.ac = this.e.ey;
            this.dc.ai = this.e.lc;
            this.dc.ad = this.e.ld;
        }
        a9() {
            super.a9();
            let a = this.bl();
            this.c9._fill = a;
            this.da._fill = a;
            this.da._opacity = 1;
            this.c9._opacity = 1;
            this.db._stroke = a;
            this.db.ac = this.e.ey + 3;
            this.dc._stroke = a;
            this.dc.ac = this.e.ey + 3;
        }
        a3(a, b) {
            super.a3(a, b);
            if (a.d) {
                a.s(this.c9);
                a.s(this.da);
                a.s(this.db);
                a.s(this.dc);
            }
        }
        get_index() {
            let a = this.c7.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.c7.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.bi.index;
            return e + d;
        }
        ai(a) {
            super.ai(a);
            this.e.a2.exportPathData(a, this.db, "lowerShape", ["Lower"]);
            this.e.a2.exportPathData(a, this.dc, "upperShape", ["Upper", "Main"]);
            this.e.a2.exportPathData(a, this.da, "translucentShape", ["Translucent"]);
            this.e.a2.exportPathData(a, this.c9, "fillShape", ["Fill"]);
        }
    }
    SplineAreaFragmentView.$t = /*@__PURE__*/ markType(SplineAreaFragmentView, 'SplineAreaFragmentView', SplineSeriesBaseView.$);
    return SplineAreaFragmentView;
})();
/**
 * @hidden
 */
export let SplineFragmentView = /*@__PURE__*/ (() => {
    class SplineFragmentView extends SplineSeriesBaseView {
        constructor(a) {
            super(a);
            this.c7 = null;
            this.da = new Path();
            this.c9 = new Path();
            this.db = new Path();
            this.c7 = a;
        }
        co() {
            return new SplineFragmentBucketCalculator(this);
        }
        c8() {
            this.c9.ak = null;
            this.da.ak = null;
            this.db.ak = null;
        }
        a8() {
            super.a8();
            this.da._stroke = this.e.k4;
            this.da.ac = this.e.ey;
            this.da.ai = this.e.lc;
            this.da.ad = this.e.ld;
            this.db._stroke = this.e.k4;
            this.db.ac = this.e.ey;
            this.db.ai = this.e.lc;
            this.db.ad = this.e.ld;
            this.c9._fill = this.e.k4;
            this.c9._opacity = 0.75;
        }
        a9() {
            super.a9();
            let a = this.bl();
            this.da._stroke = a;
            this.da.ac = this.e.ey + 3;
            this.db._stroke = a;
            this.db.ac = this.e.ey + 3;
            this.c9._fill = a;
            this.c9._opacity = 0.75;
        }
        a3(a, b) {
            super.a3(a, b);
            if (a.d) {
                a.s(this.c9);
                a.s(this.da);
                a.s(this.db);
            }
        }
        get_index() {
            let a = this.c7.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.c7.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.bi.index;
            return e + d;
        }
        ai(a) {
            super.ai(a);
            this.e.a2.exportPathData(a, this.da, "lowerShape", ["Lower", "Main"]);
            this.e.a2.exportPathData(a, this.db, "upperShape", ["Upper"]);
            this.e.a2.exportPathData(a, this.c9, "translucentShape", ["Translucent"]);
        }
    }
    SplineFragmentView.$t = /*@__PURE__*/ markType(SplineFragmentView, 'SplineFragmentView', SplineSeriesBaseView.$);
    return SplineFragmentView;
})();
/**
 * @hidden
 */
export let StackedSeriesView = /*@__PURE__*/ (() => {
    class StackedSeriesView extends CategorySeriesView {
        constructor(a) {
            super(a);
            this.cw = null;
            this.cx = new Canvas();
            this.cz = new Panel();
            this.cw = a;
        }
        get cy() {
            return this.cx;
        }
        get c0() {
            return this.cz;
        }
        co() {
            return new StackedBucketCalculator(this);
        }
        am() {
            super.am();
            for (let a = 0; a < this.cw.o7.f.count; a++) {
                this.cw.o7.f._inner[a].bi.am();
            }
        }
        ao(a, b) {
            super.ao(a, b);
            for (let c of fromEnum(this.cw.series)) {
                c.visualSeriesLink.bi.ao(a, b);
            }
        }
        ac() {
            let a = "rgba(95,95,95,0.5)";
            let b = true;
            let c = 5, d = 5, e = 5;
            let f = this.e;
            if (typeCast(StackedAreaSeries.$, f) !== null || typeCast(StackedSplineAreaSeries.$, f) !== null) {
                d = 1;
                e = -3;
            }
            else if (typeCast(StackedLineSeries.$, f) !== null || typeCast(StackedSplineSeries.$, f) !== null) {
                c = 3;
                d = 1;
                e = 4;
                b = false;
            }
            else if (typeCast(StackedColumnSeries.$, f) !== null) {
                d = 5;
                e = 0;
            }
            let g = new Color();
            g.colorString = a;
            f.lb = g;
            f.ev = c;
            f.ew = d;
            f.ex = e;
            f.du = b;
        }
    }
    StackedSeriesView.$t = /*@__PURE__*/ markType(StackedSeriesView, 'StackedSeriesView', CategorySeriesView.$);
    return StackedSeriesView;
})();
/**
 * @hidden
 */
export let StackedBarSeriesView = /*@__PURE__*/ (() => {
    class StackedBarSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
            this.c1 = null;
            this.c1 = a;
        }
        co() {
            return new StackedBarBucketCalculator(this);
        }
    }
    StackedBarSeriesView.$t = /*@__PURE__*/ markType(StackedBarSeriesView, 'StackedBarSeriesView', StackedSeriesView.$);
    return StackedBarSeriesView;
})();
/**
 * @hidden
 */
export let StackedColumnSeriesView = /*@__PURE__*/ (() => {
    class StackedColumnSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        co() {
            return new StackedColumnBucketCalculator(this);
        }
    }
    StackedColumnSeriesView.$t = /*@__PURE__*/ markType(StackedColumnSeriesView, 'StackedColumnSeriesView', StackedSeriesView.$);
    return StackedColumnSeriesView;
})();
/**
 * @hidden
 */
export let StackedSeriesManager = /*@__PURE__*/ (() => {
    class StackedSeriesManager extends Base {
        constructor(a) {
            super();
            this.b = null;
            this.f = null;
            this.c = null;
            this.e = null;
            this.d = null;
            this.j = null;
            this.k = null;
            if (a == null) {
                return;
            }
            this.b = a;
            this.f = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.c = new StackedSeriesCollection();
            this.e = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.d = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.j = this.b.o8.cy;
            this.k = this.b.o8.c0;
            let b = this.c;
            b.collectionChanged = delegateCombine(b.collectionChanged, (b, c) => {
                if (c.oldItems != null) {
                    for (let d of fromEn(c.oldItems)) {
                        if (this.f.contains(d.visualSeriesLink)) {
                            this.f.remove(d.visualSeriesLink);
                        }
                    }
                }
                if (c.newItems != null) {
                    let e = c.newStartingIndex;
                    for (let f of fromEn(c.newItems)) {
                        let g = this.a(f);
                        this.f.insert(e, g);
                        e++;
                    }
                }
            });
            let c = this.f;
            c.collectionChanged = delegateCombine(c.collectionChanged, (c, d) => {
                if (d.oldItems != null) {
                    for (let e of fromEn(d.oldItems)) {
                        e.hw(true, e.bi);
                        e.bs = null;
                        e.bn = null;
                        e.itemsSource = null;
                        e.legend = null;
                        if (this.k != null && this.k.ab.contains(e)) {
                            this.k.ab.remove(e);
                        }
                        if (this.b.bs != null) {
                            this.b.bs.jy(e);
                        }
                    }
                }
                if (d.newItems != null) {
                    for (let f of fromEn(d.newItems)) {
                        f.bs = this.b.bs;
                        f.bn = this.b.bn;
                        if (!this.k.ab.contains(f)) {
                            this.k.ab.add(f);
                        }
                        if (this.b.bs != null) {
                            this.b.bs.hc(f);
                        }
                    }
                }
                this.b.je(false);
            });
        }
        a(a) {
            if (typeCast(StackedLineSeries.$, this.b) !== null) {
                let b = new LineFragment();
                b.provideRenderer(a.au);
                b.parentSeries = this.b;
                a.visualSeriesLink = b;
                b.logicalSeriesLink = a;
                b.bi.br = this.b.bi.br;
                this.i(b, a);
                this.g(b);
                return b;
            }
            if (typeCast(StackedColumnSeries.$, this.b) !== null) {
                let c = new ColumnFragment();
                c.provideRenderer(a.au);
                c.parentSeries = this.b;
                a.visualSeriesLink = c;
                c.logicalSeriesLink = a;
                c.bi.br = this.b.bi.br;
                this.i(c, a);
                this.g(c);
                return c;
            }
            if (typeCast(StackedBarSeries.$, this.b) !== null) {
                let d = new BarFragment();
                d.provideRenderer(a.au);
                d.parentSeries = typeCast(StackedBarSeries.$, this.b);
                a.visualSeriesLink = d;
                d.logicalSeriesLink = a;
                d.bi.br = this.b.bi.br;
                this.i(d, a);
                this.g(d);
                return d;
            }
            if (typeCast(StackedAreaSeries.$, this.b) !== null) {
                let e = new AreaFragment();
                e.provideRenderer(a.au);
                e.parentSeries = this.b;
                a.visualSeriesLink = e;
                e.logicalSeriesLink = a;
                e.bi.br = this.b.bi.br;
                this.i(e, a);
                this.g(e);
                return e;
            }
            if (typeCast(StackedSplineSeries.$, this.b) !== null) {
                let f = new SplineFragment();
                f.provideRenderer(a.au);
                f.parentSeries = this.b;
                a.visualSeriesLink = f;
                f.logicalSeriesLink = a;
                f.bi.br = this.b.bi.br;
                this.i(f, a);
                this.g(f);
                return f;
            }
            if (typeCast(StackedSplineAreaSeries.$, this.b) !== null) {
                let g = new SplineAreaFragment();
                g.provideRenderer(a.au);
                g.parentSeries = this.b;
                a.visualSeriesLink = g;
                g.logicalSeriesLink = a;
                g.bi.br = this.b.bi.br;
                this.i(g, a);
                this.g(g);
                return g;
            }
            return null;
        }
        i(a, b) {
            a.k6 = b.fz;
            a.lc = b.f2;
            a.ld = b.f4;
            a.le = b.f5;
            a.itemsSource = this.b.itemsSource;
            a.legend = this.b.aw;
            a.legendItemTemplate = b.ds;
            a.l0 = b.gc;
            a.m1 = b.fq;
            a.m2 = b.fr;
            a.m3 = b.ga;
            a.mn = b.dt;
            a.l2 = b.k;
            a.es = this.b.es;
            a._opacity = b.an;
            a.k9 = b.ft;
            a.eu = this.b.eu;
            a.lf = b.f6;
            a.ey = b.al;
            a.fx = b.ax;
            a.l6 = b.u;
            a.ph = b.cq;
            a._visibility = b.gd;
            let c = typeCast(AreaFragment.$, a);
            if (c != null) {
                c.d6 = b.ae;
            }
            let d = typeCast(SplineAreaFragment.$, a);
            if (d != null) {
                d.d6 = b.ae;
            }
            let e = typeCast(ColumnFragment.$, a);
            if (e != null) {
                e.qx = b.ag;
                e.qy = b.ah;
            }
            let f = typeCast(BarFragment.$, a);
            if (f != null) {
                f.qx = b.ag;
                f.qy = b.ah;
            }
            a.toolTip = b.ay;
            a.cp = b.s;
            a.du = b.v;
            b.dg();
            b.dh();
            b.di();
            b.dj();
        }
        h() {
            this.e.clear();
            this.d.clear();
            let a = 0;
            for (let b of fromEnum(this.f)) {
                b.dl = true;
                b.fh = this.b.pi(this.c._inner[a]);
                b.bn = this.b.bn;
                b.bs = this.b.bs;
                if (this.c._inner[a].y) {
                    this.e.add(b);
                }
                else {
                    this.d.add(b);
                }
                if (typeCast(StackedLineSeries.$, this.b) !== null || typeCast(StackedAreaSeries.$, this.b) !== null || typeCast(StackedSplineSeries.$, this.b) !== null || typeCast(StackedSplineAreaSeries.$, this.b) !== null) {
                    b.pk(this.b.fetchXAxis());
                    b.pl(this.b.fetchYAxis());
                }
                b.je(false);
                a++;
            }
        }
        g(a) {
            let fragment_ = a;
            fragment_.externalObject = TypeRegistrar.createFromInternal(fragment_, PlatformConstants.Prefix, PlatformConstants.Postfix);
            fragment_.externalObject._implementation = fragment_;
        }
    }
    StackedSeriesManager.$t = /*@__PURE__*/ markType(StackedSeriesManager, 'StackedSeriesManager');
    return StackedSeriesManager;
})();
//# sourceMappingURL=StackedSeriesCreatedEventArgs_combined.js.map
