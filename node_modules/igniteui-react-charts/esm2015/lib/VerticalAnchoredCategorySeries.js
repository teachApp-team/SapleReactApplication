/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { CategoryYAxis } from "./CategoryYAxis";
import { IVerticalAnchoredCategorySeriesInteractionManager_$type } from "./IVerticalAnchoredCategorySeriesInteractionManager";
import { DVContainer } from "igniteui-react-core";
import { runOn, typeCast, EnumUtil, markType, markDep } from "igniteui-react-core";
import { Axis } from "./Axis";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { TrendLineType_$type } from "igniteui-react-core";
import { CategoryTrendLineManagerFactory } from "./CategoryTrendLineManagerFactory";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate } from "igniteui-react-core";
/**
 * @hidden
 */
export let VerticalAnchoredCategorySeries = /*@__PURE__*/ (() => {
    class VerticalAnchoredCategorySeries extends AnchoredCategorySeries {
        constructor() {
            super(...arguments);
            this.p3 = null;
        }
        hu() {
            super.hu();
            this.xAxis = null;
            this.yAxis = null;
        }
        get p4() {
            if (this.p3 == null) {
                this.p3 = DVContainer.instance.createInstance(IVerticalAnchoredCategorySeriesInteractionManager_$type, () => this.b2.n);
            }
            return this.p3;
        }
        get_isVertical() {
            return true;
        }
        na() {
            return this.yAxis;
        }
        nu() {
            return this.xAxis;
        }
        getOffsetValue() {
            return this.nf.r(this.na(), this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
        }
        getCategoryWidth() {
            return this.yAxis.getCategorySize(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
        }
        fc(a, b) {
            return this.fd(a, b, this.na(), runOn(this, this.n9), this.valueColumn);
        }
        fe(a, b) {
            return this.ff(a, b, this.na(), runOn(this, this.n9), this.valueColumn);
        }
        d9(a, b, c, d, e) {
            if (this.valueColumn == null) {
                return Number.POSITIVE_INFINITY;
            }
            return this.ea(a, b, this.yAxis, d, e, this.valueColumn.count, runOn(this, this.n9));
        }
        bd() {
            if (this.be == 0) {
                return 1;
            }
            else {
                return super.bd();
            }
        }
        lx(a) {
            if (!this.hasMarkers || !this.l4()) {
                return Rect.empty;
            }
            return this.p4.e$b(this, this.nb.m, a, runOn(this, this.qc));
        }
        qc(a) {
            return this.o2.c5(a);
        }
        dh(a, b) {
            if (this.dg(a, b)) {
                return true;
            }
            if (this.l5(a, b)) {
                return true;
            }
            return false;
        }
        en(a, b, c) {
            if (this.bs == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.bi);
            let e = this.na();
            let f = new ScalerParams(0, this.bs.mr, this.bi.br, e.ca, d);
            let g = this.nf.r(e, this.bs.mr, this.bi.br, d);
            return this.ep(this.valueColumn, a, e, f, g, runOn(this, this.n9), b, c);
        }
        lm(a, b, c) {
            let d = this.na();
            return this.lo(a, b, c, this.nf.r(d, this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi)), this.nu(), d, null, null, null);
        }
        fetchXAxis() {
            return this.xAxis;
        }
        fetchYAxis() {
            return this.yAxis;
        }
        pk(a) {
            this.xAxis = typeCast(NumericXAxis.$, a);
        }
        pl(a) {
            this.yAxis = typeCast(CategoryYAxis.$, a);
        }
        n5() {
            return this.xAxis != null && this.xAxis.cn();
        }
        m4(a, b) {
            return this.oz(a, b, this.yAxis);
        }
        eb(a) {
            return this.p4.e$a(this, a);
        }
        n9(a) {
            return this.ed(a, this.na());
        }
        e8(a) {
            return truncate(Math.round(this.eb(a)));
        }
        fp(a) {
            let b = this.e8(a);
            return b >= 0 && this.bz != null && b < this.bz.count ? this.bz.item(b) : null;
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case VerticalAnchoredCategorySeries.$$p[0]:
                    if (c != d) {
                        this.h0(typeCast(Axis.$, c));
                        this.i5(typeCast(Axis.$, d));
                        this.nj.cn.g(this.eu);
                        this.je(false);
                        this.il();
                    }
                    break;
                case VerticalAnchoredCategorySeries.$$p[1]:
                    if (c != d) {
                        this.h0(typeCast(Axis.$, c));
                        this.i5(typeCast(Axis.$, d));
                        this.nj.cn.g(this.eu);
                        this.n5();
                        this.je(false);
                        this.il();
                    }
                    break;
                case "TrendLineType":
                    let e = EnumUtil.getEnumValue(TrendLineType_$type, d);
                    if (e != 0) {
                        this.o2.cy = CategoryTrendLineManagerFactory.a(this.o2.cy, this.yAxis, this.jy, this, this.b2);
                    }
                    break;
            }
        }
        p7(a) {
            if (typeCast(CategoryYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        p6(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    VerticalAnchoredCategorySeries.$t = /*@__PURE__*/ markType(VerticalAnchoredCategorySeries, 'VerticalAnchoredCategorySeries', AnchoredCategorySeries.$);
    VerticalAnchoredCategorySeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, VerticalAnchoredCategorySeries, 'raisePropertyChanged', ['XAxis::qa', [NumericXAxis.$, null], 'YAxis::qb', [CategoryYAxis.$, null]]);
    return VerticalAnchoredCategorySeries;
})();
//# sourceMappingURL=VerticalAnchoredCategorySeries.js.map
