import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrSeries } from "./igr-series";
import { CalloutCollisionMode_$type } from "./CalloutCollisionMode";
import { IgrCalloutStyleUpdatingEventArgs } from "./igr-callout-style-updating-event-args";
import { IgrCalloutContentUpdatingEventArgs } from "./igr-callout-content-updating-event-args";
import { IgrCalloutLabelUpdatingEventArgs } from "./igr-callout-label-updating-event-args";
import { IgrCalloutSeriesSelectingEventArgs } from "./igr-callout-series-selecting-event-args";
import { IgrAnnotationLayer } from "./igr-annotation-layer";
import { CalloutLayer } from "./CalloutLayer";
import { ensureBool, brushToString, stringToBrush, ensureEnum } from "igniteui-react-core";
/**
 * Represents an annotation layer that displays crosshair lines that cross through the closest value of the target series under the cursor.
*/
export class IgrCalloutLayer extends IgrAnnotationLayer {
    constructor(props) {
        super(props);
        this._calloutStyleUpdating = null;
        this._calloutStyleUpdating_wrapped = null;
        this._calloutContentUpdating = null;
        this._calloutContentUpdating_wrapped = null;
        this._calloutLabelUpdating = null;
        this._calloutLabelUpdating_wrapped = null;
        this._calloutSeriesSelecting = null;
        this._calloutSeriesSelecting_wrapped = null;
    }
    createImplementation() {
        return new CalloutLayer();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the label mapping property for the callouts.
    */
    get labelMemberPath() {
        return this.i.pe;
    }
    set labelMemberPath(v) {
        this.i.pe = v;
    }
    /**
     * Gets or sets the label mapping property for the callouts.
    */
    get xMemberPath() {
        return this.i.pl;
    }
    set xMemberPath(v) {
        this.i.pl = v;
    }
    /**
     * Gets or sets the label mapping property for the callouts.
    */
    get yMemberPath() {
        return this.i.po;
    }
    set yMemberPath(v) {
        this.i.po = v;
    }
    /**
     * Gets or sets the key mapping property for the callouts.
    */
    get keyMemberPath() {
        return this.i.pb;
    }
    set keyMemberPath(v) {
        this.i.pb = v;
    }
    /**
     * Gets or sets whether to allow the callouts to be variable distances from the target points, for suppporting collision modes.
    */
    get isCalloutOffsettingEnabled() {
        return this.i.n0;
    }
    set isCalloutOffsettingEnabled(v) {
        this.i.n0 = ensureBool(v);
    }
    /**
     * Gets or sets the content mapping property for the callouts.
    */
    get contentMemberPath() {
        return this.i.o5;
    }
    set contentMemberPath(v) {
        this.i.o5 = v;
    }
    /**
     * Gets or sets the series to target this annotation to. If null, this annotation targets all series simultaneously.
    */
    get targetSeries() {
        if (this.i.nb == null) {
            return null;
        }
        if (!this.i.nb.externalObject) {
            let e = IgrSeries._createFromInternal(this.i.nb);
            if (e) {
                e._implementation = this.i.nb;
            }
            this.i.nb.externalObject = e;
        }
        return this.i.nb.externalObject;
    }
    set targetSeries(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.nb = null : this.i.nb = v.i;
    }
    /**
     * Gets or sets a channel name to identify other callout layers within the chart to share collision information with.
    */
    get collisionChannel() {
        return this.i.o2;
    }
    set collisionChannel(v) {
        this.i.o2 = v;
    }
    /**
     * Gets or sets how to select the final value to annotate.
    */
    get isAutoCalloutBehaviorEnabled() {
        return this.i.nz;
    }
    set isAutoCalloutBehaviorEnabled(v) {
        this.i.nz = ensureBool(v);
    }
    /**
     * Gets or sets whether to use values, rather than labels for auto callout labels.
    */
    get useValueForAutoCalloutLabels() {
        return this.i.n2;
    }
    set useValueForAutoCalloutLabels(v) {
        this.i.n2 = ensureBool(v);
    }
    /**
     * Gets or sets whether to allow for custom callout styles.
    */
    get isCustomCalloutStyleEnabled() {
        return this.i.n1;
    }
    set isCustomCalloutStyleEnabled(v) {
        this.i.n1 = ensureBool(v);
    }
    /**
     * Gets or sets the precision to use when values are used for the auto callout labels.
    */
    get autoCalloutLabelPrecision() {
        return this.i.ok;
    }
    set autoCalloutLabelPrecision(v) {
        this.i.ok = +v;
    }
    /**
     * Gets or sets the color to use for the callout text. Leave unset for an automatic value.
    */
    get calloutTextColor() {
        return brushToString(this.i.qw);
    }
    set calloutTextColor(v) {
        this.i.qw = stringToBrush(v);
    }
    /**
     * Gets or sets the brush that specifies how the backgrounds for the callouts of the layer are painted. Leave unset for an automatic value.
    */
    get calloutBackground() {
        return brushToString(this.i.qt);
    }
    set calloutBackground(v) {
        this.i.qt = stringToBrush(v);
    }
    /**
     * Gets or sets the precision to use displaying values for interpolated crosshair positions.
    */
    get calloutInterpolatedValuePrecision() {
        return this.i.ol;
    }
    set calloutInterpolatedValuePrecision(v) {
        this.i.ol = +v;
    }
    /**
     * Gets or sets the brush that specifies how the outlines for the callouts of the layer are painted.
    */
    get calloutOutline() {
        return brushToString(this.i.qv);
    }
    set calloutOutline(v) {
        this.i.qv = stringToBrush(v);
    }
    /**
     * Gets or sets the brush that specifies how the leader lines for the callouts of the layer are painted.
    */
    get calloutLeaderBrush() {
        return brushToString(this.i.qu);
    }
    set calloutLeaderBrush(v) {
        this.i.qu = stringToBrush(v);
    }
    /**
     * Gets or sets the left padding to use withing the callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get calloutPaddingLeft() {
        return this.i.od;
    }
    set calloutPaddingLeft(v) {
        this.i.od = +v;
    }
    /**
     * Gets or sets the top padding to use within the callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get calloutPaddingTop() {
        return this.i.of;
    }
    set calloutPaddingTop(v) {
        this.i.of = +v;
    }
    /**
     * Gets or sets the right padding to use within the callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get calloutPaddingRight() {
        return this.i.oe;
    }
    set calloutPaddingRight(v) {
        this.i.oe = +v;
    }
    /**
     * Gets or sets the bottom padding to use within the callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get calloutPaddingBottom() {
        return this.i.oc;
    }
    set calloutPaddingBottom(v) {
        this.i.oc = +v;
    }
    /**
     * Gets or sets the strategy to use for avoiding collisions between the callouts in this layer. Leave unset for an automatic value.
    */
    get calloutCollisionMode() {
        return this.i.m5;
    }
    set calloutCollisionMode(v) {
        this.i.m5 = ensureEnum(CalloutCollisionMode_$type, v);
    }
    /**
     * Gets or sets the padding to add to the callout positioning. Leave unset for an automatic value.
    */
    get calloutPositionPadding() {
        return this.i.og;
    }
    set calloutPositionPadding(v) {
        this.i.og = +v;
    }
    /**
     * Gets or sets the stroke thickness for the callout backing. Leave unset for an automatic value.
    */
    get calloutStrokeThickness() {
        return this.i.oh;
    }
    set calloutStrokeThickness(v) {
        this.i.oh = +v;
    }
    /**
     * Gets or sets the stroke thickness for the axis annotation backing. Leave unset for an automatic value.
    */
    get textStyle() {
        return this.i.ph;
    }
    set textStyle(v) {
        this.i.ph = v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.targetSeries && this.targetSeries.name && this.targetSeries.name == name) {
            return this.targetSeries;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.targetSeries && this.targetSeries._styling) {
            this.targetSeries._styling(container, component, this);
        }
        this._inStyling = false;
    }
    getItemValue(item, memberPathName) {
        let iv = this.i.fs(item, memberPathName);
        return (iv);
    }
    /**
     * Invalidates content of callout layer
    
    */
    invalidateCalloutContent() {
        this.i.px();
    }
    /**
     * Event raised when updating style of callout layer
    */
    get calloutStyleUpdating() {
        return this._calloutStyleUpdating;
    }
    set calloutStyleUpdating(ev) {
        if (this._calloutStyleUpdating_wrapped !== null) {
            this.i.calloutStyleUpdating = delegateRemove(this.i.calloutStyleUpdating, this._calloutStyleUpdating_wrapped);
            this._calloutStyleUpdating_wrapped = null;
            this._calloutStyleUpdating = null;
        }
        this._calloutStyleUpdating = ev;
        this._calloutStyleUpdating_wrapped = (o, e) => {
            let outerArgs = new IgrCalloutStyleUpdatingEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCalloutStyleUpdating) {
                this.beforeCalloutStyleUpdating(this, outerArgs);
            }
            if (this._calloutStyleUpdating) {
                this._calloutStyleUpdating(this, outerArgs);
            }
        };
        this.i.calloutStyleUpdating = delegateCombine(this.i.calloutStyleUpdating, this._calloutStyleUpdating_wrapped);
    }
    /**
     * Raised to allow you to decide on the content for an automatically created callout.
    */
    get calloutContentUpdating() {
        return this._calloutContentUpdating;
    }
    set calloutContentUpdating(ev) {
        if (this._calloutContentUpdating_wrapped !== null) {
            this.i.calloutContentUpdating = delegateRemove(this.i.calloutContentUpdating, this._calloutContentUpdating_wrapped);
            this._calloutContentUpdating_wrapped = null;
            this._calloutContentUpdating = null;
        }
        this._calloutContentUpdating = ev;
        this._calloutContentUpdating_wrapped = (o, e) => {
            let outerArgs = new IgrCalloutContentUpdatingEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCalloutContentUpdating) {
                this.beforeCalloutContentUpdating(this, outerArgs);
            }
            if (this._calloutContentUpdating) {
                this._calloutContentUpdating(this, outerArgs);
            }
        };
        this.i.calloutContentUpdating = delegateCombine(this.i.calloutContentUpdating, this._calloutContentUpdating_wrapped);
    }
    /**
     * Raised to allow you to decide on the label for an automatically created callout.
    */
    get calloutLabelUpdating() {
        return this._calloutLabelUpdating;
    }
    set calloutLabelUpdating(ev) {
        if (this._calloutLabelUpdating_wrapped !== null) {
            this.i.calloutLabelUpdating = delegateRemove(this.i.calloutLabelUpdating, this._calloutLabelUpdating_wrapped);
            this._calloutLabelUpdating_wrapped = null;
            this._calloutLabelUpdating = null;
        }
        this._calloutLabelUpdating = ev;
        this._calloutLabelUpdating_wrapped = (o, e) => {
            let outerArgs = new IgrCalloutLabelUpdatingEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCalloutLabelUpdating) {
                this.beforeCalloutLabelUpdating(this, outerArgs);
            }
            if (this._calloutLabelUpdating) {
                this._calloutLabelUpdating(this, outerArgs);
            }
        };
        this.i.calloutLabelUpdating = delegateCombine(this.i.calloutLabelUpdating, this._calloutLabelUpdating_wrapped);
    }
    /**
     * Raised to allow you to select a target series for a data bound callout.
    */
    get calloutSeriesSelecting() {
        return this._calloutSeriesSelecting;
    }
    set calloutSeriesSelecting(ev) {
        if (this._calloutSeriesSelecting_wrapped !== null) {
            this.i.calloutSeriesSelecting = delegateRemove(this.i.calloutSeriesSelecting, this._calloutSeriesSelecting_wrapped);
            this._calloutSeriesSelecting_wrapped = null;
            this._calloutSeriesSelecting = null;
        }
        this._calloutSeriesSelecting = ev;
        this._calloutSeriesSelecting_wrapped = (o, e) => {
            let outerArgs = new IgrCalloutSeriesSelectingEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCalloutSeriesSelecting) {
                this.beforeCalloutSeriesSelecting(this, outerArgs);
            }
            if (this._calloutSeriesSelecting) {
                this._calloutSeriesSelecting(this, outerArgs);
            }
        };
        this.i.calloutSeriesSelecting = delegateCombine(this.i.calloutSeriesSelecting, this._calloutSeriesSelecting_wrapped);
    }
}
//# sourceMappingURL=igr-callout-layer.js.map
