/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SplineSeriesBase } from "./SplineSeriesBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { typeCast, runOn, markType } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { SplineSeriesBaseView } from "./SplineSeriesBaseView";
import { ISortingAxis_$type } from "./ISortingAxis";
/**
 * @hidden
 */
export let SplineSeries = /*@__PURE__*/ (() => {
    class SplineSeries extends SplineSeriesBase {
        constructor() {
            super();
            this.qv = null;
            this.qv = new CategoryLineRasterizer();
            this.ab = SplineSeries.$;
        }
        bf() {
            return new SplineSeriesView(this);
        }
        iv(a) {
            super.iv(a);
            this.qw = a;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        hw(a, b) {
            super.hw(a, b);
            let c = b;
            c.c8();
        }
        os(a, b) {
            super.os(a, b);
            let c = b;
            let d = c.cn.d;
            let e = typeCast(SplineSeriesView.$, b);
            let f = a.f;
            let g = this.getEffectiveViewport1(b);
            this.ni.x(this, this.n3(), this.p2, runOn(this, this.m4), this.ob(b), this.oc(b));
            let h = false;
            let i = this.ni.c;
            if (i != null) {
                h = true;
            }
            if (h) {
                let j = new ScalerParams(0, b.bs, b.br, this.p2.ca, g);
                this.oo(f, -1, this.valueColumn.count, this.p2, j, b.n);
            }
            let k = e.de;
            let l = e.df;
            let m = e.dd;
            this.ni.ae(k, true, false, true, false);
            this.ni.ae(l, true, false, true, false);
            this.ni.ae(m, false, true, false, false);
            m._opacity = 0.75 * this.ni.i;
            if (b.cr(a)) {
                e.c9(f.count, f, true, 1, this.o0(f, f.count - 1, b.br, b.bs), d, this.eu);
                b.cu(a);
            }
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    SplineSeries.$t = /*@__PURE__*/ markType(SplineSeries, 'SplineSeries', SplineSeriesBase.$);
    return SplineSeries;
})();
/**
 * @hidden
 */
export let SplineSeriesView = /*@__PURE__*/ (() => {
    class SplineSeriesView extends SplineSeriesBaseView {
        constructor(a) {
            super(a);
            this.c7 = null;
            this.dh = new Path();
            this.dg = new Path();
            this.di = new Path();
            this.dc = new Path();
            this.db = new Path();
            this.da = new Path();
            this.c7 = a;
        }
        get de() {
            return this.dh;
        }
        get df() {
            return this.di;
        }
        get dd() {
            return this.dg;
        }
        c8() {
            this.dg.ak = null;
            this.dh.ak = null;
            this.di.ak = null;
            this.an();
        }
        c9(a, b, c, d, e, f, g) {
            this.c7.qv.a = typeCast(ISortingAxis_$type, this.cp.fetchXAxis()) !== null ? true : false;
            this.c7.qv.m(this.dh, this.dg, this.di, a, b, c, d, e, f, g);
            this.an();
        }
        a9() {
            super.a9();
            this.db.ak = this.dh.ak;
            this.dc.ak = this.di.ak;
            this.da.ak = this.dg.ak;
            let a = this.bl();
            this.db._stroke = a;
            this.db.ac = this.e.ey + 3;
            this.dc._stroke = a;
            this.dc.ac = this.e.ey + 3;
            this.da._fill = a;
            this.da._opacity = 1;
        }
        a3(a, b) {
            super.a3(a, b);
            if (a.d) {
                if (b) {
                    a.s(this.da);
                    a.s(this.db);
                    a.s(this.dc);
                }
                else {
                    a.s(this.dg);
                    a.s(this.dh);
                    a.s(this.di);
                }
            }
        }
        ai(a) {
            super.ai(a);
            this.e.a2.exportPathData(a, this.dh, "lowerShape", ["Lower", "Main"]);
            this.e.a2.exportPathData(a, this.di, "upperShape", ["Upper"]);
            this.e.a2.exportPathData(a, this.dg, "translucentShape", ["Translucent"]);
        }
    }
    SplineSeriesView.$t = /*@__PURE__*/ markType(SplineSeriesView, 'SplineSeriesView', SplineSeriesBaseView.$);
    return SplineSeriesView;
})();
//# sourceMappingURL=SplineSeries_combined.js.map
