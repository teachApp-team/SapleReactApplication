import { TimeAxisBase } from "./TimeAxisBase";
import { ITimeRangeSelectorAxis } from "./ITimeRangeSelectorAxis";
import { TimeAxisBreakCollection } from "./TimeAxisBreakCollection";
import { TimeAxisLabelFormatCollection } from "./TimeAxisLabelFormatCollection";
import { TimeAxisIntervalCollection } from "./TimeAxisIntervalCollection";
import { Type, IList$1, EventArgs } from "igniteui-react-core";
import { TimeAxisLabelFormat } from "./TimeAxisLabelFormat";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { CultureInfo } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class TimeXAxis extends TimeAxisBase implements ITimeRangeSelectorAxis {
    static $t: Type;
    constructor();
    protected get_cd(): boolean;
    dy(a: number, b: ScalerParams): number;
    gs(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    protected startCursor(): void;
    protected resetCursor(): void;
    private mt;
    d1(a: number, b: ScalerParams): number;
    private md;
    readonly breaks: TimeAxisBreakCollection;
    private mj;
    readonly labelFormats: TimeAxisLabelFormatCollection;
    protected gz(a: any, b: string, c: any, d: any): void;
    protected hn(a: Rect, b: Rect): void;
    protected hm(a: Rect, b: Rect): void;
    cp(): boolean;
    private _omission;
    private omission;
    private m7;
    private mb;
    private mm;
    private mq;
    private m6;
    fl(a: number): string;
    e8(a: any): any;
    static mu(a: Date, b: number, c: IList$1<TimeAxisLabelFormat>, d: CultureInfo): any;
    protected get_k8(): boolean;
    protected set_k8(a: boolean): void;
    private mh;
    readonly intervals: TimeAxisIntervalCollection;
    private mw;
    static mx(a: number): string;
    private static ma;
    private static mc;
    private mf;
    private mg;
    protected hc(a: boolean): void;
    private ml;
    private mn;
    private m5;
    private mp;
    visibleMinimum: Date;
    private mo;
    visibleMaximum: Date;
    protected l5(): void;
    j0(a: Rect, b: Rect, c: Rect, d: number, e: number): number;
    i$f(a: number): number;
    private m8;
    private na;
    private m9;
    protected get_b5(): boolean;
    getWindowRectForSelection(a: Date, b: Date): Rect;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    private m3;
    static m2(a: (arg1: number) => Date, b: number): number;
    private m1;
    protected l1(): void;
    static mz(a: number): string;
    itemLabelFormat(): string;
    visibleRangeChanged: (sender: any, e: EventArgs) => void;
    protected ln(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected lq(a: Rect, b: Rect, c: Rect, d: Rect): number;
    readonly isVertical: boolean;
    j$c(a: number, b: ScalerParams): number;
    j$b(a: number, b: ScalerParams): number;
    j$d(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$e(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    readonly j$a: boolean;
    readonly i$a: boolean;
}
