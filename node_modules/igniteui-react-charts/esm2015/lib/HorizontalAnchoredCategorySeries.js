/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { IHorizontalAnchoredCategorySeriesInteractionManager_$type } from "./IHorizontalAnchoredCategorySeriesInteractionManager";
import { DVContainer } from "igniteui-react-core";
import { runOn, Point_$type, typeCast, EnumUtil, enumGetBox, markType, markDep } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { CategoryMode_$type } from "./CategoryMode";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { Axis } from "./Axis";
import { TrendLineType_$type } from "igniteui-react-core";
import { CategoryTrendLineManagerFactory } from "./CategoryTrendLineManagerFactory";
import { ISortingAxis_$type } from "./ISortingAxis";
import { CategoryXAxis } from "./CategoryXAxis";
import { PropertyMetadata } from "igniteui-react-core";
/**
 * @hidden
 */
export let HorizontalAnchoredCategorySeries = /*@__PURE__*/ (() => {
    class HorizontalAnchoredCategorySeries extends AnchoredCategorySeries {
        constructor() {
            super(...arguments);
            this.p6 = null;
            this.p2 = null;
            this.p8 = null;
            this.p4 = 0;
        }
        get p7() {
            if (this.p6 == null) {
                this.p6 = DVContainer.instance.createInstance(IHorizontalAnchoredCategorySeriesInteractionManager_$type, () => this.b2.n);
            }
            return this.p6;
        }
        hu() {
            super.hu();
            this.xAxis = null;
            this.yAxis = null;
        }
        bd() {
            if (this.be == 0) {
                return 1;
            }
            else {
                return super.bd();
            }
        }
        na() {
            return this.p2;
        }
        nu() {
            return this.p8;
        }
        lx(a) {
            if (this.nb == null || this.nb.m.count == 0 || !this.hasMarkers || !this.l4()) {
                return Rect.empty;
            }
            return this.p7.d$d(this, this.nb.m, a, runOn(this, this.qk));
        }
        qk(a) {
            return this.o2.c5(a);
        }
        qc(a, b, c) {
            return this.p7.d$c(this, this.nu(), a, b, c);
        }
        ah(a) {
            return this.p7.d$a(this, this.nb.f, this.ob(this.bi), this.oc(this.bi), a);
        }
        ai(a) {
            return this.p7.d$b(this, this.nb.f, this.ob(this.bi), this.oc(this.bi), a);
        }
        dh(a, b) {
            if (this.dg(a, b)) {
                return true;
            }
            if (this.l5(a, b)) {
                return true;
            }
            return false;
        }
        getOffsetValue() {
            return this.nf.r(this.na(), this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
        }
        getCategoryWidth() {
            let a = this.getEffectiveViewport1(this.bi);
            return this.na().getCategorySize(this.bi.bs, this.bi.br, a);
        }
        en(a, b, c) {
            if (this.bs == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.bi);
            let e = this.na();
            let f = new ScalerParams(0, this.bs.mr, this.bi.br, e.ca, d);
            let g = this.nf.r(e, this.bs.mr, this.bi.br, d);
            return this.ep(this.valueColumn, a, e, f, g, runOn(this, this.n9), b, c);
        }
        fe(a, b) {
            return this.ff(a, b, this.na(), runOn(this, this.n9), this.valueColumn);
        }
        fc(a, b) {
            return this.fd(a, b, this.na(), runOn(this, this.n9), this.valueColumn);
        }
        d9(a, b, c, d, e) {
            if (this.valueColumn == null) {
                return Number.POSITIVE_INFINITY;
            }
            return this.ea(a, b, this.na(), d, e, this.valueColumn.count, runOn(this, this.n9));
        }
        lm(a, b, c) {
            if (this.na() == null || this.nu() == null) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            return this.lo(a, b, c, this.nf.r(this.na(), this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi)), this.nu(), this.na(), null, null, null);
        }
        fetchXAxis() {
            return this.p2;
        }
        fetchYAxis() {
            return this.p8;
        }
        pk(a) {
            this.xAxis = typeCast(CategoryAxisBase.$, a);
        }
        pl(a) {
            this.yAxis = typeCast(NumericYAxis.$, a);
        }
        n5() {
            return this.p8 != null && this.p8.cn();
        }
        qg(a) {
            this.p2 = a;
        }
        qh(a) {
            this.p8 = a;
        }
        m4(a, b) {
            return this.oz(a, b, this.p2);
        }
        i0(a, b, c, d) {
            switch (b) {
                case HorizontalAnchoredCategorySeries.$$p[0]:
                    this.qg(this.xAxis);
                    if (this.o2.cz) {
                        this.o2.cy = CategoryTrendLineManagerFactory.a(this.o2.cy, this.p2, this.jy, this, this.b2);
                    }
                    break;
                case "TrendLineType":
                    let e = EnumUtil.getEnumValue(TrendLineType_$type, d);
                    if (e != 0) {
                        this.o2.cy = CategoryTrendLineManagerFactory.a(this.o2.cy, this.p2, this.jy, this, this.b2);
                    }
                    break;
            }
            super.i0(a, b, c, d);
            switch (b) {
                case HorizontalAnchoredCategorySeries.$$p[0]:
                    if (c != d) {
                        this.h0(typeCast(Axis.$, c));
                        this.i5(typeCast(Axis.$, d));
                        this.qg(this.xAxis);
                        this.nj.cn.g(this.eu);
                        this.je(false);
                        this.il();
                    }
                    break;
                case HorizontalAnchoredCategorySeries.$$p[1]:
                    if (c != d) {
                        this.h0(typeCast(Axis.$, c));
                        this.i5(typeCast(Axis.$, d));
                        this.qh(this.yAxis);
                        this.nj.cn.g(this.eu);
                        this.n5();
                        this.je(false);
                        this.il();
                    }
                    break;
                case "CategoryMode":
                    if (this.xAxis != null) {
                        this.xAxis.ku(true);
                    }
                    break;
            }
        }
        hz(a, b, c, d) {
            super.hz(a, b, c, d);
            if (this.p2 != null && typeCast(ISortingAxis_$type, this.p2) !== null) {
                this.p2.i$i();
            }
            switch (a) {
                case 4:
                    if (this.p2 != null) {
                        this.p2.cn();
                    }
                    if (this.p8 != null && !this.p8.cn()) {
                        this.je(true);
                    }
                    break;
                case 1:
                    if (this.p2 != null) {
                        this.p2.cn();
                    }
                    if (this.p8 != null && !this.p8.cn()) {
                        this.je(true);
                    }
                    break;
                case 0:
                    if (this.p2 != null) {
                        this.p2.cn();
                    }
                    if (this.p8 != null && !this.p8.cn()) {
                        this.je(true);
                    }
                    break;
                case 2:
                    if (this.pd != null && this.o2.cn.d > 0 && this.p8 != null && !this.p8.cn()) {
                        this.je(true);
                    }
                    break;
                case 3:
                    if (d == this.pd) {
                        if (this.p2 != null) {
                            this.p2.cn();
                        }
                        if (this.p8 != null && !this.p8.cn()) {
                            this.je(true);
                        }
                    }
                    break;
            }
        }
        qa(a) {
            if (typeCast(CategoryXAxis.$, a) !== null || a.b7) {
                return true;
            }
            return false;
        }
        qb(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        get p5() {
            return this.p4;
        }
        set p5(a) {
            let b = this.p5;
            if (a != b) {
                this.p4 = a;
                this.raisePropertyChanged("CategoryMode", enumGetBox(CategoryMode_$type, b), enumGetBox(CategoryMode_$type, this.p5));
            }
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    HorizontalAnchoredCategorySeries.$t = /*@__PURE__*/ markType(HorizontalAnchoredCategorySeries, 'HorizontalAnchoredCategorySeries', AnchoredCategorySeries.$);
    HorizontalAnchoredCategorySeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, HorizontalAnchoredCategorySeries, 'raisePropertyChanged', ['XAxis::qi', [CategoryAxisBase.$, null], 'YAxis::qj', [NumericYAxis.$, null]]);
    return HorizontalAnchoredCategorySeries;
})();
//# sourceMappingURL=HorizontalAnchoredCategorySeries.js.map
