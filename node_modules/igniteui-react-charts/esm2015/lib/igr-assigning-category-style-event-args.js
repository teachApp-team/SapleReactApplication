import { IgrAssigningCategoryStyleEventArgsBase } from "./igr-assigning-category-style-event-args-base";
import { AssigningCategoryStyleEventArgs as AssigningCategoryStyleEventArgs_internal } from "./AssigningCategoryStyleEventArgs";
/**
 * Represents event arguments class for the AssigningCategoryStyleEvent
*
* The `AssigningCategoryStyle` event fired to allow you to override the style of items in a category or financial series
*
* ```ts
* <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*
*     <IgrCategoryXAxis name="xAxis" label="Year" />
*     <IgrNumericYAxis  name="yAxis" />
*
*     <IgrRangeColumnSeries
*         name="series1"
*         xAxisName="xAxis"
*         yAxisName="yAxis"
*         highMemberPath="High"
*         lowMemberPath="Low"
* 		isCustomCategoryStyleAllowed="true"
* 		assigningCategoryMarkerStyle= {this.onAssigningCategoryStyle} />
*  </IgrDataChart>
* ```
*
* ```ts
*  series1.assigningCategoryStyle = this.onAssigningCategoryStyle ;
*  public onAssigningCategoryStyle =( s:IgrCategorySeries , e: AssigningCategoryStyleEventArgs) => {
*
*   }
* ```
*/
export class IgrAssigningCategoryStyleEventArgs extends IgrAssigningCategoryStyleEventArgsBase {
    createImplementation() {
        return new AssigningCategoryStyleEventArgs_internal();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Gets or sets stroke thickness to use for the current item.
    *
    * Used the `strokeThickness` proprty  for the current item thickness.
    *
    * ```ts
    * public onAssigningCategoryMarkerStyle =( s:IgrCategorySeries , e: AssigningCategoryStyleEventArgs) => {
    *     e.strokeThickness = 5;
    * }
    * ```
    */
    get strokeThickness() {
        return this.i.r;
    }
    set strokeThickness(v) {
        this.i.r = +v;
    }
    /**
     * Gets or sets corner radius X to use for the current item, if applicable.
    *
    * Use the `radiusX` property to round the corners of the column.
    *
    * ```ts
    * public onAssigningCategoryMarkerStyle =( s:IgrCategorySeries, e: AssigningCategoryStyleEventArgs) => {
    *   e.radiusX = 5;
    *   }
    * ```
    */
    get radiusX() {
        return this.i.p;
    }
    set radiusX(v) {
        this.i.p = +v;
    }
    /**
     * Gets or sets corner radius Y to use for the current item, if applicable.
    *
    * Use the `radiusY` property for the y-radius of the ellipse that is used to round the corners of the column.
    *
    * ```ts
    *  public onAssigningCategoryMarkerStyle =( s:IgrCategorySeries<IIgrRangeAreaSeriesProps>, e: AssigningCategoryStyleEventArgs) => {
    * 	e.radiusY = 5;
    * }
    * ```
    */
    get radiusY() {
        return this.i.q;
    }
    set radiusY(v) {
        this.i.q = +v;
    }
}
//# sourceMappingURL=igr-assigning-category-style-event-args.js.map
