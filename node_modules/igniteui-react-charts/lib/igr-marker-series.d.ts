import { IgDataTemplate } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { IgrSeries, IIgrSeriesProps } from "./igr-series";
import { MarkerSeries } from "./MarkerSeries";
/**
 * Represents the base class for series containing markers.
*
* MarkerSeries represents the base class for series containing markers.
*
* Example:
*
* ```ts
*  <IgrDataChart
*     dataSource={this.state.dataSource} >
*
*     <IgrCategoryXAxis name="xAxis" />
*     <IgrNumericYAxis name="yAxis" />
*
*     <IgrColumnSeries
*      name="series1"
*     xAxisName="xAxis"
* 	yAxisName="yAxis"
* 	valueMemberPath="Value" />
*  </IgrDataChart>
* ```
*
* ```ts
* this.series = new IgrMarkerSeries({name: "series"});
* this.series.xAxis = this.categoryXAxis;
* this.series.yAxis = this.numericYAxis;
* this.series.xAxisName = "timeXAxis";
* this.series.yAxisName = "numericYAxis";
* this.series.volumeMemberPath="Volume";
* ```
*/
export declare abstract class IgrMarkerSeries<P extends IIgrMarkerSeriesProps = IIgrMarkerSeriesProps> extends IgrSeries<P> {
    /**
                                 * @hidden
                                 */
    readonly i: MarkerSeries;
    constructor(props: P);
    /**
     * Returns whether the current series supports visual markers.
    *
    * `hasMarkers` property is overriden, it returns whether the current series supports visual markers. You can use it like this:
    *
    * ```ts
    *  let gotMarkers: boolean = this.series.hasMarkers;
    * ```
    */
    readonly hasMarkers: boolean;
    /**
     * Gets or sets the marker type for the current series object.
     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
    *
    * `markerType` property gets or sets the marker type for the current series object. For example, you can set it like this:
    *
    * ```ts
    * this.series.markerType = "circle";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    * 	markerType = "circle"/>
    *  </IgrDataChart>
    * ```
    */
    markerType: MarkerType;
    /**
     * Gets or sets the MarkerTemplate for the current series object.
    *
    * `markerTemplate` property gets or sets the MarkerTemplate for the current series object. For example, you can use it like this:
    */
    markerTemplate: IgDataTemplate;
    /**
     * Gets or sets thickness of the marker outline
    */
    markerThickness: number;
    /**
     * Gets the effective marker template for the current series object.
    *
    * `actualMarkerTemplate` property gets the effective marker template for the current series object. You can use it like this:
    */
    actualMarkerTemplate: IgDataTemplate;
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
    *
    * `markerBrush` property gets or sets the brush that specifies how the current series object's marker interiors are painted. You can use it like this:
    *
    * ```ts
    * this.series.markerBrush = "red";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    * 	markerBrush = "blue" />
    *  </IgrDataChart>
    * ```
    */
    markerBrush: string;
    /**
     * Gets the effective marker brush for the current series object.
    *
    * `actualMarkerBrush` property gets the effective marker brush for the current series object. For example, you can use it like this:
    *
    * ```ts
    *  let effectiveMarkerBrush: string = this.series.actualMarkerBrush;
    *
    * ```
    */
    actualMarkerBrush: string;
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
    *
    * `markerOutline` property gets or sets the brush that specifies how the current series object's marker outlines are painted. You can use it like this:
    *
    * ```ts
    * this.series.markerOutline = "red";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    * 	markerOutline = "blue" />
    *  </IgrDataChart>
    * ```
    */
    markerOutline: string;
    /**
     * Gets the effective marker outline for the current series object.
    *
    *     `ActualMarkerOutline` property gets the effective marker outline for the current series object. You can use it like this:
    *
    * ```ts
    *  let effectiveMarkerOutline: string = this.series.actualMarkerOutline;
    *
    * ```
    */
    actualMarkerOutline: string;
}
export interface IIgrMarkerSeriesProps extends IIgrSeriesProps {
    /**
     * Gets or sets the marker type for the current series object.
     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
    *
    * `markerType` property gets or sets the marker type for the current series object. For example, you can set it like this:
    *
    * ```ts
    * this.series.markerType = "circle";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    * 	markerType = "circle"/>
    *  </IgrDataChart>
    * ```
    */
    markerType?: MarkerType | string;
    /**
     * Gets or sets the MarkerTemplate for the current series object.
    *
    * `markerTemplate` property gets or sets the MarkerTemplate for the current series object. For example, you can use it like this:
    */
    markerTemplate?: IgDataTemplate;
    /**
     * Gets or sets thickness of the marker outline
    */
    markerThickness?: number | string;
    /**
     * Gets the effective marker template for the current series object.
    *
    * `actualMarkerTemplate` property gets the effective marker template for the current series object. You can use it like this:
    */
    actualMarkerTemplate?: IgDataTemplate;
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
    *
    * `markerBrush` property gets or sets the brush that specifies how the current series object's marker interiors are painted. You can use it like this:
    *
    * ```ts
    * this.series.markerBrush = "red";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    * 	markerBrush = "blue" />
    *  </IgrDataChart>
    * ```
    */
    markerBrush?: string;
    /**
     * Gets the effective marker brush for the current series object.
    *
    * `actualMarkerBrush` property gets the effective marker brush for the current series object. For example, you can use it like this:
    *
    * ```ts
    *  let effectiveMarkerBrush: string = this.series.actualMarkerBrush;
    *
    * ```
    */
    actualMarkerBrush?: string;
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
    *
    * `markerOutline` property gets or sets the brush that specifies how the current series object's marker outlines are painted. You can use it like this:
    *
    * ```ts
    * this.series.markerOutline = "red";
    * ```
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrColumnSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"
    * 	markerOutline = "blue" />
    *  </IgrDataChart>
    * ```
    */
    markerOutline?: string;
    /**
     * Gets the effective marker outline for the current series object.
    *
    *     `ActualMarkerOutline` property gets the effective marker outline for the current series object. You can use it like this:
    *
    * ```ts
    *  let effectiveMarkerOutline: string = this.series.actualMarkerOutline;
    *
    * ```
    */
    actualMarkerOutline?: string;
}
