import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { DomWrapper } from "igniteui-react-core";
import { EventArgs, IList, Type } from "igniteui-react-core";
import { IZoomSlider } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { FinancialChartVolumeType } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode } from "./FinancialChartYAxisMode";
import { FinancialChartType } from "./FinancialChartType";
import { HorizontalAlignment } from "igniteui-react-core";
import { FinancialIndicatorTypeCollection } from "./FinancialIndicatorTypeCollection";
import { FinancialOverlayTypeCollection } from "./FinancialOverlayTypeCollection";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
import { FinancialChartZoomSliderType } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { IndicatorDisplayTypeCollection } from "./IndicatorDisplayTypeCollection";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { CustomIndicatorNameCollection } from "./CustomIndicatorNameCollection";
import { IChartLegend } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { Series } from "./Series";
import { Axis } from "./Axis";
import { DataSeries } from "igniteui-react-core";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { TitleSettings } from "./TitleSettings";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType } from "igniteui-react-core";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorVisualData } from "./FinancialChartRangeSelectorVisualData";
/**
 * @hidden
 */
export declare class FinancialChart extends XYChart {
    static $t: Type;
    protected g5(a: string, b: any, c: any): void;
    private wo;
    private wn;
    private wk;
    private ww;
    private qr;
    provideGrid(a: DomWrapper): void;
    onDocumentClick(a: Event): void;
    private s9;
    private s7;
    private s4;
    private s6;
    private s8;
    private s5;
    getContext(): FinancialChartContext;
    provideContainer(a: any): void;
    private w7;
    private xl;
    private v4;
    private xj;
    setGridRows(): void;
    protected gj(): void;
    private w3;
    private w4;
    private xd;
    private v3;
    private wu;
    protected gg(a: XamDataChart): void;
    private xo;
    private xr;
    private xp;
    private xq;
    sr(): number;
    gr(source_: any, a: number, b: any): void;
    gs(source_: any, a: number, b: any): void;
    gq(source_: any): void;
    gu(source_: any, a: number, b: any, c: any): void;
    protected gm(a: Series, b: number): void;
    private px;
    private py;
    private tr;
    ty: any;
    private ts;
    tz: any;
    private to;
    tv: any;
    private tt;
    t0: any;
    private tu;
    t1: any;
    private tp;
    tw: any;
    private tq;
    tx: any;
    private rf;
    rg: IZoomSlider;
    protected get_cs(): number;
    protected set_cs(a: number): void;
    protected get_bq(): boolean;
    protected set_bq(a: boolean): void;
    private sk;
    sv: number;
    constructor();
    protected id(): Axis;
    protected ie(): Axis;
    onAttachedToUI(): void;
    onDetachedFromUI(): void;
    protected u(a: DataSeries): DataSeriesType;
    protected get_b5(): List$1<DataSeriesType>;
    protected readonly b5: List$1<DataSeriesType>;
    protected get_b4(): List$1<IDataSeriesAdapterRule>;
    protected readonly b4: List$1<IDataSeriesAdapterRule>;
    private pk;
    private qy;
    private pj;
    protected f3(): void;
    protected f1(a: Series, b: number): void;
    protected hj(a: DataSeries): void;
    protected hm(): void;
    private p2;
    private p1;
    private qb;
    private p4;
    private t9;
    private pl;
    private qz;
    private q5;
    private q6;
    private q4;
    private q7;
    private readonly rm;
    private ql;
    private readonly qm;
    private readonly rp;
    private qj;
    private readonly qk;
    private readonly rn;
    private qn;
    private readonly qo;
    private readonly ro;
    private qs;
    private readonly qt;
    protected aq(a: DataSeries, b: DataSeriesType): Series;
    protected hl(): void;
    protected nk(a: (arg1: Axis) => void, b: string): void;
    protected no(a: (arg1: Axis) => void, b: boolean): void;
    protected nm(a: (arg1: TitleSettings) => void): void;
    protected nq(a: (arg1: TitleSettings) => void): void;
    protected np(a: (arg1: AxisLabelSettings) => void): void;
    protected nl(a: (arg1: AxisLabelSettings) => void): void;
    protected gf(a: XamDataChart): void;
    private static tm;
    private t2;
    private u3;
    private we;
    private v0;
    private v1;
    private v6;
    private v9;
    private v7;
    private v8;
    private wa;
    private tg;
    protected f9(a: (arg1: Series, arg2: number) => void): void;
    private rb;
    private volumeChart;
    private wy;
    private rq;
    private ru;
    private rr;
    private rt;
    private wx;
    private q8;
    private ra;
    private xf;
    dj(): any;
    t7(): string;
    private q9;
    private xe;
    private rz;
    private xc;
    protected gc(): void;
    protected get_bv(): boolean;
    protected readonly r3: boolean;
    private xk;
    private wz;
    protected gz(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    private wc;
    private w8;
    private readonly r2;
    private wd;
    private rv;
    private w2;
    private wh;
    private wm;
    private wl;
    private wf;
    private wg;
    private wq;
    private wt;
    private wr;
    private v2;
    private w6;
    private xi;
    private wi;
    private xg;
    private ry;
    private wp;
    private wb;
    private xa;
    private w9;
    private w1;
    private wj;
    private r4;
    private xh;
    private v5;
    private xb;
    protected hq(a: Series, b: Series, c: DataSeries): void;
    protected nf(a: Axis): void;
    protected nh(a: Axis): void;
    private ws;
    protected gk(a: Series, b: number): void;
    protected g3(a: string, b: any, c: any): void;
    private rl;
    r1: boolean;
    private tf;
    tn: number;
    private sm;
    sz: number;
    private so;
    s1: number;
    private sn;
    s0: number;
    private sp;
    s2: number;
    readonly sy: number;
    readonly sx: number;
    private p3;
    p5: FinancialChartVolumeType;
    private p6;
    p7: FinancialChartXAxisMode;
    private p8;
    p9: FinancialChartYAxisMode;
    private ri;
    rw: boolean;
    private pz;
    p0: FinancialChartType;
    protected get_nw(): HorizontalAlignment;
    protected set_nw(a: HorizontalAlignment): void;
    private rj;
    rx: boolean;
    private qd;
    qe: FinancialIndicatorTypeCollection;
    private qf;
    qg: FinancialOverlayTypeCollection;
    private r6;
    private indicatorCharts;
    private rk;
    r0: boolean;
    protected get_cu(): number;
    protected set_cu(a: number): void;
    protected get_il(): AxisLabelsLocation;
    protected set_il(a: AxisLabelsLocation): void;
    private rc;
    zoomSliderChart: XamDataChart;
    private qx;
    private zoomSliderAxis;
    private pi;
    private zoomSliderXAxis;
    private qa;
    qc: FinancialChartZoomSliderType;
    private o1;
    o9: BrushCollection;
    private o2;
    pa: BrushCollection;
    private o3;
    pb: BrushCollection;
    private o4;
    pc: BrushCollection;
    private o6;
    pe: BrushCollection;
    private o5;
    pd: BrushCollection;
    private o0;
    o8: BrushCollection;
    private oz;
    o7: BrushCollection;
    private sl;
    sw: number;
    private sj;
    su: number;
    private si;
    st: number;
    private qp;
    qq: IndicatorDisplayTypeCollection;
    private tb;
    ti: number;
    private sh;
    ss: number;
    private te;
    tl: number;
    private tc;
    tj: number;
    private ta;
    th: number;
    private td;
    tk: number;
    private pu;
    pw: FinancialChartRangeSelectorOptionCollection;
    pv: FinancialChartRangeSelectorOptionCollection;
    private pq;
    customIndicatorNames: CustomIndicatorNameCollection;
    applyCustomIndicators: (sender: any, e: FinancialChartCustomIndicatorArgs) => void;
    protected get_bw(): boolean;
    protected set_bw(a: boolean): void;
    private xm;
    xn: Brush;
    private sq;
    s3: number;
    private rh;
    rs: boolean;
    private qh;
    qi: IChartLegend;
    private ph;
    private xAxis;
    private qw;
    private yAxis;
    private qv;
    private volumeAxis;
    private pg;
    private volumeXAxis;
    private qu;
    private indicatorAxis;
    private pf;
    private indicatorXAxis;
    private r5;
    private r8;
    private r7;
    private sa;
    private se;
    sg: Date;
    private sd;
    sf: Date;
    private sb;
    readonly xAxisBreaks: ObservableCollection$1<any>;
}
/**
 * @hidden
 */
export declare class FinancialChartToolbar extends TemplatedHtmlControl {
    static $t: Type;
    bg(a: DomWrapper): void;
    bl(a: Event): void;
    private o;
    constructor(a: FinancialChart, b: any);
    private r;
    s: FinancialChartRangeSelector;
    private z;
    aa: FinancialChartTypePicker;
    private p;
    q: FinancialChartIndicatorMenu;
    private bm;
    private bh;
    private bi;
    private bj;
    w: FinancialChartToolbarViewModel;
    v(): FinancialChartToolbarContext;
    l(a: any): void;
    private bk;
    private aq;
    au: Date;
    private ap;
    at: Date;
    private ao;
    as: Date;
    private an;
    ar: Date;
    rangeChanged: (sender: any, e: EventArgs) => void;
    chartTypeChanged: (sender: any, e: EventArgs) => void;
    trendLineTypeChanged: (sender: any, e: EventArgs) => void;
    volumeTypeChanged: (sender: any, e: EventArgs) => void;
    indicatorTypesChanged: (sender: any, e: EventArgs) => void;
    overlayTypesChanged: (sender: any, e: EventArgs) => void;
    bn(): void;
    private x;
    y: FinancialChartType;
    private ah;
    ai: TrendLineType;
    private ab;
    ac: FinancialChartVolumeType;
    private ad;
    ae: FinancialIndicatorTypeCollection;
    private af;
    ag: FinancialOverlayTypeCollection;
    static am(a: IList, b: IList): boolean;
    aj(): FinancialChartToolbarVisualData;
    private t;
    u: FinancialChartRangeSelectorOptionCollection;
    private ak;
    al: boolean;
}
/**
 * @hidden
 */
export declare class FinancialChartRangeSelector extends TemplatedHtmlControl {
    static $t: Type;
    private static x;
    q: FinancialChartRangeSelectorViewModel;
    v: Date;
    u: Date;
    t: Date;
    s: Date;
    ab(): void;
    constructor(a: any);
    l(a: any): void;
    private z;
    rangeChanged: (sender: any, e: EventArgs) => void;
    r(): FinancialChartRangeSelectorVisualData;
    o: FinancialChartRangeSelectorOptionCollection;
    private aa;
    private p;
}
