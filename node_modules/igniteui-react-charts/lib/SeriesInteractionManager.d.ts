import { Base, Point, IList$1, Type } from "igniteui-react-core";
import { ISeriesInteractionManager } from "./ISeriesInteractionManager";
import { HighlightingInfo } from "./HighlightingInfo";
import { Dictionary$2 } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { Series } from "./Series";
import { Axis } from "./Axis";
import { ScalerParams } from "./ScalerParams";
import { List$1 } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { Rect } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { SeriesViewer } from "./SeriesViewer";
import { Brush } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class SeriesInteractionManager extends Base implements ISeriesInteractionManager {
    static $t: Type;
    a$i(a: Series, b: Point, c: number, d: Axis, e: ScalerParams, f: number, g: number, h: (arg1: Point) => number): number;
    a$k(a: Series, b: number, c: IList$1<number>, d: number, e: number, f: number, g: number, h: number, i: boolean): number;
    a$a(a: Series, b: CategoryAxisBase, c: List$1<number[]>, d: number, e: number, f: Point, g: boolean): number[][];
    private static n;
    a$n(a: Series, b: Point, c: boolean, d: Axis, e: (arg1: Point) => number, f: IList$1<number>): number;
    a$l(a: Series, b: IList$1<number>, c: Point, d: Axis, e: ScalerParams, f: number, g: (arg1: Point) => number, h: boolean, i: boolean): number;
    a$d(a: Series, b: Point, c: boolean): boolean;
    a$e(a: Series, b: Point, c: boolean, d: PathGeometry): boolean;
    a$f(a: Series, b: Point, c: PathGeometry): boolean;
    a$m(a: Series, b: Point, c: boolean, d: Axis, e: (arg1: Point) => number, f: IList$1<number>): number;
    a$j(a: Series, b: Point, c: Axis): number;
    a$g(a: Series, b: Point, c: boolean): boolean;
    a$aj(a: Series, b: Point, c: boolean, d: boolean, e: number, f: Axis, g: Axis, h: (arg1: Point, arg2: boolean, arg3: boolean) => number, i: (arg1: Point, arg2: boolean) => number, j: (arg1: Point, arg2: boolean) => number): Point;
    private a;
    private b;
    a$t(a: Series, b: any, c: Point, d: boolean, e: boolean): void;
    a$ai(a: Series, b: HighlightingInfo, c: Brush): Brush;
    protected r(a: Brush, b: number): Brush;
    a$w(a: Series, b: Point, c: any, d: any): void;
    a$ag(a: Series, b: Point): void;
    a$z(a: Series, b: Point, c: any, d: any): void;
    a$x(a: Series, b: Point, c: any, d: any): void;
    a$u(a: Series, b: Point, c: any, d: any): void;
    a$y(a: Series, b: Point, c: any, d: any): void;
    a$v(a: Series, b: Point, c: any, d: any): void;
    a$aa(a: Series, b: Point, c: any, d: any): void;
    a$ab(a: Series, b: Point, c: any, d: any): void;
    a$o: any;
    a$c: boolean;
    private i;
    private c;
    g: boolean;
    private d;
    a$b: boolean;
    private e;
    private f;
    q(a: Series, b: Point, c: any, d: any): void;
    a$af(a: Series, b: Point, c: (arg1: any) => void): void;
    a$p(a: Series): string;
    private h;
    a$q(a: Series): string;
    a$s(a: Series): void;
    private _toolTipObject;
    private p;
    a$ah(a: Series, b: any): void;
    protected s: Point;
    protected o: any;
    protected j: boolean;
    a$ae(a: Series): void;
    private k;
    readonly a$h: Dictionary$2<string, SeriesView>;
    a$r(a: Series, b: Rect, c: Rect, d: string, e: number): void;
    a$ad(a: Series, b: string, c: SeriesViewer): void;
    a$ac(a: Series, b: SeriesViewer): void;
}
