import { IgrCategoryAxisBase, IIgrCategoryAxisBaseProps } from "./igr-category-axis-base";
import { CategoryXAxis } from "./CategoryXAxis";
/**
 * Represents a IgxDataChartComponent category X axis.
*
* `IgrCategoryXAxis` class represents a IgxDataChartComponent category X axis.
*
* ```ts
*  <IgrDataChart
*     dataSource={this.state.dataSource} >
*
*     <IgrCategoryXAxis name="xAxis" />
*     <IgrNumericYAxis name="yAxis" />
*
*     <IgrLineSeries
*      name="series1"
*     xAxisName="xAxis"
* 	yAxisName="yAxis"
* 	valueMemberPath="Value"/>
*  </IgrDataChart>
* ```
*
* ```ts
* this.columnSeries1 = new IgrLineSeries({ name: "Series1" });
* this.columnSeries1.dataSource = this.categoryData;
* this.columnSeries1.xAxis = this.categoryXAxis;
* this.columnSeries1.yAxis = this.numericYAxis;
* this.columnSeries1.xAxisName = "categoryXAxis";
* this.columnSeries1.yAxisName = "numericYAxis";
* this.columnSeries1.valueMemberPath = "USA";
* ```
*/
export declare class IgrCategoryXAxis<P extends IIgrCategoryXAxisProps = IIgrCategoryXAxisProps> extends IgrCategoryAxisBase<P> {
    protected createImplementation(): CategoryXAxis;
    /**
                                 * @hidden
                                 */
    readonly i: CategoryXAxis;
    constructor(props: P);
    /**
     * Gets or sets the frequency of displayed labels.
     * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
    *
    * `interval` determines how often to show a label, tickmark, and/or gridline along the x-axis.  Set this property to _n_ to display a label every _nth_ item.
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" interval="3" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"/>
    *  </IgrDataChart>
    * ```
    */
    interval: number;
    /**
     * Gets the effective value for the current Interval.
    *
    * ```ts
    * let effectiveInterval: number = xAxis.actualInterval;
    * ```
    */
    actualInterval: number;
    /**
     * Gets or sets the frequency of displayed minor lines.
     * The set value is a factor that determines how the minor lines will be displayed.
    *
    * `minorInterval` determines how often to show a minor gridline along the x-axis.  This property is relevant only when the displayed series is a type with grouping, like column series.
    *
    * `minorInterval` is expressed as a number between 0 and 1, representing the frequency of the interval.  To display minor gridlines representing 10ths of an item width, set `minorInterval` to 0.1.
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis"
    * 		minorInterval={0.1}
    * 		minorStroke="green"
    * 		minorStrokeThickness={1} />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    * 		name="series1"
    * 		xAxisName="xAxis"
    * 		yAxisName="yAxis"
    * 		valueMemberPath="value"/>
    *  </IgrDataChart>
    * ```
    */
    minorInterval: number;
    /**
     * Gets the effective value for the current MinorInterval.
    *
    * ```ts
    * let effectiveMinorInterval: number = xAxis.actualMinorInterval;
    * ```
    */
    actualMinorInterval: number;
    /**
     * Scrolls the specified item into view.
    
    * @param item  * Data item to scroll into view
    */
    scrollIntoView(item: any): void;
    scrollRangeIntoView(minimum: number, maximum: number): void;
    private _actualIntervalChange;
    private _actualIntervalChange_wrapped;
    actualIntervalChange: (s: IgrCategoryXAxis, e: number) => void;
    private _actualMinorIntervalChange;
    private _actualMinorIntervalChange_wrapped;
    actualMinorIntervalChange: (s: IgrCategoryXAxis, e: number) => void;
}
export interface IIgrCategoryXAxisProps extends IIgrCategoryAxisBaseProps {
    /**
     * Gets or sets the frequency of displayed labels.
     * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
    *
    * `interval` determines how often to show a label, tickmark, and/or gridline along the x-axis.  Set this property to _n_ to display a label every _nth_ item.
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis" interval="3" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    *      name="series1"
    *     xAxisName="xAxis"
    * 	yAxisName="yAxis"
    * 	valueMemberPath="Value"/>
    *  </IgrDataChart>
    * ```
    */
    interval?: number | string;
    /**
     * Gets the effective value for the current Interval.
    *
    * ```ts
    * let effectiveInterval: number = xAxis.actualInterval;
    * ```
    */
    actualInterval?: number | string;
    /**
     * Gets or sets the frequency of displayed minor lines.
     * The set value is a factor that determines how the minor lines will be displayed.
    *
    * `minorInterval` determines how often to show a minor gridline along the x-axis.  This property is relevant only when the displayed series is a type with grouping, like column series.
    *
    * `minorInterval` is expressed as a number between 0 and 1, representing the frequency of the interval.  To display minor gridlines representing 10ths of an item width, set `minorInterval` to 0.1.
    *
    * ```ts
    *  <IgrDataChart
    *     dataSource={this.state.dataSource} >
    *
    *     <IgrCategoryXAxis name="xAxis"
    * 		minorInterval={0.1}
    * 		minorStroke="green"
    * 		minorStrokeThickness={1} />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrLineSeries
    * 		name="series1"
    * 		xAxisName="xAxis"
    * 		yAxisName="yAxis"
    * 		valueMemberPath="value"/>
    *  </IgrDataChart>
    * ```
    */
    minorInterval?: number | string;
    /**
     * Gets the effective value for the current MinorInterval.
    *
    * ```ts
    * let effectiveMinorInterval: number = xAxis.actualMinorInterval;
    * ```
    */
    actualMinorInterval?: number | string;
}
