/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DependencyObject } from "igniteui-react-core";
import { INotifyPropertyChanged_$type, Base, PropertyChangedEventArgs, typeCast, markType, markDep } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Series } from "./Series";
import { Brush } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
/**
 * @hidden
 */
export let CalloutAnnotation = /*@__PURE__*/ (() => {
    class CalloutAnnotation extends DependencyObject {
        constructor() {
            super(...arguments);
            this.propertyChanged = null;
            this.k = null;
            this._formatLabel = null;
            this.m = false;
        }
        an(a, b, c) {
            this.am(a, b, c);
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        am(a, b, c) {
            this.m = true;
        }
        get formatLabel() {
            return this._formatLabel;
        }
        set formatLabel(a) {
            this._formatLabel = a;
        }
        get backgroundPadding() {
            return new Thickness(1, this.backgroundPaddingLeft, this.backgroundPaddingTop, this.backgroundPaddingRight, this.backgroundPaddingBottom);
        }
        set backgroundPadding(a) {
            this.backgroundPaddingLeft = a.c;
            this.backgroundPaddingTop = a.e;
            this.backgroundPaddingRight = a.d;
            this.backgroundPaddingBottom = a.b;
        }
    }
    CalloutAnnotation.$t = /*@__PURE__*/ markType(CalloutAnnotation, 'CalloutAnnotation', DependencyObject.$, [INotifyPropertyChanged_$type]);
    CalloutAnnotation.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CalloutAnnotation, 'an', ['BackgroundPaddingBottom', [1, NaN], 'BackgroundPaddingLeft', [1, NaN], 'BackgroundPaddingRight', [1, NaN], 'BackgroundPaddingTop', [1, NaN], 'Background', [Brush.$, null], 'Content', [4, null], 'Key', [4, null], 'LeaderBrush', [Brush.$, null], 'Outline', [Brush.$, null], 'Series', [Series.$, null], 'StrokeThickness', [1, 0], 'TextColor', [Brush.$, null], 'Text', [2, null], 'XValue', [4, 0], 'YValue', [4, 0]]);
    return CalloutAnnotation;
})();
/**
 * @hidden
 */
export let CalloutAnnotationWrapper = /*@__PURE__*/ (() => {
    class CalloutAnnotationWrapper extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.c = null;
        }
        get b() {
            return this.a;
        }
        set b(a) {
            this.a = a;
            this.a.k = this;
        }
        equals(a) {
            let b = typeCast(CalloutAnnotationWrapper.$, a);
            if (b == null) {
                return super.equals(a);
            }
            if (b.b == null && this.b == null) {
                return super.equals(a);
            }
            if (b.b == null) {
                return false;
            }
            if (this.b.key != null || b.b.key != null) {
                return Base.equalsStatic(this.b.key, b.b.key);
            }
            return super.equals(a);
        }
        getHashCode() {
            if (this.b == null || this.b.key == null) {
                return super.getHashCode();
            }
            return Base.getHashCodeStatic(this.b.key);
        }
    }
    CalloutAnnotationWrapper.$t = /*@__PURE__*/ markType(CalloutAnnotationWrapper, 'CalloutAnnotationWrapper');
    return CalloutAnnotationWrapper;
})();
//# sourceMappingURL=CalloutAnnotation_combined.js.map
