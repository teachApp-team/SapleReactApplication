/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Series } from "./Series";
import { DependencyProperty } from "igniteui-react-core";
import { IEnumerable_$type, runOn, delegateCombine, delegateRemove, typeCast, markType, markDep } from "igniteui-react-core";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { Triangulator } from "igniteui-react-core";
import { TriangulationStatusEventArgs } from "igniteui-react-core";
import { FastItemsSource } from "igniteui-react-core";
import { SeriesViewer } from "./SeriesViewer";
import { Axis } from "./Axis";
import { AxisRange } from "./AxisRange";
import { PropertyMetadata } from "igniteui-react-core";
/**
 * @hidden
 */
export let ScatterTriangulationSeries = /*@__PURE__*/ (() => {
    class ScatterTriangulationSeries extends Series {
        constructor() {
            super(...arguments);
            this.l8 = null;
            this.l9 = null;
            this.mh = false;
            this.l4 = null;
            this.triangulationStatusChanged = null;
            this.mk = null;
            this.l5 = null;
            this.l6 = null;
            this.l7 = null;
        }
        hu() {
            super.hu();
            this.l1 = null;
            this.l2 = null;
        }
        fs(a, b) {
            let c = this.gv(b);
            if (c == ScatterTriangulationSeries.$$p[6]) {
                return this.ft(a, b, this.mz);
            }
            if (c == ScatterTriangulationSeries.$$p[8]) {
                return this.ft(a, b, this.m3);
            }
            return super.fs(a, b);
        }
        get me() {
            return this.l8;
        }
        set me(a) {
            let b = this.me != a;
            if (b) {
                let c = this.me;
                this.l8 = a;
                this.raisePropertyChanged("XColumn", c, this.me);
            }
        }
        get mf() {
            return this.l9;
        }
        set mf(a) {
            let b = this.mf != a;
            if (b) {
                let c = this.mf;
                this.l9 = a;
                this.raisePropertyChanged("YColumn", c, this.mf);
            }
        }
        jf(a) {
            let b = this.bz != null && this.mg == null && this.mk == null && this.me != null && this.mf != null && this.me.count >= 3 && this.mf.count >= 3 && !this.mh;
            if (b) {
                this.m7();
                this.mh = true;
            }
        }
        m7() {
            this.l4 = new Triangulator(this.bz.count, this.me, this.mf);
            let a = this.l4;
            a.triangulationStatusChanged = delegateCombine(a.triangulationStatusChanged, runOn(this, this.m8));
            this.l4.y();
        }
        m5() {
            if (this.l4 == null) {
                return;
            }
            this.l4.r();
            let a = this.l4;
            a.triangulationStatusChanged = delegateRemove(a.triangulationStatusChanged, runOn(this, this.m8));
            this.l4 = null;
        }
        m8(a, b) {
            if (this.triangulationStatusChanged != null) {
                this.triangulationStatusChanged(this, new TriangulationStatusEventArgs(b.currentStatus));
            }
            if (b.currentStatus >= 100) {
                if (this.l4 == null) {
                    return;
                }
                let c = this.l4;
                c.triangulationStatusChanged = delegateRemove(c.triangulationStatusChanged, runOn(this, this.m8));
                this.mk = this.l4.n();
                this.l4 = null;
                let d = ((() => {
                    let $ret = new FastItemsSource();
                    $ret.e = this.mk;
                    return $ret;
                })());
                this.mb = this.ma(d, "v1");
                this.mc = this.ma(d, "v2");
                this.md = this.ma(d, "v3");
                this.je(false);
            }
        }
        ma(a, b) {
            if (b == null) {
                return a.registerColumnInt(null, null, false);
            }
            let c = null;
            let d = SeriesViewer.bb(b, this.coercionMethods);
            c = d.a;
            return a.registerColumnInt(b, c, this.expectFunctions);
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case "FastItemsSource":
                    let e = typeCast(IFastItemsSource_$type, c);
                    if (e != null) {
                        e.deregisterColumn(this.me);
                        e.deregisterColumn(this.mf);
                        this.me = null;
                        this.mf = null;
                    }
                    this.m6();
                    let f = typeCast(IFastItemsSource_$type, d);
                    if (f != null) {
                        this.me = this.bw(this.mz);
                        this.mf = this.bw(this.m3);
                    }
                    this.je(false);
                    break;
                case ScatterTriangulationSeries.$$p[6]:
                    if (this.bz != null) {
                        this.bz.deregisterColumn(this.me);
                        this.me = this.bw(this.mz);
                    }
                    this.m6();
                    this.je(false);
                    this.il();
                    break;
                case ScatterTriangulationSeries.$$p[8]:
                    if (this.bz != null) {
                        this.bz.deregisterColumn(this.mf);
                        this.mf = this.bw(this.m3);
                    }
                    this.m6();
                    this.je(false);
                    this.il();
                    break;
                case ScatterTriangulationSeries.$$p[5]:
                    if (c != null) {
                        (typeCast(Axis.$, c)).bx(this);
                    }
                    if (d != null) {
                        (typeCast(Axis.$, d)).ck(this);
                    }
                    if ((this.l1 != null && !this.l1.cn()) || (d == null && c != null)) {
                        this.je(false);
                    }
                    this.il();
                    break;
                case ScatterTriangulationSeries.$$p[7]:
                    if (c != null) {
                        (typeCast(Axis.$, c)).bx(this);
                    }
                    if (d != null) {
                        (typeCast(Axis.$, d)).ck(this);
                    }
                    if ((this.l2 != null && !this.l2.cn()) || (d == null && c != null)) {
                        this.je(false);
                    }
                    this.il();
                    break;
                case ScatterTriangulationSeries.$$p[1]:
                    if (this.trianglesSource != null) {
                        this.m5();
                        this.mg = ((() => {
                            let $ret = new FastItemsSource();
                            $ret.e = this.trianglesSource;
                            return $ret;
                        })());
                    }
                    else {
                        this.mg = null;
                    }
                    break;
                case ScatterTriangulationSeries.$$p[0]:
                    let g = typeCast(IFastItemsSource_$type, c);
                    if (g != null) {
                        g.deregisterColumn(this.mb);
                        g.deregisterColumn(this.mc);
                        g.deregisterColumn(this.md);
                        this.mb = null;
                        this.mc = null;
                        this.md = null;
                    }
                    let h = typeCast(IFastItemsSource_$type, d);
                    if (h != null) {
                        this.mb = this.ma(h, this.mr);
                        this.mc = this.ma(h, this.mt);
                        this.md = this.ma(h, this.mv);
                    }
                    this.je(false);
                    this.il();
                    break;
                case ScatterTriangulationSeries.$$p[2]:
                    if (this.mg != null) {
                        this.mg.deregisterColumn(this.mb);
                        this.mb = this.ma(this.mg, this.mr);
                    }
                    this.je(false);
                    this.il();
                    break;
                case ScatterTriangulationSeries.$$p[3]:
                    if (this.mg != null) {
                        this.mg.deregisterColumn(this.mc);
                        this.mc = this.ma(this.mg, this.mt);
                    }
                    this.je(false);
                    this.il();
                    break;
                case ScatterTriangulationSeries.$$p[4]:
                    if (this.mg != null) {
                        this.mg.deregisterColumn(this.md);
                        this.md = this.ma(this.mg, this.mv);
                    }
                    this.je(false);
                    this.il();
                    break;
                case "XColumn":
                    if (this.l1 != null) {
                        this.l1.cn();
                    }
                    break;
                case "YColumn":
                    if (this.l2 != null) {
                        this.l2.cn();
                    }
                    break;
            }
        }
        mj(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        mi(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        dw(a, b, c) {
            return super.dw(a, b, c) && this.bz != null && this.l1 != null && this.l2 != null && this.l1.bh != null && this.l2.bh != null && a.width > 0 && a.height > 0 && this.mb != null && this.mb.count > 0 && this.mc != null && this.mc.count > 0 && this.md != null && this.md.count > 0 && this.me != null && this.me.count > 0 && this.mf != null && this.mf.count > 0;
        }
        m6() {
            if (this.trianglesSource == null) {
                this.mk = null;
                this.mb = null;
                this.mc = null;
                this.md = null;
                this.mh = false;
            }
        }
        ic() {
            super.ic();
            if (this.l1 != null) {
                this.l1.ha();
            }
            if (this.l2 != null) {
                this.l2.ha();
            }
        }
        hz(a, b, c, d) {
            super.hz(a, b, c, d);
            this.m6();
            this.je(false);
        }
        an(a) {
            if (a != null && a == this.l1 && this.me != null) {
                return new AxisRange(this.me.minimum, this.me.maximum);
            }
            if (a != null && a == this.l2 && this.mf != null) {
                return new AxisRange(this.mf.minimum, this.mf.maximum);
            }
            return null;
        }
        ju(a, b) {
            this.je(false);
        }
        jt(a, b) {
            this.je(false);
        }
        get mb() {
            return this.l5;
        }
        set mb(a) {
            let b = this.mb != a;
            if (b) {
                let c = this.mb;
                this.l5 = a;
                this.raisePropertyChanged("TriangleVertexColumn1", c, this.mb);
            }
        }
        get mc() {
            return this.l6;
        }
        set mc(a) {
            let b = this.mc != a;
            if (b) {
                let c = this.mc;
                this.l6 = a;
                this.raisePropertyChanged("TriangleVertexColumn2", c, this.mc);
            }
        }
        get md() {
            return this.l7;
        }
        set md(a) {
            let b = this.md != a;
            if (b) {
                let c = this.md;
                this.l7 = a;
                this.raisePropertyChanged("TriangleVertexColumn3", c, this.md);
            }
        }
        get_c5() {
            return true;
        }
    }
    ScatterTriangulationSeries.$t = /*@__PURE__*/ markType(ScatterTriangulationSeries, 'ScatterTriangulationSeries', Series.$);
    ScatterTriangulationSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ScatterTriangulationSeries, 'raisePropertyChanged', ['FastTrianglesSource:mg:m9', [IFastItemsSource_$type, null], 'TrianglesSource::na', [IEnumerable_$type, null], 'TriangleVertexMemberPath1:mr:nb', [2, null], 'TriangleVertexMemberPath2:mt:nc', [2, null], 'TriangleVertexMemberPath3:mv:nd', [2, null], 'XAxis:l1:ne', [NumericXAxis.$, null], 'XMemberPath:mz:nf', [2, null], 'YAxis:l2:ng', [NumericYAxis.$, null], 'YMemberPath:m3:nh', [2, null]]);
    return ScatterTriangulationSeries;
})();
//# sourceMappingURL=ScatterTriangulationSeries.js.map
