import { Base, Point, Type, EventArgs, INotifyPropertyChanged, IEnumerable, IList, PropertyChangedEventArgs } from "igniteui-react-core";
import { DomRenderer, DomWrapper } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { EventProxy } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { PieChartStyleInfo } from "./PieChartStyleInfo";
import { BrushCollection } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { PieChartVisualData } from "./PieChartVisualData";
import { Style } from "igniteui-react-core";
import { Control } from "igniteui-react-core";
import { Line } from "igniteui-react-core";
import { LabelsPosition } from "./LabelsPosition";
import { List$1 } from "igniteui-react-core";
import { Visibility } from "igniteui-react-core";
import { LeaderLineType } from "./LeaderLineType";
import { ILegendOwner } from "igniteui-react-core";
import { ILegendSeries } from "igniteui-react-core";
import { ILegendTemplateProvider } from "igniteui-react-core";
import { FastItemsSource } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { OthersCategoryType } from "./OthersCategoryType";
import { IndexCollection } from "./IndexCollection";
import { NotifyCollectionChangedEventArgs } from "igniteui-react-core";
import { IChartLegend } from "igniteui-react-core";
import { SweepDirection } from "igniteui-react-core";
import { DataTemplate } from "igniteui-react-core";
import { SliceSelectionMode } from "./SliceSelectionMode";
import { ObjectCollection } from "igniteui-react-core";
import { BindingFormatter } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { SelectedItemChangingEventArgs } from "./SelectedItemChangingEventArgs";
import { SelectedItemsChangingEventArgs } from "./SelectedItemsChangingEventArgs";
import { SelectedItemChangedEventArgs } from "./SelectedItemChangedEventArgs";
import { SelectedItemsChangedEventArgs } from "./SelectedItemsChangedEventArgs";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { ContentControl } from "igniteui-react-core";
import { PieSliceVisualData } from "./PieSliceVisualData";
import { MouseEventArgs } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class PieChartViewManager extends Base {
    static $t: Type;
    n: DomRenderer;
    protected p: DomWrapper;
    protected s: DomWrapper;
    protected r: DomWrapper;
    protected q: DomWrapper;
    private k;
    private j;
    private l;
    protected ap: Rect;
    e: RenderingContext;
    g: RenderingContext;
    f: RenderingContext;
    h: RenderingContext;
    private a;
    constructor(a: PieChartBaseView);
    aa(): void;
    ad(a: number, b: number): void;
    ae(): void;
    ab(): void;
    z(): void;
    w(a: number, b: number): void;
    ao(): Rect;
    d(): FontInfo;
    an(): Point;
    ah(a: () => void): void;
    b(): PieChartStyleInfo;
    ai(a: Path): void;
    c: EventProxy;
    ac(a: any): void;
    v(a: DomWrapper): void;
    af(a: boolean): void;
    t(): any;
    x(a: PieChartVisualData): void;
    private _toolTipObject;
    private u;
    private i;
    ak(a: any): void;
    aj(pos_: Point, context_: PieSliceDataContext): void;
    y(a: PieSliceDataContext): void;
    al(style_: Style): Brush;
    am(style_: Style): Brush;
    m(style_: Style): number;
    ag(): void;
}
/**
 * @hidden
 */
export declare class LabelClickEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: Slice, b: any);
    private _slice;
    slice: Slice;
    readonly item: any;
    allowSliceClick: boolean;
    private c;
}
/**
 * @hidden
 */
export declare class SliceClickEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: Slice, b: any);
    private _slice;
    slice: Slice;
    isSelected: boolean;
    private d;
    isExploded: boolean;
    private c;
    readonly isOthersSlice: boolean;
    readonly index: number;
    readonly dataContext: any;
    private _originalEvent;
    originalEvent: any;
}
/**
 * @hidden
 */
export declare class PieLabel extends Control {
    static $t: Type;
    constructor();
    ah: Slice;
    ao: Rect;
    ai: number;
    aj: any;
    ap: Line;
    aq: Path;
    ag: LabelsPosition;
    ak(a: PieChartBaseView): void;
    al(): void;
    am(): void;
    an(): void;
}
/**
 * @hidden
 */
export declare abstract class PieChartBase extends Control implements INotifyPropertyChanged, ILegendOwner, ILegendSeries, ILegendTemplateProvider {
    static $t: Type;
    av(): PieChartBaseView;
    fq(a: PieChartBaseView): void;
    aw: PieChartBaseView;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    constructor();
    private bp;
    private bs;
    private br;
    private bt;
    private bq;
    private bw;
    private bv;
    private bu;
    private readonly a0;
    private readonly cd;
    private readonly cf;
    private readonly ce;
    private readonly cg;
    private c3;
    bd: FastItemsSource;
    private bh;
    bm: IFastItemColumn$1<number>;
    c5: number;
    cx: number;
    c2: number;
    ca: List$1<number>;
    b9: List$1<number>;
    b8: List$1<any>;
    cn: number;
    b7: List$1<UIElement>;
    readonly ck: number;
    az: PieChartSliceSelector;
    itemsSource: IEnumerable;
    static readonly gm: DependencyProperty;
    ct: number;
    e0: string;
    du: string;
    d9: string;
    private bf;
    bi: IFastItemColumn$1<any>;
    private bg;
    bj: IFastItemColumn$1<any>;
    as: LabelsPosition;
    hq: Brush;
    hp: Brush;
    h2: Visibility;
    hy: Style;
    at: LeaderLineType;
    cv: number;
    c8: any;
    cw: number;
    au: OthersCategoryType;
    eg: string;
    co: number;
    readonly cj: number;
    cz: number;
    readonly cm: number;
    by: boolean;
    bx: boolean;
    explodedSlices: IndexCollection;
    private an;
    legend: IChartLegend;
    cu: number;
    c1: number;
    hr: SweepDirection;
    selectedSlices: IndexCollection;
    private ao;
    hz: Style;
    h0: Style;
    h1: Style;
    ak: BrushCollection;
    al: BrushCollection;
    dq: string;
    ag: any[];
    ek: string;
    aj: any[];
    d6: string;
    ah: any[];
    eb: string;
    ai: any[];
    legendItemTemplate: DataTemplate;
    legendItemBadgeTemplate: DataTemplate;
    static readonly gw: DependencyProperty;
    ge: DataTemplate;
    b3: boolean;
    protected b0(): boolean;
    protected b1(): boolean;
    ax: (obj: any) => string;
    ay: (obj: any) => string;
    private ci;
    cy: number;
    private ch;
    cl: number;
    a7: SliceSelectionMode;
    selectedItem: any;
    static readonly hh: DependencyProperty;
    private _selectedItems;
    selectedItems: ObjectCollection;
    labelClick: (sender: any, e: LabelClickEventArgs) => void;
    fi(a: any, b: LabelClickEventArgs): void;
    selectedItemChanging: (sender: any, e: SelectedItemChangingEventArgs) => void;
    fk(a: any, b: SelectedItemChangingEventArgs): void;
    selectedItemsChanging: (sender: any, e: SelectedItemsChangingEventArgs) => void;
    fn(a: any, b: SelectedItemsChangingEventArgs): void;
    selectedItemChanged: (sender: any, e: SelectedItemChangedEventArgs) => void;
    fj(a: any, b: SelectedItemChangedEventArgs): void;
    selectedItemsChanged: (sender: any, e: SelectedItemsChangedEventArgs) => void;
    fl(a: any, b: SelectedItemsChangedEventArgs): void;
    sliceClick: (sender: any, e: SliceClickEventArgs) => void;
    fp(a: any, b: SliceClickEventArgs): void;
    bo: Pool$1<Slice>;
    bn: Pool$1<PieLabel>;
    e4(a: Slice, b: boolean): void;
    f4(a: Slice, b: boolean): void;
    f5(a: Slice): void;
    c6(a: Slice): any;
    hw(a: Slice, b: LabelsPosition): Rect;
    bz(a: PieLabel, b: Point): boolean;
    static c0(a: number): number;
    private b2;
    private static cp;
    static ga(a: List$1<PieLabel>): void;
    f2(a: List$1<PieLabel>): void;
    protected e2(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    fy(): void;
    fr(): void;
    ft(): void;
    fs(): void;
    hx: Rect;
    f1(): void;
    fz(): void;
    private static cq;
    private static hs;
    private static cr;
    private static ht;
    f0(): void;
    a8(): PieChartVisualData;
    dg(): string;
    protected bk(a: string): IFastItemColumn$1<number>;
    protected bl(a: string): IFastItemColumn$1<any>;
    a9: BindingFormatter;
    bc: BindingFormatter;
    ba: BindingFormatter;
    bb: BindingFormatter;
    protected fu(a: any, b: string, c: any, d: any): void;
    protected f3(a: NotifyCollectionChangedEventArgs): void;
    protected fm(a: NotifyCollectionChangedEventArgs): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected fw(a: string, b: any, c: any): void;
    private gd;
    private gc;
    f8(a: Slice, b: MouseEventArgs): void;
    f9(a: Slice, b: MouseEventArgs, c: boolean): void;
    f7(a: Point): void;
    b4(a: Slice, b: MouseEventArgs): boolean;
    e6(a: any, b: any): void;
    e9(a: any, b: any, c: boolean): void;
    e8(a: any, b: any): void;
    e7(a: any, b: MouseEventArgs): void;
    fo(): void;
    provideContainer(a: any): void;
    fg(a: number, b: number): void;
    notifyContainerResized(): void;
    hv(): Rect;
    hu(): Point;
    destroy(): void;
    e5(): void;
    private c9;
    ev: string;
    readonly container: ILegendOwner;
    readonly isStacked: boolean;
    readonly isVertical: boolean;
    readonly hasMarkers: boolean;
    readonly isUsableInLegend: boolean;
    readonly hasSubItems: boolean;
    cs(a: Slice): number;
    fe(source_: any, a: number, b: any, c: any): void;
    fa(source_: any): void;
    private b5;
    static b6(a: any, b: any): boolean;
    fc(source_: any, a: number, b: any): void;
    fd(source_: any, a: number, b: any): void;
    f6(source_: any): void;
    fx(): void;
    gb(): void;
    be(): FontInfo;
    resolveLegendIndex(): number;
    forSubItems(a: (arg1: any) => void): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PieChartSliceSelector extends Base {
    static $t: Type;
    private a;
    constructor(a: PieChartBase);
    d(a: Slice): boolean;
    c(a: Slice): boolean;
    h(a: Slice): any;
    f(a: any, b: boolean): boolean;
    e(a: any): boolean;
    g(a: any): boolean;
    b(a: any): boolean;
    k(a: Slice): void;
    i(a: Slice): void;
    j(a: Slice): void;
}
/**
 * @hidden
 */
export declare class PieSliceOthersContext extends Base {
    static $t: Type;
    private _data;
    data: IList;
    private _slice;
    slice: Slice;
}
/**
 * @hidden
 */
export declare class Slice extends ContentControl {
    static $t: Type;
    ak(): SliceView;
    bl(a: SliceView): void;
    al: SliceView;
    constructor();
    a3: number;
    ax: number;
    a1: number;
    a0: number;
    static readonly bv: DependencyProperty;
    isSelected: boolean;
    static readonly bt: DependencyProperty;
    isExploded: boolean;
    static readonly bu: DependencyProperty;
    isOthersSlice: boolean;
    b7: Point;
    b5: Point;
    a2: number;
    ay: number;
    a5: number;
    b2: Brush;
    static readonly bp: DependencyProperty;
    a4: number;
    b8: Rect;
    ai: PieChartBase;
    aj: PieLabel;
    bf: string;
    b9: Rect;
    b3: Point;
    aq: boolean;
    au: boolean;
    av: boolean;
    ac(): void;
    az(): number;
    private cb;
    b6(): Point;
    private an;
    aw: boolean;
    bk(): void;
    ap(a: Point): boolean;
    private ao;
    private ca;
    am(): PieSliceVisualData;
    private static b4;
    b0: Brush;
    b1: Brush;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PieChartBaseView extends Base {
    static $t: Type;
    constructor(a: PieChartBase);
    a: PieChartBase;
    a1(): void;
    bb(): void;
    ax(): void;
    a0(): void;
    bs: Brush;
    b: PieChartStyleInfo;
    protected h: RenderingContext;
    protected j: RenderingContext;
    protected i: RenderingContext;
    protected k: RenderingContext;
    c: PieChartViewManager;
    ay(a: any): void;
    b0(): Rect;
    bx(): Point;
    ba(): void;
    b2: Rect;
    private l;
    protected av(): void;
    private bi;
    private bz;
    protected a5(): void;
    protected a6(): void;
    private a8;
    private a9;
    private a7;
    private m;
    aj(a: Point, b: boolean, c: boolean): void;
    ai(a: Point): void;
    ah(a: Point): void;
    ak(a: Point): void;
    private ap;
    protected f: Slice;
    private bj;
    n(a: Point): boolean;
    p(a: Point): boolean;
    o(a: Point): boolean;
    private bd;
    al(): void;
    bn(a: any, b: any): void;
    protected u: List$1<Slice>;
    g(): Slice;
    be(a: Slice): void;
    bg(a: Slice): void;
    bf(a: Slice): void;
    protected t: List$1<PieLabel>;
    d(): PieLabel;
    ar(a: PieLabel): void;
    at(a: PieLabel): void;
    as(a: PieLabel): void;
    bl(a: PieLabel): void;
    bc(a: Slice): void;
    private bv;
    private bw;
    ad(a: Slice): any;
    y(a: any): number;
    bk(): void;
    v: number;
    x(a: any): number;
    b1(a: PieLabel): Rect;
    b3(): Size;
    bm(a: PieLabel, b: number, c: number): void;
    bp(a: any): void;
    br(): void;
    au(): void;
    private am;
    az(a: number, b: number): void;
    aw(): void;
    protected by: Point;
    protected ag: any;
    protected s: boolean;
    protected e: PieSliceDataContext;
    readonly af: any;
    aq(): void;
    bq(a: any): void;
    bo(a: Point, b: any, c: any): void;
    bh(): void;
    a2(): void;
    ac(): any;
    ao(): void;
    r(): boolean;
    an(a: PieChartVisualData): void;
    q(): boolean;
    a4(): void;
    bt(a: Slice): Brush;
    bu(a: Slice): Brush;
    w(a: Slice): number;
    z(a: Style): number;
    aa(): number;
    a3(): void;
    ae(a: any): any;
}
/**
 * @hidden
 */
export declare class PieSliceDataContext extends DataContext {
    static $t: Type;
    private _slice;
    slice: Slice;
    private _percentValue;
    percentValue: number;
    private _isOthersSlice;
    isOthersSlice: boolean;
    flatten(): any;
}
/**
 * @hidden
 */
export declare class SliceView extends Base {
    static $t: Type;
    protected a: Slice;
    constructor(a: Slice);
    g: Path;
    b(): void;
    c(): void;
    f(): Path;
    d(a: number, b: number): void;
    e(): void;
}
