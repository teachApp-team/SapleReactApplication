/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Series } from "./Series";
import { DependencyProperty } from "igniteui-react-core";
import { IEnumerable$1_$type, typeCast, Point_$type, fromEnum, Array_$type, Number_$type, markType, markDep, runOn } from "igniteui-react-core";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { List$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { PointCollectionUtil } from "igniteui-react-core";
import { FlattenedShape } from "./FlattenedShape";
import { SeriesView } from "./SeriesView";
import { Clipper } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { Dictionary$2 } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { PolySimplification } from "igniteui-react-core";
import { DefaultFlattener } from "./DefaultFlattener";
import { DataContext } from "igniteui-react-core";
import { FrameworkElement } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { Style } from "igniteui-react-core";
import { StyleShapeEventArgs } from "./StyleShapeEventArgs";
import { PropertyMetadata } from "igniteui-react-core";
import { boxArray$1 } from "igniteui-react-core";
import { InvalidOperationException } from "igniteui-react-core";
import { isNaN_, truncate } from "igniteui-react-core";
import { FastItemObjectColumn } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { ShapeHitRegion } from "./ShapeHitRegion";
import { PointCollection } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { PolyLineSegment } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { GeometryUtil } from "igniteui-react-core";
import { PolygonUtil } from "igniteui-react-core";
import { RectUtil } from "igniteui-react-core";
/**
 * @hidden
 */
export let ShapeSeriesBase = /*@__PURE__*/ (() => {
    class ShapeSeriesBase extends Series {
        constructor() {
            super();
            this.mb = null;
            this.l6 = null;
            this.l8 = null;
            this.mo = 0;
            this.mk = null;
            this.l2 = null;
            this.l4 = null;
            this.l3 = null;
            this.l1 = null;
            this.m9 = null;
            this.mq = 0;
            this.styleShape = null;
            FastItemObjectColumn.m();
            this.mq = this.mp;
            this.m9 = Rect.empty;
        }
        hu() {
            super.hu();
            this.l7 = null;
            this.l9 = null;
        }
        ag() {
            return [this.l7, this.l9];
        }
        fs(a, b) {
            let c = this.gv(b);
            if (c == ShapeSeriesBase.$$p[1]) {
                return this.ft(a, b, this.mv);
            }
            return null;
        }
        get mc() {
            return this.mb;
        }
        set mc(a) {
            let b = this.mc != a;
            if (b) {
                let c = this.mc;
                this.mb = a;
                this.raisePropertyChanged("ShapeColumn", c, this.mc);
            }
        }
        mf(array_) {
            let a = (Array.isArray(array_));
            return a;
        }
        static mh(a) {
            if (a == null) {
                return true;
            }
            let val_ = a;
            return (val_ == undefined);
        }
        convertToListList(a) {
            if (a == null) {
                return null;
            }
            let b = new List$1(List$1.$.specialize(Point_$type), 0);
            let c;
            let curr_;
            let d;
            let e;
            let f = false;
            let g = false;
            for (let h = 0; h < a.length; h++) {
                c = a[h];
                if (c == null) {
                    continue;
                }
                let i = new List$1(Point_$type, 0);
                for (let j = 0; j < c.length; j++) {
                    curr_ = c[j];
                    if (f) {
                        d = (curr_.X);
                        e = (curr_.Y);
                    }
                    else {
                        d = (curr_.x);
                        e = (curr_.y);
                    }
                    if (!g) {
                        if ((isNaN_(d) || ShapeSeriesBase.mh(d)) && (isNaN_(e) || ShapeSeriesBase.mh(e))) {
                            d = (curr_.X);
                            e = (curr_.Y);
                            if (!isNaN_(d) && !ShapeSeriesBase.mh(d) && !isNaN_(e) && !ShapeSeriesBase.mh(e)) {
                                g = true;
                                f = true;
                            }
                        }
                        else {
                            g = true;
                        }
                    }
                    i.add({ $type: Point_$type, x: d, y: e });
                }
                b.add(i);
            }
            return b;
        }
        by(a) {
            if (this.bz != null && this.mf(this.itemsSource) && a != null && a.split('!').length != 2) {
                if (this.coercionMethods == null) {
                    this.coercionMethods = {};
                }
                let methods_ = this.coercionMethods;
                methods_.convertToListList = this.convertToListList;
                a += "!convertToListList";
            }
            return super.by(a);
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            let e = false;
            let f = false;
            switch (b) {
                case "FastItemsSource":
                    let g = typeCast(IFastItemsSource_$type, c);
                    if (g != null) {
                        g.deregisterColumn(this.mc);
                        this.mc = null;
                    }
                    let h = typeCast(IFastItemsSource_$type, d);
                    if (h != null) {
                        this.mc = this.by(this.mv);
                    }
                    e = this.l7 != null && !this.l7.cn();
                    f = this.l9 != null && !this.l9.cn();
                    if (e || f) {
                        this.je(false);
                    }
                    break;
                case ShapeSeriesBase.$$p[1]:
                    if (this.bz != null) {
                        this.bz.deregisterColumn(this.mc);
                        this.mc = this.by(this.mv);
                    }
                    break;
                case "ShapeColumn":
                    this.m2();
                    e = this.l7 != null && !this.l7.cn();
                    f = this.l9 != null && !this.l9.cn();
                    if (e || f) {
                        this.je(false);
                    }
                    this.il();
                    break;
                case ShapeSeriesBase.$$p[2]:
                case ShapeSeriesBase.$$p[3]:
                    this.l6 = this.l7;
                    this.l8 = this.l9;
                    let i = c;
                    let j = d;
                    this.m3(i);
                    this.m0(j);
                    if ((j != null && !j.cn()) || (j == null && i != null)) {
                        this.je(false);
                    }
                    this.il();
                    break;
                case "Resolution":
                    this.mo = this.eu;
                    this.il();
                    break;
                case "ActualBrush":
                    this.je(false);
                    break;
                case ShapeSeriesBase.$$p[0]:
                    this.mq = this.mp;
                    this.je(false);
                    this.il();
                    break;
                case "Thickness":
                    this.je(false);
                    this.il();
                    break;
            }
        }
        me(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        md(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        m2() {
            this.mk = null;
            if (this.mc == null) {
                return;
            }
            this.mk = new List$1(Rect.$, 2, this.mc.count);
            for (let a = 0; a < this.mc.count; a++) {
                this.mk.add(PointCollectionUtil.j(this.mc.item(a)));
            }
        }
        na(a) {
            if (typeCast(IEnumerable$1_$type.specialize(IEnumerable$1_$type.specialize(Point_$type)), a) !== null) {
                return PointCollectionUtil.h(a);
            }
            else if (typeCast(IEnumerable$1_$type.specialize(Point_$type), a) !== null) {
                return PointCollectionUtil.g(a);
            }
            return Rect.empty;
        }
        mm(a, b, c, d, e) {
            return this.mn(a, b, c, d, e);
            if (typeCast(List$1.$.specialize(List$1.$.specialize(Point_$type)), c) !== null) {
                return this.mn(a, b, c, d, e);
            }
            else if (typeCast(IEnumerable$1_$type.specialize(IEnumerable$1_$type.specialize(Point_$type)), c) !== null) {
                let f = c;
                let g = new List$1(FlattenedShape.$, 0);
                let h = null;
                for (let i of fromEnum(f)) {
                    h = this.l5(a, b, PointCollectionUtil.b(i), d, e);
                    if (h == null) {
                        continue;
                    }
                    g.add(h);
                }
                return g;
            }
            else if (typeCast(IEnumerable$1_$type.specialize(Point_$type), c) !== null) {
                let j = c;
                let k = this.l5(a, b, PointCollectionUtil.b(j), d, e);
                let l = new List$1(FlattenedShape.$, 0);
                if (k != null) {
                    l.add(k);
                }
                return l;
            }
            else {
                throw new InvalidOperationException(1, "Unrecognized data in ShapeColumn");
            }
        }
        get_mg() {
            return true;
        }
        get mg() {
            return this.get_mg();
        }
        mj() {
            return false;
        }
        jf(a) {
            this.m1(this.bi);
        }
        jd(a, b, c, d, e) {
            super.jd(a, b, c, d, e);
            let f = this.a0.a$h.item(d);
            let g = f;
            f.ay(c);
            if (this.cc(f)) {
                return;
            }
            this.m1(f);
        }
        m1(a) {
            if (this.cc(a)) {
                return;
            }
            let b;
            let c;
            let d = a;
            let e = a.getViewInfo(c, b);
            c = e.p0;
            b = e.p1;
            if (c.width < 1 || c.height < 1 || this.mc == null) {
                return;
            }
            let f = this.l7;
            let g = this.l9;
            let h = this.getEffectiveViewport1(a);
            let i = new ScalerParams(1, b, c, f.ca);
            i.c = h;
            let j = new ScalerParams(1, b, c, g.ca);
            j.c = h;
            d.cj();
            let k = new Rect(0, 0, 0, 0, 0);
            let l;
            let m;
            let n;
            let o;
            let p = this.mc.count;
            if (this.l4 == null || this.l4.length != p) {
                this.l4 = new Array(p);
                this.l2 = new Array(p);
                this.l3 = new Array(p);
                this.l1 = new Array(p);
            }
            let q = this.l4;
            let r = this.l2;
            let s = this.l3;
            let t = this.l1;
            let u;
            for (let v = 0; v < p; v++) {
                u = this.mk._inner[v];
                q[v] = u.top;
                r[v] = u.left;
                s[v] = u.right;
                t[v] = u.bottom;
            }
            this.l6.gs(boxArray$1(r), 0, r.length, i);
            this.l6.gs(boxArray$1(s), 0, s.length, i);
            this.l8.gs(boxArray$1(q), 0, q.length, j);
            this.l8.gs(boxArray$1(t), 0, t.length, j);
            d.ck(r, q, s, t);
            let w = this.mc;
            let x = this.bz;
            this.m4(d);
            let y = c.left;
            let z = c.right;
            let aa = c.top;
            let ab = c.bottom;
            let ac = null;
            if (this.m9.isEmpty) {
                ac = null;
            }
            else {
                ac = new Clipper(1, this.m9.left, this.m9.bottom, this.m9.right, this.m9.top, this.mg);
            }
            let ad = this.mj();
            if (ad) {
                d.b3.clear();
            }
            let ae;
            for (let af = 0; af < p; af++) {
                n = r[af];
                l = q[af];
                m = t[af];
                o = s[af];
                k.x = Math.min(n, o);
                k.y = Math.min(l, m);
                k.width = Math.max(n, o) - k.x;
                k.height = Math.max(l, m) - k.y;
                if (k.intersectsWith(c)) {
                    if (k.x < y || k.y < aa || k.x > z || k.y > ab) {
                        ae = ac;
                    }
                    else {
                        ae = null;
                    }
                    let ag = this.mm(a, ae, w.item(af), i, j);
                    if (ad) {
                        let ah = 0;
                        let ai = null;
                        for (let aj = 0; aj < ag.count; aj++) {
                            let ak = ag._inner[aj];
                            let al = ak.b.width * ak.b.height;
                            if (al > ah) {
                                ah = al;
                                ai = ak;
                            }
                        }
                        d.b3.addItem(af, ai);
                    }
                    d.b8(af, x.item(af), k, ag);
                }
            }
            d.ci();
        }
        ic() {
            super.ic();
            if (this.l7 != null) {
                this.l7.ha();
            }
            if (this.l9 != null) {
                this.l9.ha();
            }
        }
        ju(a, b) {
            this.je(false);
        }
        jt(a, b) {
            this.je(false);
        }
        hz(a, b, c, d) {
            super.hz(a, b, c, d);
            switch (a) {
                case 3:
                    if (d == this.mv) {
                        this.mk._inner[b] = this.na(this.mc.item(b));
                    }
                    break;
                case 1:
                    for (let e = b; e < b + c; e++) {
                        this.mk.insert(e, this.na(this.mc.item(e)));
                    }
                    break;
                case 0:
                    this.mk.v(b, c);
                    break;
                case 2:
                    for (let f = b; f < b + c; f++) {
                        this.mk._inner[f] = this.na(this.mc.item(f));
                    }
                    break;
                case 4:
                    this.m2();
                    break;
            }
            this.je(false);
        }
        dw(a, b, c) {
            let d = true;
            if (!super.dw(a, b, c) || (this.mi && this.mc == null) || b.isEmpty || a.isEmpty || this.l7 == null || this.l9 == null || this.l7.bh == null || this.l9.bh == null || this.l7.kb == this.l7.ka || this.l9.kb == this.l9.ka || this.mc == null || this.mc.count == 0 || this.mk == null || this.mk.count == 0 || this.mk.count != this.mc.count) {
                d = false;
            }
            return d;
        }
        get_mi() {
            return true;
        }
        get mi() {
            return this.get_mi();
        }
        iv(a) {
            super.iv(a);
            this.ma = typeCast(ShapeSeriesViewBase.$, a);
        }
        mn(a, b, c, d, e) {
            let f = new List$1(FlattenedShape.$, 0);
            let g;
            let h = c.count;
            for (let i = 0; i < h; i++) {
                g = c._inner[i];
                let j = this.l5(a, b, g, d, e);
                if (j == null) {
                    continue;
                }
                f.add(j);
            }
            return f;
        }
        l5(a, b, c, d, e) {
            let f = this.mz(c, d, e);
            let g = f.c;
            let h = f.d;
            let i = g.length;
            let j = 1.7976931348623157E+308;
            let k = 1.7976931348623157E+308;
            let l = -1.7976931348623157E+308;
            let m = -1.7976931348623157E+308;
            let n;
            let o;
            for (let p = 0; p < i; p++) {
                n = g[p];
                o = h[p];
                j = n < j ? n : j;
                k = o < k ? o : k;
                l = n > l ? n : l;
                m = o > m ? o : m;
            }
            let q = !(j > this.m9.right || l < this.m9.left || k > this.m9.bottom || m < this.m9.top);
            if (!q) {
                return null;
            }
            let r = b != null && (j < this.m9.left || k < this.m9.top || l > this.m9.right || m > this.m9.bottom);
            let s = new Rect(0, j, k, l - j, m - k);
            if (!a.b2(s)) {
                return null;
            }
            j = j < this.m9.left ? this.m9.left : j;
            l = l > this.m9.right ? this.m9.right : l;
            k = k < this.m9.top ? this.m9.top : k;
            m = m > this.m9.bottom ? this.m9.bottom : m;
            let t = PolySimplification.b(f, this.eu);
            let u = new DefaultFlattener().c(f.c, f.d, t, this.mo);
            let v = u.count;
            if (r) {
                let w = new List$1(Point_$type, 0);
                b.i = w;
                for (let x = 0; x < v; x++) {
                    b.j(u._inner[x]);
                }
                b.i = null;
                u = w;
            }
            if (u == null || u.count == 0) {
                return null;
            }
            let y = new FlattenedShape();
            y.a = u;
            y.b = new Rect(0, j, k, l - j, m - k);
            y.c = s;
            return y;
        }
        mz(a, b, c) {
            let d = this.l6;
            let e = this.l8;
            let f = a.count;
            let g = new Array(f);
            let h = new Array(f);
            for (let i = 0; i < f; i++) {
                g[i] = a._inner[i].x;
                h[i] = a._inner[i].y;
            }
            d.gs(boxArray$1(g), 0, g.length, b);
            e.gs(boxArray$1(h), 0, h.length, c);
            return new Tuple$2(Array_$type, Array_$type, g, h);
        }
        m4(a) {
            a.cp();
        }
        hw(a, b) {
            super.hw(a, b);
            let c = b;
            c.cd();
        }
        m0(a) {
            if (a != null) {
                a.ck(this);
            }
        }
        m3(a) {
            if (a != null) {
                a.bx(this);
            }
        }
        ar(a, b) {
            let c = this.ma.cr(a, b);
            let d = null;
            if (c != null) {
                d = c.dataContext;
            }
            if (d != null) {
                return d;
            }
            return super.ar(a, b);
        }
        ms(a) {
            return this.bz.item(a);
        }
        get_dq() {
            return true;
        }
        set_dq(a) {
            super.set_dq(a);
        }
        an(a) {
            if (typeCast(NumericXAxis.$, a) !== null && this.mk != null) {
                let b = 1.7976931348623157E+308;
                let c = -1.7976931348623157E+308;
                for (let d of fromEnum(this.mk)) {
                    b = Math.min(b, d.left);
                    c = Math.max(c, d.right);
                }
                return new AxisRange(b, c);
            }
            if (typeCast(NumericYAxis.$, a) !== null && this.mk != null) {
                let e = 1.7976931348623157E+308;
                let f = -1.7976931348623157E+308;
                for (let g of fromEnum(this.mk)) {
                    e = Math.min(e, g.top);
                    f = Math.max(f, g.bottom);
                }
                return new AxisRange(e, f);
            }
            return null;
        }
        get_c5() {
            return true;
        }
        nb(a, b, c) {
            if (this.styleShape != null) {
                if (this.ma.cx != null && c == this.ma.cx) {
                    c = new Style();
                    let d = this.ma.cx;
                    c.fill = d.fill;
                    c.opacity = d.opacity;
                    c.stroke = d.stroke;
                    c.strokeThickness = d.strokeThickness;
                }
                else {
                    if (c != null) {
                        let e = new Style();
                        e.fill = c.fill;
                        e.opacity = c.opacity;
                        e.stroke = c.stroke;
                        e.strokeThickness = c.strokeThickness;
                        c = e;
                    }
                    else {
                        c = new Style();
                    }
                }
                let f = new StyleShapeEventArgs(a, b, c);
                this.styleShape(this, f);
                return f.d();
            }
            return null;
        }
    }
    ShapeSeriesBase.$t = /*@__PURE__*/ markType(ShapeSeriesBase, 'ShapeSeriesBase', Series.$);
    ShapeSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ShapeSeriesBase, 'raisePropertyChanged', ['ShapeFilterResolution:mp:m5', [1, 2], 'ShapeMemberPath:mv:m6', [2, null], 'XAxis:l7:m7', [NumericXAxis.$, null], 'YAxis:l9:m8', [NumericYAxis.$, null]]);
    return ShapeSeriesBase;
})();
/**
 * @hidden
 */
export let ShapeSeriesViewBase = /*@__PURE__*/ (() => {
    class ShapeSeriesViewBase extends SeriesView {
        constructor(a) {
            super(a);
            this.b3 = null;
            this.by = null;
            this.b4 = new List$1(ShapeHitRegion.$, 0);
            this.b7 = 0;
            this.b6 = null;
            this.b1 = null;
            this.bz = null;
            this.cw = null;
            this.bv = null;
            this.bx = null;
            this.bw = null;
            this.bu = null;
            this.by = a;
            this.b1 = this.b0();
            this.b6 = new List$1(Path.$, 0);
            this.b3 = new Dictionary$2(Number_$type, FlattenedShape.$, 0);
        }
        b0() {
            return ((() => {
                let $ret = new Pool$1(FrameworkElement.$);
                $ret.create = runOn(this, this.cq);
                $ret.activate = runOn(this, this.cf);
                $ret.disactivate = runOn(this, this.cg);
                $ret.destroy = runOn(this, this.ch);
                return $ret;
            })());
        }
        b2(a) {
            return a.width >= this.by.mq && a.height >= this.by.mq;
        }
        static b5(a) {
            let b = new List$1(PointCollection.$, 0);
            let c;
            let d = a.count;
            for (let e = 0; e < d; e++) {
                c = a._inner[e];
                let f = new PointCollection(1, c.a);
                b.add(f);
            }
            return b;
        }
        b8(a, b, c, d) {
            if (d != null && d.count > 0) {
                let e = ShapeSeriesViewBase.b5(d);
                c.intersect(this.br);
                if (!this.b2(c)) {
                }
                else {
                    let f = this.cu(a, e);
                    if (f != null) {
                        let g = this.ct(this.b7, b);
                        for (let h = 0; h < d.count; h++) {
                            let i = new ShapeHitRegion();
                            i.d = d._inner[h].b;
                            i.a = d._inner[h].a;
                            i.b = a;
                            i.c = g;
                            this.b4.add(i);
                        }
                        this.ce(g);
                        this.ca(g, f);
                        this.cc(g, b);
                        this.b7 = this.b7 + 1;
                    }
                }
            }
        }
        ct(a, b) {
            let c = this.b1.item(this.b7);
            if (c.dataContext != null) {
                c.dataContext.item = b;
            }
            return c;
        }
        static cb(a, b, c) {
            if (b._fill == null) {
                b._fill = a.e.k4;
            }
            if (b._stroke == null) {
                b._stroke = a.e.k5;
            }
            if (b.y == null) {
                b.ac = a.e.ey;
            }
        }
        cc(a, b) {
            if (a == null) {
                return;
            }
            let c = false;
            if (this.bz != null) {
                let d = this.bz.selectStyle(b, a);
                if (d != null) {
                    c = true;
                }
                a.y = d;
            }
            if (!c) {
                a.y = this.cw;
            }
            a.y = this.by.nb(b, a, a.y);
        }
        ce(a) {
        }
        b9(a, b) {
            let c = truncate(Math.floor(a.left));
            let d = truncate(Math.ceil(a.right));
            let e = truncate(Math.floor(a.top));
            let f = truncate(Math.ceil(a.bottom));
            for (let g = c; g < d; g++) {
                for (let h = e; h < f; h++) {
                    this.cm(g, h, b);
                }
            }
        }
        cm(a, b, c) {
        }
        cj() {
            this.b7 = 0;
        }
        ci() {
            this.b1.count = this.b7;
            this.an();
        }
        cl(a, b) {
        }
        cd() {
            this.b1.count = 0;
            this.an();
        }
        cq() {
            let a = this.by;
            let b = ((() => {
                let $ret = new Path();
                $ret.dataContext = ((() => {
                    let $ret = new DataContext();
                    $ret.series = a;
                    return $ret;
                })());
                return $ret;
            })());
            this.b6.add(b);
            return b;
        }
        cf(a) {
            a._visibility = 0;
        }
        cg(a) {
            a.dataContext.item = null;
            a._visibility = 1;
        }
        ch(a) {
            this.b6.remove(a);
        }
        cv(a, b, c) {
            if (b == null) {
                return null;
            }
            let d = new PathGeometry();
            let e;
            let f = b.count;
            for (let g = 0; g < f; g++) {
                e = b._inner[g];
                if (e.count < 1) {
                    continue;
                }
                let h = new PolyLineSegment();
                h._points = e;
                let i = new PathFigure();
                i._isFilled = c;
                i._isClosed = c;
                i._startPoint = e._inner[0];
                i._segments.add(h);
                d.c.add(i);
            }
            return d;
        }
        bb(a, b) {
            super.bb(a, b);
            let c = a;
            c._fill = this.e.k4;
            c._stroke = this.e.k5;
            c.ac = this.e.ey;
            if (c.y != null) {
                this.h.i(c, c.y);
            }
        }
        bc(a, b) {
            super.bc(a, b);
            let c = a;
            let d = this.bm(b);
            c._fill = d;
            c._stroke = d;
            c.ac = this.e.ey + 3;
        }
        a3(a, b) {
            super.a3(a, b);
            for (let c = 0; c < this.b6.count; c++) {
                let d = this.b6._inner[c];
                if (d._visibility != 1) {
                    this.ba(d, c, b);
                    a.s(d);
                }
            }
        }
        get cx() {
            return this.cw;
        }
        co(a) {
            this.bz = a;
        }
        cn(a) {
            this.cw = a;
        }
        cr(a, b) {
            return this.cs(a, b, false);
        }
        cs(a, b, c) {
            if (this.b4.count == 0) {
                return null;
            }
            let d = a.x;
            let e = a.y;
            let f = this.b4.count;
            let g = this.b4;
            let h = null;
            for (let i = 0; i < f; i++) {
                h = g._inner[i];
                if (h.a == null || h.a.count == 0) {
                    continue;
                }
                if (d >= h.d.left && d <= h.d.right && e >= h.d.top && e <= h.d.bottom) {
                    if (c) {
                        let j = this.by.ey / 2 + this.by.ee(b);
                        if (GeometryUtil.b(a, h.a._inner[0], h.a, j)) {
                            return h.c;
                        }
                    }
                    else {
                        if (PolygonUtil.a(h.a, a)) {
                            return h.c;
                        }
                    }
                }
            }
            return null;
        }
        ck(a, b, c, d) {
            this.bv = a;
            this.bx = b;
            this.bw = c;
            this.bu = d;
            this.b4.clear();
        }
        cp() {
            let a = this.br;
            let b = ((() => {
                let $ret = new Path();
                $ret.y = this.cw;
                return $ret;
            })());
            b.ac = 1;
            if (this.h != null) {
                this.h.i(b, b.y);
            }
            this.by.m9 = RectUtil.r(a, b.ac);
        }
        ai(a) {
            super.ai(a);
            if (this.b1.a == null) {
                return;
            }
            for (let b = 0; b < this.b1.a.count; b++) {
                let c = typeCast(Path.$, this.b1.a._inner[b]);
                if (c._visibility != 1) {
                    this.e.a2.exportPathData(a, c, "shape" + b, ["Main "]);
                }
            }
        }
    }
    ShapeSeriesViewBase.$t = /*@__PURE__*/ markType(ShapeSeriesViewBase, 'ShapeSeriesViewBase', SeriesView.$);
    return ShapeSeriesViewBase;
})();
//# sourceMappingURL=ShapeSeriesBase_combined.js.map
