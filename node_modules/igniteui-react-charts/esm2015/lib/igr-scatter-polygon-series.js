import { IgrStyle } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { IgrShapeSeriesBase } from "./igr-shape-series-base";
import { ScatterPolygonSeries } from "./ScatterPolygonSeries";
import { ensureEnum, brushToString, stringToBrush } from "igniteui-react-core";
/**
 * Series class which renders polygons as Paths based on lists of points in the ItemsSource.
*/
export class IgrScatterPolygonSeries extends IgrShapeSeriesBase {
    createImplementation() {
        return new ScatterPolygonSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Returns whether the current series supports visual markers.
    */
    get hasMarkers() {
        return this.i.hasMarkers;
    }
    /**
     * The default style to apply to all Shapes in the series.
    */
    get shapeStyle() {
        if (this.i.ok == null) {
            return null;
        }
        if (!this.i.ok.externalObject) {
            let e = new IgrStyle();
            e._implementation = this.i.ok;
            this.i.ok.externalObject = e;
        }
        return this.i.ok.externalObject;
    }
    set shapeStyle(v) {
        v == null ? this.i.ok = null : this.i.ok = v.i;
    }
    /**
     * Gets or sets the marker type for the current series object.
     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
    */
    get markerType() {
        return this.i.nf;
    }
    set markerType(v) {
        this.i.nf = ensureEnum(MarkerType_$type, v);
    }
    /**
     * Gets or sets the MarkerTemplate for the current series object.
    */
    get markerTemplate() {
        return this.i.n1;
    }
    set markerTemplate(v) {
        this.i.n1 = v;
    }
    /**
     * Gets or sets thickness of the marker outline
    */
    get markerThickness() {
        return this.i.nm;
    }
    set markerThickness(v) {
        this.i.nm = +v;
    }
    /**
     * Gets the effective marker template for the current series object.
    */
    get actualMarkerTemplate() {
        return this.i.n0;
    }
    set actualMarkerTemplate(v) {
        this.i.n0 = v;
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
    */
    get markerBrush() {
        return brushToString(this.i.og);
    }
    set markerBrush(v) {
        this.i.og = stringToBrush(v);
    }
    /**
     * Gets the effective marker brush for the current series object.
    */
    get actualMarkerBrush() {
        return brushToString(this.i.oe);
    }
    set actualMarkerBrush(v) {
        this.i.oe = stringToBrush(v);
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
    */
    get markerOutline() {
        return brushToString(this.i.oh);
    }
    set markerOutline(v) {
        this.i.oh = stringToBrush(v);
    }
    /**
     * Gets the effective marker outline for the current series object.
    */
    get actualMarkerOutline() {
        return brushToString(this.i.of);
    }
    set actualMarkerOutline(v) {
        this.i.of = stringToBrush(v);
    }
    /**
     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
    */
    get markerCollisionAvoidance() {
        return this.i.ne;
    }
    set markerCollisionAvoidance(v) {
        this.i.ne = ensureEnum(CollisionAvoidanceType_$type, v);
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.shapeStyle && this.shapeStyle.name && this.shapeStyle.name == name) {
            return this.shapeStyle;
        }
        return null;
    }
}
//# sourceMappingURL=igr-scatter-polygon-series.js.map
