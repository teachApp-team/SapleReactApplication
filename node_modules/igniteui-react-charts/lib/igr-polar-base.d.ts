import { IgPoint } from "igniteui-react-core";
import { IgrNumericAngleAxis } from "./igr-numeric-angle-axis";
import { IgrNumericRadiusAxis } from "./igr-numeric-radius-axis";
import { TrendLineType } from "igniteui-react-core";
import { IgrMarkerSeries, IIgrMarkerSeriesProps } from "./igr-marker-series";
import { PolarBase } from "./PolarBase";
import { IgrAxis } from "./igr-axis";
/**
 * Represents the base class from which all IgxDataChartComponent polar series are derived.
*/
export declare abstract class IgrPolarBase<P extends IIgrPolarBaseProps = IIgrPolarBaseProps> extends IgrMarkerSeries<P> {
    /**
                                 * @hidden
                                 */
    readonly i: PolarBase;
    constructor(props: P);
    /**
     * Checks if this series is a polar series
    */
    readonly isPolar: boolean;
    /**
     * Gets or sets the path to use to find the angle values for the series.
    */
    angleMemberPath: string;
    /**
     * Gets or sets the path to use to get the radius values for the series.
    */
    radiusMemberPath: string;
    /**
     * Gets the effective angle axis for the current series object.
    */
    angleAxis: IgrNumericAngleAxis;
    private _angleAxisName;
    /**
    * Gets or sets the name to use to resolve angleAxis from markup.
    */
    angleAxisName: string;
    /**
     * Gets the effective radius axis for the current series object.
    */
    radiusAxis: IgrNumericRadiusAxis;
    private _radiusAxisName;
    /**
    * Gets or sets the name to use to resolve radiusAxis from markup.
    */
    radiusAxisName: string;
    /**
     * Gets or sets whether Cartesian Interpolation should be used rather than Archimedian
     * spiral based interpolation.
    */
    useCartesianInterpolation: boolean;
    /**
     * Gets or sets the maximum number of markers displayed by the current series.
     * If more than the specified number of markers are visible, the polar series will automatically
     * choose a representative set.
    */
    maximumMarkers: number;
    /**
     * Gets or sets the trend type for the current series object.
    */
    trendLineType: TrendLineType;
    /**
     * Gets or sets the brush that specifies how the current series
     * object's trend line is drawn.
    */
    trendLineBrush: string;
    /**
     * Gets the effective TrendLineBrush for this series.
    */
    actualTrendLineBrush: string;
    /**
     * Gets or sets the thickness of the current series object's trend line.
    */
    trendLineThickness: number;
    /**
     * Gets or sets the moving average period for the current series object.
    */
    trendLinePeriod: number;
    /**
     * Sets or Gets the Trendline Z index.
    */
    trendLineZIndex: number;
    /**
     * Gets or sets whether to clip the series to the bounds.
     * Setting this to true can effect performance.
    */
    clipSeriesToBounds: boolean;
    bindAxes(axes: IgrAxis[]): void;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
     * Scrolls the requested item into view, if possible.
    
    * @param item  * The item to scroll into view.
    */
    scrollIntoView(item: any): boolean;
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world: IgPoint): any;
    /**
     * Gets the index of the item that resides at the provided world coordinates.
    
    * @param world  * The world coordinates of the requested item.
    */
    getItemIndex(world: IgPoint): number;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * Determine if object can be used as RadiusAxis
    
    * @param axis  * The object to check
    */
    canUseAsRadiusAxis(axis: any): boolean;
    /**
     * Determine if object can be used as AngleAxis
    
    * @param axis  * The object to check
    */
    canUseAsAngleAxis(axis: any): boolean;
}
export interface IIgrPolarBaseProps extends IIgrMarkerSeriesProps {
    /**
     * Gets or sets the path to use to find the angle values for the series.
    */
    angleMemberPath?: string;
    /**
     * Gets or sets the path to use to get the radius values for the series.
    */
    radiusMemberPath?: string;
    /**
     * Gets the effective angle axis for the current series object.
    */
    angleAxis?: IgrNumericAngleAxis;
    /**
    * Gets or sets the name to use to resolve angleAxis from markup.
    */
    angleAxisName?: string;
    /**
     * Gets the effective radius axis for the current series object.
    */
    radiusAxis?: IgrNumericRadiusAxis;
    /**
    * Gets or sets the name to use to resolve radiusAxis from markup.
    */
    radiusAxisName?: string;
    /**
     * Gets or sets whether Cartesian Interpolation should be used rather than Archimedian
     * spiral based interpolation.
    */
    useCartesianInterpolation?: boolean | string;
    /**
     * Gets or sets the maximum number of markers displayed by the current series.
     * If more than the specified number of markers are visible, the polar series will automatically
     * choose a representative set.
    */
    maximumMarkers?: number | string;
    /**
     * Gets or sets the trend type for the current series object.
    */
    trendLineType?: TrendLineType | string;
    /**
     * Gets or sets the brush that specifies how the current series
     * object's trend line is drawn.
    */
    trendLineBrush?: string;
    /**
     * Gets the effective TrendLineBrush for this series.
    */
    actualTrendLineBrush?: string;
    /**
     * Gets or sets the thickness of the current series object's trend line.
    */
    trendLineThickness?: number | string;
    /**
     * Gets or sets the moving average period for the current series object.
    */
    trendLinePeriod?: number | string;
    /**
     * Sets or Gets the Trendline Z index.
    */
    trendLineZIndex?: number | string;
    /**
     * Gets or sets whether to clip the series to the bounds.
     * Setting this to true can effect performance.
    */
    clipSeriesToBounds?: boolean | string;
}
