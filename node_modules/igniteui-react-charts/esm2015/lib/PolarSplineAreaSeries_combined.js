/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { PolarLineSeriesBase } from "./PolarLineSeriesBase";
import { DependencyProperty } from "igniteui-react-core";
import { markType, markDep } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { PolarLineSeriesBaseView } from "./PolarLineSeriesBaseView";
import { Path } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { Extensions } from "igniteui-react-core";
import { Numeric } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let PolarSplineAreaSeries = /*@__PURE__*/ (() => {
    class PolarSplineAreaSeries extends PolarLineSeriesBase {
        constructor() {
            super();
            this.ab = PolarSplineAreaSeries.$;
        }
        bf() {
            return new PolarSplineAreaSeriesView(this);
        }
        iv(a) {
            super.iv(a);
            this.ph = a;
        }
        pf(a) {
            let b = a;
            b.c0();
        }
        pg(a, b) {
            this.pf(b);
            if (a.m.count < 1) {
                return;
            }
            let c = b;
            c.c3._opacity = this.d6;
            c.c1(a.m, this.pi);
        }
        get_pc() {
            return true;
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case PolarSplineAreaSeries.$$p[0]:
                    this.je(false);
                    break;
            }
        }
    }
    PolarSplineAreaSeries.$t = /*@__PURE__*/ markType(PolarSplineAreaSeries, 'PolarSplineAreaSeries', PolarLineSeriesBase.$);
    PolarSplineAreaSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, PolarSplineAreaSeries, 'raisePropertyChanged', ['Stiffness:pi:pk', [1, 0.5]]);
    return PolarSplineAreaSeries;
})();
/**
 * @hidden
 */
export let PolarSplineAreaSeriesView = /*@__PURE__*/ (() => {
    class PolarSplineAreaSeriesView extends PolarLineSeriesBaseView {
        constructor(a) {
            super(a);
            this.cz = null;
            this.c4 = ((() => {
                let $ret = new Path();
                $ret.ak = new PathGeometry();
                return $ret;
            })());
            this.c2 = ((() => {
                let $ret = new Path();
                $ret.ak = new PathGeometry();
                return $ret;
            })());
            this.cz = a;
        }
        ap() {
            super.ap();
            if (!this.n) {
                this.e.bj = 1;
            }
        }
        get c3() {
            return this.c2;
        }
        c0() {
            Extensions.e(this.c2.ak);
            Extensions.e(this.c4.ak);
            this.an();
        }
        c1(a, b) {
            this.c4.ak.c = Numeric.h(a.count + 1, (c) => c < a.count ? a._inner[c].x : a._inner[c - a.count].x, (c) => c < a.count ? a._inner[c].y : a._inner[c - a.count].y, b);
            this.c2.ak.c = Numeric.h(a.count + 1, (c) => c < a.count ? a._inner[c].x : a._inner[c - a.count].x, (c) => c < a.count ? a._inner[c].y : a._inner[c - a.count].y, b);
            this.an();
        }
        a8() {
            super.a8();
            this.c2._fill = this.e.k4;
            this.c2._opacity = this.e.d6;
            this.c4._stroke = this.e.k5;
            this.c4.ac = this.e.ey;
            this.c4.ai = this.e.lc;
            this.c4.ad = this.e.ld;
        }
        a9() {
            super.a9();
            let a = this.bl();
            this.c2._fill = a;
            this.c2._opacity = 1;
            this.c4._stroke = a;
            this.c4.ac = this.e.ey + 3;
        }
        a3(a, b) {
            super.a3(a, b);
            if (a.d) {
                a.s(this.c2);
                a.s(this.c4);
            }
        }
        ai(a) {
            super.ai(a);
            this.e.a2.exportPathData(a, this.c4, "polarShape", ["Main"]);
            this.e.a2.exportPathData(a, this.c2, "fillShape", ["Fill"]);
        }
        ac() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.lb = a;
            this.e.ev = 5;
            this.e.ew = 5;
            this.e.ex = 5;
        }
    }
    PolarSplineAreaSeriesView.$t = /*@__PURE__*/ markType(PolarSplineAreaSeriesView, 'PolarSplineAreaSeriesView', PolarLineSeriesBaseView.$);
    return PolarSplineAreaSeriesView;
})();
//# sourceMappingURL=PolarSplineAreaSeries_combined.js.map
