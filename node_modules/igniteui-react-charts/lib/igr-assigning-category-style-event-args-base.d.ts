import { IgrHighlightingInfo } from "./igr-highlighting-info";
import { AssigningCategoryStyleEventArgsBase as AssigningCategoryStyleEventArgsBase_internal } from "./AssigningCategoryStyleEventArgsBase";
/**
 * Represents event arguments base class for the AssigningCategoryStyleEventArgsBase
*/
export declare abstract class IgrAssigningCategoryStyleEventArgsBase {
    protected createImplementation(): AssigningCategoryStyleEventArgsBase_internal;
    protected _implementation: any;
    /**
     * @hidden
     */
    readonly i: AssigningCategoryStyleEventArgsBase_internal;
    private onImplementationCreated;
    constructor();
    protected _provideImplementation(i: any): void;
    /**
     * Gets the start index
    */
    startIndex: number;
    /**
     * Gets the end index
    */
    endIndex: number;
    /**
     * Gets the start date
    */
    startDate: Date;
    /**
     * Gets the end date
    */
    endDate: Date;
    /**
     * Gets a function that will return the items associated with this event.
    */
    getItems: (orderedStartIndex: number, orderedEndIndex: number) => any[];
    /**
     * Gets or sets fill brush to use for the current item.
    */
    fill: string;
    /**
     * Gets or sets stroke to use for the current item.
    */
    stroke: string;
    /**
     * Gets or sets opacity to use for the current item.
    */
    opacity: number;
    /**
     * Gets or sets highlighting info
    */
    highlightingInfo: IgrHighlightingInfo;
    /**
     * Gets the max highlighting progress from all series.
    */
    maxAllSeriesHighlightingProgress: number;
    /**
     * Gets the sum of highlighting progress from all series.
    */
    sumAllSeriesHighlightingProgress: number;
    /**
     * Gets or sets if highlighting was handled by this event handler, and whether internal highlighting logic should be skipped.
    */
    highlightingHandled: boolean;
    /**
     * Gets if this event has a valid date range
    */
    hasDateRange: boolean;
    /**
     * Gets if the current shape is identified as a negative shape if this series supports discrete negative shapes.
    */
    isNegativeShape: boolean;
    /**
     * Gets if the current event is being raised for the thumbnail image.
    */
    isThumbnail: boolean;
    findByName(name: string): any;
}
