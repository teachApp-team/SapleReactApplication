import { Base, Point, Type, INotifyPropertyChanged, PropertyChangedEventArgs } from "./type";
import { DomRenderer, DomWrapper } from "./dom";
import { IExecutionContext } from "./IExecutionContext";
import { CanvasGestureDOMEventProxy } from "./CanvasGestureDOMEventProxy";
import { Brush } from "./Brush";
import { Key } from "./Key";
import { DoubleAnimator } from "./DoubleAnimator";
import { ScrollbarStyle } from "./ScrollbarStyle";
import { IScrollerKeyboardListener } from "./IScrollerKeyboardListener";
import { ScrollerScrollingEventArgs } from "./ScrollerScrollingEventArgs";
/**
 * @hidden
 */
export declare class ScrollerView extends Base {
    static $t: Type;
    constructor(a: Scroller);
    c: Scroller;
    protected ad: DomRenderer;
    protected ah: DomWrapper;
    protected b: IExecutionContext;
    a8(): Brush;
    protected ac: HTMLDivElement;
    protected a: CanvasGestureDOMEventProxy;
    ag: DomWrapper;
    ae: DomWrapper;
    af: DomWrapper;
    ai: DomWrapper;
    a0(a: any): void;
    private k;
    private r;
    private ak;
    private al;
    private am;
    private p;
    private q;
    private n;
    private o;
    private e;
    private j;
    ay(a: number): void;
    az(a: number): void;
    av(a: number): void;
    aw(a: number): void;
    aj(): void;
    private an;
    private ao;
    a6(a: number): void;
    private ap;
    z(): number;
    aa(): number;
    private l;
    private m;
    private aq;
    a5(a: number): void;
    a1(a: any): void;
    private d;
    a2(a: () => void): void;
    private i;
    private h;
    private w;
    private t;
    private x;
    private u;
    private g;
    private f;
    private v;
    private s;
    at(): void;
    as(): void;
    a7(a: number, b: number): void;
    a3(a: number, b: number): void;
    a4(a: boolean): void;
    private y;
    private ab;
    ar(): void;
    ax(): void;
    au(): void;
}
/**
 * @hidden
 */
export declare class Scroller extends Base implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    private bb;
    smallVerticalChange: number;
    private _keyboardListener;
    keyboardListener: IScrollerKeyboardListener;
    private a3;
    largeVerticalChange: number;
    private ax;
    bk: number;
    private av;
    bi: number;
    private ba;
    smallHorizontalChange: number;
    private a2;
    largeHorizontalChange: number;
    private aw;
    bj: number;
    private au;
    bh: number;
    private a0;
    contentWidth: number;
    private a4;
    minScrollbarSize: number;
    private a7;
    scrollbarSpan: number;
    ak(a: Key, b: boolean, c: boolean): boolean;
    private ai;
    private ah;
    private aq;
    private af;
    private aj;
    private ap;
    private al;
    private ar;
    private ae;
    private ao;
    private an;
    private ag;
    private bd;
    verticalTrackStartInset: number;
    private dr;
    scrollbarBrush: Brush;
    private da;
    private v;
    private as;
    protected dd(a: string, b: any, c: any): void;
    private az;
    contentHeight: number;
    db(a: number): void;
    c9(a: number): void;
    dc(a: number, b: number, c?: boolean): void;
    private bf;
    viewportWidth: number;
    private be;
    viewportHeight: number;
    private a9;
    scrollTop: number;
    private a8;
    scrollLeft: number;
    private f;
    readonly view: ScrollerView;
    provideContainer(a: any): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    provideContent(a: any): void;
    am(a: Point, b: number, c: number): boolean;
    private t;
    lockScrollDirection: boolean;
    y: boolean;
    private ay;
    actualVerticalScrollbarHeight: number;
    private at;
    actualHorizontalScrollbarWidth: number;
    private c;
    scrollbarStyle: ScrollbarStyle;
    private a1;
    horizontalScrollbarStatus: number;
    private bc;
    verticalScrollbarStatus: number;
    private h;
    readonly horizontalAnimation: DoubleAnimator;
    private i;
    readonly verticalAnimation: DoubleAnimator;
    private bo;
    private bz;
    private bp;
    private b0;
    private _executionContext;
    executionContext: IExecutionContext;
    readonly isVerticalActive: boolean;
    readonly isHorizontalActive: boolean;
    private _isDraggingVBar;
    isDraggingVBar: boolean;
    private _isDraggingHBar;
    isDraggingHBar: boolean;
    private q;
    private o;
    private p;
    private dt;
    private n;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    focus(): void;
    c8(a: Point): void;
    c7(a: Point): void;
    onScrolling: (sender: any, args: ScrollerScrollingEventArgs) => void;
    scrollTo(a: number, b: number): void;
    private a5;
    private a6;
    private dh;
    private di;
    private u;
    private dg;
    private dm;
    private dq;
    private dn;
    private dp;
    c6(a: Point): void;
    private cv;
    private cw;
    cx(): void;
    cy(): void;
    c1(): void;
    c2(): void;
    private b5;
    private b6;
    private b7;
    private m;
    private x;
    private l;
    private w;
    private r;
    private s;
    private dk;
    private dl;
    private cz;
    private c0;
}
