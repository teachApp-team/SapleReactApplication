import { MarkerSeries } from "./MarkerSeries";
import { Point, Type } from "igniteui-react-core";
import { PolarAxisInfoCache } from "./PolarAxisInfoCache";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { PolarFrame } from "./PolarFrame";
import { DependencyProperty } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { NumericAngleAxis } from "./NumericAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Axis } from "./Axis";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { PolarAxes } from "./PolarAxes";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { HashPool$2 } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { PolarTrendLineManager } from "./PolarTrendLineManager";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class PolarBase extends MarkerSeries {
    static $t: Type;
    protected bf(): SeriesView;
    iv(a: SeriesView): void;
    nb: PolarBaseView;
    private nc;
    hu(): void;
    protected get_c0(): boolean;
    nr(a: List$1<SeriesPointOfInterest>): boolean;
    constructor();
    private ob;
    private oc;
    private m5;
    na: PolarAxisInfoCache;
    private o2;
    private o1;
    ni: SeriesRenderer$2<PolarFrame, PolarBaseView>;
    n0: string;
    n6: string;
    protected nm: IFastItemColumn$1<number>;
    private nk;
    protected nn: IFastItemColumn$1<number>;
    private nl;
    m7: NumericAngleAxis;
    m8: NumericRadiusAxis;
    ns: boolean;
    nv: number;
    nj: TrendLineType;
    ow: Brush;
    ov: Brush;
    static readonly og: DependencyProperty;
    nu: number;
    oy: PenLineCap;
    ox: DoubleCollection;
    nw: number;
    nx: number;
    nq: boolean;
    nf: PolarFrame;
    nh: PolarFrame;
    ne: PolarFrame;
    m9: PolarAxes;
    ic(): void;
    protected hz(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected jt(a: Rect, b: Rect): void;
    protected ju(a: Rect, b: Rect): void;
    dw(a: Rect, b: Rect, c: SeriesView): boolean;
    jf(a: boolean): void;
    private o0;
    an(a: Axis): AxisRange;
    c9(a: any): boolean;
    fp(a: Point): any;
    e8(a: Point): number;
    ag(): Axis[];
    fs(a: any, b: string): any;
    protected i0(a: any, b: string, c: any, d: any): void;
    np(a: any): boolean;
    no(a: any): boolean;
    hw(a: boolean, b: SeriesView): void;
    private m6;
    oa(a: PolarFrame, b: number, c: Rect, d: Rect): void;
    od(a: PolarFrame, b: PolarBaseView): void;
    of(a: PolarFrame, b: PolarBaseView): void;
    private n9;
    protected jp(): void;
    ng: PolarFrame;
    jg(a: Rect, b: RenderSurface): void;
    private nd;
    jd(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    oe(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    m4(a: HashPool$2<any, Marker>, b: Rect, c: Rect): Point[];
    nt(a: HashPool$2<any, Marker>): List$1<number>;
    oz(a: number): Point;
    protected h5(a: any): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PolarBaseView extends MarkerSeriesView {
    static $t: Type;
    protected cq: PolarBase;
    cp: MarkerManagerBase;
    constructor(a: PolarBase);
    cr: PolarTrendLineManager;
    ap(): void;
    protected co(): MarkerManagerBase;
    protected cv(a: IDictionary$2<any, OwnedPoint>): void;
    protected cn(): Point[];
    protected ct(): List$1<number>;
    cu(a: Rect, b: Rect, c: Rect, d: Rect): void;
    cw(): void;
    cs: HashPool$2<any, Marker>;
    cc(a: (arg1: Marker) => void): void;
    protected a2(a: RenderingContext, b: boolean): void;
    protected cx(): Rect;
    getDefaultTooltipTemplate(): string;
}
