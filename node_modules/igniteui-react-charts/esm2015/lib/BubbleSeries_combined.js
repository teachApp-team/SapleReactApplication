/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ScatterBase } from "./ScatterBase";
import { IScaleLegendSeries_$type } from "igniteui-react-core";
import { ISupportsSizeScale_$type } from "./ISupportsSizeScale";
import { ISupportsFillScale_$type } from "./ISupportsFillScale";
import { List$1 } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { Base, typeCast, Point_$type, fromEnum, markType, markDep, enumGetBox, runOn } from "igniteui-react-core";
import { BubbleSeries_ActualRange } from "./BubbleSeries_ActualRange";
import { DependencyProperty } from "igniteui-react-core";
import { SizeScale } from "./SizeScale";
import { BrushScale } from "./BrushScale";
import { ScatterFrame } from "./ScatterFrame";
import { IChartLegend_$type } from "igniteui-react-core";
import { ValueBrushScale } from "./ValueBrushScale";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { ScatterBaseView } from "./ScatterBaseView";
import { ScalerParams } from "./ScalerParams";
import { OwnedPoint } from "./OwnedPoint";
import { Dictionary$2 } from "igniteui-react-core";
import { BubbleMarkerManager } from "./BubbleMarkerManager";
import { IChartItemLegend_$type } from "igniteui-react-core";
import { IChartScaleLegend_$type } from "igniteui-react-core";
import { ContentControl } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, isInfinity, logBase } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { BrushSelectionMode_$type } from "./BrushSelectionMode";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
/**
 * @hidden
 */
export let BubbleSeries = /*@__PURE__*/ (() => {
    class BubbleSeries extends ScatterBase {
        constructor() {
            super();
            this.qh = null;
            this.qg = null;
            this.pg = null;
            this.o8 = null;
            this.o7 = null;
            this.o6 = null;
            this.pf = false;
            this.pd = false;
            this.pe = false;
            this.pk = NaN;
            this.pj = NaN;
            this.ab = BubbleSeries.$;
            this.nd = new ScatterFrame();
            this.nf = new ScatterFrame();
            this.nc = new ScatterFrame();
        }
        bf() {
            return new BubbleSeriesView(this);
        }
        iv(a) {
            super.iv(a);
            this.o4 = a;
        }
        isAttachedTo(a) {
            return this.aw == a;
        }
        ci() {
            return true;
        }
        h7(a) {
            super.h7(a);
            if (this.pb != null && this.pg != null && this.pg.count > 0) {
                for (let b = 0; b < this.pg.count; b++) {
                    a(this.pg._inner[b]);
                }
            }
        }
        get pa() {
            return this.pc;
        }
        qf(a) {
            let b = typeCast(CustomPaletteBrushScale.$, this.o1);
            let c = typeCast(ValueBrushScale.$, this.o1);
            let d = this.o1;
            if (b != null && this.bz != null) {
                return b.getBrush1(a, this.bz.count);
            }
            else if (c != null) {
                return c.getBrushByIndex(a, this.o9);
            }
            else if (d != null) {
                return d.getBrush(a);
            }
            return null;
        }
        get legendReady() {
            return this.pc != null && this.pc.count != 0;
        }
        get minScaleText() {
            let a = this.o3(this.o5).b;
            return (Math.round(a * 1000) / 1000).toString();
        }
        get maxScaleText() {
            let a = this.o3(this.o5).a;
            return (Math.round(a * 1000) / 1000).toString();
        }
        forScaleColors(a) {
            for (let b = 0; b < this.pc.count; b++) {
                if (this.o1 == null || !this.o1.isReady) {
                    return false;
                }
                let c = NaN;
                if (this.o9 != null) {
                    c = (this.o9.item(b) - this.o9.minimum) / (this.o9.maximum - this.o9.minimum);
                }
                let d = (this.pc.item(b) - this.pc.minimum) / (this.pc.maximum - this.pc.minimum);
                if (isNaN_(c)) {
                    c = 0;
                }
                if (isNaN_(d)) {
                    d = c;
                }
                let e = this.mz;
                let f = this.qf(b);
                let g = f != null ? f : e;
                a(g, d);
            }
            return true;
        }
        fs(a, b) {
            let c = this.gv(b);
            if (c == BubbleSeries.$$p[3]) {
                return this.ft(a, b, this.pr);
            }
            if (c == BubbleSeries.$$p[7]) {
                return this.ft(a, b, this.px);
            }
            if (c == ScatterBase.$$p[4]) {
                return this.ft(a, b, this.nv);
            }
            if (c == ScatterBase.$$p[6]) {
                return this.ft(a, b, this.nz);
            }
            if (c == BubbleSeries.$$p[0]) {
                return this.ft(a, b, this.pm);
            }
            return super.fs(a, b);
        }
        get pc() {
            return this.o8;
        }
        set pc(a) {
            if (this.o8 != a) {
                let b = this.pc;
                this.o8 = a;
                this.raisePropertyChanged("RadiusColumn", b, this.pc);
            }
        }
        get pb() {
            return this.o7;
        }
        set pb(a) {
            if (this.o7 != a) {
                let b = this.pb;
                this.o7 = a;
                this.raisePropertyChanged("LabelColumn", b, this.pb);
            }
        }
        get o9() {
            return this.o6;
        }
        set o9(a) {
            if (this.o6 != a) {
                let b = this.o9;
                this.o6 = a;
                this.raisePropertyChanged("FillColumn", b, this.o9);
            }
        }
        n2(a, b, c, d, e) {
            if (c <= this.no) {
                b.g = new Dictionary$2(Base.$, OwnedPoint.$, 1, c);
            }
            let f = this.no;
            let g = this.bz;
            let h;
            let i;
            let j = this.getEffectiveViewport1(a);
            let k = new ScalerParams(0, d, e, this.m8.d, j);
            let l = new ScalerParams(0, d, e, this.m8.e, j);
            for (let m = 0; m < c; m++) {
                h = this.nh.item(m);
                i = this.nj.item(m);
                let n = { $type: Point_$type, x: this.m8.a.dy(h, k), y: this.m8.b.dy(i, l) };
                if (!isInfinity(n.x) && !isInfinity(n.y)) {
                    let o = g.item(m);
                    if (c <= f) {
                        if (!b.g.containsKey(o)) {
                            let p = { $type: Point_$type, x: h, y: i };
                            b.g.addItem(o, ((() => {
                                let $ret = new OwnedPoint();
                                $ret.a = o;
                                $ret.b = p;
                                $ret.c = n;
                                return $ret;
                            })()));
                        }
                    }
                }
            }
        }
        n6(a, b) {
            let c = typeCast(BubbleSeriesView.$, b);
            let d = c.cr;
            d.m = this.pc;
            super.n6(a, b);
            let e = Math.min(this.nh != null ? this.nh.count : 0, this.nj != null ? this.nj.count : 0);
            if (e < 1) {
                return;
            }
            c.dc();
            c.dd();
        }
        p2() {
            if (this.bs == null) {
                return;
            }
            if (this.aw == null) {
                return;
            }
            if (this.aw.isItemwise) {
                let a = this.aw;
                this.aw.clearLegendItemsForSeries(this);
                this.p1();
                a.renderItemwiseContent(this);
            }
            if (this.aw.isScale) {
                let b = this.aw;
                b.restoreOriginalState();
                b.initializeLegend(this);
            }
        }
        static ph(a, b, c, d, e) {
            if (e <= a || isNaN_(e) || isInfinity(e)) {
                return c;
            }
            if (e >= b) {
                return d;
            }
            let f = c + ((d - c) / (b - a)) * (e - a);
            return f;
        }
        static pi(a, b, c, d, logBase_, e) {
            let f = logBase(e, logBase_);
            let g = logBase(a, logBase_);
            let h = logBase(b, logBase_);
            return BubbleSeries.ph(g, h, c, d, f);
        }
        dw(a, b, c) {
            let d = super.dw(a, b, c);
            if (this.pc == null || this.bz == null || this.pc.count == 0 || this.bz.count != this.pc.count) {
                d = false;
            }
            return d;
        }
        nm(a, b) {
            if (b != 3) {
                return true;
            }
            if (a == null) {
                return true;
            }
            if (this.nv == a || this.nz == a || this.px == a) {
                return true;
            }
            return false;
        }
        p1() {
            let a = typeCast(IChartLegend_$type, this.aw);
            if (a == null || this.bz == null) {
                return;
            }
            this.pg = new List$1(UIElement.$, 0);
            let b = typeCast(CustomPaletteBrushScale.$, this.o1);
            let c = typeCast(ValueBrushScale.$, this.o1);
            let d = this.o1;
            let e = this.o2();
            let f = e.b;
            let g = e.a;
            let h = this.bz;
            for (let i = 0; i < h.count; i++) {
                let j = null;
                if (c != null && this.o9 != null) {
                    let k = this.o9.item(i);
                    j = c.getBrushByRange(k, f, g);
                }
                else if (b != null) {
                    j = b.getBrush1(i, h.count);
                }
                else if (d != null) {
                    j = d.getBrush(i);
                }
                let l = new ContentControl();
                let m = this.pb != null && this.pb.item(i) != null ? this.pb.item(i).toString() : "";
                l.content = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this;
                    $ret.item = h.item(i);
                    $ret.itemBrush = j;
                    $ret.itemLabel = m;
                    return $ret;
                })());
                let n = this.jz;
                if (n == null) {
                    n = this.bi.bi(this.bk);
                }
                l.ah = n;
                this.pg.add(l);
            }
        }
        hz(a, b, c, d) {
            super.hz(a, b, c, d);
            if (this.o5 != null) {
                this.o5.aa();
            }
            if (this.o1 != null) {
                this.o1.w();
            }
            this.p2();
        }
        ie() {
            super.ie();
            this.p2();
        }
        ik() {
            super.ik();
            this.p2();
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case "FastItemsSource":
                    if (this.o5 != null) {
                        this.o5.aa();
                    }
                    if (this.o1 != null) {
                        this.o1.w();
                    }
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.pc);
                        c.deregisterColumn(this.o9);
                        c.deregisterColumn(this.pb);
                        this.pc = null;
                        this.o9 = null;
                        this.pb = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.pc = this.bw(this.px);
                        if (!stringIsNullOrEmpty(this.pm)) {
                            this.o9 = this.bw(this.pm);
                        }
                        this.pb = this.by(this.pr);
                    }
                    this.je(false);
                    this.p2();
                    break;
                case BubbleSeries.$$p[7]:
                    if (this.o5 != null) {
                        this.o5.aa();
                    }
                    if (this.bz != null) {
                        this.bz.deregisterColumn(this.pc);
                        this.pc = this.bw(this.px);
                        this.p2();
                    }
                    break;
                case "RadiusColumn":
                    if (this.o5 != null) {
                        this.o5.aa();
                    }
                    this.m9.ct.g$i();
                    this.je(false);
                    this.im();
                    break;
                case BubbleSeries.$$p[8]:
                    if (c != null) {
                        c.l.remove(this);
                        c.aa();
                    }
                    if (d != null) {
                        d.l.add(this);
                        d.aa();
                    }
                    this.je(false);
                    this.il();
                    break;
                case BubbleSeries.$$p[9]:
                    this.je(false);
                    this.il();
                    break;
                case "DiscreteLegendItemTemplate":
                    this.p2();
                    break;
                case BubbleSeries.$$p[1]:
                    if (c != null) {
                        c.o.remove(this);
                        c.w();
                    }
                    if (d != null) {
                        d.o.add(this);
                        d.w();
                    }
                    this.je(false);
                    this.p2();
                    this.il();
                    break;
                case BubbleSeries.$$p[2]:
                case BubbleSeries.$$p[6]:
                case BubbleSeries.$$p[5]:
                case BubbleSeries.$$p[4]:
                    this.je(false);
                    this.p2();
                    this.il();
                    break;
                case "FillColumn":
                    this.je(false);
                    this.il();
                    break;
                case BubbleSeries.$$p[0]:
                    if (this.o1 != null) {
                        this.o1.w();
                    }
                    if (this.bz != null) {
                        this.bz.deregisterColumn(this.o9);
                        this.o9 = this.bw(this.pm);
                        this.p2();
                    }
                    break;
                case BubbleSeries.$$p[3]:
                    if (this.bz != null) {
                        this.bz.deregisterColumn(this.pb);
                        this.pb = this.by(this.pr);
                        this.p2();
                    }
                    break;
                case "ActualLegend":
                    let e = typeCast(IChartLegend_$type, c);
                    if (e != null && e.isItemwise) {
                        let f = typeCast(IChartItemLegend_$type, e);
                        f.clearLegendItemsForSeries(this);
                    }
                    if (e != null && e.isScale) {
                        let g = typeCast(IChartScaleLegend_$type, e);
                        let h = true;
                        let i = null;
                        if (this.bs != null) {
                            for (let j of fromEnum(this.bs.series)) {
                                if (j.legend == g) {
                                    i = j;
                                    h = false;
                                }
                            }
                        }
                        if (h) {
                            g.restoreOriginalState();
                        }
                        else {
                            g.initializeLegend(typeCast(IScaleLegendSeries_$type, i));
                        }
                    }
                    this.p2();
                    break;
                case "SeriesViewer":
                    this.p2();
                    break;
            }
        }
        updateSizeScaleGlobals() {
            let a = new BubbleSeries_ActualRange();
            a.b = NaN;
            a.a = NaN;
            if (this.pc != null) {
                a.b = this.pc.minimum;
                a.a = this.pc.maximum;
            }
            if (this.o5 != null) {
                this.o5.ab(a.b, a.a);
            }
        }
        updateFillScaleGlobals() {
            let a = new BubbleSeries_ActualRange();
            a.b = NaN;
            a.a = NaN;
            if (this.o9 != null) {
                a.b = this.o9.minimum;
                a.a = this.o9.maximum;
            }
            if (this.o1 != null) {
                this.o1.y(a.b, a.a);
            }
        }
        o3(a) {
            let b = new BubbleSeries_ActualRange();
            b.b = NaN;
            b.a = NaN;
            if (this.pc != null) {
                b.b = this.pc.minimum;
                b.a = this.pc.maximum;
            }
            if (a != null) {
                a.x();
                if (this.pf) {
                    b.b = a.globalMinimum;
                    b.a = a.globalMaximum;
                }
            }
            return b;
        }
        o2() {
            let a = new BubbleSeries_ActualRange();
            a.b = NaN;
            a.a = NaN;
            if (this.o9 != null) {
                a.b = this.o9.minimum;
                a.a = this.o9.maximum;
            }
            let b = typeCast(ValueBrushScale.$, this.o1);
            if (b != null) {
                b.s();
                if (this.pd && this.o1.o.count > 1) {
                    a.b = b.q;
                    a.a = b.p;
                }
            }
            return a;
        }
        p4(a, b, c, d) {
            let e = c.width;
            if (!this.bi.br.isEmpty) {
                e = this.bi.br.width;
            }
            else if (this.bs != null && !this.bs.m5.isEmpty) {
                e = this.bs.m5.width;
            }
            let f = DeviceUtils.c(e);
            let g = this.o5 || ((() => {
                let $ret = new SizeScale();
                $ret.minimumValue = f / 10;
                $ret.maximumValue = f / 5;
                return $ret;
            })());
            if (g != null) {
                let h = g.minimumValue;
                let i = g.maximumValue;
                let j = g.logarithmBase;
                let k = this.o3(g);
                let l = k.b;
                let m = k.a;
                if (g.isLogarithmic) {
                    for (let n = 0; n < b.count; n++) {
                        b._inner[n] = BubbleSeries.pi(l, m, h, i, j, b._inner[n]);
                    }
                }
                else {
                    for (let o = 0; o < b.count; o++) {
                        b._inner[o] = BubbleSeries.ph(l, m, h, i, b._inner[o]);
                    }
                }
            }
            let p = 1;
            p = DeviceUtils.d();
            let q = this.o5 == null;
            if (d) {
                let r = c.width / e;
                for (let s = 0; s < b.count; s++) {
                    if (q) {
                        b._inner[s] = b._inner[s] / p;
                    }
                    b._inner[s] = b._inner[s] * r;
                }
            }
            for (let t = 0; t < a.count; t++) {
                let u = a._inner[t];
                if (q && !d) {
                    u.width = Math.max(0, b._inner[t] / p);
                    u.height = Math.max(0, b._inner[t] / p);
                }
                else {
                    u.width = Math.max(0, b._inner[t]);
                    u.height = Math.max(0, b._inner[t]);
                }
            }
        }
        p3(a) {
            let b = typeCast(BubbleSeriesView.$, this.bh);
            this.o4.b0 = false;
            if (b != null) {
                b.b0 = false;
            }
            let c = typeCast(CustomPaletteBrushScale.$, this.o1);
            let d = typeCast(ValueBrushScale.$, this.o1);
            let e = this.o1;
            let f = this.o2();
            let g = f.b;
            let h = f.a;
            let i = this.o1 == null || !this.o1.isReady || (d != null && this.pm == null);
            if (i) {
                this.o4.db();
                if (b != null) {
                    b.db();
                }
                return;
            }
            this.o4.b0 = true;
            if (b != null) {
                b.b0 = true;
            }
            let j = a.count;
            let k = this.bz;
            for (let l = 0; l < j; l++) {
                let m = a._inner[l];
                let n = typeCast(DataContext.$, m.content);
                if (n != null) {
                    let o = null;
                    let p = k.indexOf(n.item);
                    if (c != null) {
                        o = c.getBrush1(p, k.count);
                    }
                    else if (d != null && this.o9 != null) {
                        let q = this.o9.item(p);
                        o = d.getBrushByRange(q, g, h);
                    }
                    else if (e != null) {
                        o = e.getBrush(p);
                    }
                    else {
                        if (this.m1 == null) {
                            o = this.mz;
                        }
                        else {
                            o = this.m1;
                        }
                    }
                    let r = null;
                    if (this.m2 == null) {
                        r = this.m0;
                    }
                    else {
                        r = this.m2;
                    }
                    if (this.pe && o != null) {
                        r = o;
                    }
                    if (r != null && !isNaN_(this.pk)) {
                        r = BrushUtil.l(r, this.pk);
                    }
                    if (o != null && !isNaN_(this.pj)) {
                        o = BrushUtil.l(o, this.pj);
                    }
                    n.itemBrush = o;
                    n.actualItemBrush = o;
                    n.outline = r;
                }
            }
        }
        get_cy() {
            return false;
        }
        get actualMarkerBrush() {
            return this.mz;
        }
    }
    BubbleSeries.$t = /*@__PURE__*/ markType(BubbleSeries, 'BubbleSeries', ScatterBase.$, [IScaleLegendSeries_$type, ISupportsSizeScale_$type, ISupportsFillScale_$type]);
    BubbleSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, BubbleSeries, 'raisePropertyChanged', ['FillMemberPath:pm:p5', [2], 'FillScale:o1:p6', [BrushScale.$], 'FillScaleUseGlobalValues:pd:p7', [0], 'LabelMemberPath:pr:p8', [2], 'MarkerBrushBrightness:pj:p9', [1], 'MarkerOutlineBrightness:pk:qa', [1], 'MarkerOutlineUsesFillScale:pe:qb', [0], 'RadiusMemberPath:px:qc', [2, null], 'RadiusScale:o5:qd', [SizeScale.$], 'RadiusScaleUseGlobalValues:pf:qe', [0]]);
    return BubbleSeries;
})();
/**
 * @hidden
 */
export let CustomPaletteBrushScale = /*@__PURE__*/ (() => {
    class CustomPaletteBrushScale extends BrushScale {
        constructor() {
            super();
        }
        getBrush1(a, b) {
            if (this.brushes == null || this.brushes.count == 0) {
                return null;
            }
            if (this.brushSelectionMode == 0) {
                return super.getBrush(a % this.brushes.count);
            }
            let c = BubbleSeries.ph(0, b - 1, 0, this.brushes.count - 1, a);
            return this.aa(c);
        }
        get_isReady() {
            return this.brushes != null && this.brushes.count > 0;
        }
    }
    CustomPaletteBrushScale.$t = /*@__PURE__*/ markType(CustomPaletteBrushScale, 'CustomPaletteBrushScale', BrushScale.$);
    CustomPaletteBrushScale.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CustomPaletteBrushScale, 'u', ['BrushSelectionMode', [BrushSelectionMode_$type, /*@__PURE__*/ enumGetBox(BrushSelectionMode_$type, 0)]]);
    return CustomPaletteBrushScale;
})();
/**
 * @hidden
 */
export let BubbleSeriesView = /*@__PURE__*/ (() => {
    class BubbleSeriesView extends ScatterBaseView {
        constructor(a) {
            super(a);
            this.da = null;
            this.da = a;
            this.ct = new ScatterTrendLineManager();
        }
        ap() {
            super.ap();
            if (!this.n) {
                this.by.l2 = 2;
                this.e.bj = 4;
            }
        }
        cq() {
            return new BubbleMarkerManager((a) => this.cu.item(a), (a) => this.cs.m8.c.item(a), runOn(this, this.c4), runOn(this, this.cn), runOn(this, this.cv));
        }
        dc() {
            let a = this.cr;
            this.da.p4(a.n, a.o, this.br, this == this.e.bh);
            this.an();
        }
        dd() {
            let a = this.cr;
            this.da.p3(a.n);
        }
        db() {
            let a = this.cr;
            for (let b of fromEnum(a.n)) {
                let c = typeCast(DataContext.$, b.content);
                if (c != null) {
                    c.itemBrush = null;
                    c.outline = null;
                }
            }
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'><span";
            let b = this.e.a0.a$q(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.da.fx + "</span><br/><span>" + "(${item." + this.da.nv + "}, ${item." + this.da.nz + "})</span>";
            if (!stringIsNullOrEmpty(this.da.px)) {
                a += "<span>, Radius: ${item." + this.da.px + "}</span>";
            }
            a += "</div>";
            return a;
        }
    }
    BubbleSeriesView.$t = /*@__PURE__*/ markType(BubbleSeriesView, 'BubbleSeriesView', ScatterBaseView.$);
    return BubbleSeriesView;
})();
//# sourceMappingURL=BubbleSeries_combined.js.map
