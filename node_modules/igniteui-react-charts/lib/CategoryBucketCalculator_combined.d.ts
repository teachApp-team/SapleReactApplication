import { Base, Type, Point } from "igniteui-react-core";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { ScalerParams } from "./ScalerParams";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { CategoryMode } from "./CategoryMode";
import { FramePreparer } from "./FramePreparer";
import { IIsCategoryBased } from "./IIsCategoryBased";
import { List$1 } from "igniteui-react-core";
import { ISupportsMarkers } from "./ISupportsMarkers";
import { IProvidesViewport } from "./IProvidesViewport";
import { ISupportsErrorBars } from "./ISupportsErrorBars";
import { CategoryFrame } from "./CategoryFrame";
import { IDetectsCollisions } from "./IDetectsCollisions";
import { PreparationParams } from "./PreparationParams";
import { Frame } from "./Frame";
import { ICategoryScaler } from "./ICategoryScaler";
import { ValuesHolder } from "./ValuesHolder";
import { NumericAxisBase } from "./NumericAxisBase";
import { IHasCategoryTrendline } from "./IHasCategoryTrendline";
import { IHasSingleValueCategory } from "./IHasSingleValueCategory";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { ICategorySeriesInteractionManager } from "./ICategorySeriesInteractionManager";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { HighlightingInfo } from "./HighlightingInfo";
import { CategoryTransitionSourceFramePreparer } from "./CategoryTransitionSourceFramePreparer";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { CategorySeriesRenderManager } from "./CategorySeriesRenderManager";
import { AssigningCategoryStyleEventArgs } from "./AssigningCategoryStyleEventArgs";
import { AssigningCategoryMarkerStyleEventArgs } from "./AssigningCategoryMarkerStyleEventArgs";
import { SeriesComponentsForView } from "./SeriesComponentsForView";
import { Pool$1 } from "igniteui-react-core";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { RenderSurface } from "./RenderSurface";
import { Clipper } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class CategoryBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected c: CategorySeriesView;
    constructor(a: CategorySeriesView);
    e: number;
    f: number;
    d: number;
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    g(a: number): void;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class CategoryFramePreparerBase extends FramePreparer {
    static $t: Type;
    constructor(a: number, b: IIsCategoryBased);
    constructor(a: number, b: IIsCategoryBased, c: ISupportsMarkers, d: IProvidesViewport, e: ISupportsErrorBars, f: IBucketizer);
    constructor(a: number, ..._rest: any[]);
    g: IBucketizer;
    h: IIsCategoryBased;
    protected abstract l(a: CategoryFrame, b: number[], c: IDetectsCollisions, d: number, e: number, f: number): boolean;
    m: boolean;
    private i;
    r(a: ICategoryScaler, b: Rect, c: Rect, d: Rect): number;
    private s;
    d(a: Frame, b: SeriesView): void;
    protected v(a: CategoryFrame, b: SeriesView): void;
    private o;
    protected readonly q: List$1<number[]>;
    private p;
    private n;
    protected t(a: PreparationParams, b: ValuesHolder, c: number, d: boolean, e: boolean): number;
    protected k(): boolean;
    protected abstract z(a: ValuesHolder, b: number, c: boolean, d: boolean): void;
    protected abstract u(a: ValuesHolder, b: number, c: boolean): void;
    protected abstract e(a: number, b: ValuesHolder): number[];
    protected f(a: PreparationParams, b: number, c: ValuesHolder, d: number, e: boolean, f: number[], g: number): {
        ret: number[];
        p1?: number;
        p4: boolean;
        p5: number[];
    };
    protected y(a: PreparationParams, b: number, c: boolean, d: ScalerParams, e: ScalerParams, f: boolean, g: boolean): void;
    protected abstract x(a: PreparationParams, b: number[], c: number, d: boolean, e: ScalerParams, f: ScalerParams): void;
    protected w(a: PreparationParams, b: ValuesHolder, c: number): void;
    protected abstract j(a: PreparationParams): ValuesHolder;
}
/**
 * @hidden
 */
export declare class CategoryFramePreparer extends CategoryFramePreparerBase {
    static $t: Type;
    constructor(a: number, b: IIsCategoryBased);
    constructor(a: number, b: IIsCategoryBased, c: ISupportsMarkers, d: IProvidesViewport, e: ISupportsErrorBars, f: IBucketizer);
    constructor(a: number, ..._rest: any[]);
    protected aa: IHasCategoryTrendline;
    protected ab: IHasSingleValueCategory;
    protected l(a: CategoryFrame, b: number[], c: IDetectsCollisions, d: number, e: number, f: number): boolean;
    protected j(a: PreparationParams): ValuesHolder;
    protected x(a: PreparationParams, b: number[], c: number, d: boolean, e: ScalerParams, f: ScalerParams): void;
    protected y(a: PreparationParams, b: number, c: boolean, d: ScalerParams, e: ScalerParams, f: boolean, g: boolean): void;
    protected w(a: PreparationParams, b: ValuesHolder, c: number): void;
    protected z(a: ValuesHolder, b: number, c: boolean, d: boolean): void;
    protected u(a: ValuesHolder, b: number, c: boolean): void;
    protected e(a: number, b: ValuesHolder): number[];
}
/**
 * @hidden
 */
export declare abstract class CategorySeries extends MarkerSeries implements IHasCategoryModePreference, ISupportsErrorBars {
    static $t: Type;
    nf: CategoryFramePreparer;
    protected bf(): SeriesView;
    nj: CategorySeriesView;
    private ns;
    readonly nt: ICategorySeriesInteractionManager;
    ch(a: List$1<SeriesPointOfInterest>, b: boolean, c: number): boolean;
    private oe;
    iv(a: SeriesView): void;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    readonly categoryAxis: CategoryAxisBase;
    na(): CategoryAxisBase;
    nu(): NumericAxisBase;
    protected get_cl(): boolean;
    constructor();
    ac(): void;
    n1: boolean;
    n0: boolean;
    protected nw: boolean;
    protected nv: boolean;
    assigningCategoryStyle: (sender: any, args: AssigningCategoryStyleEventArgs) => void;
    assigningCategoryMarkerStyle: (sender: any, args: AssigningCategoryMarkerStyleEventArgs) => void;
    protected n3(): boolean;
    protected n4(): boolean;
    protected or(a: AssigningCategoryStyleEventArgs): void;
    protected oq(a: AssigningCategoryMarkerStyleEventArgs): void;
    m4(a: number, b: number): any[];
    hw(a: boolean, b: SeriesView): void;
    a8(): SeriesComponentsForView;
    ic(): void;
    n6: boolean;
    protected ju(a: Rect, b: Rect): void;
    nl: CategoryTransitionInMode;
    n2: boolean;
    protected jt(a: Rect, b: Rect): void;
    protected i0(a: any, b: string, c: any, d: any): void;
    protected ny(): boolean;
    protected nx(): boolean;
    n9(a: Point): number;
    protected get_c1(): boolean;
    ap(): CategoryAxisBase;
    fa(a: Point): number;
    abstract getOffsetValue(): number;
    abstract getCategoryWidth(): number;
    fp(a: Point): any;
    e8(a: Point): number;
    eb(a: Point): number;
    private nq;
    private nr;
    protected get_nz(): boolean;
    protected readonly nz: boolean;
    au(a: any, b: Point): HighlightingInfo;
    protected get_cv(): boolean;
    at(a: any, b: Point): HighlightingInfo;
    protected n8(): List$1<Marker>;
    protected np(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected no(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected nn(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    nc: CategoryFrame;
    ne: CategoryFrame;
    nb: CategoryFrame;
    nd: CategoryFrame;
    protected ni: CategorySeriesRenderManager;
    protected on(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    protected oo(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    dw(a: Rect, b: Rect, c: SeriesView): boolean;
    private n7;
    protected dc(): boolean;
    protected nk(): CategoryTransitionInMode;
    nm: CategoryTransitionSourceFramePreparer;
    protected hx(): void;
    jf(a: boolean): void;
    protected bo(): TransitionInSpeedType;
    protected oa(): number;
    od(): number;
    readonly GetErrorBarsXAxis: Axis;
    readonly GetErrorBarsYAxis: Axis;
    om(a: CategorySeriesView, b: CategoryFrame): void;
    os(a: CategoryFrame, b: CategorySeriesView): void;
    op(a: CategoryFrame, b: CategorySeriesView): void;
    ob(a: SeriesView): number;
    oc(a: SeriesView): number;
    ol(a: SeriesView): void;
    jg(a: Rect, b: RenderSurface): void;
    ot(): void;
    abstract fetchXAxis(): Axis;
    abstract fetchYAxis(): Axis;
    abstract n5(): boolean;
    ng(a: CategorySeriesView): CategoryFramePreparer;
    am(a: Axis): Axis;
    ag(): Axis[];
    static m5(a: List$1<number[]>, b: number, c: Rect, d: Rect, e: boolean): Clipper;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class CategorySeriesView extends MarkerSeriesView implements ISupportsMarkers {
    static $t: Type;
    cp: CategorySeries;
    cs: number;
    cr(a: CategoryFrame): boolean;
    cu(a: CategoryFrame): void;
    constructor(a: CategorySeries);
    updateMarkerTemplate(a: number, b: number, c: number): void;
    cn: CategoryBucketCalculator;
    co(): CategoryBucketCalculator;
    cq: Pool$1<Marker>;
    readonly shouldDisplayMarkers: boolean;
    updateMarkerCount(a: number): void;
    cc(a: (arg1: Marker) => void): void;
    ct(): void;
}
