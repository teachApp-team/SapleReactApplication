/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { ShapeSeriesBase } from "./ShapeSeriesBase";
import { ShapeAxisInfoCache } from "./ShapeAxisInfoCache";
import { StyleSelector } from "./StyleSelector";
import { DependencyProperty } from "igniteui-react-core";
import { Style } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { DataTemplate } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { Base, enumGetBox, typeCast, fromEnum, markType, markDep, PointUtil, runOn } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { ShapeSeriesViewBase } from "./ShapeSeriesViewBase";
import { MarkerSeries } from "./MarkerSeries";
import { DataContext } from "igniteui-react-core";
import { Marker } from "./Marker";
import { HashPool$2 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { RectUtil } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { DataTemplateMeasureInfo } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { DataTemplatePassInfo } from "igniteui-react-core";
import { DataTemplateRenderInfo } from "igniteui-react-core";
import { MarkerVisualData } from "./MarkerVisualData";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
var ScatterPolygonSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(ScatterPolygonSeries, _super);
    function ScatterPolygonSeries() {
        var _this = _super.call(this) || this;
        _this.nj = null;
        _this.ng = new ScalerParams(1, ScatterPolygonSeries.oi, ScatterPolygonSeries.oi, false);
        _this.nh = new ScalerParams(1, ScatterPolygonSeries.oi, ScatterPolygonSeries.oi, false);
        _this.nm = 2;
        _this.ab = ScatterPolygonSeries.$;
        return _this;
    }
    ScatterPolygonSeries.prototype.mj = function () {
        return this.nl();
    };
    ScatterPolygonSeries.prototype.m1 = function (a) {
        var _this = this;
        var b = a;
        b.cn(this.ok);
        b.co(this.nk);
        _super.prototype.m1.call(this, a);
        if (this.cc(a)) {
            return;
        }
        var c, d;
        var e = a.getViewInfo(c, d);
        c = e.p0;
        d = e.p1;
        var f = this.getEffectiveViewport1(a);
        this.ng = new ScalerParams(1, d, c, this.l7.ca);
        this.ng.c = f;
        this.nh = new ScalerParams(1, d, c, this.l9.ca);
        this.nh.c = f;
        if (c.width < 1 || c.height < 1) {
            return;
        }
        this.nj = ((function () {
            var $ret = new ShapeAxisInfoCache();
            $ret.a = _this.l7;
            $ret.b = _this.l9;
            $ret.e = _this.l7.ca;
            $ret.f = _this.l9.ca;
            $ret.d = _this.bz;
            $ret.c = _this.mc;
            return $ret;
        })());
        if (this.nl()) {
            var g = new Dictionary$2(Base.$, OwnedPoint.$, 0);
            b.c5.l(g, 400, d, c, this.eu);
            b.c5.j(g, false);
        }
    };
    ScatterPolygonSeries.prototype.nl = function () {
        return this.n0 != null && ((this.nf != 1 && this.nf != 0) || this.n1 != null);
    };
    ScatterPolygonSeries.prototype.bf = function () {
        return new ScatterPolygonSeriesView(this);
    };
    ScatterPolygonSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.ni = a;
    };
    ScatterPolygonSeries.prototype.get_hasMarkers = function () {
        return true;
    };
    ScatterPolygonSeries.prototype.k7 = function () {
        return this.oe;
    };
    ScatterPolygonSeries.prototype.k8 = function () {
        return this.of;
    };
    ScatterPolygonSeries.prototype.j0 = function () {
        return this.n0;
    };
    ScatterPolygonSeries.prototype.jp = function () {
        _super.prototype.jp.call(this);
        if (this.n1 != null) {
            this.ni.dd();
        }
        else {
            var a = MarkerSeries.l3(this, this.nf);
            var b = MarkerSeries.mc(a);
            if (b == null) {
                this.n0 = MarkerSeries.mo;
            }
            else {
                this.ni.da(b);
            }
        }
        if (this.og != null) {
            this.ni.db();
        }
        else {
            this.oe = this.bs == null ? null : this.bs.mb(this.fh);
        }
        if (this.oh != null) {
            this.ni.dc();
        }
        else {
            this.of = this.bs == null ? null : this.bs.mc(this.fh);
        }
    };
    ScatterPolygonSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case ScatterPolygonSeries.$$p[3]:
            case ScatterPolygonSeries.$$p[9]:
            case ScatterPolygonSeries.$$p[5]:
            case ScatterPolygonSeries.$$p[7]:
            case ScatterPolygonSeries.$$p[8]:
                this.jp();
                this.je(false);
                break;
            case ScatterPolygonSeries.$$p[2]:
                if (c == MarkerSeries.mo || d == MarkerSeries.mo || (c == null || d != null)) {
                    this.ni.df();
                    this.je(false);
                }
                this.je(false);
                this.il();
                break;
            case ScatterPolygonSeries.$$p[10]:
                this.ni.cn(this.ok);
                this.je(false);
                this.il();
                break;
            case ScatterPolygonSeries.$$p[11]:
                this.ni.co(this.nk);
                this.je(false);
                this.il();
                break;
            case ScatterPolygonSeries.$$p[4]:
                this.je(false);
                this.il();
                break;
        }
    };
    ScatterPolygonSeries.prototype.ar = function (a, b) {
        var c = this.ni.c2(a);
        var d = null;
        if (c != null) {
            d = c.content;
        }
        if (d != null) {
            return d;
        }
        return _super.prototype.ar.call(this, a, b);
    };
    ScatterPolygonSeries.prototype.nz = function (a, b) {
        var e_1, _a, e_2, _b;
        var c = new List$1(Base.$, 0);
        try {
            for (var _c = tslib_1.__values(fromEnum(b.c)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var d = _d.value;
                if (!a.containsKey(d)) {
                    c.add1(d);
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return))
                    _a.call(_c);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        try {
            for (var _e = tslib_1.__values(fromEnum(c)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var e = _f.value;
                b.g(e);
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return))
                    _b.call(_e);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    ScatterPolygonSeries.prototype.ch = function (a, b, c) {
        var _this = this;
        if (!this.hasMarkers) {
            return false;
        }
        var d = this.l7;
        var e = new ScalerParams(1, this.bs.mr, this.lz, d.ca);
        e.c = this.getEffectiveViewport1(this.bi);
        var f = this.l9;
        var g = new ScalerParams(1, this.bs.mr, this.lz, f.ca);
        g.c = this.getEffectiveViewport1(this.bi);
        a.clear();
        this.ni.de(function (h) {
            if (h._visibility == 0) {
                var i = new SeriesPointOfInterest();
                var j = h.n;
                var k = h.o;
                if (j < _this.lz.left || j > _this.lz.right || k < _this.lz.top || k > _this.lz.bottom) {
                    return;
                }
                i.b = d.d1(j, e);
                i.c = f.d1(k, g);
                i.a = h.content;
                a.add(i);
            }
        });
        return true;
    };
    ScatterPolygonSeries.prototype.nd = function (a, b, c, d, e) {
        var _this = this;
        if (c == null || c.length != this.nj.d.count) {
            c = new Array(this.nj.d.count);
            for (var f = 0; f < this.nj.d.count; f++) {
                c[f] = PointUtil.create();
            }
        }
        var g = ((function () {
            var $ret = new ScalerParams(1, d, e, _this.l7.ca);
            $ret.c = _this.getEffectiveViewport1(a);
            return $ret;
        })());
        var h = ((function () {
            var $ret = new ScalerParams(1, d, e, _this.l9.ca);
            $ret.c = _this.getEffectiveViewport1(a);
            return $ret;
        })());
        var i = this.nj.a.d1(g.d.left, g);
        var j = this.nj.a.d1(g.d.right, g);
        var k = this.nj.b.d1(h.d.bottom, h);
        var l = this.nj.b.d1(h.d.top, h);
        if (this.nj.e) {
            var m = i;
            i = j;
            j = m;
        }
        if (this.nj.f) {
            var n = k;
            k = l;
            l = n;
        }
        var o = this.nj;
        var p = o.a;
        var q = o.b;
        var r;
        var s;
        var t = g.d.left;
        var u = g.d.right;
        var v = h.d.top;
        var w = h.d.bottom;
        for (var x = 0; x < this.nj.d.count; x++) {
            r = 0;
            s = 0;
            var y = null;
            var z = a.b3.tryGetValue(x, y);
            y = z.p1;
            if (y == null) {
                c[x].x = NaN;
                c[x].y = NaN;
            }
            else {
                var aa = y.c;
                var ab = RectUtil.l(aa);
                r = ab.x;
                s = ab.y;
                if (r >= t && r <= u && s >= v && s <= w) {
                    c[x].x = r;
                    c[x].y = s;
                }
                else {
                    c[x].x = NaN;
                    c[x].y = NaN;
                }
            }
        }
        return c;
    };
    ScatterPolygonSeries.prototype.nc = function (a, b) {
        var e_3, _a;
        if (b == null || b.length != a.e) {
            b = new Array(a.e);
        }
        var c = 0;
        var d = this.bz;
        try {
            for (var _b = tslib_1.__values(fromEnum(a.c)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var e = _c.value;
                b[c] = d.indexOf(e);
                c++;
            }
        }
        catch (e_3_1) {
            e_3 = { error: e_3_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_3)
                    throw e_3.error;
            }
        }
        return b;
    };
    ScatterPolygonSeries.$t = markType(ScatterPolygonSeries, 'ScatterPolygonSeries', ShapeSeriesBase.$);
    ScatterPolygonSeries.oi = new Rect(0, 0, 0, 1, 1);
    ScatterPolygonSeries.$$p = markDep(DependencyProperty, PropertyMetadata, ScatterPolygonSeries, 'raisePropertyChanged', ['ActualMarkerBrush:oe:n2', [Brush.$], 'ActualMarkerOutline:of:n3', [Brush.$], 'ActualMarkerTemplate:n0:n4', [DataTemplate.$, null], 'MarkerBrush:og:n5', [Brush.$], 'MarkerCollisionAvoidance:ne:n6', [CollisionAvoidanceType_$type, enumGetBox(CollisionAvoidanceType_$type, 0)], 'MarkerOutline:oh:n7', [Brush.$], 'MarkerStyle:oj:n8', [Style.$], 'MarkerTemplate:n1:n9', [DataTemplate.$, null], 'MarkerThickness:nm:oa', [1], 'MarkerType:nf:ob', [MarkerType_$type, enumGetBox(MarkerType_$type, 1)], 'ShapeStyle:ok:oc', [Style.$, null], 'ShapeStyleSelector:nk:od', [StyleSelector.$, null]]);
    return ScatterPolygonSeries;
}(ShapeSeriesBase));
export { ScatterPolygonSeries };
/**
 * @hidden
 */
var ScatterPolygonSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(ScatterPolygonSeriesView, _super);
    function ScatterPolygonSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.c1 = null;
        _this.c0 = null;
        _this.c6 = null;
        _this.c4 = null;
        _this.c8 = false;
        _this.c7 = null;
        _this.c9 = null;
        _this.dm = null;
        _this.c6 = a;
        _this.c7 = new HashPool$2(Base.$, Marker.$);
        _this.c9 = new List$1(Marker.$, 0);
        _this.dg(_this.c7);
        _this.c4 = new NumericMarkerManager(1, function (b) { return _this.c7.item(b); }, function (b) { return _this.c6.nj.d.item(b); }, runOn(_this, _this.dk), runOn(_this, _this.cz), runOn(_this, _this.cy), function () { return _this.c6.ne; });
        _this.c4.q = runOn(_this, _this.dn);
        return _this;
    }
    ScatterPolygonSeriesView.prototype.ap = function () {
        _super.prototype.ap.call(this);
        if (!this.n) {
            this.e.bj = 8;
        }
    };
    Object.defineProperty(ScatterPolygonSeriesView.prototype, "c5", {
        get: function () {
            return this.c4;
        },
        enumerable: true,
        configurable: true
    });
    ScatterPolygonSeriesView.prototype.dk = function (a) {
        this.c6.nz(a, this.c7);
    };
    ScatterPolygonSeriesView.prototype.cz = function () {
        this.c1 = this.c6.nd(this, this.c7, this.c1, this.bs, this.br);
        return this.c1;
    };
    ScatterPolygonSeriesView.prototype.cy = function () {
        this.c0 = this.c6.nc(this.c7, this.c0);
        return this.c0;
    };
    ScatterPolygonSeriesView.prototype.cu = function (a, b) {
        return this.cv(a, b, true);
    };
    ScatterPolygonSeriesView.prototype.cc = function (a, b) {
        _super.prototype.cc.call(this, a, b);
        ShapeSeriesViewBase.cb(this, a, b);
    };
    ScatterPolygonSeriesView.prototype.ca = function (a, b) {
        var c = a;
        if (c == null) {
            return;
        }
        c.ak = b;
    };
    ScatterPolygonSeriesView.prototype.de = function (a) {
        this.c7.f(a);
    };
    ScatterPolygonSeriesView.prototype.dg = function (a) {
        a.create = runOn(this, this.c3);
        a.destroy = runOn(this, this.di);
        a.activate = runOn(this, this.dh);
        a.disactivate = runOn(this, this.dj);
    };
    ScatterPolygonSeriesView.prototype.c3 = function () {
        var _this = this;
        var a = new Marker();
        if (!this.c8) {
            a.content = ((function () {
                var $ret = new DataContext();
                $ret.series = _this.e;
                return $ret;
            })());
        }
        a.ah = this.e.n0;
        this.c9.add(a);
        return a;
    };
    ScatterPolygonSeriesView.prototype.di = function (a) {
        a.content = null;
        this.c9.remove(a);
    };
    ScatterPolygonSeriesView.prototype.dh = function (a) {
        a._visibility = 0;
    };
    ScatterPolygonSeriesView.prototype.dj = function (a) {
        if (a.content != null) {
            (typeCast(DataContext.$, a.content)).item = null;
        }
        a._visibility = 1;
    };
    ScatterPolygonSeriesView.prototype.dl = function (a) {
        this.c8 = a;
    };
    ScatterPolygonSeriesView.prototype.be = function (a, b) {
        _super.prototype.be.call(this, a, b);
        var c = a;
        var d = c.content;
        if (d != null) {
            if (this.c6.oe != null) {
                d.actualItemBrush = this.c6.oe;
            }
            else {
                d.actualItemBrush = this.by.k4;
            }
            if (this.c6.oe != null) {
                d.outline = this.c6.of;
            }
            else {
                d.outline = this.by.k5;
            }
            d.thickness = 0.5;
        }
    };
    ScatterPolygonSeriesView.prototype.bf = function (a, b) {
        _super.prototype.bf.call(this, a, b);
        var c = a;
        var d = this.bm(b);
        var e = c.content;
        if (e != null) {
            e.actualItemBrush = d;
            e.outline = d;
            e.thickness = 1 + 3;
        }
    };
    ScatterPolygonSeriesView.prototype.a2 = function (a, b) {
        _super.prototype.a2.call(this, a, b);
        var c = new DataTemplatePassInfo();
        c.isHitTestRender = b;
        c.context = a.g();
        c.viewportTop = this.br.top;
        c.viewportLeft = this.br.left;
        c.viewportWidth = this.br.width;
        c.viewportHeight = this.br.height;
        c.passID = "Markers";
        var d = new DataTemplateRenderInfo();
        d.passInfo = c;
        d.isHitTestRender = b;
        var e = new DataTemplateMeasureInfo();
        e.passInfo = c;
        var f = false;
        var g = a.g();
        e.context = g;
        d.context = g;
        var h = 0;
        var i = 0;
        if (this.c6.n0 != null && this.c6.n0.passStarting != null) {
            this.c6.n0.passStarting(c);
        }
        for (var j = 0; j < this.c9.count; j++) {
            var k = this.c9._inner[j];
            if (k._visibility == 1) {
                continue;
            }
            this.bd(k, j, b);
            if (!f) {
                e.width = k.width;
                e.height = k.height;
                e.renderOffsetX = 0;
                e.renderOffsetY = 0;
                e.renderContext = a;
                var l = k.ah;
                if (l.measure != null) {
                    e.data = k.content;
                    l.measure(e);
                    f = e.isConstant;
                    if (f) {
                        h = e.width;
                        i = e.height;
                    }
                }
                d.availableWidth = e.width;
                d.availableHeight = e.height;
                d.renderOffsetX = e.renderOffsetX;
                d.renderOffsetY = e.renderOffsetY;
                d.renderContext = a;
            }
            else {
                d.availableWidth = h;
                d.availableHeight = i;
            }
            if (!isNaN_(k.width) && !isInfinity(k.width)) {
                d.availableWidth = k.width;
            }
            if (!isNaN_(k.height) && !isInfinity(k.height)) {
                d.availableHeight = k.height;
            }
            a.p(d, k);
            k.m = d.availableWidth;
            k.l = d.availableHeight;
            k.ai = d.renderOffsetX;
            k.aj = d.renderOffsetY;
        }
        if (this.c6.n0 != null && this.c6.n0.passCompleted != null) {
            this.c6.n0.passCompleted(c);
        }
    };
    ScatterPolygonSeriesView.prototype.dd = function () {
        this.c6.n0 = null;
        this.c6.n0 = this.c6.n1;
    };
    ScatterPolygonSeriesView.prototype.db = function () {
        this.c6.oe = null;
        this.c6.oe = this.c6.og;
    };
    ScatterPolygonSeriesView.prototype.dc = function () {
        this.c6.of = null;
        this.c6.of = this.c6.oh;
    };
    ScatterPolygonSeriesView.prototype.da = function (a) {
        switch (a) {
            case "CircleMarkerTemplate":
                this.c6.n0 = this.c6.bs.ko;
                break;
            case "TriangleMarkerTemplate":
                this.c6.n0 = this.c6.bs.kx;
                break;
            case "PyramidMarkerTemplate":
                this.c6.n0 = this.c6.bs.ku;
                break;
            case "SquareMarkerTemplate":
                this.c6.n0 = this.c6.bs.kv;
                break;
            case "DiamondMarkerTemplate":
                this.c6.n0 = this.c6.bs.kp;
                break;
            case "PentagonMarkerTemplate":
                this.c6.n0 = this.c6.bs.ks;
                break;
            case "HexagonMarkerTemplate":
                this.c6.n0 = this.c6.bs.kq;
                break;
            case "TetragramMarkerTemplate":
                this.c6.n0 = this.c6.bs.ks;
                break;
            case "PentagramMarkerTemplate":
                this.c6.n0 = this.c6.bs.kt;
                break;
            case "HexagramMarkerTemplate":
                this.c6.n0 = this.c6.bs.kr;
                break;
        }
    };
    ScatterPolygonSeriesView.prototype.df = function () {
        var e_4, _a;
        try {
            for (var _b = tslib_1.__values(fromEnum(this.c9)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var a = _c.value;
                a.ah = this.c6.n0;
            }
        }
        catch (e_4_1) {
            e_4 = { error: e_4_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_4)
                    throw e_4.error;
            }
        }
        this.an();
    };
    ScatterPolygonSeriesView.prototype.dn = function (a) {
        if (this.dm == null) {
            this.dm = new DataTemplateMeasureInfo();
            this.dm.context = this.h.g();
        }
        this.dm.width = a.width;
        this.dm.height = a.height;
        this.dm.data = a.content;
        var b = a.ah;
        if (b.measure != null) {
            b.measure(this.dm);
        }
        return new Size(1, this.dm.width, this.dm.height);
    };
    ScatterPolygonSeriesView.prototype.c2 = function (a) {
        var b;
        var c;
        var d;
        var e;
        for (var f = this.c9.count - 1; f >= 0; f--) {
            var g = this.c9._inner[f];
            if (g._visibility == 1 || g._opacity == 0) {
                continue;
            }
            b = (g.m / 2) + 3;
            c = (g.l / 2) + 3;
            d = g.ai;
            e = g.aj;
            if ((g.n + d) - b <= a.x && (g.n + d) + b >= a.x && (g.o + e) - c <= a.y && (g.o + e) + c >= a.y) {
                return g;
            }
        }
        return null;
    };
    ScatterPolygonSeriesView.prototype.ai = function (a) {
        var e_5, _a;
        var b = a;
        _super.prototype.ai.call(this, b);
        try {
            for (var _b = tslib_1.__values(fromEnum(this.c7.c)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                var d = this.c7.item(c);
                if (d._visibility != 1) {
                    var e = typeCast(ScatterPolygonSeries.$, this.e);
                    var f = this.e.a2.getMarkerVisualData(e, d, e.n0);
                    b.markerShapes.add(typeCast(MarkerVisualData.$, f));
                }
            }
        }
        catch (e_5_1) {
            e_5 = { error: e_5_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_5)
                    throw e_5.error;
            }
        }
    };
    ScatterPolygonSeriesView.prototype.getDefaultTooltipTemplate = function () {
        var a = "<div class='ui-chart-default-tooltip-content'><span";
        var b = this.e.a0.a$q(this.e);
        if (!stringIsNullOrEmpty(b)) {
            a += " style='color:" + b + "'";
        }
        a += ">" + this.c6.fx + "</span><br/>";
        a += "</div>";
        return a;
    };
    ScatterPolygonSeriesView.$t = markType(ScatterPolygonSeriesView, 'ScatterPolygonSeriesView', ShapeSeriesViewBase.$);
    return ScatterPolygonSeriesView;
}(ShapeSeriesViewBase));
export { ScatterPolygonSeriesView };
//# sourceMappingURL=ScatterPolygonSeries_combined.js.map
