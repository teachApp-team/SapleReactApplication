/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { IUnknownValuePlotting_$type } from "igniteui-react-core";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { typeCast, runOn, enumGetBox, markType, markDep } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { PropertyMetadata } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { ISortingAxis_$type } from "./ISortingAxis";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let LineSeries = /*@__PURE__*/ (() => {
    class LineSeries extends HorizontalAnchoredCategorySeries {
        constructor() {
            super();
            this.ql = null;
            this.ql = new CategoryLineRasterizer();
            this.ab = LineSeries.$;
            this.p5 = 0;
        }
        bf() {
            return new LineSeriesView(this);
        }
        iv(a) {
            super.iv(a);
            this.qm = a;
        }
        get_ck() {
            return true;
        }
        preferredCategoryMode(a) {
            return this.p5;
        }
        hw(a, b) {
            super.hw(a, b);
            let c = b;
            c.c7();
        }
        os(a, b) {
            super.os(a, b);
            let c = b.cn.d;
            let d = typeCast(LineSeriesView.$, b);
            let e = a.f;
            let f = this.getEffectiveViewport1(b);
            this.ni.x(this, this.n3(), this.p2, runOn(this, this.m4), this.ob(b), this.oc(b));
            let g = false;
            let h = this.ni.c;
            if (h != null) {
                g = true;
            }
            if (g) {
                let i = new ScalerParams(0, b.bs, b.br, this.p2.ca, f);
                this.oo(e, -1, this.valueColumn.count, this.p2, i, b.n);
            }
            let j = d.dd;
            let k = d.de;
            let l = d.dc;
            this.ni.ae(j, true, false, true, false);
            this.ni.ae(k, true, false, true, false);
            this.ni.ae(l, false, true, false, false);
            l._opacity = 0.75 * this.ni.i;
            if (b.cr(a)) {
                d.c8(e.count, e, true, this.unknownValuePlotting, this.o0(e, e.count - 1, b.br, b.bs), c, this.eu);
                b.cu(a);
            }
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case LineSeries.$$p[0]:
                    this.nf.m = this.unknownValuePlotting == 0;
                    this.je(false);
                    this.il();
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.n6;
        }
    }
    LineSeries.$t = /*@__PURE__*/ markType(LineSeries, 'LineSeries', HorizontalAnchoredCategorySeries.$, [IUnknownValuePlotting_$type]);
    LineSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, LineSeries, 'raisePropertyChanged', ['UnknownValuePlotting::qo', [UnknownValuePlotting_$type, /*@__PURE__*/ enumGetBox(UnknownValuePlotting_$type, 1)]]);
    return LineSeries;
})();
/**
 * @hidden
 */
export let LineSeriesView = /*@__PURE__*/ (() => {
    class LineSeriesView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.c6 = null;
            this.dg = new Path();
            this.df = new Path();
            this.dh = new Path();
            this.db = new Path();
            this.da = new Path();
            this.c9 = new Path();
            this.c6 = a;
        }
        get dd() {
            return this.dg;
        }
        get de() {
            return this.dh;
        }
        get dc() {
            return this.df;
        }
        c7() {
            this.df.ak = null;
            this.dg.ak = null;
            this.dh.ak = null;
            this.an();
        }
        c8(a, b, c, d, e, f, g) {
            this.c6.ql.a = typeCast(ISortingAxis_$type, this.cp.fetchXAxis()) !== null ? true : false;
            this.c6.ql.m(this.dg, this.df, this.dh, a, b, c, d, e, f, g);
            this.an();
        }
        a8() {
            super.a8();
        }
        a9() {
            super.a9();
            this.da.ak = this.dg.ak;
            this.db.ak = this.dh.ak;
            this.c9.ak = this.df.ak;
            let a = this.bl();
            this.da._stroke = a;
            this.da.ac = this.e.ey + 3;
            this.db._stroke = a;
            this.db.ac = this.e.ey + 3;
            this.c9._fill = a;
            this.c9._opacity = 1;
        }
        a3(a, b) {
            super.a3(a, b);
            if (a.d) {
                if (b) {
                    a.s(this.c9);
                    a.s(this.da);
                    a.s(this.db);
                }
                else {
                    a.s(this.df);
                    a.s(this.dg);
                    a.s(this.dh);
                }
            }
        }
        ai(a) {
            super.ai(a);
            this.e.a2.exportPathData(a, this.dg, "lowerShape", ["Lower", "Main"]);
            this.e.a2.exportPathData(a, this.dh, "upperShape", ["Upper"]);
            this.e.a2.exportPathData(a, this.df, "translucentShape", ["Translucent"]);
        }
        ac() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.lb = a;
            this.e.ev = 3;
            this.e.ew = 1;
            this.e.ex = 4;
            this.e.du = false;
        }
    }
    LineSeriesView.$t = /*@__PURE__*/ markType(LineSeriesView, 'LineSeriesView', AnchoredCategorySeriesView.$);
    return LineSeriesView;
})();
//# sourceMappingURL=LineSeries_combined.js.map
