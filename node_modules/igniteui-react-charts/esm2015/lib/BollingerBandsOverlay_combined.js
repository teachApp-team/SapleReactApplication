/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { FinancialOverlay } from "./FinancialOverlay";
import { DependencyProperty } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Number_$type, typeCast, runOn, markType, markDep, getEnumerator, Point_$type, fromEnum } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { Series } from "./Series";
import { SafeEnumerable } from "./SafeEnumerable";
import { TrendCalculators } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { ScalerParams } from "./ScalerParams";
import { ISortingAxis_$type } from "./ISortingAxis";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { Polyline } from "igniteui-react-core";
import { Polygon } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { Flattener } from "igniteui-react-core";
/**
 * @hidden
 */
export let BollingerBandsOverlay = /*@__PURE__*/ (() => {
    class BollingerBandsOverlay extends FinancialOverlay {
        constructor() {
            super();
            this.pr = 0;
            this.ps = 0;
            this.pp = new List$1(Number_$type, 0);
            this.pq = new List$1(Number_$type, 0);
            this.ab = BollingerBandsOverlay.$;
            this.mc = new CategoryFrame(4);
            this.me = new CategoryFrame(4);
            this.mb = new CategoryFrame(4);
        }
        i0(a, b, c, d) {
            if (this.ns().contains(b)) {
                this.pj = false;
            }
            super.i0(a, b, c, d);
            switch (b) {
                case BollingerBandsOverlay.$$p[1]:
                    this.pj = false;
                    this.je(false);
                    break;
                case BollingerBandsOverlay.$$p[0]:
                    this.je(false);
                    break;
            }
        }
        pk() {
            this.pp.clear();
            this.pq.clear();
            let a = getEnumerator(TrendCalculators.e(new SafeEnumerable(this.nr), this.pu));
            let b = getEnumerator(TrendCalculators.f(new SafeEnumerable(this.nr), this.pu));
            this.ps = 1.7976931348623157E+308;
            this.pr = -1.7976931348623157E+308;
            let c = true;
            let d = true;
            let e = this.pt;
            while (c || d) {
                if (a.moveNext()) {
                    this.pp.add(a.current);
                }
                else {
                    c = false;
                }
                if (b.moveNext()) {
                    this.pq.add(b.current);
                }
                else {
                    d = false;
                }
                if (c && d) {
                    this.ps = Math.min(this.ps, a.current - b.current * e);
                    this.pr = Math.max(this.pr, a.current + b.current * e);
                }
            }
            return true;
        }
        an(a) {
            if (this.pp == null || this.pq == null || a == null || this.bz == null || a != this.mu) {
                return null;
            }
            let b = new AxisRange(this.ps, this.pr);
            return b;
        }
        o0(a, b) {
            super.o0(a, b);
            let c = b.bs;
            let d = b.br;
            let e = this.getEffectiveViewport1(b);
            let f = this.l9;
            let g = this.mu;
            let h = new ScalerParams(0, c, d, f.ca, e);
            let i = new ScalerParams(0, c, d, g.ca, e);
            a.f.clear();
            a.m.clear();
            a.p.clear();
            let j = typeCast(ISortingAxis_$type, this.l9);
            if (j != null && j.i$b.count != this.bz.count) {
                return;
            }
            let k = 0;
            k = this.n0(c, d, e);
            if (!this.pj) {
                this.pj = this.pk();
                if (this.mu != null) {
                    this.mu.co(true);
                }
            }
            i.b = this.eh();
            let l = this.l9.d1(2, h) - this.l9.d1(1, h);
            for (let m = b.bu.c; m <= b.bu.d; ++m) {
                let n;
                if (j == null) {
                    n = b.bu.getBucket(m);
                }
                else {
                    let o = j.i$b._inner[m];
                    let p = j.i$d(o);
                    let q = this.pp._inner[m];
                    let r = this.pq._inner[m];
                    let s = q;
                    let t = r;
                    let u = p;
                    let v = 1;
                    while (m < b.bu.d) {
                        o = j.i$b._inner[m + 1];
                        u = j.i$d(o);
                        if (u - p > l) {
                            break;
                        }
                        m++;
                        s += this.pp._inner[m];
                        t += this.pq._inner[m];
                        v++;
                    }
                    s /= v;
                    t /= v;
                    let w = s - t * this.pt;
                    let x = s;
                    let y = s + t * this.pt;
                    let z = NaN;
                    if (!isNaN_(p)) {
                        z = this.l9.dy(p, h);
                    }
                    n = [z, w, x, y];
                }
                let aa = Math.max(1, l);
                if (!isNaN_(n[0]) && m * aa >= this.pl) {
                    if (this.l9 != null && typeCast(ISortingAxis_$type, this.l9) !== null) {
                        n[0] = n[0] + k;
                    }
                    else {
                        n[0] = f.dy(n[0], h) + k;
                    }
                    n[1] = g.dy(n[1], i);
                    n[2] = g.dy(n[2], i);
                    n[3] = g.dy(n[3], i);
                    a.f.add(n);
                }
            }
        }
        hw(a, b) {
            super.hw(a, b);
            let c = b;
            if (c != null) {
                c.b1();
            }
        }
        en(a, b, c) {
            if (this.pp == null) {
                return super.en(a, b, c);
            }
            let d = this.getEffectiveViewport1(this.bi);
            let e = this.n0(this.bi.bs, this.bi.br, d);
            let f = new ScalerParams(0, this.bi.bs, this.bi.br, this.l9.ca, d);
            f.c = this.bs.m5;
            return this.ep(this.pp, a, this.l9, f, e, runOn(this, this.nz), b, c);
        }
        fe(a, b) {
            if (this.pp == null) {
                return super.fe(a, b);
            }
            return this.ff(a, b, this.l9, runOn(this, this.nz), this.pp);
        }
        fc(a, b) {
            if (this.pp == null) {
                return super.fc(a, b);
            }
            return this.fd(a, b, this.l9, runOn(this, this.nz), this.pp);
        }
        dw(a, b, c) {
            let d = super.dw(a, b, c);
            if (!this.ni(this.ns())) {
                d = false;
            }
            return d;
        }
        o2(a, b) {
            super.o2(a, b);
            let c = typeCast(BollingerBandsOverlayView.$, b);
            let d = this.getEffectiveViewport1(b);
            if (b.bx(a)) {
                c.b1();
                let e = a.f.count;
                let f = (g) => a.f._inner[g][0];
                let g = (h) => a.f._inner[e - 1 - h][0];
                let h = (i) => a.f._inner[i][1];
                let i = (j) => a.f._inner[j][2];
                let j = (k) => a.f._inner[e - 1 - k][3];
                c.b2(e, f, g, h, i, j);
                b.bz(a);
            }
            this.mh.x(this, this.nh(), this.l9, runOn(this, this.l1), this.n6(b), this.n8(b));
            let k = false;
            let l = this.mh.c;
            let m = a.f;
            let n = this.bz.count;
            if (l != null) {
                k = true;
            }
            if (k) {
                let o = new ScalerParams(0, b.bs, b.br, this.l9.ca, d);
                this.oz(m, -1, n, this.l9, o, b.n);
            }
            let p = c.b9;
            let q = c.ca;
            let r = c.cb;
            let s = c.b4;
            this.mh.ae(q, true, false, true, true);
            this.mh.ao = null;
            this.mh.an = null;
            this.mh.ae(p, true, false, false, true);
            this.mh.ae(r, true, false, false, true);
            this.mh.ae(s, false, true, false, false);
            s._opacity = this.mh.i * this.d6;
        }
        bf() {
            return new BollingerBandsOverlayView(this);
        }
        iv(a) {
            super.iv(a);
            this.po = typeCast(BollingerBandsOverlayView.$, a);
        }
        n9() {
            return 3;
        }
        eh() {
            return Series.ei(this.pp, null);
        }
    }
    BollingerBandsOverlay.$t = /*@__PURE__*/ markType(BollingerBandsOverlay, 'BollingerBandsOverlay', FinancialOverlay.$);
    BollingerBandsOverlay.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, BollingerBandsOverlay, 'raisePropertyChanged', ['Multiplier:pt:px', [1, 2], 'Period:pu:py', [1, 14]]);
    return BollingerBandsOverlay;
})();
/**
 * @hidden
 */
export let BollingerBandsBucketCalculator = /*@__PURE__*/ (() => {
    class BollingerBandsBucketCalculator extends FinancialBucketCalculator {
        constructor(a) {
            super(a);
            this.f = null;
            this.f = a;
        }
        getBucket(a) {
            let b = a * this.b;
            let c = Math.min(b + this.b - 1, this.a.bw.bz.count - 1);
            if (b <= c) {
                let d = this.f.b0.pt;
                let e = 0;
                let f = 0;
                let g = 0;
                for (let h = b; h <= c; ++h) {
                    if (!isNaN_(this.f.b0.pp._inner[h]) && !isNaN_(this.f.b0.pq._inner[h])) {
                        e += this.f.b0.pp._inner[h];
                        f += this.f.b0.pq._inner[h];
                        ++g;
                    }
                }
                if (g > 0) {
                    e = e / g;
                    f = f / g;
                    return [0.5 * (b + c), e - f * d, e, e + f * d];
                }
            }
            return [NaN, NaN, NaN, NaN];
        }
    }
    BollingerBandsBucketCalculator.$t = /*@__PURE__*/ markType(BollingerBandsBucketCalculator, 'BollingerBandsBucketCalculator', FinancialBucketCalculator.$);
    return BollingerBandsBucketCalculator;
})();
/**
 * @hidden
 */
export let BollingerBandsOverlayView = /*@__PURE__*/ (() => {
    class BollingerBandsOverlayView extends FinancialSeriesView {
        constructor(a) {
            super(a);
            this.b0 = null;
            this.b5 = new Polygon();
            this.cc = new Polyline();
            this.cd = new Polyline();
            this.ce = new Polyline();
            this.b3 = new Polygon();
            this.b6 = new Polyline();
            this.b7 = new Polyline();
            this.b8 = new Polyline();
            this.b0 = a;
        }
        ap() {
            super.ap();
            if (!this.n) {
                this.e.bj = 1;
            }
        }
        bv() {
            return new BollingerBandsBucketCalculator(this);
        }
        b2(a, b, c, d, e, f) {
            for (let g of fromEnum(Flattener.d(a, b, d, this.e.eu))) {
                this.b5.ak.add({ $type: Point_$type, x: b(g), y: d(g) });
                this.cc.ak.add({ $type: Point_$type, x: b(g), y: d(g) });
            }
            for (let h of fromEnum(Flattener.d(a, b, e, this.e.eu))) {
                this.cd.ak.add({ $type: Point_$type, x: b(h), y: e(h) });
            }
            for (let i of fromEnum(Flattener.d(a, c, f, this.e.eu))) {
                this.b5.ak.add({ $type: Point_$type, x: c(i), y: f(i) });
                this.ce.ak.add({ $type: Point_$type, x: c(i), y: f(i) });
            }
            this.an();
        }
        b1() {
            this.b5.ak.clear();
            this.cc.ak.clear();
            this.cd.ak.clear();
            this.ce.ak.clear();
            this.an();
        }
        get b4() {
            return this.b5;
        }
        get b9() {
            return this.cc;
        }
        get ca() {
            return this.cd;
        }
        get cb() {
            return this.ce;
        }
        a9() {
            super.a9();
            this.b3.ak = this.b5.ak;
            this.b6.ak = this.cc.ak;
            this.b7.ak = this.cd.ak;
            this.b8.ak = this.ce.ak;
            let a = this.bl();
            this.b3._fill = a;
            this.b3._opacity = 1;
            this.b6._stroke = a;
            this.b6.ac = this.e.ey + 3;
            this.b7._stroke = a;
            this.b7.ac = this.e.ey + 3;
            this.b8._stroke = a;
            this.b8.ac = this.e.ey + 3;
        }
        a3(a, b) {
            super.a3(a, b);
            if (a.d) {
                if (b) {
                    a.t(this.b3);
                    a.u(this.b6);
                    a.u(this.b7);
                    a.u(this.b8);
                }
                else {
                    a.t(this.b5);
                    a.u(this.cc);
                    a.u(this.cd);
                    a.u(this.ce);
                }
            }
        }
        ai(a) {
            super.ai(a);
            this.e.a2.exportPolygonData(a, this.b5, "FillShape", ["Fill"]);
            this.e.a2.exportPolylineData(a, this.cc, "BottomLine", ["Lower", "Main"]);
            this.e.a2.exportPolylineData(a, this.cd, "CentralLine", ["Central"]);
            this.e.a2.exportPolylineData(a, this.ce, "TopLine", ["Upper"]);
        }
    }
    BollingerBandsOverlayView.$t = /*@__PURE__*/ markType(BollingerBandsOverlayView, 'BollingerBandsOverlayView', FinancialSeriesView.$);
    return BollingerBandsOverlayView;
})();
//# sourceMappingURL=BollingerBandsOverlay_combined.js.map
