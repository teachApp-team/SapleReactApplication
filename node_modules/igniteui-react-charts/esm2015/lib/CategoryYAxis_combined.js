/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CategoryAxisBase } from "./CategoryAxisBase";
import { DependencyProperty } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Base, typeCast, Array_$type, Number_$type, markType } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { NumericScaler } from "./NumericScaler";
import { VerticalAxisLabelPanel } from "./VerticalAxisLabelPanel";
import { MathUtil } from "igniteui-react-core";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { LinearCategorySnapper } from "./LinearCategorySnapper";
import { NumericXAxis } from "./NumericXAxis";
import { LabelPosition } from "./LabelPosition";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
/**
 * @hidden
 */
export let CategoryYAxis = /*@__PURE__*/ (() => {
    class CategoryYAxis extends CategoryAxisBase {
        constructor() {
            super();
            this.k5 = 0;
            this.k7 = 0;
            this.ld = 1;
            this.lc = 1;
            this.jt = new List$1(Number_$type, 0);
            this.ab = CategoryYAxis.$;
        }
        a2() {
            return new CategoryYAxisView(this);
        }
        gx(a) {
            super.gx(a);
            this.k4 = a;
        }
        get_ch() {
            return true;
        }
        dx() {
            return this.i8.height;
        }
        k1(a, b, c) {
            return this.k2(a, b, c, true);
        }
        k3(a) {
            if (typeCast(List$1.$.specialize(Array_$type), a) !== null) {
                return a.asArray();
            }
            return null;
        }
        gr(a, b, c, d, e) {
            let f;
            let g = e.e;
            let h = e.d;
            let i = e.c;
            let j = e.a;
            let k = !i.isEmpty;
            let l = this.categoryMode == 0 ? this.j5 - 1 : this.j5;
            if (l < 0) {
                l = 0;
            }
            let m = i.top;
            let n = i.height;
            let o = g.top;
            let p = g.height;
            let q = h.top;
            let r = h.height;
            let s = 0;
            let t = 1;
            let u = this.k3(a);
            let v = false;
            if (u != null) {
                v = true;
            }
            let w;
            for (let x = 0; x < b.count; x++) {
                w = b.item(x);
                for (let y = c; y < d; y++) {
                    if (v) {
                        f = u[y];
                    }
                    else {
                        f = a.item(y);
                    }
                    if (k) {
                        let z = l >= 1 ? (f[w]) / (l) : l == 0 ? 0.5 : NaN;
                        if (!j) {
                            z = 1 - z;
                        }
                        z = m + n * (z - s) / t;
                        let aa = (z - (o * r)) / p;
                        f[w] = aa;
                    }
                    else {
                        let ab = l >= 1 ? (f[w]) / (l) : l == 0 ? 0.5 : NaN;
                        if (!j) {
                            ab = 1 - ab;
                        }
                        ab = q + r * (ab - o) / p;
                        f[w] = ab;
                    }
                }
            }
        }
        get la() {
            return this.c(CategoryYAxis.lm);
        }
        set la(a) {
            this.h(CategoryYAxis.lm, a);
        }
        get k6() {
            return this.k5;
        }
        set k6(a) {
            if (this.k6 != a) {
                let b = this.k5;
                this.k5 = a;
                this.g5("ActualInterval", b, this.k6);
            }
        }
        d9() {
            return this.k6;
        }
        get lb() {
            return this.c(CategoryYAxis.ln);
        }
        set lb(a) {
            this.h(CategoryYAxis.ln, a);
        }
        get k8() {
            return this.k7;
        }
        set k8(a) {
            if (this.k8 != a) {
                let b = this.k7;
                this.k7 = a;
                this.g5("ActualMinorInterval", b, this.k8);
            }
        }
        get lf() {
            return this.ld;
        }
        set lf(a) {
            this.ld = a;
        }
        get le() {
            return this.lc;
        }
        set le(a) {
            this.lc = a;
        }
        dy(a, b) {
            if (!b.c.isEmpty) {
                let c = this.k9(a, NumericScaler.ac, b.c);
                c = (c - b.d.top) / b.d.height;
                c = b.d.top + b.d.height * (c - b.e.top) / b.e.height;
                return c;
            }
            return this.k9(a, b.e, b.d);
        }
        k9(a, b, c) {
            let d = this.categoryMode == 0 ? this.j5 - 1 : this.j5;
            if (d < 0) {
                d = 0;
            }
            let e = d >= 1 ? (a) / (d) : d == 0 ? 0.5 : NaN;
            if (!this.cb) {
                e = 1 - e;
            }
            return c.top + c.height * (e - b.top) / b.height;
        }
        d1(a, b) {
            if (!b.c.isEmpty) {
                let c = b.e.top + b.e.height * (a - b.d.top) / b.d.height;
                c = (c * b.d.height) + b.d.top;
                c = this.getUnscaledValue3(c, NumericScaler.ac, b.c, this.categoryMode);
                return c;
            }
            return this.getUnscaledValue3(a, b.e, b.d, this.categoryMode);
        }
        d2(a, b, c) {
            if (!b.c.isEmpty) {
                let d = b.e.top + b.e.height * (a - b.d.top) / b.d.height;
                d = (d * b.d.height) + b.d.top;
                d = this.getUnscaledValue3(d, NumericScaler.ac, b.c, c);
                return d;
            }
            return this.getUnscaledValue3(a, b.e, b.d, c);
        }
        getUnscaledValue3(a, b, c, d) {
            let e = b.top + (a - c.top) * b.height / c.height;
            if (!this.cb) {
                e = 1 - e;
            }
            let f = d == 0 ? this.j5 - 1 : this.j5;
            if (f < 0) {
                f = 0;
            }
            return e * f;
        }
        ll(a, b) {
            if (a == NaN || b == NaN || this.jm == null || this.jm.count == 0) {
                return;
            }
            let c = a / this.jm.count;
            let d = b / this.jm.count;
            this.bh.m6 = new Rect(0, this.bh.m6.x, 1 - d, this.bh.m6.width, d - c);
        }
        at() {
            return new VerticalAxisLabelPanel();
        }
        dl() {
            return this.la;
        }
        getCategorySize(a, b, c) {
            let d = this.i6(b, c);
            return d.height / (this.j5 * a.height);
        }
        jy(a, b, c) {
            let d = 0;
            if (!isNaN_(this.jv)) {
                d = MathUtil.b(this.jv, 0, 1);
            }
            let e = 0;
            if (!isNaN_(this.j2)) {
                e = Math.min(this.j2, 1);
            }
            let f = 1 - 0.5 * d;
            let g = this.getCategorySize(a, b, c) * f / (this.j8 - (this.j8 - 1) * e);
            return g;
        }
        getGroupCenter(a, b, c, d) {
            let e = 0.5;
            if (this.j8 > 1) {
                let f = 0;
                if (!isNaN_(this.jv)) {
                    f = MathUtil.b(this.jv, 0, 1);
                }
                let g = 0;
                if (!isNaN_(this.j2)) {
                    g = Math.min(this.j2, 1);
                }
                let h = 1 - 0.5 * f;
                let i = h / (this.j8 - (this.j8 - 1) * g);
                let j = (h - i) / (this.j8 - 1);
                e = 0.25 * f + 0.5 * i + a * j;
            }
            return this.getCategorySize(b, c, d) * e;
        }
        lk(a) {
            let b = this.bh != null ? this.bh.mr : Rect.empty;
            b = b.copy();
            let c = this.i8;
            let d = new Rect(0, 0, 0, 1, 1);
            let e = this.i5();
            let f = new ScalerParams(0, d, d, this.ca, e);
            let g = !b.isEmpty && !c.isEmpty && this.jm != null ? this.jm.indexOf(a) : -1;
            let h = g > -1 ? this.dy(g, f) : NaN;
            if (!isNaN_(h) && this.bh.c0) {
                if (!isNaN_(h)) {
                    if (h < b.top + 0.1 * b.height) {
                        h = h + 0.4 * b.height;
                        b.y = h - 0.5 * b.height;
                    }
                    if (h > b.bottom - 0.1 * b.height) {
                        h = h - 0.4 * b.height;
                        b.y = h - 0.5 * b.height;
                    }
                }
                this.bh.kn(b, false, true);
            }
        }
        cp() {
            if (this.ci && this.cq) {
                this.ba = this.a9();
            }
            if (this.jm == null) {
                return false;
            }
            let a = this.jm.count;
            if (a != this.le) {
                let b = new AxisRangeChangedEventArgs(0, 1, 1, this.le, a);
                this.le = a;
                this.g6(b);
                return true;
            }
            return false;
        }
        jp(a) {
            if (a == null) {
                return false;
            }
            let b = this.bc();
            if (b == null) {
                return false;
            }
            return b.synchronizeVertically;
        }
        hc(a) {
            super.hc(a);
            let b = this.bh != null ? this.bh.mr : Rect.empty;
            let c = this.i8;
            let d = this.i3();
            let e = this.i2();
            let f = new ScalerParams(0, b, c, this.ca, d);
            let g = this.a3.ay();
            let h = this.a3.a1();
            let i = this.a3.az();
            let j = this.a3.a0();
            let k = this.a3.e();
            let l = this.a3.f();
            let m = this.a3.g();
            this.hj();
            this.gn(g);
            this.gn(h);
            this.gn(i);
            this.gn(j);
            this.cx.clear();
            this.cy.clear();
            this.jt.clear();
            this.a3.at(this, b, c);
            if (b.isEmpty || c.isEmpty) {
                this.bq.count = 0;
                this.bp.count = 0;
                this.bo.count = 0;
            }
            if (this.bq.count == 0 && this.bp.count == 0) {
                this.a3.y();
            }
            if (this.ax != null) {
                this.ax.registerAxis(this);
            }
            if (this.itemsSource == null || this.jm == null || this.jm.count == 0) {
                this.bq.count = 0;
                this.bp.count = 0;
                this.bo.count = 0;
                this.a3.y();
                return;
            }
            if (!b.isEmpty && !c.isEmpty) {
                let n = this.d1(e.top, f);
                let o = this.d1(e.bottom, f);
                if (!this.ca) {
                    n = Math.ceil(n);
                    o = Math.floor(o);
                }
                else {
                    n = Math.floor(n);
                    o = Math.ceil(o);
                }
                let p = c.left;
                let q = 0;
                if (this.ah != null) {
                    let r = typeCast(NumericXAxis.$, this.ah);
                    if (r != null) {
                        let s = this.hf(p, q, b, c, d, c.left, c.right);
                        p = s.p0;
                        q = s.p1;
                    }
                }
                this.hk(g, p, c, k, true);
                this.a3.ao(q);
                let t = Math.min(n, o);
                let u = Math.max(n, o);
                let v = new LinearCategorySnapper(1, t, u, e.height, this.la, this.categoryMode, this.eb());
                let w = Math.floor((t - 0) / v.g);
                let x = Math.ceil((u - 0) / v.g);
                if (!isNaN_(w) && !isNaN_(x)) {
                    let y = truncate(w);
                    let z = truncate(x);
                    let aa = this.dy(0 + y * v.g, f);
                    let ab = Math.abs(this.dy(v.g, f) - this.dy(0, f));
                    this.au.bn = this.dy(v.g, f);
                    for (let ac = y; ac <= z; ++ac) {
                        let ad = this.dy(0 + (ac + 1) * v.g, f);
                        if (aa <= e.bottom) {
                            if (ac % 2 == 0) {
                                this.gw(h, aa, ad, c);
                            }
                            this.gv(i, aa, c, l, false);
                            this.jt.add(aa);
                        }
                        if (this.categoryMode != 0 && this.j8 != 0 && this.cl) {
                            if (this.lb > 0 && this.lb < v.g) {
                                let ae = ab * this.lb;
                                if (!this.ca) {
                                    let af = aa;
                                    while (af - ae > ad) {
                                        af -= ae;
                                        if (Math.abs(af - ad) < 0.0001) {
                                            break;
                                        }
                                        this.gv(j, af, c, m, false);
                                    }
                                }
                                else {
                                    let ag = aa;
                                    while (ag + ae < ad) {
                                        ag += ae;
                                        if (Math.abs(ag - ad) < 0.0001) {
                                            break;
                                        }
                                        this.gv(j, ag, c, m, false);
                                    }
                                }
                                this.k8 = this.lb;
                            }
                            else {
                                for (let ah = 0; ah < truncate(v.g); ah++) {
                                    for (let ai = 0; ai < this.j8; ai++) {
                                        let aj = this.getGroupCenter(ai, b, c, d);
                                        if (!this.ca) {
                                            aj = -aj;
                                        }
                                        let ak = this.dy(ah + ac * v.g, f) + aj;
                                        this.gv(j, ak, c, m, false);
                                    }
                                }
                                this.k8 = 0.5;
                            }
                        }
                        let al = aa;
                        if (this.categoryMode != 0) {
                            let am = this.dy(ac * v.g + 1, f);
                            al = (aa + am) / 2;
                        }
                        if (al <= e.bottom && al >= e.top) {
                            let an = 0;
                            if (v.g >= 1) {
                                an = ac * truncate(Math.floor(v.g));
                            }
                            else {
                                if ((ac * v.g) * 2 % 2 == 0) {
                                    an = truncate(Math.floor(ac * v.g));
                                }
                                else {
                                    an = -1;
                                }
                            }
                            if (this.jm != null && an < this.jm.count && an >= 0) {
                                let ao = this.jm.item(an);
                                let ap = this.e8(ao);
                                if (!isNaN_(al) && !isInfinity(al) && ap != null) {
                                    if ((typeof ap === 'string') && Base.equalsStatic(ap, "")) {
                                    }
                                    else {
                                        this.cx.add1(ap);
                                        this.cy.add(new LabelPosition(al));
                                    }
                                }
                            }
                        }
                        aa = ad;
                    }
                }
                this.k6 = v.g;
                if ((this.ax == null || this.ax.visibility == 0) && this.ah != null) {
                    if (this.ax != null && (this.ax.location == 6 || this.ax.location == 7)) {
                        this.bh.hu();
                    }
                }
                this.a3.au(this.cx, this.cy);
                this.kt();
            }
        }
        get_a0() {
            return 1;
        }
        get a0() {
            return this.get_a0();
        }
        get isVertical() {
            return this.ch;
        }
        j$c(a, b) {
            return this.d1.apply(this, arguments);
        }
        j$b(a, b) {
            return this.dy.apply(this, arguments);
        }
        j$d(a, b, c, d, e) {
            this.gr.apply(this, arguments);
        }
        j$e(a, b, c, d) {
            this.gs.apply(this, arguments);
        }
        j$f(a, b, c, d) {
            this.gt.apply(this, arguments);
        }
        get j$a() {
            return this.ca;
        }
    }
    CategoryYAxis.$t = /*@__PURE__*/ markType(CategoryYAxis, 'CategoryYAxis', CategoryAxisBase.$);
    CategoryYAxis.lm = /*@__PURE__*/ DependencyProperty.i("Interval", Number_$type, CategoryYAxis.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        a.g5("Interval", b.oldValue, b.newValue);
        a.hb(false);
    }));
    CategoryYAxis.ln = /*@__PURE__*/ DependencyProperty.i("MinorInterval", Number_$type, CategoryYAxis.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        (typeCast(CategoryYAxis.$, a)).g5("MinorInterval", b.oldValue, b.newValue);
        (typeCast(CategoryYAxis.$, a)).hb(false);
    }));
    return CategoryYAxis;
})();
/**
 * @hidden
 */
export let CategoryYAxisView = /*@__PURE__*/ (() => {
    class CategoryYAxisView extends CategoryAxisBaseView {
        constructor(a) {
            super(a);
            this.bg = null;
            this.bg = a;
        }
    }
    CategoryYAxisView.$t = /*@__PURE__*/ markType(CategoryYAxisView, 'CategoryYAxisView', CategoryAxisBaseView.$);
    return CategoryYAxisView;
})();
//# sourceMappingURL=CategoryYAxis_combined.js.map
