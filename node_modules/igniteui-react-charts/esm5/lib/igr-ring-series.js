import * as tslib_1 from "tslib";
import { IgrRing } from "./igr-ring";
import { IgrRingSeriesBase } from "./igr-ring-series-base";
import { RingSeries } from "./RingSeries";
import { IgrIndexCollection } from "./igr-index-collection";
import { IndexCollection as IndexCollection_internal } from "./IndexCollection";
import { Number_$type } from "igniteui-react-core";
import { SyncableObservableCollection$1 } from "igniteui-react-core";
/**
 * Represents one ring in IgxDoughnutChartComponent series.
*/
var IgrRingSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrRingSeries, _super);
    function IgrRingSeries(props) {
        var _this = _super.call(this, props) || this;
        _this._explodedSlices = null;
        _this._selectedSlices = null;
        return _this;
    }
    IgrRingSeries.prototype.createImplementation = function () {
        return new RingSeries();
    };
    Object.defineProperty(IgrRingSeries.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRingSeries.prototype, "explodedSlices", {
        /**
         * Gets or sets the collection of exploded slice indices.
        */
        get: function () {
            if (this._explodedSlices === null) {
                var coll = new IgrIndexCollection();
                var innerColl = void 0;
                if (this.ring.i.ringControl.arcs.count == 0) {
                    innerColl = new IndexCollection_internal();
                }
                else {
                    innerColl = this.ring.i.ringControl.arcs.item(0).explodedSlices;
                }
                this._explodedSlices = coll._fromInner(innerColl);
            }
            return this._explodedSlices;
        },
        set: function (v) {
            if (this._explodedSlices !== null) {
                this._explodedSlices._setSyncTarget(null);
                this._explodedSlices = null;
            }
            var coll = new IgrIndexCollection();
            this._explodedSlices = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(Number_$type);
            var innerColl;
            if (this.ring.i.ringControl.arcs.count == 0) {
                innerColl = new IndexCollection_internal();
            }
            else {
                innerColl = this.ring.i.ringControl.arcs.item(0).explodedSlices;
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._explodedSlices._setSyncTarget(syncColl);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrRingSeries.prototype, "selectedSlices", {
        /**
         * Gets or sets the collection of selected slice indices.
        */
        get: function () {
            if (this._selectedSlices === null) {
                var coll = new IgrIndexCollection();
                var innerColl = void 0;
                if (this.ring.i.ringControl.arcs.count == 0) {
                    innerColl = new IndexCollection_internal();
                }
                else {
                    innerColl = this.ring.i.ringControl.arcs.item(0).selectedSlices;
                }
                this._selectedSlices = coll._fromInner(innerColl);
            }
            return this._selectedSlices;
        },
        set: function (v) {
            if (this._selectedSlices !== null) {
                this._selectedSlices._setSyncTarget(null);
                this._selectedSlices = null;
            }
            var coll = new IgrIndexCollection();
            this._selectedSlices = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(Number_$type);
            var innerColl;
            if (this.ring.i.ringControl.arcs.count == 0) {
                innerColl = new IndexCollection_internal();
            }
            else {
                innerColl = this.ring.i.ringControl.arcs.item(0).selectedSlices;
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._selectedSlices._setSyncTarget(syncColl);
        },
        enumerable: true,
        configurable: true
    });
    IgrRingSeries.prototype.sychronizeCollections = function () {
        if (this._explodedSlices) {
            var inner = this._explodedSlices._inner;
            if (inner && inner !== this.ring.i.ringControl.arcs.item(0).explodedSlices) {
                this._explodedSlices._inner = this.ring.i.ringControl.arcs.item(0).explodedSlices;
                for (var i = 0; i < inner.count; i++) {
                    this._explodedSlices.add(inner.item(i));
                }
            }
        }
        if (this._selectedSlices) {
            var inner = this._selectedSlices._inner;
            if (inner && inner !== this.ring.i.ringControl.arcs.item(0).selectedSlices) {
                this._selectedSlices._inner = this.ring.i.ringControl.arcs.item(0).selectedSlices;
                for (var i = 0; i < inner.count; i++) {
                    this._selectedSlices.add(inner.item(i));
                }
            }
        }
    };
    Object.defineProperty(IgrRingSeries.prototype, "ring", {
        /**
     * Gets reference to the ring data.
    */
        get: function () {
            if (this.i.el == null) {
                return null;
            }
            if (!this.i.el.externalObject) {
                var e = new IgrRing();
                e._implementation = this.i.el;
                this.i.el.externalObject = e;
            }
            return this.i.el.externalObject;
        },
        set: function (v) {
            v == null ? this.i.el = null : this.i.el = v.i;
        },
        enumerable: true,
        configurable: true
    });
    IgrRingSeries.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.ring && this.ring.name && this.ring.name == name) {
            return this.ring;
        }
        return null;
    };
    return IgrRingSeries;
}(IgrRingSeriesBase));
export { IgrRingSeries };
//# sourceMappingURL=igr-ring-series.js.map
