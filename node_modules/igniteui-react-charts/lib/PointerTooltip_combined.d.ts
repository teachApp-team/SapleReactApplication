import { ContentControl } from "igniteui-react-core";
import { INotifyPropertyChanged, Type, Base, Point, PropertyChangedEventArgs } from "igniteui-react-core";
import { SRProvider } from "igniteui-react-core";
import { ISeriesVisualDataManager } from "./ISeriesVisualDataManager";
import { Visibility } from "igniteui-react-core";
import { PointerTooltipPointerLocation } from "./PointerTooltipPointerLocation";
import { PointCollection } from "igniteui-react-core";
import { Polygon } from "igniteui-react-core";
import { Polyline } from "igniteui-react-core";
import { EventProxy } from "igniteui-react-core";
import { PointerTooltipStyle } from "./PointerTooltipStyle";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { DomRenderer, DomWrapper } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class PointerTooltip extends ContentControl implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    private aq;
    protected readonly ar: SRProvider;
    private ai;
    readonly aj: ISeriesVisualDataManager;
    am: PointerTooltipView;
    cn: Point;
    a1: number;
    a2: number;
    ct: Visibility;
    al: PointerTooltipPointerLocation;
    cm: Point;
    ck: Point;
    cl: Point;
    ci: Point;
    cj: Point;
    cg: Point;
    ch: Point;
    a0: number;
    az: number;
    ax: number;
    ay: number;
    cp: PointCollection;
    co: PointCollection;
    protected bt(a: string, b: any, c: any): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected br(a: any, b: string, c: any, d: any): void;
    bw: ContentControl;
    cq: Polygon;
    cr: Polyline;
    protected au: boolean;
    bn(): void;
    bq(): void;
    private cf;
    private ak;
    private aw;
    private av;
    private at;
    cs(a: Size): Size;
    bo(): void;
    bp(): void;
    bu(a: number, b: number): void;
    ao: EventProxy;
    bs(a: DomRenderer): void;
    private as;
    bm(): void;
    bv(): void;
    ap: PointerTooltipStyle;
    a3(): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PointerTooltipView extends Base {
    static $t: Type;
    constructor(a: PointerTooltip);
    t(): void;
    private a;
    x(a: Size): Size;
    n: DomWrapper;
    p: DomWrapper;
    o: DomWrapper;
    l: DomWrapper;
    protected k: DomWrapper;
    protected b: RenderingContext;
    protected m: DomWrapper;
    private w;
    private c;
    private i;
    private h;
    v(a: number, b: number): void;
    q(): any;
    private g;
    private e;
    private f;
    d(a: any): boolean;
    r(): void;
    s(): void;
    j: DomRenderer;
    u(a: DomRenderer): void;
}
