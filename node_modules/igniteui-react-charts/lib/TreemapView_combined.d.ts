import { Base, Point, Type, INotifyPropertyChanged, IEnumerable, PropertyChangedEventArgs, EventArgs } from "igniteui-react-core";
import { DomRenderer } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { TreemapVisualData } from "./TreemapVisualData";
import { List$1 } from "igniteui-react-core";
import { TreemapVisual } from "./TreemapVisual";
import { Pool$1 } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { VerticalAlignment } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { HashSet$1 } from "igniteui-react-core";
import { TreemapOrientation } from "./TreemapOrientation";
import { Dictionary$2 } from "igniteui-react-core";
import { DoubleAnimator } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { TreemapFillScaleMode } from "./TreemapFillScaleMode";
import { TreemapLabelVerticalFitMode } from "./TreemapLabelVerticalFitMode";
import { TreemapLabelHorizontalFitMode } from "./TreemapLabelHorizontalFitMode";
import { TreemapHeaderDisplayMode } from "./TreemapHeaderDisplayMode";
import { TreemapLayoutType } from "./TreemapLayoutType";
import { FastItemsSource } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { TreemapValueMappingMode } from "./TreemapValueMappingMode";
import { TreemapNodePointerEventArgs } from "./TreemapNodePointerEventArgs";
import { TreemapNodeStyleMappingTargetType } from "./TreemapNodeStyleMappingTargetType";
/**
 * @hidden
 */
export declare class TreemapView extends Base {
    static $t: Type;
    constructor();
    protected b: TreemapViewRenderer;
    a: Treemap;
    au(): void;
    ay(): void;
    private m;
    az(): void;
    ad(): void;
    n(): boolean;
    private ac;
    private j;
    private aa;
    private q;
    private p;
    private e;
    private ab;
    private t;
    av(): void;
    ar(a: DomRenderer): void;
    private ai;
    al(a: TreemapVisualData): void;
    private ah;
    private z;
    ao(): void;
    private ae;
    private ag;
    private ak;
    private aj;
    private c;
    protected an(): void;
    private r;
    private s;
    private a1;
    i(): Pool$1<TreemapVisual>;
    protected a0(): void;
    ap(): void;
    am(): void;
    private ax;
    private g;
    private f;
    at(a: FontInfo): void;
    aw(a: FontInfo): void;
    private o;
    private k;
    af(a: List$1<TreemapVisual>): void;
    y(a: string): number;
    w(a: string): number;
    u(a: FontInfo): number;
    x(a: string): number;
    v(a: string): number;
    a4(): Brush;
    a6(): Brush;
    a5(): Brush;
    private a2;
    bc(): Brush;
    a8(): Brush;
    a7(): Brush;
    bb(): Brush;
    a3(): Brush;
    private d;
    h(): FontInfo;
    a9(): Brush;
    ba(): Brush;
    private l;
    aq(): void;
    as(): void;
}
/**
 * @hidden
 */
export declare class TreemapViewRenderer extends Base {
    static $t: Type;
    constructor();
    b: Pool$1<TreemapVisual>;
    protected c: List$1<TreemapVisual>;
    a(): TreemapVisual;
    g(a: TreemapVisual): void;
    i(a: TreemapVisual): void;
    h(a: TreemapVisual): void;
    j: Brush;
    private d;
    f(a: RenderingContext, b: Rect, c: List$1<TreemapVisual>, d: number): void;
    e(a: TreemapVisualData, b: List$1<TreemapVisual>, c: TreemapView): void;
}
/**
 * @hidden
 */
export declare abstract class TreemapLayoutCalculator extends Base {
    static $t: Type;
    abstract d(a: TreemapFrame, b: TreemapLayoutSettings): void;
    protected static c(a: TreemapTreeNode, b: Rect, c: number, d: TreemapLayoutSettings): boolean;
    protected static a(a: HashSet$1<TreemapTreeNode>, b: TreemapFrame, c: List$1<TreemapTreeNode>, d: Rect, e: TreemapLayoutSettings): boolean;
    protected static b(a: Rect, b: TreemapLayoutSettings): boolean;
    protected h(a: TreemapFrame, b: TreemapTreeNode, c: TreemapLayoutSettings): Rect;
    protected i(a: TreemapFrame, b: TreemapTreeNode, c: TreemapLayoutSettings): Rect;
    protected g(a: TreemapFrame, b: TreemapTreeNode, c: Rect, d: TreemapLayoutSettings): void;
    protected f(a: HashSet$1<TreemapTreeNode>, b: TreemapFrame, c: List$1<TreemapTreeNode>, d: number, e: Rect, f: TreemapLayoutSettings): void;
    protected e(a: HashSet$1<TreemapTreeNode>, b: TreemapFrame, c: List$1<TreemapTreeNode>, d: number, e: Rect, f: TreemapLayoutSettings): void;
}
/**
 * @hidden
 */
export declare class StrippedCalculator extends TreemapLayoutCalculator {
    static $t: Type;
    d(a: TreemapFrame, b: TreemapLayoutSettings): void;
    private q;
    protected o(a: TreemapFrame, b: TreemapTreeNode, c: Rect, d: TreemapLayoutSettings, e: number): void;
    private m;
    private l;
    private n;
    private static j;
    private static k;
    private static p;
}
/**
 * @hidden
 */
export declare class SliceAndDiceCalculator extends TreemapLayoutCalculator {
    static $t: Type;
    d(a: TreemapFrame, b: TreemapLayoutSettings): void;
    private o;
    protected m(a: TreemapFrame, b: TreemapTreeNode, c: Rect, d: TreemapLayoutSettings, e: number): void;
    static j(a: TreemapTreeNode, b: TreemapLayoutSettings, c: number): TreemapOrientation;
    private static k;
    private static n;
    static l: any;
}
/**
 * @hidden
 */
export declare class TreemapLayoutSettings extends Base {
    static $t: Type;
    constructor();
    a: TreemapOrientation;
    h: Rect;
    b: TreemapTreeData;
    j: Thickness;
    i: Thickness;
    e: number;
    f: number;
    g: number;
    c: TreemapTreeNode;
    d: boolean;
}
/**
 * @hidden
 */
export declare class SquarifiedCalculator extends TreemapLayoutCalculator {
    static $t: Type;
    protected n(a: TreemapFrame, b: TreemapTreeNode, c: Rect, d: TreemapLayoutSettings, e: number): void;
    private o;
    private static j;
    private l;
    private m;
    private k;
    d(a: TreemapFrame, b: TreemapLayoutSettings): void;
}
/**
 * @hidden
 */
export declare class TreemapTreeData extends Base {
    static $t: Type;
    constructor();
    a: TreemapTreeNode;
    b: Dictionary$2<string, TreemapTreeNode>;
    d: List$1<string>;
    c: Dictionary$2<string, List$1<TreemapTreeNode>>;
    e(a: TreemapTreeNode): void;
    private g;
    f(): void;
}
/**
 * @hidden
 */
export declare class TreemapTreeNode extends Base {
    static $t: Type;
    constructor();
    i: string;
    k: string;
    b: List$1<TreemapTreeNode>;
    c: List$1<TreemapNodeStyleMapping>;
    f: number;
    g: any;
    d: number;
    j: string;
    h: any;
    a: boolean;
    e(): number;
}
/**
 * @hidden
 */
export declare class Treemap extends Base implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    private gm;
    private gl;
    private hh;
    protected go(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected g: TreemapFrame;
    protected f: TreemapFrame;
    protected e: TreemapFrame;
    notifySizeChanged(): void;
    destroy(): void;
    ao(): TreemapVisualData;
    ej(): string;
    protected g7(a: string, b: any, c: any): void;
    protected hc(a: string, b: any, c: any): void;
    private ba;
    private g1;
    an: TreemapView;
    private il;
    io: Rect;
    private gn;
    protected ap: DoubleAnimator;
    private ea;
    gi: string;
    private d9;
    f8: string;
    private d4;
    ed: string;
    private d8;
    fw: string;
    private d7;
    ff: string;
    private d5;
    eg: string;
    private d6;
    e5: string;
    private bq;
    dataSource: IEnumerable;
    private a;
    b: BrushCollection;
    private ae;
    readonly styleMappings: TreemapNodeStyleMappingCollection;
    private c;
    d: TreemapFillScaleMode;
    private bb;
    bg: boolean;
    private dw;
    dy: number;
    private bx;
    ct: number;
    private bw;
    cs: number;
    private n;
    p: TreemapLabelVerticalFitMode;
    private readonly o;
    private k;
    m: TreemapLabelHorizontalFitMode;
    private readonly l;
    private hx;
    h8: Brush;
    private hr;
    h2: Brush;
    private hp;
    h0: Brush;
    private hw;
    h7: Brush;
    private hu;
    h5: Brush;
    private hq;
    h1: Brush;
    private hy;
    ij: Brush;
    private ho;
    hz: Brush;
    private ht;
    h4: Brush;
    private hs;
    h3: Brush;
    private at;
    aw: FontInfo;
    private as;
    au: FontInfo;
    private h;
    j: TreemapHeaderDisplayMode;
    private readonly i;
    private b0;
    cx: number;
    private b2;
    cz: number;
    private b1;
    cy: number;
    private bz;
    cw: number;
    private ca;
    c7: number;
    private cc;
    c9: number;
    private cb;
    c8: number;
    private b9;
    c6: number;
    private b5;
    c2: number;
    private b7;
    c4: number;
    private b6;
    c3: number;
    private b4;
    c1: number;
    private cf;
    dc: number;
    private cj;
    dg: number;
    private ch;
    de: number;
    private cd;
    da: number;
    private cg;
    dd: number;
    private ck;
    dh: number;
    private ci;
    df: number;
    private ce;
    db: number;
    private hl;
    hm: HorizontalAlignment;
    private ip;
    iq: VerticalAlignment;
    private by;
    cv: number;
    private hv;
    h6: Brush;
    private cm;
    dt: number;
    private ah;
    ai: TreemapOrientation;
    private r;
    s: TreemapLayoutType;
    private b8;
    c5: number;
    private dx;
    d1: number;
    private cn;
    protected du: number;
    private dv;
    private aq;
    ar: FastItemsSource;
    private a1;
    a8: IFastItemColumn$1<number>;
    private ax;
    a2: IFastItemColumn$1<any>;
    private a0;
    a5: IFastItemColumn$1<any>;
    private ay;
    a3: IFastItemColumn$1<any>;
    private az;
    a4: IFastItemColumn$1<any>;
    private cl;
    di: number;
    private bt;
    cp: number;
    private b3;
    c0: number;
    private bs;
    co: number;
    private a9;
    protected a6(a: string): IFastItemColumn$1<number>;
    protected a7(a: string): IFastItemColumn$1<any>;
    gt(): void;
    protected bf: boolean;
    protected bi: boolean;
    protected be: boolean;
    readonly bc: boolean;
    private ak;
    private aj;
    protected q: TreemapLayoutCalculator;
    protected hb(): void;
    private bh;
    private dn;
    private dq;
    private dr;
    private dp;
    private hn;
    private ir;
    private dj;
    private dl;
    private dm;
    private dk;
    private bu;
    gg(a: TreemapTreeNode, b: string, c: number, d: number, e: number): string;
    private f7;
    private bv;
    private ds;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    private ia;
    private ig;
    private id;
    private av;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    private ib;
    private ih;
    private ic;
    private ie;
    private h9;
    private cu;
    private ii;
    protected he(a: TreemapFrame): void;
    private d0;
    private im;
    private cq;
    protected bm(): boolean;
    hf(): void;
    private bd;
    private bl;
    private cr;
    private bj;
    u(a: Point): TreemapNodeFrame;
    private dz;
    v(a: Point): TreemapNodeFrame;
    private hg;
    private readonly bn;
    provideContainer(a: DomRenderer): void;
    gr(): void;
    protected w: TreemapNodeFrame;
    private t;
    protected x: TreemapNodeFrame;
    private gq;
    private gs;
    private y;
    private d2;
    d3: any;
    protected am: TreemapTreeNode;
    protected al: TreemapTreeNode;
    g2(a: Point): void;
    g6(a: Point): void;
    private hi;
    private bk;
    gx(source_: any, a: number, b: any, c: any): void;
    gu(source_: any): void;
    private bo;
    static bp(a: any, b: any): boolean;
    gv(source_: any, a: number, b: any): void;
    gw(source_: any, a: number, b: any): void;
    g3(a: Point): void;
    g4(a: Point): void;
    protected ik: Point;
    protected hk(a: Point): void;
    g5(a: Point): void;
    private hj;
    g8(a: Point): void;
    g9(a: Point): void;
    ha(a: TreemapNodeStyle): void;
    nodeStyling: (sender: any, args: TreemapNodeStylingEventArgs) => void;
    nodePointerOver: (sender: any, args: TreemapNodePointerEventArgs) => void;
    nodePointerEnter: (sender: any, args: TreemapNodePointerEventArgs) => void;
    nodePointerLeave: (sender: any, args: TreemapNodePointerEventArgs) => void;
    nodePointerPressed: (sender: any, args: TreemapNodePointerEventArgs) => void;
    nodePointerReleased: (sender: any, args: TreemapNodePointerEventArgs) => void;
}
/**
 * @hidden
 */
export declare class TreemapNodeStyle extends Base implements INotifyPropertyChanged {
    static $t: Type;
    a: Treemap;
    protected au(a: string, b: any, c: any): void;
    private c;
    at(): void;
    b(a: string): boolean;
    protected av(a: string, b: any, c: any): void;
    private a0;
    a7: Brush;
    private az;
    a6: Brush;
    private a2;
    a9: Brush;
    private x;
    ai: string;
    private a4;
    bb: Brush;
    private a1;
    a8: Brush;
    private f;
    p: number;
    private h;
    r: number;
    private g;
    q: number;
    private e;
    o: number;
    private j;
    t: number;
    private l;
    v: number;
    private k;
    u: number;
    private i;
    s: number;
    private d;
    n: number;
    private aw;
    ax: HorizontalAlignment;
    private bc;
    bd: VerticalAlignment;
    private ay;
    a5: Brush;
    private a3;
    ba: Brush;
    private m;
    w: number;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
}
/**
 * @hidden
 */
export declare class TreemapNodeStyleMapping extends TreemapNodeStyle {
    static $t: Type;
    private be;
    bf: TreemapNodeStyleMappingTargetType;
    private bo;
    bs: string;
    private bj;
    bl: number;
    private bi;
    bk: number;
    private bm;
    bn: any;
    private bg;
    bh: TreemapValueMappingMode;
}
/**
 * @hidden
 */
export declare class TreemapNodeStyleMappingCollection extends ObservableCollection$1<TreemapNodeStyleMapping> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export declare class TreemapNodeStylingEventArgs extends EventArgs {
    static $t: Type;
    private _value;
    value: number;
    private _sum;
    sum: number;
    private _customValue;
    customValue: any;
    private _item;
    item: any;
    private _parentItem;
    parentItem: any;
    private _label;
    label: string;
    private _parentValue;
    parentValue: number;
    private _parentLabel;
    parentLabel: string;
    private _parentSum;
    parentSum: number;
    private _isParent;
    isParent: boolean;
    private _style;
    style: TreemapNodeStyle;
}
/**
 * @hidden
 */
export declare class TreemapFrame extends Base {
    static $t: Type;
    constructor();
    private d;
    e: List$1<string>;
    h(a: number, b: TreemapFrame, c: TreemapFrame): void;
    private i;
    private j;
    private k;
    m(a: TreemapTreeNode, b: Rect): void;
    n(a: TreemapTreeNode, b: boolean): void;
    b(a: TreemapTreeNode): boolean;
    o(a: TreemapTreeNode): Rect;
    l(a: TreemapTreeNode, b: string, c: Brush, d: Brush, e: Brush, f: Brush, g: number, h: TreemapHeaderDisplayMode, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number, s: HorizontalAlignment, t: VerticalAlignment): void;
    g(): void;
    c(a: string): boolean;
    a(a: string): TreemapNodeFrame;
    f(a: TreemapTreeNode, b: TreemapNodeStyle, c: (arg1: TreemapTreeNode, arg2: Brush, arg3: Brush) => Brush): void;
}
/**
 * @hidden
 */
export declare class TreemapNodeFrame extends Base {
    static $t: Type;
    constructor();
    y: Rect;
    e: TreemapTreeNode;
    r: string;
    static b(a: number, b: TreemapNodeFrame, c: TreemapNodeFrame): TreemapNodeFrame;
    static d(a: number, b: TreemapNodeFrame): TreemapNodeFrame;
    static c(a: number, b: TreemapNodeFrame): TreemapNodeFrame;
    s: string;
    u: Brush;
    x: Brush;
    q: number;
    i: number;
    k: number;
    j: number;
    h: number;
    n: number;
    p: number;
    o: number;
    m: number;
    w: Brush;
    v: Brush;
    a: TreemapHeaderDisplayMode;
    l: number;
    g: number;
    t: HorizontalAlignment;
    z: VerticalAlignment;
    f: boolean;
}
