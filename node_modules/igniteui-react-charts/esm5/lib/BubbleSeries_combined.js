/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { ScatterBase } from "./ScatterBase";
import { IScaleLegendSeries_$type } from "igniteui-react-core";
import { ISupportsSizeScale_$type } from "./ISupportsSizeScale";
import { ISupportsFillScale_$type } from "./ISupportsFillScale";
import { List$1 } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { Base, typeCast, Point_$type, fromEnum, markType, markDep, enumGetBox, runOn } from "igniteui-react-core";
import { BubbleSeries_ActualRange } from "./BubbleSeries_ActualRange";
import { DependencyProperty } from "igniteui-react-core";
import { SizeScale } from "./SizeScale";
import { BrushScale } from "./BrushScale";
import { ScatterFrame } from "./ScatterFrame";
import { IChartLegend_$type } from "igniteui-react-core";
import { ValueBrushScale } from "./ValueBrushScale";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { ScatterBaseView } from "./ScatterBaseView";
import { ScalerParams } from "./ScalerParams";
import { OwnedPoint } from "./OwnedPoint";
import { Dictionary$2 } from "igniteui-react-core";
import { BubbleMarkerManager } from "./BubbleMarkerManager";
import { IChartItemLegend_$type } from "igniteui-react-core";
import { IChartScaleLegend_$type } from "igniteui-react-core";
import { ContentControl } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, isInfinity, logBase } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { BrushSelectionMode_$type } from "./BrushSelectionMode";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
/**
 * @hidden
 */
var BubbleSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(BubbleSeries, _super);
    function BubbleSeries() {
        var _this = _super.call(this) || this;
        _this.qh = null;
        _this.qg = null;
        _this.pg = null;
        _this.o8 = null;
        _this.o7 = null;
        _this.o6 = null;
        _this.pf = false;
        _this.pd = false;
        _this.pe = false;
        _this.pk = NaN;
        _this.pj = NaN;
        _this.ab = BubbleSeries.$;
        _this.nd = new ScatterFrame();
        _this.nf = new ScatterFrame();
        _this.nc = new ScatterFrame();
        return _this;
    }
    BubbleSeries.prototype.bf = function () {
        return new BubbleSeriesView(this);
    };
    BubbleSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.o4 = a;
    };
    BubbleSeries.prototype.isAttachedTo = function (a) {
        return this.aw == a;
    };
    BubbleSeries.prototype.ci = function () {
        return true;
    };
    BubbleSeries.prototype.h7 = function (a) {
        _super.prototype.h7.call(this, a);
        if (this.pb != null && this.pg != null && this.pg.count > 0) {
            for (var b = 0; b < this.pg.count; b++) {
                a(this.pg._inner[b]);
            }
        }
    };
    Object.defineProperty(BubbleSeries.prototype, "pa", {
        get: function () {
            return this.pc;
        },
        enumerable: true,
        configurable: true
    });
    BubbleSeries.prototype.qf = function (a) {
        var b = typeCast(CustomPaletteBrushScale.$, this.o1);
        var c = typeCast(ValueBrushScale.$, this.o1);
        var d = this.o1;
        if (b != null && this.bz != null) {
            return b.getBrush1(a, this.bz.count);
        }
        else if (c != null) {
            return c.getBrushByIndex(a, this.o9);
        }
        else if (d != null) {
            return d.getBrush(a);
        }
        return null;
    };
    Object.defineProperty(BubbleSeries.prototype, "legendReady", {
        get: function () {
            return this.pc != null && this.pc.count != 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BubbleSeries.prototype, "minScaleText", {
        get: function () {
            var a = this.o3(this.o5).b;
            return (Math.round(a * 1000) / 1000).toString();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BubbleSeries.prototype, "maxScaleText", {
        get: function () {
            var a = this.o3(this.o5).a;
            return (Math.round(a * 1000) / 1000).toString();
        },
        enumerable: true,
        configurable: true
    });
    BubbleSeries.prototype.forScaleColors = function (a) {
        for (var b = 0; b < this.pc.count; b++) {
            if (this.o1 == null || !this.o1.isReady) {
                return false;
            }
            var c = NaN;
            if (this.o9 != null) {
                c = (this.o9.item(b) - this.o9.minimum) / (this.o9.maximum - this.o9.minimum);
            }
            var d = (this.pc.item(b) - this.pc.minimum) / (this.pc.maximum - this.pc.minimum);
            if (isNaN_(c)) {
                c = 0;
            }
            if (isNaN_(d)) {
                d = c;
            }
            var e = this.mz;
            var f = this.qf(b);
            var g = f != null ? f : e;
            a(g, d);
        }
        return true;
    };
    BubbleSeries.prototype.fs = function (a, b) {
        var c = this.gv(b);
        if (c == BubbleSeries.$$p[3]) {
            return this.ft(a, b, this.pr);
        }
        if (c == BubbleSeries.$$p[7]) {
            return this.ft(a, b, this.px);
        }
        if (c == ScatterBase.$$p[4]) {
            return this.ft(a, b, this.nv);
        }
        if (c == ScatterBase.$$p[6]) {
            return this.ft(a, b, this.nz);
        }
        if (c == BubbleSeries.$$p[0]) {
            return this.ft(a, b, this.pm);
        }
        return _super.prototype.fs.call(this, a, b);
    };
    Object.defineProperty(BubbleSeries.prototype, "pc", {
        get: function () {
            return this.o8;
        },
        set: function (a) {
            if (this.o8 != a) {
                var b = this.pc;
                this.o8 = a;
                this.raisePropertyChanged("RadiusColumn", b, this.pc);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BubbleSeries.prototype, "pb", {
        get: function () {
            return this.o7;
        },
        set: function (a) {
            if (this.o7 != a) {
                var b = this.pb;
                this.o7 = a;
                this.raisePropertyChanged("LabelColumn", b, this.pb);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BubbleSeries.prototype, "o9", {
        get: function () {
            return this.o6;
        },
        set: function (a) {
            if (this.o6 != a) {
                var b = this.o9;
                this.o6 = a;
                this.raisePropertyChanged("FillColumn", b, this.o9);
            }
        },
        enumerable: true,
        configurable: true
    });
    BubbleSeries.prototype.n2 = function (a, b, c, d, e) {
        if (c <= this.no) {
            b.g = new Dictionary$2(Base.$, OwnedPoint.$, 1, c);
        }
        var f = this.no;
        var g = this.bz;
        var h;
        var i;
        var j = this.getEffectiveViewport1(a);
        var k = new ScalerParams(0, d, e, this.m8.d, j);
        var l = new ScalerParams(0, d, e, this.m8.e, j);
        var _loop_1 = function (m) {
            h = this_1.nh.item(m);
            i = this_1.nj.item(m);
            var n = { $type: Point_$type, x: this_1.m8.a.dy(h, k), y: this_1.m8.b.dy(i, l) };
            if (!isInfinity(n.x) && !isInfinity(n.y)) {
                var o_1 = g.item(m);
                if (c <= f) {
                    if (!b.g.containsKey(o_1)) {
                        var p_1 = { $type: Point_$type, x: h, y: i };
                        b.g.addItem(o_1, ((function () {
                            var $ret = new OwnedPoint();
                            $ret.a = o_1;
                            $ret.b = p_1;
                            $ret.c = n;
                            return $ret;
                        })()));
                    }
                }
            }
        };
        var this_1 = this;
        for (var m = 0; m < c; m++) {
            _loop_1(m);
        }
    };
    BubbleSeries.prototype.n6 = function (a, b) {
        var c = typeCast(BubbleSeriesView.$, b);
        var d = c.cr;
        d.m = this.pc;
        _super.prototype.n6.call(this, a, b);
        var e = Math.min(this.nh != null ? this.nh.count : 0, this.nj != null ? this.nj.count : 0);
        if (e < 1) {
            return;
        }
        c.dc();
        c.dd();
    };
    BubbleSeries.prototype.p2 = function () {
        if (this.bs == null) {
            return;
        }
        if (this.aw == null) {
            return;
        }
        if (this.aw.isItemwise) {
            var a = this.aw;
            this.aw.clearLegendItemsForSeries(this);
            this.p1();
            a.renderItemwiseContent(this);
        }
        if (this.aw.isScale) {
            var b = this.aw;
            b.restoreOriginalState();
            b.initializeLegend(this);
        }
    };
    BubbleSeries.ph = function (a, b, c, d, e) {
        if (e <= a || isNaN_(e) || isInfinity(e)) {
            return c;
        }
        if (e >= b) {
            return d;
        }
        var f = c + ((d - c) / (b - a)) * (e - a);
        return f;
    };
    BubbleSeries.pi = function (a, b, c, d, logBase_, e) {
        var f = logBase(e, logBase_);
        var g = logBase(a, logBase_);
        var h = logBase(b, logBase_);
        return BubbleSeries.ph(g, h, c, d, f);
    };
    BubbleSeries.prototype.dw = function (a, b, c) {
        var d = _super.prototype.dw.call(this, a, b, c);
        if (this.pc == null || this.bz == null || this.pc.count == 0 || this.bz.count != this.pc.count) {
            d = false;
        }
        return d;
    };
    BubbleSeries.prototype.nm = function (a, b) {
        if (b != 3) {
            return true;
        }
        if (a == null) {
            return true;
        }
        if (this.nv == a || this.nz == a || this.px == a) {
            return true;
        }
        return false;
    };
    BubbleSeries.prototype.p1 = function () {
        var _this = this;
        var a = typeCast(IChartLegend_$type, this.aw);
        if (a == null || this.bz == null) {
            return;
        }
        this.pg = new List$1(UIElement.$, 0);
        var b = typeCast(CustomPaletteBrushScale.$, this.o1);
        var c = typeCast(ValueBrushScale.$, this.o1);
        var d = this.o1;
        var e = this.o2();
        var f = e.b;
        var g = e.a;
        var h = this.bz;
        var _loop_2 = function (i) {
            var j = null;
            if (c != null && this_2.o9 != null) {
                var k = this_2.o9.item(i);
                j = c.getBrushByRange(k, f, g);
            }
            else if (b != null) {
                j = b.getBrush1(i, h.count);
            }
            else if (d != null) {
                j = d.getBrush(i);
            }
            var l = new ContentControl();
            var m = this_2.pb != null && this_2.pb.item(i) != null ? this_2.pb.item(i).toString() : "";
            l.content = ((function () {
                var $ret = new DataContext();
                $ret.series = _this;
                $ret.item = h.item(i);
                $ret.itemBrush = j;
                $ret.itemLabel = m;
                return $ret;
            })());
            var n = this_2.jz;
            if (n == null) {
                n = this_2.bi.bi(this_2.bk);
            }
            l.ah = n;
            this_2.pg.add(l);
        };
        var this_2 = this;
        for (var i = 0; i < h.count; i++) {
            _loop_2(i);
        }
    };
    BubbleSeries.prototype.hz = function (a, b, c, d) {
        _super.prototype.hz.call(this, a, b, c, d);
        if (this.o5 != null) {
            this.o5.aa();
        }
        if (this.o1 != null) {
            this.o1.w();
        }
        this.p2();
    };
    BubbleSeries.prototype.ie = function () {
        _super.prototype.ie.call(this);
        this.p2();
    };
    BubbleSeries.prototype.ik = function () {
        _super.prototype.ik.call(this);
        this.p2();
    };
    BubbleSeries.prototype.i0 = function (a, b, c, d) {
        var e_1, _a;
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case "FastItemsSource":
                if (this.o5 != null) {
                    this.o5.aa();
                }
                if (this.o1 != null) {
                    this.o1.w();
                }
                if (typeCast(IFastItemsSource_$type, c) != null) {
                    c.deregisterColumn(this.pc);
                    c.deregisterColumn(this.o9);
                    c.deregisterColumn(this.pb);
                    this.pc = null;
                    this.o9 = null;
                    this.pb = null;
                }
                if (typeCast(IFastItemsSource_$type, d) != null) {
                    this.pc = this.bw(this.px);
                    if (!stringIsNullOrEmpty(this.pm)) {
                        this.o9 = this.bw(this.pm);
                    }
                    this.pb = this.by(this.pr);
                }
                this.je(false);
                this.p2();
                break;
            case BubbleSeries.$$p[7]:
                if (this.o5 != null) {
                    this.o5.aa();
                }
                if (this.bz != null) {
                    this.bz.deregisterColumn(this.pc);
                    this.pc = this.bw(this.px);
                    this.p2();
                }
                break;
            case "RadiusColumn":
                if (this.o5 != null) {
                    this.o5.aa();
                }
                this.m9.ct.g$i();
                this.je(false);
                this.im();
                break;
            case BubbleSeries.$$p[8]:
                if (c != null) {
                    c.l.remove(this);
                    c.aa();
                }
                if (d != null) {
                    d.l.add(this);
                    d.aa();
                }
                this.je(false);
                this.il();
                break;
            case BubbleSeries.$$p[9]:
                this.je(false);
                this.il();
                break;
            case "DiscreteLegendItemTemplate":
                this.p2();
                break;
            case BubbleSeries.$$p[1]:
                if (c != null) {
                    c.o.remove(this);
                    c.w();
                }
                if (d != null) {
                    d.o.add(this);
                    d.w();
                }
                this.je(false);
                this.p2();
                this.il();
                break;
            case BubbleSeries.$$p[2]:
            case BubbleSeries.$$p[6]:
            case BubbleSeries.$$p[5]:
            case BubbleSeries.$$p[4]:
                this.je(false);
                this.p2();
                this.il();
                break;
            case "FillColumn":
                this.je(false);
                this.il();
                break;
            case BubbleSeries.$$p[0]:
                if (this.o1 != null) {
                    this.o1.w();
                }
                if (this.bz != null) {
                    this.bz.deregisterColumn(this.o9);
                    this.o9 = this.bw(this.pm);
                    this.p2();
                }
                break;
            case BubbleSeries.$$p[3]:
                if (this.bz != null) {
                    this.bz.deregisterColumn(this.pb);
                    this.pb = this.by(this.pr);
                    this.p2();
                }
                break;
            case "ActualLegend":
                var e = typeCast(IChartLegend_$type, c);
                if (e != null && e.isItemwise) {
                    var f = typeCast(IChartItemLegend_$type, e);
                    f.clearLegendItemsForSeries(this);
                }
                if (e != null && e.isScale) {
                    var g = typeCast(IChartScaleLegend_$type, e);
                    var h = true;
                    var i = null;
                    if (this.bs != null) {
                        try {
                            for (var _b = tslib_1.__values(fromEnum(this.bs.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var j = _c.value;
                                if (j.legend == g) {
                                    i = j;
                                    h = false;
                                }
                            }
                        }
                        catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return))
                                    _a.call(_b);
                            }
                            finally {
                                if (e_1)
                                    throw e_1.error;
                            }
                        }
                    }
                    if (h) {
                        g.restoreOriginalState();
                    }
                    else {
                        g.initializeLegend(typeCast(IScaleLegendSeries_$type, i));
                    }
                }
                this.p2();
                break;
            case "SeriesViewer":
                this.p2();
                break;
        }
    };
    BubbleSeries.prototype.updateSizeScaleGlobals = function () {
        var a = new BubbleSeries_ActualRange();
        a.b = NaN;
        a.a = NaN;
        if (this.pc != null) {
            a.b = this.pc.minimum;
            a.a = this.pc.maximum;
        }
        if (this.o5 != null) {
            this.o5.ab(a.b, a.a);
        }
    };
    BubbleSeries.prototype.updateFillScaleGlobals = function () {
        var a = new BubbleSeries_ActualRange();
        a.b = NaN;
        a.a = NaN;
        if (this.o9 != null) {
            a.b = this.o9.minimum;
            a.a = this.o9.maximum;
        }
        if (this.o1 != null) {
            this.o1.y(a.b, a.a);
        }
    };
    BubbleSeries.prototype.o3 = function (a) {
        var b = new BubbleSeries_ActualRange();
        b.b = NaN;
        b.a = NaN;
        if (this.pc != null) {
            b.b = this.pc.minimum;
            b.a = this.pc.maximum;
        }
        if (a != null) {
            a.x();
            if (this.pf) {
                b.b = a.globalMinimum;
                b.a = a.globalMaximum;
            }
        }
        return b;
    };
    BubbleSeries.prototype.o2 = function () {
        var a = new BubbleSeries_ActualRange();
        a.b = NaN;
        a.a = NaN;
        if (this.o9 != null) {
            a.b = this.o9.minimum;
            a.a = this.o9.maximum;
        }
        var b = typeCast(ValueBrushScale.$, this.o1);
        if (b != null) {
            b.s();
            if (this.pd && this.o1.o.count > 1) {
                a.b = b.q;
                a.a = b.p;
            }
        }
        return a;
    };
    BubbleSeries.prototype.p4 = function (a, b, c, d) {
        var e = c.width;
        if (!this.bi.br.isEmpty) {
            e = this.bi.br.width;
        }
        else if (this.bs != null && !this.bs.m5.isEmpty) {
            e = this.bs.m5.width;
        }
        var f = DeviceUtils.c(e);
        var g = this.o5 || ((function () {
            var $ret = new SizeScale();
            $ret.minimumValue = f / 10;
            $ret.maximumValue = f / 5;
            return $ret;
        })());
        if (g != null) {
            var h = g.minimumValue;
            var i = g.maximumValue;
            var j = g.logarithmBase;
            var k = this.o3(g);
            var l = k.b;
            var m = k.a;
            if (g.isLogarithmic) {
                for (var n = 0; n < b.count; n++) {
                    b._inner[n] = BubbleSeries.pi(l, m, h, i, j, b._inner[n]);
                }
            }
            else {
                for (var o = 0; o < b.count; o++) {
                    b._inner[o] = BubbleSeries.ph(l, m, h, i, b._inner[o]);
                }
            }
        }
        var p = 1;
        p = DeviceUtils.d();
        var q = this.o5 == null;
        if (d) {
            var r = c.width / e;
            for (var s = 0; s < b.count; s++) {
                if (q) {
                    b._inner[s] = b._inner[s] / p;
                }
                b._inner[s] = b._inner[s] * r;
            }
        }
        for (var t = 0; t < a.count; t++) {
            var u = a._inner[t];
            if (q && !d) {
                u.width = Math.max(0, b._inner[t] / p);
                u.height = Math.max(0, b._inner[t] / p);
            }
            else {
                u.width = Math.max(0, b._inner[t]);
                u.height = Math.max(0, b._inner[t]);
            }
        }
    };
    BubbleSeries.prototype.p3 = function (a) {
        var b = typeCast(BubbleSeriesView.$, this.bh);
        this.o4.b0 = false;
        if (b != null) {
            b.b0 = false;
        }
        var c = typeCast(CustomPaletteBrushScale.$, this.o1);
        var d = typeCast(ValueBrushScale.$, this.o1);
        var e = this.o1;
        var f = this.o2();
        var g = f.b;
        var h = f.a;
        var i = this.o1 == null || !this.o1.isReady || (d != null && this.pm == null);
        if (i) {
            this.o4.db();
            if (b != null) {
                b.db();
            }
            return;
        }
        this.o4.b0 = true;
        if (b != null) {
            b.b0 = true;
        }
        var j = a.count;
        var k = this.bz;
        for (var l = 0; l < j; l++) {
            var m = a._inner[l];
            var n = typeCast(DataContext.$, m.content);
            if (n != null) {
                var o = null;
                var p = k.indexOf(n.item);
                if (c != null) {
                    o = c.getBrush1(p, k.count);
                }
                else if (d != null && this.o9 != null) {
                    var q = this.o9.item(p);
                    o = d.getBrushByRange(q, g, h);
                }
                else if (e != null) {
                    o = e.getBrush(p);
                }
                else {
                    if (this.m1 == null) {
                        o = this.mz;
                    }
                    else {
                        o = this.m1;
                    }
                }
                var r = null;
                if (this.m2 == null) {
                    r = this.m0;
                }
                else {
                    r = this.m2;
                }
                if (this.pe && o != null) {
                    r = o;
                }
                if (r != null && !isNaN_(this.pk)) {
                    r = BrushUtil.l(r, this.pk);
                }
                if (o != null && !isNaN_(this.pj)) {
                    o = BrushUtil.l(o, this.pj);
                }
                n.itemBrush = o;
                n.actualItemBrush = o;
                n.outline = r;
            }
        }
    };
    BubbleSeries.prototype.get_cy = function () {
        return false;
    };
    Object.defineProperty(BubbleSeries.prototype, "actualMarkerBrush", {
        get: function () {
            return this.mz;
        },
        enumerable: true,
        configurable: true
    });
    BubbleSeries.$t = markType(BubbleSeries, 'BubbleSeries', ScatterBase.$, [IScaleLegendSeries_$type, ISupportsSizeScale_$type, ISupportsFillScale_$type]);
    BubbleSeries.$$p = markDep(DependencyProperty, PropertyMetadata, BubbleSeries, 'raisePropertyChanged', ['FillMemberPath:pm:p5', [2], 'FillScale:o1:p6', [BrushScale.$], 'FillScaleUseGlobalValues:pd:p7', [0], 'LabelMemberPath:pr:p8', [2], 'MarkerBrushBrightness:pj:p9', [1], 'MarkerOutlineBrightness:pk:qa', [1], 'MarkerOutlineUsesFillScale:pe:qb', [0], 'RadiusMemberPath:px:qc', [2, null], 'RadiusScale:o5:qd', [SizeScale.$], 'RadiusScaleUseGlobalValues:pf:qe', [0]]);
    return BubbleSeries;
}(ScatterBase));
export { BubbleSeries };
/**
 * @hidden
 */
var CustomPaletteBrushScale = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(CustomPaletteBrushScale, _super);
    function CustomPaletteBrushScale() {
        return _super.call(this) || this;
    }
    CustomPaletteBrushScale.prototype.getBrush1 = function (a, b) {
        if (this.brushes == null || this.brushes.count == 0) {
            return null;
        }
        if (this.brushSelectionMode == 0) {
            return _super.prototype.getBrush.call(this, a % this.brushes.count);
        }
        var c = BubbleSeries.ph(0, b - 1, 0, this.brushes.count - 1, a);
        return this.aa(c);
    };
    CustomPaletteBrushScale.prototype.get_isReady = function () {
        return this.brushes != null && this.brushes.count > 0;
    };
    CustomPaletteBrushScale.$t = markType(CustomPaletteBrushScale, 'CustomPaletteBrushScale', BrushScale.$);
    CustomPaletteBrushScale.$$p = markDep(DependencyProperty, PropertyMetadata, CustomPaletteBrushScale, 'u', ['BrushSelectionMode', [BrushSelectionMode_$type, enumGetBox(BrushSelectionMode_$type, 0)]]);
    return CustomPaletteBrushScale;
}(BrushScale));
export { CustomPaletteBrushScale };
/**
 * @hidden
 */
var BubbleSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(BubbleSeriesView, _super);
    function BubbleSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.da = null;
        _this.da = a;
        _this.ct = new ScatterTrendLineManager();
        return _this;
    }
    BubbleSeriesView.prototype.ap = function () {
        _super.prototype.ap.call(this);
        if (!this.n) {
            this.by.l2 = 2;
            this.e.bj = 4;
        }
    };
    BubbleSeriesView.prototype.cq = function () {
        var _this = this;
        return new BubbleMarkerManager(function (a) { return _this.cu.item(a); }, function (a) { return _this.cs.m8.c.item(a); }, runOn(this, this.c4), runOn(this, this.cn), runOn(this, this.cv));
    };
    BubbleSeriesView.prototype.dc = function () {
        var a = this.cr;
        this.da.p4(a.n, a.o, this.br, this == this.e.bh);
        this.an();
    };
    BubbleSeriesView.prototype.dd = function () {
        var a = this.cr;
        this.da.p3(a.n);
    };
    BubbleSeriesView.prototype.db = function () {
        var e_2, _a;
        var a = this.cr;
        try {
            for (var _b = tslib_1.__values(fromEnum(a.n)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var b = _c.value;
                var c = typeCast(DataContext.$, b.content);
                if (c != null) {
                    c.itemBrush = null;
                    c.outline = null;
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    BubbleSeriesView.prototype.getDefaultTooltipTemplate = function () {
        var a = "<div class='ui-chart-default-tooltip-content'><span";
        var b = this.e.a0.a$q(this.e);
        if (!stringIsNullOrEmpty(b)) {
            a += " style='color:" + b + "'";
        }
        a += ">" + this.da.fx + "</span><br/><span>" + "(${item." + this.da.nv + "}, ${item." + this.da.nz + "})</span>";
        if (!stringIsNullOrEmpty(this.da.px)) {
            a += "<span>, Radius: ${item." + this.da.px + "}</span>";
        }
        a += "</div>";
        return a;
    };
    BubbleSeriesView.$t = markType(BubbleSeriesView, 'BubbleSeriesView', ScatterBaseView.$);
    return BubbleSeriesView;
}(ScatterBaseView));
export { BubbleSeriesView };
//# sourceMappingURL=BubbleSeries_combined.js.map
