import { IgrNumericXAxis } from "./igr-numeric-x-axis";
import { IgrNumericYAxis } from "./igr-numeric-y-axis";
import { IgrTriangulationStatusEventArgs } from "igniteui-react-core";
import { IgrSeries, IIgrSeriesProps } from "./igr-series";
import { ScatterTriangulationSeries } from "./ScatterTriangulationSeries";
import { IgrAxis } from "./igr-axis";
/**
 * Base class for series which triangulate XY data prior to rendering.
*/
export declare abstract class IgrScatterTriangulationSeries<P extends IIgrScatterTriangulationSeriesProps = IIgrScatterTriangulationSeriesProps> extends IgrSeries<P> {
    /**
                                 * @hidden
                                 */
    readonly i: ScatterTriangulationSeries;
    constructor(props: P);
    /**
     * The name of the property from which to extract the X-coordinate for each item in the ItemsSource.
    */
    xMemberPath: string;
    /**
     * The name of the property from which to extract the Y-coordinate for each item in the ItemsSource.
    */
    yMemberPath: string;
    /**
     * The X-Axis for this series.
    */
    xAxis: IgrNumericXAxis;
    private _xAxisName;
    /**
    * Gets or sets the name to use to resolve xAxis from markup.
    */
    xAxisName: string;
    /**
     * The Y-Axis for this series.
    */
    yAxis: IgrNumericYAxis;
    private _yAxisName;
    /**
    * Gets or sets the name to use to resolve yAxis from markup.
    */
    yAxisName: string;
    /**
     * The source of triangulation data.
     * This property is optional.  If it is left as null, the triangulation will be created based on the items in the ItemsSource.  Triangulation is a demanding operation, so the runtime performance will be better when specifying a TriangulationSource, especially when a large number of data items are present.
    */
    trianglesSource: any[];
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the first vertex point in the ItemsSource.
    */
    triangleVertexMemberPath1: string;
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the second vertex point in the ItemsSource.
    */
    triangleVertexMemberPath2: string;
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the third vertex point in the ItemsSource.
    */
    triangleVertexMemberPath3: string;
    /**
     * Gets whether or not this series is a shape series
    */
    readonly isShape: boolean;
    bindAxes(axes: IgrAxis[]): void;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    */
    canUseAsYAxis(axis: any): boolean;
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    */
    canUseAsXAxis(axis: any): boolean;
    private _triangulationStatusChanged;
    private _triangulationStatusChanged_wrapped;
    /**
     * Raised when the status of an ongoing Triangulation has changed.
    */
    triangulationStatusChanged: (s: IgrScatterTriangulationSeries, e: IgrTriangulationStatusEventArgs) => void;
}
export interface IIgrScatterTriangulationSeriesProps extends IIgrSeriesProps {
    /**
     * The name of the property from which to extract the X-coordinate for each item in the ItemsSource.
    */
    xMemberPath?: string;
    /**
     * The name of the property from which to extract the Y-coordinate for each item in the ItemsSource.
    */
    yMemberPath?: string;
    /**
     * The X-Axis for this series.
    */
    xAxis?: IgrNumericXAxis;
    /**
    * Gets or sets the name to use to resolve xAxis from markup.
    */
    xAxisName?: string;
    /**
     * The Y-Axis for this series.
    */
    yAxis?: IgrNumericYAxis;
    /**
    * Gets or sets the name to use to resolve yAxis from markup.
    */
    yAxisName?: string;
    /**
     * The source of triangulation data.
     * This property is optional.  If it is left as null, the triangulation will be created based on the items in the ItemsSource.  Triangulation is a demanding operation, so the runtime performance will be better when specifying a TriangulationSource, especially when a large number of data items are present.
    */
    trianglesSource?: any[];
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the first vertex point in the ItemsSource.
    */
    triangleVertexMemberPath1?: string;
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the second vertex point in the ItemsSource.
    */
    triangleVertexMemberPath2?: string;
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the third vertex point in the ItemsSource.
    */
    triangleVertexMemberPath3?: string;
    /**
     * Raised when the status of an ongoing Triangulation has changed.
    */
    triangulationStatusChanged?: (s: IgrScatterTriangulationSeries, e: IgrTriangulationStatusEventArgs) => void;
}
