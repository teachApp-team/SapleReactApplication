import { EventArgs, IList$1, Base, Type, IEnumerable$1, Point } from "igniteui-react-core";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { IHasCategoryAxis } from "./IHasCategoryAxis";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { Brush } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { NumericYAxis } from "./NumericYAxis";
import { HighlightingInfo } from "./HighlightingInfo";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { CategoryTransitionSourceFramePreparer } from "./CategoryTransitionSourceFramePreparer";
import { CategoryFrame } from "./CategoryFrame";
import { CategoryMode } from "./CategoryMode";
import { List$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { CategorySeriesRenderManager } from "./CategorySeriesRenderManager";
import { AssigningCategoryStyleEventArgs } from "./AssigningCategoryStyleEventArgs";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { CalculatedColumn } from "./CalculatedColumn";
import { ColumnSupportingCalculation } from "./ColumnSupportingCalculation";
import { RenderSurface } from "./RenderSurface";
import { SupportingCalculation$1 } from "./SupportingCalculation$1";
/**
 * @hidden
 */
export declare class FinancialEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: number, b: number, c: FinancialCalculationDataSource, d: FinancialCalculationSupportingCalculations, e: FinancialSeries);
    private _position;
    position: number;
    private _count;
    count: number;
    private _dataSource;
    dataSource: FinancialCalculationDataSource;
    private _supportingCalculations;
    supportingCalculations: FinancialCalculationSupportingCalculations;
    private _basedOn;
    basedOn: IList$1<string>;
}
/**
 * @hidden
 */
export declare class FinancialBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected a: FinancialSeriesView;
    constructor(a: FinancialSeriesView);
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    c: number;
    d: number;
    b: number;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    e(a: number): void;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class FinancialSeries extends Series implements IHasCategoryAxis, IHasCategoryModePreference {
    static $t: Type;
    iv(a: SeriesView): void;
    mp: FinancialSeriesView;
    protected get_cr(): boolean;
    ag(): Axis[];
    fs(a: any, b: string): any;
    protected n9(): number;
    private n7;
    ah(a: Point): Point[][];
    ai(a: Point): Point[][];
    constructor();
    pf: Brush;
    la(): Brush;
    hu(): void;
    l9: CategoryAxisBase;
    mu: NumericYAxis;
    op: string;
    m3: IFastItemColumn$1<number>;
    private m2;
    og: string;
    mz: IFastItemColumn$1<number>;
    private my;
    ol: string;
    m1: IFastItemColumn$1<number>;
    private m0;
    od: string;
    mx: IFastItemColumn$1<number>;
    private mw;
    ot: string;
    m6: IFastItemColumn$1<number>;
    private m5;
    nf: boolean;
    protected m9: boolean;
    assigningCategoryStyle: (sender: any, args: AssigningCategoryStyleEventArgs) => void;
    protected nh(): boolean;
    protected o1(a: AssigningCategoryStyleEventArgs): void;
    protected mh: CategorySeriesRenderManager;
    protected oz(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    nz(a: Point): number;
    fe(a: Point, b: boolean): number;
    fc(a: Point, b: boolean): number;
    d9(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    lm(a: Point, b: boolean, c: boolean): Point;
    en(a: Point, b: boolean, c: boolean): number;
    ej(a: Point, b: boolean, c: boolean): number;
    el(a: Point, b: boolean, c: boolean): number;
    n1(a: Point, b: boolean, c: boolean): number;
    n2(a: Point, b: boolean, c: boolean): number;
    n3(a: Point, b: boolean, c: boolean): number;
    li(a: Point, b: boolean, c: boolean): Point;
    lk(a: Point, b: boolean, c: boolean): Point;
    ph(a: Point, b: boolean, c: boolean): Point;
    pg(a: Point, b: boolean, c: boolean): Point;
    pi(a: Point, b: boolean, c: boolean): Point;
    ic(): void;
    protected ju(a: Rect, b: Rect): void;
    protected jt(a: Rect, b: Rect): void;
    protected nk: Dictionary$2<IFastItemColumn$1<number>, string>;
    protected nl: Dictionary$2<string, string>;
    private m4;
    private oy;
    private m8;
    protected i0(a: any, b: string, c: any, d: any): void;
    nb(a: any): boolean;
    na(a: any): boolean;
    protected l2(a: number, b: number, c: Axis): any[];
    protected n6(a: SeriesView): number;
    protected n8(a: SeriesView): number;
    l1(a: number, b: number): any[];
    private ms;
    protected get_nd(): boolean;
    protected readonly nd: boolean;
    protected get_cv(): boolean;
    at(a: any, b: Point): HighlightingInfo;
    oa(a: Point): number;
    protected mr(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected mq(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected nc(): boolean;
    eb(a: Point): number;
    e8(a: Point): number;
    protected get_c1(): boolean;
    ap(): CategoryAxisBase;
    fa(a: Point): number;
    fp(a: Point): any;
    mc: CategoryFrame;
    me: CategoryFrame;
    mb: CategoryFrame;
    protected n0(a: Rect, b: Rect, c: Rect): number;
    mj: CategoryTransitionInMode;
    ng: boolean;
    protected dc(): boolean;
    protected mi(): CategoryTransitionInMode;
    protected bo(): TransitionInSpeedType;
    o2(a: CategoryFrame, b: FinancialSeriesView): void;
    o0(a: CategoryFrame, b: FinancialSeriesView): void;
    dw(a: Rect, b: Rect, c: SeriesView): boolean;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    mk: CategoryTransitionSourceFramePreparer;
    n4(a: FinancialSeriesView): number;
    protected hx(): void;
    jf(a: boolean): void;
    typical: (sender: any, e: FinancialEventArgs) => void;
    typicalBasedOn: (sender: any, e: FinancialEventArgs) => void;
    protected ni(a: IList$1<string>): boolean;
    readonly nj: boolean;
    protected ne(): boolean;
    protected ox(a: FinancialEventArgs): void;
    protected readonly nr: IEnumerable$1<number>;
    private _no;
    private no;
    protected readonly nq: IEnumerable$1<number>;
    private _nn;
    private nn;
    protected readonly np: IEnumerable$1<number>;
    private _nm;
    private nm;
    nt(a: IList$1<number>): IList$1<number>;
    private m7;
    protected ns(): IList$1<string>;
    private nx;
    getOpenColumnAsArray(): number[];
    private nv;
    getHighColumnAsArray(): number[];
    private nw;
    getLowColumnAsArray(): number[];
    private nu;
    getCloseColumnAsArray(): number[];
    private ny;
    getVolumeColumnAsArray(): number[];
    protected hz(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected ml(a: number, b: number): FinancialCalculationDataSource;
    n5(a: number): number;
    protected mm(a: FinancialCalculationDataSource): FinancialCalculationSupportingCalculations;
    readonly categoryAxis: CategoryAxisBase;
    private md;
    jg(a: Rect, b: RenderSurface): void;
    private ma;
    jd(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    am(a: Axis): Axis;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    private mf;
    mg: CategoryMode;
    protected get_cz(): boolean;
    jj(a: Brush, b: Brush): void;
    private o3;
    private mt;
    private mv;
    fr(a: any): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class FinancialCalculationSupportingCalculations extends Base {
    static $t: Type;
    a: ColumnSupportingCalculation;
    c: ColumnSupportingCalculation;
    d: ColumnSupportingCalculation;
    b: ColumnSupportingCalculation;
    h: DataSourceSupportingCalculation;
    f: DataSourceSupportingCalculation;
    g: DataSourceSupportingCalculation;
    e: DataSourceSupportingCalculation;
    k: (arg1: (arg1: number) => number, arg2: number, arg3: number) => IEnumerable$1<number>;
    j: (arg1: (arg1: number) => number, arg2: number) => IEnumerable$1<number>;
    i: (arg1: number) => number;
}
/**
 * @hidden
 */
export declare class DataSourceSupportingCalculation extends SupportingCalculation$1<(dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>> {
    static $t: Type;
    constructor(a: number, b: (dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>);
    constructor(a: number, b: (dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>, c: IList$1<string>);
    constructor(a: number, ..._rest: any[]);
}
/**
 * @hidden
 */
export declare class FinancialCalculationDataSource extends Base {
    static $t: Type;
    private _openColumn;
    openColumn: IList$1<number>;
    private _closeColumn;
    closeColumn: IList$1<number>;
    private _highColumn;
    highColumn: IList$1<number>;
    private _lowColumn;
    lowColumn: IList$1<number>;
    private _volumeColumn;
    volumeColumn: IList$1<number>;
    private _indicatorColumn;
    indicatorColumn: IList$1<number>;
    private _typicalColumn;
    typicalColumn: CalculatedColumn;
    private _trueRange;
    trueRange: CalculatedColumn;
    private _trueLow;
    trueLow: CalculatedColumn;
    private _period;
    period: number;
    private _shortPeriod;
    shortPeriod: number;
    private _longPeriod;
    longPeriod: number;
    private _count;
    count: number;
    private _calculateFrom;
    calculateFrom: number;
    private _calculateCount;
    calculateCount: number;
    private _multiplier;
    multiplier: number;
    private _minimumValue;
    minimumValue: number;
    private _maximumValue;
    maximumValue: number;
    private _specifiesRange;
    specifiesRange: boolean;
    private _series;
    series: FinancialSeries;
}
/**
 * @hidden
 */
export declare abstract class FinancialSeriesView extends SeriesView {
    static $t: Type;
    bw: FinancialSeries;
    bu: FinancialBucketCalculator;
    by: number;
    bx(a: CategoryFrame): boolean;
    bz(a: CategoryFrame): void;
    constructor(a: FinancialSeries);
    protected abstract bv(): FinancialBucketCalculator;
    ap(): void;
    getDefaultTooltipTemplate(): string;
    protected ac(): void;
}
