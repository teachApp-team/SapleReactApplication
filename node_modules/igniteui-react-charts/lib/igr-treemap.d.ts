import * as React from 'react';
import { Treemap } from "./Treemap";
import { IgrTreemapNodeStyleMapping } from './igr-treemap-node-style-mapping';
import { IgrTreemapNodeStyleMappingCollection } from './igr-treemap-node-style-mapping-collection';
import { TreemapFillScaleMode } from "./TreemapFillScaleMode";
import { IgrTreemapNodeStylingEventArgs } from "./igr-treemap-node-styling-event-args";
import { TreemapOrientation } from './TreemapOrientation';
import { TreemapLayoutType } from './TreemapLayoutType';
import { IgrTreemapNodePointerEventArgs } from './igr-treemap-node-pointer-event-args';
import { TreemapHeaderDisplayMode } from './TreemapHeaderDisplayMode';
import { HorizontalAlignment } from "igniteui-react-core";
import { VerticalAlignment } from "igniteui-react-core";
import { TreemapLabelHorizontalFitMode } from './TreemapLabelHorizontalFitMode';
import { TreemapLabelVerticalFitMode } from './TreemapLabelVerticalFitMode';
export declare class IgrTreemap extends React.Component<IIgrTreemapProps> {
    private _container;
    private _height;
    private _width;
    private _initialized;
    private _elRef;
    height: string;
    width: string;
    private _wrapper;
    private _getMainRef;
    private _contentChildrenManager;
    private _updateContentChildren;
    contentStyleMappings: IgrTreemapNodeStyleMapping[];
    /**
    * The style mappings actually present in the treemap. Do not directly modify this array.
    * This array's contents can be modified by causing React to reproject the child content.
    * Or adding and removing ranges from the manual ranges collection on the ranges property.
    */
    actualStyleMappings: IgrTreemapNodeStyleMapping[];
    private _styleMappings;
    private _styleMappingsAdapter;
    /**
     * A collection of manually added style mappings for the treemap.
    */
    readonly styleMappings: IgrTreemapNodeStyleMappingCollection;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (ref: any) => void;
        children: any[];
    }, any>;
    constructor(props: IIgrTreemapProps);
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    protected initializeProperties(): void;
    updateStyle(): void;
    componentWillUnmount(): void;
    private _implementation;
    componentDidMount(): void;
    initializeContent(): void;
    protected createImplementation(): Treemap;
    readonly i: Treemap;
    private _treeMap;
    /**
 * Gets or sets path to use to get the values from the items.
*/
    valueMemberPath: string;
    /**
     * Gets or sets the root title to use for breadcrumbs.
    */
    rootTitle: string;
    /**
     * Gets or sets the root title to use for breadcrumbs.
    */
    breadcrumbSequence: string;
    /**
     * Gets or sets the path to use to get the Parent of the items.
    */
    parentIdMemberPath: string;
    /**
     * Gets or sets the path to use to get the Label of the items.
    */
    labelMemberPath: string;
    /**
     * Gets or sets the path to use to get the custom value of the items.
    */
    customValueMemberPath: string;
    /**
     * Gets or sets the path to use to get the id of the items.
    */
    idMemberPath: string;
    /**
     * Gets or sets the (possibly hierarchical) data to assign to the TreeMap.
    */
    dataSource: any[];
    /**
     * Gets or sets brushes to use for the fill scale.
    */
    fillBrushes: string[];
    /**
     * Gets or sets mode to use for the fill scale.
    */
    fillScaleMode: TreemapFillScaleMode;
    /**
     * Gets or sets whether the fill scale is logarithmic.
    */
    isFillScaleLogarithmic: boolean;
    /**
     * Gets or sets the logarithm base to use if the fill scale is logarithmic.
    */
    fillScaleLogarithmBase: number;
    /**
     * Gets or sets the minimum value to use for the fill scale.
    */
    fillScaleMinimumValue: number;
    /**
     * Gets or sets the maximum value to use for the fill scale.
    */
    fillScaleMaximumValue: number;
    /**
     * Gets or sets the vertical fit mode to use for the node labels.
    */
    labelVerticalFitMode: TreemapLabelVerticalFitMode;
    /**
     * Gets or sets the horizontal fit mode to use for the node labels.
    */
    labelHorizontalFitMode: TreemapLabelHorizontalFitMode;
    /**
     * Gets or sets the background to use for the overlay header when it is hovered.
    */
    overlayHeaderHoverBackground: string;
    /**
     * Gets or sets the background to use for the header when it is hovered.
    */
    headerHoverBackground: string;
    /**
     * Gets or sets the background to use for the header.
    */
    headerBackground: string;
    /**
     * Gets or sets the background to use for the overlay header.
    */
    overlayHeaderBackground: string;
    /**
     * Gets or sets the text color to use for the header.
    */
    headerTextColor: string;
    /**
     * Gets or sets the dark text color to use for the header.
    */
    headerDarkTextColor: string;
    /**
     * Gets or sets the text color to use for the nodes.
    */
    textColor: string;
    /**
     * Gets or sets the dark text color to use for the nodes.
    */
    darkTextColor: string;
    /**
     * Gets or sets the text color to use for the header.
    */
    headerHoverTextColor: string;
    /**
     * Gets or sets the dark text color to use for the header when hovered.
    */
    headerHoverDarkTextColor: string;
    /**
     * Gets or sets the font to use for content nodes
    */
    textStyle: string;
    /**
     * Gets or sets the font to use for header nodes
    */
    headerTextStyle: string;
    /**
     * Gets or sets the font to use for header nodes
    */
    headerDisplayMode: TreemapHeaderDisplayMode;
    /**
     * Gets or sets the left margin to use for the header.
    */
    headerLabelLeftMargin: number;
    /**
     * Gets or sets the top margin to use for the header.
    */
    headerLabelTopMargin: number;
    /**
     * Gets or sets the right margin to use for the header.
    */
    headerLabelRightMargin: number;
    /**
     * Gets or sets the bottom margin to use for the header.
    */
    headerLabelBottomMargin: number;
    /**
     * Gets or sets the left margin to use for the overlay header.
    */
    overlayHeaderLabelLeftMargin: number;
    /**
     * Gets or sets the top margin to use for the overlay header.
    */
    overlayHeaderLabelTopMargin: number;
    /**
     * Gets or sets the right margin to use for the overlay header.
    */
    overlayHeaderLabelRightMargin: number;
    /**
     * Gets or sets the bottom margin to use for the overlay header.
    */
    overlayHeaderLabelBottomMargin: number;
    /**
     * Gets or sets the left margin to use for the labels.
    */
    labelLeftMargin: number;
    /**
     * Gets or sets the top margin to use for the labels.
    */
    labelTopMargin: number;
    /**
     * Gets or sets the right margin to use for the labels.
    */
    labelRightMargin: number;
    /**
     * Gets or sets the bottom margin to use for the labels.
    */
    labelBottomMargin: number;
    /**
     * Gets or sets the left margin to use for the parent nodes.
    */
    parentNodeLeftMargin: number;
    /**
     * Gets or sets the top margin to use for the parent nodes.
    */
    parentNodeTopMargin: number;
    /**
     * Gets or sets the right margin to use for the parent nodes.
    */
    parentNodeRightMargin: number;
    /**
     * Gets or sets the bottom margin to use for the parent nodes.
    */
    parentNodeBottomMargin: number;
    /**
     * Gets or sets the left padding to use for the parent nodes.
    */
    parentNodeLeftPadding: number;
    /**
     * Gets or sets the top padding to use for the parent nodes.
    */
    parentNodeTopPadding: number;
    /**
     * Gets or sets the right padding to use for the parent nodes.
    */
    parentNodeRightPadding: number;
    /**
     * Gets or sets the bottom padding to use for the parent nodes.
    */
    parentNodeBottomPadding: number;
    /**
     * Gets or sets the horizontal alignment to use for the node labels.
    */
    labelHorizontalAlignment: HorizontalAlignment;
    /**
     * Gets or sets the vertical alignment to use for the node labels.
    */
    labelVerticalAlignment: VerticalAlignment;
    /**
     * Gets or sets the height to use for the header.
    */
    headerHeight: number;
    /**
     * Gets or sets the outline to use for the nodes.
    */
    outline: string;
    /**
     * Gets or sets the stroke thickness to use for the node outline.
    */
    strokeThickness: number;
    /**
     * Gets or sets the orientation to use for the stripped and slice and dice layout types.
    */
    layoutOrientation: TreemapOrientation;
    /**
     * Gets or sets the type of layout to use for the nodes.
    */
    layoutType: TreemapLayoutType;
    /**
     * Gets or sets the minimum size (width or height) to display a node.
    */
    minimumDisplaySize: number;
    /**
     * Gets or sets the number of milliseconds over which changes to the gauge should be animated.
    */
    transitionDuration: number;
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    pixelScalingRatio: number;
    actualPixelScalingRatio: number;
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control while it is animating.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    interactionPixelScalingRatio: number;
    /**
     * Gets or sets the resolved scaling value used to affect the pixel density of the control while it is animating.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    actualInteractionPixelScalingRatio: number;
    readonly animating: boolean;
    /**
     * Gets or sets the item to drill to in the treemap.
    */
    focusItem: any;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
 * Returns visuals as a serialized string.

*/
    exportSerializedVisualData(): string;
    markDirty(): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    flush(): void;
    notifySetItem(source_: any, index: number, oldItem: any, newItem: any): void;
    /**
     * Manually notifies the treemap's data source that the data it has bound to has been cleared and needs to be re-examined.
     * This should not be called if the data that the pie chart is bound to is already observable.
    
    * @param source_  * The data source.
    */
    notifyClearItems(source_: any): void;
    notifyInsertItem(source_: any, index: number, newItem: any): void;
    notifyRemoveItem(source_: any, index: number, oldItem: any): void;
    private _nodeStyling;
    private _nodeStyling_wrapped;
    /**
     * Fired when a node is being styled. Provides an opportunity to customize node styling.
    */
    nodeStyling: (s: IgrTreemap, e: IgrTreemapNodeStylingEventArgs) => void;
    private _nodePointerOver;
    private _nodePointerOver_wrapped;
    /**
     * Fired with the pointer is moving over a node.
    */
    nodePointerOver: (s: IgrTreemap, e: IgrTreemapNodePointerEventArgs) => void;
    private _nodePointerEnter;
    private _nodePointerEnter_wrapped;
    /**
     * Fired when the pointer enters a node.
    */
    nodePointerEnter: (s: IgrTreemap, e: IgrTreemapNodePointerEventArgs) => void;
    private _nodePointerLeave;
    private _nodePointerLeave_wrapped;
    /**
     * Fired when the pointer leaved a node.
    */
    nodePointerLeave: (s: IgrTreemap, e: IgrTreemapNodePointerEventArgs) => void;
    private _nodePointerPressed;
    private _nodePointerPressed_wrapped;
    /**
     * Fired when the pointer is pressed on a node.
    */
    nodePointerPressed: (s: IgrTreemap, e: IgrTreemapNodePointerEventArgs) => void;
    private _nodePointerReleased;
    private _nodePointerReleased_wrapped;
    /**
     * Fired when the pointer is released on a node.
    */
    nodePointerReleased: (s: IgrTreemap, e: IgrTreemapNodePointerEventArgs) => void;
}
export interface IIgrTreemapProps {
    width?: string;
    height?: string;
    /**
 * Gets or sets path to use to get the values from the items.
*/
    valueMemberPath?: string;
    /**
     * Gets or sets the root title to use for breadcrumbs.
    */
    rootTitle?: string;
    /**
     * Gets or sets the root title to use for breadcrumbs.
    */
    breadcrumbSequence?: string;
    /**
     * Gets or sets the path to use to get the Parent of the items.
    */
    parentIdMemberPath?: string;
    /**
     * Gets or sets the path to use to get the Label of the items.
    */
    labelMemberPath?: string;
    /**
     * Gets or sets the path to use to get the custom value of the items.
    */
    customValueMemberPath?: string;
    /**
     * Gets or sets the path to use to get the id of the items.
    */
    idMemberPath?: string;
    /**
     * Gets or sets the (possibly hierarchical) data to assign to the TreeMap.
    */
    dataSource?: any[];
    /**
     * Gets or sets brushes to use for the fill scale.
    */
    fillBrushes?: string[] | string;
    /**
     * Gets or sets mode to use for the fill scale.
    */
    fillScaleMode?: TreemapFillScaleMode | string;
    /**
     * Gets or sets whether the fill scale is logarithmic.
    */
    isFillScaleLogarithmic?: boolean | string;
    /**
     * Gets or sets the logarithm base to use if the fill scale is logarithmic.
    */
    fillScaleLogarithmBase?: number | string;
    /**
     * Gets or sets the minimum value to use for the fill scale.
    */
    fillScaleMinimumValue?: number | string;
    /**
     * Gets or sets the maximum value to use for the fill scale.
    */
    fillScaleMaximumValue?: number | string;
    /**
     * Gets or sets the vertical fit mode to use for the node labels.
    */
    labelVerticalFitMode?: TreemapLabelVerticalFitMode | string;
    /**
     * Gets or sets the horizontal fit mode to use for the node labels.
    */
    labelHorizontalFitMode?: TreemapLabelHorizontalFitMode | string;
    /**
     * Gets or sets the background to use for the overlay header when it is hovered.
    */
    overlayHeaderHoverBackground?: string;
    /**
     * Gets or sets the background to use for the header when it is hovered.
    */
    headerHoverBackground?: string;
    /**
     * Gets or sets the background to use for the header.
    */
    headerBackground?: string;
    /**
     * Gets or sets the background to use for the overlay header.
    */
    overlayHeaderBackground?: string;
    /**
     * Gets or sets the text color to use for the header.
    */
    headerTextColor?: string;
    /**
     * Gets or sets the dark text color to use for the header.
    */
    headerDarkTextColor?: string;
    /**
     * Gets or sets the text color to use for the nodes.
    */
    textColor?: string;
    /**
     * Gets or sets the dark text color to use for the nodes.
    */
    darkTextColor?: string;
    /**
     * Gets or sets the text color to use for the header.
    */
    headerHoverTextColor?: string;
    /**
     * Gets or sets the dark text color to use for the header when hovered.
    */
    headerHoverDarkTextColor?: string;
    /**
     * Gets or sets the font to use for content nodes
    */
    textStyle?: string;
    /**
     * Gets or sets the font to use for header nodes
    */
    headerTextStyle?: string;
    /**
     * Gets or sets the font to use for header nodes
    */
    headerDisplayMode?: TreemapHeaderDisplayMode | string;
    /**
     * Gets or sets the left margin to use for the header.
    */
    headerLabelLeftMargin?: number | string;
    /**
     * Gets or sets the top margin to use for the header.
    */
    headerLabelTopMargin?: number | string;
    /**
     * Gets or sets the right margin to use for the header.
    */
    headerLabelRightMargin?: number | string;
    /**
     * Gets or sets the bottom margin to use for the header.
    */
    headerLabelBottomMargin?: number | string;
    /**
     * Gets or sets the left margin to use for the overlay header.
    */
    overlayHeaderLabelLeftMargin?: number | string;
    /**
     * Gets or sets the top margin to use for the overlay header.
    */
    overlayHeaderLabelTopMargin?: number | string;
    /**
     * Gets or sets the right margin to use for the overlay header.
    */
    overlayHeaderLabelRightMargin?: number | string;
    /**
     * Gets or sets the bottom margin to use for the overlay header.
    */
    overlayHeaderLabelBottomMargin?: number | string;
    /**
     * Gets or sets the left margin to use for the labels.
    */
    labelLeftMargin?: number | string;
    /**
     * Gets or sets the top margin to use for the labels.
    */
    labelTopMargin?: number | string;
    /**
     * Gets or sets the right margin to use for the labels.
    */
    labelRightMargin?: number | string;
    /**
     * Gets or sets the bottom margin to use for the labels.
    */
    labelBottomMargin?: number | string;
    /**
     * Gets or sets the left margin to use for the parent nodes.
    */
    parentNodeLeftMargin?: number | string;
    /**
     * Gets or sets the top margin to use for the parent nodes.
    */
    parentNodeTopMargin?: number | string;
    /**
     * Gets or sets the right margin to use for the parent nodes.
    */
    parentNodeRightMargin?: number | string;
    /**
     * Gets or sets the bottom margin to use for the parent nodes.
    */
    parentNodeBottomMargin?: number | string;
    /**
     * Gets or sets the left padding to use for the parent nodes.
    */
    parentNodeLeftPadding?: number | string;
    /**
     * Gets or sets the top padding to use for the parent nodes.
    */
    parentNodeTopPadding?: number | string;
    /**
     * Gets or sets the right padding to use for the parent nodes.
    */
    parentNodeRightPadding?: number | string;
    /**
     * Gets or sets the bottom padding to use for the parent nodes.
    */
    parentNodeBottomPadding?: number | string;
    /**
     * Gets or sets the horizontal alignment to use for the node labels.
    */
    labelHorizontalAlignment?: HorizontalAlignment | string;
    /**
     * Gets or sets the vertical alignment to use for the node labels.
    */
    labelVerticalAlignment?: VerticalAlignment | string;
    /**
     * Gets or sets the height to use for the header.
    */
    headerHeight?: number | string;
    /**
     * Gets or sets the outline to use for the nodes.
    */
    outline?: string;
    /**
     * Gets or sets the stroke thickness to use for the node outline.
    */
    strokeThickness?: number | string;
    /**
     * Gets or sets the orientation to use for the stripped and slice and dice layout types.
    */
    layoutOrientation?: TreemapOrientation | string;
    /**
     * Gets or sets the type of layout to use for the nodes.
    */
    layoutType?: TreemapLayoutType | string;
    /**
     * Gets or sets the minimum size (width or height) to display a node.
    */
    minimumDisplaySize?: number | string;
    /**
     * Gets or sets the number of milliseconds over which changes to the gauge should be animated.
    */
    transitionDuration?: number | string;
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    pixelScalingRatio?: number | string;
    actualPixelScalingRatio?: number | string;
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control while it is animating.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    interactionPixelScalingRatio?: number | string;
    /**
     * Gets or sets the resolved scaling value used to affect the pixel density of the control while it is animating.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    actualInteractionPixelScalingRatio?: number | string;
    /**
     * Gets or sets the item to drill to in the treemap.
    */
    focusItem?: any;
    /**
 * Fired when a node is being styled. Provides an opportunity to customize node styling.
*/
    nodeStyling?: (s: IgrTreemap, e: IgrTreemapNodeStylingEventArgs) => void;
    /**
     * Fired with the pointer is moving over a node.
    */
    nodePointerOver?: (s: IgrTreemap, e: IgrTreemapNodePointerEventArgs) => void;
    /**
     * Fired when the pointer enters a node.
    */
    nodePointerEnter?: (s: IgrTreemap, e: IgrTreemapNodePointerEventArgs) => void;
    /**
     * Fired when the pointer leaved a node.
    */
    nodePointerLeave?: (s: IgrTreemap, e: IgrTreemapNodePointerEventArgs) => void;
    /**
     * Fired when the pointer is pressed on a node.
    */
    nodePointerPressed?: (s: IgrTreemap, e: IgrTreemapNodePointerEventArgs) => void;
    /**
     * Fired when the pointer is released on a node.
    */
    nodePointerReleased?: (s: IgrTreemap, e: IgrTreemapNodePointerEventArgs) => void;
}
