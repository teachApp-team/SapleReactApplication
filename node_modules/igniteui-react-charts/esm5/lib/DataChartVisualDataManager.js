/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, Point_$type, EnumUtil, markType } from "igniteui-react-core";
import { IDataChartVisualDataManager_$type } from "./IDataChartVisualDataManager";
import { ChartVisualData } from "./ChartVisualData";
import { RectData } from "igniteui-react-core";
import { VisualExportHelper } from "./VisualExportHelper";
import { ChartTitleVisualData } from "./ChartTitleVisualData";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { AppearanceHelper } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
/**
 * @hidden
 */
var DataChartVisualDataManager = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(DataChartVisualDataManager, _super);
    function DataChartVisualDataManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataChartVisualDataManager.prototype.exportVisualData = function (a) {
        var b = new ChartVisualData();
        for (var c = 0; c < a.axes.count; c++) {
            var d = a.axes._inner[c].e5();
            b.axes.add1(d);
        }
        for (var e = 0; e < a.series.count; e++) {
            var f = a.series._inner[e].fo();
            b.series.add1(f);
        }
        b.name = a.name;
        this.b(a, b);
        this.c(a, b);
        return b;
    };
    DataChartVisualDataManager.prototype.c = function (a, b) {
        var c = a.bn;
        b.width = c.a6;
        b.height = c.a5;
        b.contentArea = RectData.b(c.e4());
        b.centralArea = new RectData(c.a2, 0, c.a6 - (c.a2 + c.a3), c.a5 - (c.a4 + c.a1));
        b.plotArea = RectData.b(a.m5);
    };
    DataChartVisualDataManager.prototype.d = function (a, b) {
        var c = VisualExportHelper.a(a);
        return c;
    };
    DataChartVisualDataManager.prototype.b = function (a, b) {
        var c = a.bn;
        var d = null;
        b.title = null;
        b.subtitle = null;
        var e = c.fc();
        var f = 0;
        var g = 0;
        if (c.eo != null) {
            d = c.t();
            var h = this.a(c, c.eo, d);
            var i = { $type: Point_$type, x: 0, y: 0 };
            g = c.eo.l + e.b + e.e;
            var j = new ChartTitleVisualData();
            var k = c.e4();
            j.viewport = new RectData(k.left, k.top, k.width, g);
            j.textPlotArea = RectData.b(this.d(c.eo, a));
            j.textPlotArea = new RectData(c.eo.n, c.eo.o, c.eo.m, c.eo.l);
            f = j.height;
            j.appearance = AppearanceHelper.c(c.eo, h);
            var l = c.fc();
            j.appearance.marginTop = l.e;
            j.appearance.marginLeft = l.c;
            j.appearance.marginRight = l.d;
            j.appearance.marginBottom = l.b;
            var m = c.eq();
            j.appearance.horizontalAlignment = EnumUtil.getName(HorizontalAlignment_$type, m);
            b.title = j;
        }
        if (c.en != null) {
            d = c.s();
            var n = this.a(c, c.en, d);
            var o = { $type: Point_$type, x: 0, y: f };
            var p = c.fb();
            var q = c.en.l + p.b + p.e;
            var r = new ChartTitleVisualData();
            var s = c.e4();
            r.viewport = new RectData(s.left, s.top + g, s.width, q);
            r.textPlotArea = RectData.b(this.d(c.en, a));
            r.appearance = AppearanceHelper.c(c.en, n);
            var t = c.fb();
            r.appearance.marginTop = t.e;
            r.appearance.marginLeft = t.c;
            r.appearance.marginRight = t.d;
            r.appearance.marginBottom = t.b;
            var u = c.ep();
            r.appearance.horizontalAlignment = EnumUtil.getName(HorizontalAlignment_$type, u);
            b.subtitle = r;
        }
    };
    DataChartVisualDataManager.prototype.a = function (a, b, c) {
        return FontUtil.getFontInfo(a.i.ae, b, c);
    };
    DataChartVisualDataManager.$t = markType(DataChartVisualDataManager, 'DataChartVisualDataManager', Base.$, [IDataChartVisualDataManager_$type]);
    return DataChartVisualDataManager;
}(Base));
export { DataChartVisualDataManager };
//# sourceMappingURL=DataChartVisualDataManager.js.map
