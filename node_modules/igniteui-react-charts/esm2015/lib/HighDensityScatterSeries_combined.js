/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Series } from "./Series";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Color } from "igniteui-react-core";
import { ScatterFrame } from "./ScatterFrame";
import { KDTree2D } from "./KDTree2D";
import { typeGetValue, runOn, delegateRemove, typeCast, delegateCombine, markType, markDep, toNullable } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { List$1 } from "igniteui-react-core";
import { KDPointData } from "./KDPointData";
import { ScalerParams } from "./ScalerParams";
import { ProgressiveLoadStatusEventArgs } from "./ProgressiveLoadStatusEventArgs";
import { SearchArgs } from "./SearchArgs";
import { KDTreeNode2D } from "./KDTreeNode2D";
import { AxisRange } from "./AxisRange";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity, logBase, intDivide } from "igniteui-react-core";
import { boxArray$1, arrayShallowClone } from "igniteui-react-core";
import { dateNow } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { CanvasViewRenderer } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
/**
 * @hidden
 */
export let HighDensityScatterSeries = /*@__PURE__*/ (() => {
    class HighDensityScatterSeries extends Series {
        constructor() {
            super();
            this.me = null;
            this.mg = null;
            this.nm = 0;
            this.mi = false;
            this.m2 = 0;
            this.m1 = 0;
            this.m0 = 0;
            this.mz = 255;
            this.my = 0;
            this.mx = 0;
            this.m5 = 255;
            this.m4 = 0;
            this.m3 = 0;
            this.l6 = null;
            this.mb = null;
            this.mc = null;
            this.l7 = null;
            this.l9 = null;
            this.mk = false;
            this.nn = 0;
            this.np = 0;
            this.nj = 0;
            this.ni = 0;
            this.progressiveLoadStatusChanged = null;
            this.mp = null;
            this.mv = 0;
            this.mu = 0;
            this.mw = 0;
            this.m8 = 0;
            this.m6 = 0;
            this.m7 = 0;
            this.m9 = 0;
            this.nb = 0;
            this.nd = 0;
            this.nc = 0;
            this.na = 0;
            this.mr = 0;
            this.ms = 0;
            this.mt = 0;
            this.mq = 0;
            this.nl = 0;
            this.nk = 0;
            this.l3 = null;
            this.no = 0;
            this.mj = false;
            this._itemIndexes = null;
            this.l4 = null;
            this.l1 = null;
            this.md = null;
            this.ab = HighDensityScatterSeries.$;
            this.c7 = false;
        }
        get_c4() {
            return true;
        }
        get mf() {
            return this.me;
        }
        set mf(a) {
            if (this.me != a) {
                let b = this.mf;
                this.me = a;
                this.raisePropertyChanged("XColumn", b, this.mf);
            }
        }
        fs(a, b) {
            let c = this.gv(b);
            if (c == HighDensityScatterSeries.$$p[8]) {
                return this.ft(a, b, this.n4);
            }
            if (c == HighDensityScatterSeries.$$p[10]) {
                return this.ft(a, b, this.n8);
            }
            return super.fs(a, b);
        }
        get mh() {
            return this.mg;
        }
        set mh(a) {
            if (this.mg != a) {
                let b = this.mh;
                this.mg = a;
                this.raisePropertyChanged("YColumn", b, this.mh);
            }
        }
        om() {
            if (this.l6 == null) {
                return;
            }
            this.l6.s();
            let a = this.l6;
            a.progressiveThunkCompleted = delegateRemove(a.progressiveThunkCompleted, runOn(this, this.oa));
            this.l6 = null;
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    if (this.bs != null) {
                        let e = this.getEffectiveViewport1(this.bi);
                        this.mj = !e.isEmpty;
                    }
                    break;
                case "FastItemsSource":
                    this.om();
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.mf);
                        c.deregisterColumn(this.mh);
                        this.mf = null;
                        this.mh = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.mf = this.bw(this.n4);
                        this.mh = this.bw(this.n8);
                    }
                    if ((this.ma != null && !this.ma.cn()) || (this.l8 != null && !this.l8.cn())) {
                        this.je(false);
                    }
                    this.im();
                    break;
                case HighDensityScatterSeries.$$p[7]:
                    let f = this.l7;
                    this.l7 = this.l8;
                    this.om();
                    if (f != null) {
                        f.rangeChanged = delegateRemove(f.rangeChanged, runOn(this, this.od));
                    }
                    if (this.l7 != null) {
                        let g = this.l7;
                        g.rangeChanged = delegateCombine(g.rangeChanged, runOn(this, this.od));
                    }
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.ck(this);
                    }
                    if ((this.l8 != null && !this.l8.cn()) || (d == null && c != null)) {
                        this.je(false);
                    }
                    break;
                case HighDensityScatterSeries.$$p[9]:
                    let h = this.l9;
                    this.l9 = this.ma;
                    this.om();
                    if (h != null) {
                        h.rangeChanged = delegateRemove(h.rangeChanged, runOn(this, this.od));
                    }
                    if (this.l9 != null) {
                        let i = this.l9;
                        i.rangeChanged = delegateCombine(i.rangeChanged, runOn(this, this.od));
                    }
                    if (c != null) {
                        c.bx(this);
                    }
                    if (d != null) {
                        d.ck(this);
                    }
                    if ((this.ma != null && !this.ma.cn()) || (d == null && c != null)) {
                        this.je(false);
                    }
                    break;
                case "MouseOverEnabled":
                    this.mk = this.c7;
                    this.je(false);
                    break;
                case HighDensityScatterSeries.$$p[8]:
                    if (this.bz != null) {
                        this.bz.deregisterColumn(this.mf);
                        this.mf = this.bw(this.n4);
                    }
                    break;
                case "XColumn":
                    this.om();
                    if (this.l8 != null && !this.l8.cn()) {
                        this.je(false);
                    }
                    this.im();
                    break;
                case HighDensityScatterSeries.$$p[10]:
                    if (this.bz != null) {
                        this.bz.deregisterColumn(this.mh);
                        this.mh = this.bw(this.n8);
                    }
                    break;
                case "YColumn":
                    this.om();
                    if (this.ma != null && !this.ma.cn()) {
                        this.je(false);
                    }
                    this.im();
                    break;
                case HighDensityScatterSeries.$$p[6]:
                    this.om();
                    this.je(false);
                    this.il();
                    break;
                case HighDensityScatterSeries.$$p[3]:
                    this.je(false);
                    this.il();
                    break;
                case HighDensityScatterSeries.$$p[1]:
                    this.je(false);
                    this.il();
                    break;
                case HighDensityScatterSeries.$$p[0]:
                case HighDensityScatterSeries.$$p[2]:
                    if (!this.l5.by(this.o1, this.o0)) {
                        return;
                    }
                    this.m2 = this.o1.o;
                    this.m1 = this.o1.n;
                    this.m0 = this.o1.m;
                    this.mz = this.o0.o;
                    this.my = this.o0.n;
                    this.mx = this.o0.m;
                    this.m5 = this.mz - this.m2;
                    this.m4 = this.my - this.m1;
                    this.m3 = this.mx - this.m0;
                    this.je(false);
                    this.il();
                    break;
                case HighDensityScatterSeries.$$p[4]:
                    this.nm = Math.max(typeGetValue(d) - 1, 0);
                    this.mi = this.nm > 0;
                    this.je(false);
                    this.il();
                    break;
                case HighDensityScatterSeries.$$p[5]:
                    this.je(false);
                    this.il();
                    break;
            }
        }
        mm(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        ml(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        od(a, b) {
            this.om();
            this.je(false);
        }
        dw(a, b, c) {
            let d = super.dw(a, b, c);
            if (this.ma == null || this.l8 == null || this.l8.bh == null || this.ma.bh == null || this.mh == null || this.mf == null || this.mh.count < 1 || this.mf.count < 1 || this.mh.count != this.mf.count || this.l8.kb == this.l8.ka || this.ma.kb == this.ma.ka || this.lz.isEmpty) {
                d = false;
            }
            return d;
        }
        get nt() {
            return this.nn;
        }
        set nt(a) {
            let b = this.nn;
            this.nn = a;
            this.raisePropertyChanged("ProgressiveStatus", b, this.nn);
        }
        jf(a) {
            super.jf(a);
            this.of(a, this.bi);
        }
        of(a, b) {
            if (this.cc(b)) {
                return;
            }
            if (this.l6 == null && !this.mo) {
                let c = new List$1(KDPointData.$, 2, this.mf.count);
                let d = this.l8;
                let e = this.ma;
                let f = new Rect(0, 0, 0, 1, 1);
                let g = new Rect(0, 0, 0, 1, 1);
                let h = new ScalerParams(1, f, g, d.ca);
                let i = new ScalerParams(1, f, g, e.ca);
                let j;
                let k;
                for (let l = 0; l < this.mf.count; l++) {
                    j = d.dy(this.mf.item(l), h);
                    k = e.dy(this.mh.item(l), i);
                    if (!isNaN_(j) && !isNaN_(k) && !isInfinity(j) && !isInfinity(k)) {
                        c.add(((() => {
                            let $ret = new KDPointData();
                            $ret.a = j;
                            $ret.b = k;
                            $ret.c = l;
                            return $ret;
                        })()));
                    }
                }
                if (this.mn) {
                    this.ni = 1;
                    this.nj = truncate(logBase(c.count, 2)) + 3;
                    this.nt = truncate(((this.ni / this.nj) * 100));
                    if (this.progressiveLoadStatusChanged != null) {
                        this.progressiveLoadStatusChanged(this, new ProgressiveLoadStatusEventArgs(this.nt));
                    }
                    this.l6 = KDTree2D.b(c.toArray(), 1);
                    let m = this.l6;
                    m.progressiveThunkCompleted = delegateCombine(m.progressiveThunkCompleted, runOn(this, this.oa));
                    if (!this.l6.f(this.e4)) {
                        let n = this.l6;
                        n.progressiveThunkCompleted = delegateRemove(n.progressiveThunkCompleted, runOn(this, this.oa));
                    }
                    this.il();
                }
                else {
                    let o = dateNow();
                    this.l6 = new KDTree2D(0, c.toArray(), 1);
                    let p = dateNow();
                }
            }
            if (this.mn && !this.mo) {
                this.og(b);
            }
            else {
                this.oh(b);
            }
        }
        hz(a, b, c, d) {
            super.hz(a, b, c, d);
            this.om();
            let e = false;
            if (this.l8 != null && !this.l8.cn()) {
                e = true;
            }
            if (this.ma != null && !this.ma.cn()) {
                e = true;
            }
            if (e) {
                this.je(false);
            }
            this.im();
        }
        oc(a) {
            let b = a;
            let c = this.nl * this.nk;
            if (this.mk) {
                if (this._itemIndexes == null || this._itemIndexes.length != c) {
                    this._itemIndexes = new Array(c);
                    for (let d = 0; d < c; d++) {
                        this._itemIndexes[d] = 0;
                    }
                }
                else {
                    for (let e = 0; e < c; e++) {
                        this._itemIndexes[e] = 0;
                    }
                }
            }
        }
        oh(a) {
            let b;
            let c;
            let d = null;
            if (a.n) {
                d = this._itemIndexes;
            }
            let e = a.getViewInfo(c, b);
            c = e.p0;
            b = e.p1;
            let f = a;
            let g = this.getEffectiveViewport1(a);
            this.mb = new ScalerParams(0, b, c, this.l7.ca, g);
            this.mc = new ScalerParams(0, b, c, this.l9.ca, g);
            this.ob(a);
            this.oc(a);
            let h = this.nl * this.nk;
            if (this.l4 == null || this.l4.length != h) {
                this.l4 = new Array(h);
                this.l1 = new Array(h);
            }
            let i = this.l4.length;
            let j = this.l4;
            let k = this.l1;
            for (let l = 0; l < i; l++) {
                j[l] = 0;
                k[l] = 0;
            }
            this.np = truncate(Math.round(this.eu));
            this.l3 = f.bv();
            let m = this.l3.length;
            let n = this.l3;
            for (let o = 0; o < m; o++) {
                n[o] = 0;
            }
            let p = this.ng;
            let q = this.nf;
            if (isNaN_(p) || isInfinity(p)) {
                p = 0;
            }
            if (isNaN_(q) || isInfinity(q)) {
                q = 50;
            }
            this.mv = Math.min(p, q);
            this.mu = Math.max(p, q);
            if (this.mv < 0) {
                this.mv = 0;
            }
            if (this.mu < 0) {
                this.mu = 0;
            }
            this.mw = this.mu - this.mv;
            if (this.mo) {
                this.oe(a);
            }
            else {
                this.oo(a);
            }
            f.b6();
            if (a.n) {
                this._itemIndexes = d;
                this.l5.b7();
            }
        }
        og(a) {
            if (this.l6 == null) {
                return;
            }
            this.oh(a);
        }
        oa(a, b) {
            this.l5.b5(() => {
                if (this.ni < this.nj - 1) {
                    this.ni++;
                }
                this.nt = truncate(((this.ni / this.nj) * 100));
                if (this.progressiveLoadStatusChanged != null) {
                    this.progressiveLoadStatusChanged(this, new ProgressiveLoadStatusEventArgs(this.nt));
                }
                this.og(this.bi);
                this.il();
                if (this.l6 != null) {
                    if (!this.l6.f(this.e4)) {
                        let c = this.l6;
                        c.progressiveThunkCompleted = delegateRemove(c.progressiveThunkCompleted, runOn(this, this.oa));
                        this.nt = 100;
                        if (this.progressiveLoadStatusChanged != null) {
                            this.progressiveLoadStatusChanged(this, new ProgressiveLoadStatusEventArgs(this.nt));
                        }
                    }
                }
            });
        }
        oe(a) {
            let b = arrayShallowClone(this.mf.asArray());
            this.l8.gs(boxArray$1(b), 0, b.length, this.mb);
            let c = arrayShallowClone(this.mh.asArray());
            this.no = 0;
            let d = this.nm;
            let e = this.mi;
            let f = this.l4.length;
            this.ma.gs(boxArray$1(c), 0, c.length, this.mc);
            let g = 255 << 24 | truncate(this.m2) << 16 | truncate(this.m1) << 8 | truncate(this.m0);
            for (let h = 0; h < b.length; h++) {
                let i = truncate(b[h]);
                let j = truncate(c[h]);
                i = truncate(Math.floor(i));
                j = truncate(Math.floor(j));
                if (i < 0 || i >= this.nl || j < 0 || j >= this.nk) {
                    continue;
                }
                if (e) {
                    let k = i - d;
                    let l = i + d;
                    l = l > (this.nl - 1) ? (this.nl - 1) : l;
                    k = k < 0 ? 0 : k;
                    let m = j + d;
                    let n = j - d;
                    for (let o = k; o <= l; o++) {
                        for (let p = n; p <= m; p++) {
                            let q = (p * this.nl) + o;
                            if (q < 0 || q > f - 1) {
                                continue;
                            }
                            this.l4[q] = this.l4[q] + 1;
                            this.l1[q] = 1;
                            this.no++;
                            if (this.mk) {
                                this._itemIndexes[q] = h + 1;
                            }
                        }
                    }
                }
                else {
                    let r = (j * this.nl) + i;
                    this.l4[r] = this.l4[r] + 1;
                    this.l1[r] = 1;
                    this.no++;
                    if (this.mk) {
                        this._itemIndexes[r] = h + 1;
                    }
                }
            }
            this.oi();
        }
        oo(a) {
            let b;
            let c;
            let d = a.getViewInfo(b, c);
            b = d.p0;
            c = d.p1;
            if (this.l6 == null) {
                return;
            }
            if (this.mp == null) {
                this.mp = new List$1(KDTreeNode2D.$, 2, truncate(Math.round(b.width * b.height)));
            }
            else {
                this.mp.clear();
            }
            let e = c.left;
            let f = c.right;
            let g = c.top;
            let h = c.bottom;
            this.nc = c.top;
            this.na = c.height;
            this.nb = c.left;
            this.nd = c.width;
            this.m8 = b.top;
            this.m6 = b.height;
            this.m7 = b.left;
            this.m9 = b.width;
            let i = this.getEffectiveViewport1(a);
            this.mr = (i.left - this.m7) / this.m9;
            this.ms = (i.top - this.m8) / this.m6;
            let j = (i.right - this.m7) / this.m9;
            this.mt = j - this.mr;
            let k = (i.bottom - this.m8) / this.m6;
            this.mq = k - this.ms;
            if (this.mj) {
                e = (e - this.mr) / this.mt;
                f = (f - this.mr) / this.mt;
                g = (g - this.ms) / this.mq;
                h = (h - this.ms) / this.mq;
            }
            let l = this.eu / b.width * c.width;
            let m = this.eu / b.height * c.height;
            let n = Math.min(l, m);
            let o = ((() => {
                let $ret = new SearchArgs();
                $ret.c = e;
                $ret.a = f;
                $ret.d = g;
                $ret.b = h;
                $ret.e = l;
                $ret.f = m;
                $ret.g = 0x7FFFFFFF;
                return $ret;
            })());
            this.l6.t(this.mp, o, 0, 1, 0, 1);
            let p;
            this.no = 0;
            for (let q = 0; q < this.mp.count; q++) {
                p = this.mp._inner[q];
                this.oj(p);
            }
            this.oi();
        }
        oj(a) {
            if (a.g) {
                return;
            }
            let b = a.e != null && a.e.a;
            let c = a.a == null ? 0 : a.a.length;
            let d = (a.h - c) + 1;
            if (b && d > 0) {
            }
            else {
                d = 1;
            }
            this.ol(a.b, d, b, a.e);
            if (c > 0 && !b) {
                let e;
                for (let f = 0; f < c; f++) {
                    e = a.a[f];
                    this.ol(e, d, false, a.e);
                }
            }
            if (a.e != null) {
                a.e.a = false;
            }
        }
        c9(a) {
            let b = this.bs != null ? this.bs.mr : Rect.empty;
            let c = this.bs != null ? this.bs.m5 : Rect.empty;
            let d = new Rect(0, 0, 0, 1, 1);
            let e = this.lt(this.bi);
            let f = new ScalerParams(0, d, d, this.l8.ca, e);
            let g = new ScalerParams(0, d, d, this.ma.ca, e);
            let h = !b.isEmpty && !c.isEmpty && this.bz != null ? this.bz.indexOf(a) : -1;
            let i = this.l8 != null && this.mf != null && h < this.mf.count ? this.l8.dy(this.mf.item(h), f) : NaN;
            let j = this.ma != null && this.mh != null && h < this.mh.count ? this.ma.dy(this.mh.item(h), g) : NaN;
            if (!isNaN_(i)) {
                if (i < b.left + 0.1 * b.width) {
                    i = i + 0.4 * b.width;
                    b.x = i - 0.5 * b.width;
                }
                if (i > b.right - 0.1 * b.width) {
                    i = i - 0.4 * b.width;
                    b.x = i - 0.5 * b.width;
                }
            }
            if (!isNaN_(j)) {
                if (j < b.top + 0.1 * b.height) {
                    j = j + 0.4 * b.height;
                    b.y = j - 0.5 * b.height;
                }
                if (j > b.bottom - 0.1 * b.height) {
                    j = j - 0.4 * b.height;
                    b.y = j - 0.5 * b.height;
                }
            }
            if (this.bn != null) {
                this.bn.ap(this.bs, b, true);
            }
            return h >= 0;
        }
        ol(a, b, c, d) {
            let e = this.nr(b);
            let f = a.c;
            let g = this.nm;
            if (c) {
                let h = d.d;
                let i = d.b;
                let j = d.e;
                let k = d.c;
                if (this.mj) {
                    h = this.mr + this.mt * h;
                    i = this.mr + this.mt * i;
                    j = this.ms + this.mq * j;
                    k = this.ms + this.mq * k;
                }
                let l = truncate((this.m7 + this.m9 * (h - this.nb) / this.nd));
                let m = truncate((this.m7 + this.m9 * (i - this.nb) / this.nd));
                let n = truncate((this.m8 + this.m6 * (j - this.nc) / this.na));
                let o = truncate((this.m8 + this.m6 * (k - this.nc) / this.na));
                l = truncate(Math.floor(l));
                m = truncate(Math.floor(m));
                n = truncate(Math.floor(n));
                o = truncate(Math.floor(o));
                if (this.mi) {
                    l -= g;
                    m += g;
                    n -= g;
                    o += g;
                }
                let p = ((m - l) + 1) * ((o - n) + 1);
                let q = b / p;
                let r = q;
                for (let s = l; s <= m; s++) {
                    for (let t = n; t <= o; t++) {
                        this.ok(f, s, t, q, r);
                    }
                }
            }
            else {
                let u = a.a;
                let v = a.b;
                if (this.mj) {
                    u = this.mr + this.mt * u;
                    v = this.ms + this.mq * v;
                }
                let w = truncate((this.m7 + this.m9 * (u - this.nb) / this.nd));
                let x = truncate((this.m8 + this.m6 * (v - this.nc) / this.na));
                w = truncate(Math.floor(w));
                x = truncate(Math.floor(x));
                if (this.mi) {
                    let y = w - g;
                    let z = w + g;
                    let aa = x + g;
                    let ab = x - g;
                    let ac = ((z - y) + 1) * ((aa - ab) + 1);
                    let ad = b / ac;
                    let ae = ad;
                    for (let af = y; af <= z; af++) {
                        for (let ag = ab; ag <= aa; ag++) {
                            this.ok(f, af, ag, ad, ae);
                        }
                    }
                }
                else {
                    this.ok(f, w, x, b, 1);
                }
            }
        }
        nq(a, b) {
            return truncate((Math.floor(255 * b))) << 24 | truncate(Math.floor(b * (this.m2 + a * this.m5))) << 16 | truncate(Math.floor(b * (this.m1 + a * this.m4))) << 8 | truncate(Math.floor(b * (this.m0 + a * this.m3)));
        }
        nr(a) {
            return 255 << 24 | truncate(Math.floor((this.m2 + a * this.m5))) << 16 | truncate(Math.floor((this.m1 + a * this.m4))) << 8 | truncate(Math.floor((this.m0 + a * this.m3)));
        }
        ne(a) {
            return (a >> 24 & 255) / 255;
        }
        ok(a, b, c, d, e) {
            if (b < 0 || b >= this.nl || c < 0 || c >= this.nk) {
                return;
            }
            let f = (c * this.nl) + b;
            this.l4[f] = this.l4[f] + d;
            this.l1[f] = this.l1[f] + e;
            if (this.mk) {
                this._itemIndexes[f] = a + 1;
            }
            this.no += truncate(d);
        }
        oi() {
            let a = 0;
            let b = 0;
            let c = this.mw;
            let d = this.mv;
            let e = this.mu;
            let f = this.l4.length;
            let g = this.l4;
            let h = this.l1;
            let i = this.l3;
            let j = NaN;
            let k = NaN;
            let l = 0;
            let m = 0;
            for (let n = 0; n < f; n++) {
                a = g[n];
                if (a != 0) {
                    b = h[n];
                    if (a >= e) {
                        a = 1;
                    }
                    else if (a <= d) {
                        a = 0;
                    }
                    else {
                        a = (a - d) / (c);
                    }
                    if (b > 1) {
                        b = 1;
                    }
                    if (b < 0.2) {
                        b = 0.2;
                    }
                    if (j != a || k != b) {
                        l = this.nq(a, b);
                        j = a;
                        k = b;
                    }
                    i[m] = l >> 16 & 255;
                    i[m + 1] = l >> 8 & 255;
                    i[m + 2] = l & 255;
                    i[m + 3] = l >> 24 & 255;
                }
                m += 4;
            }
        }
        ob(a) {
            let b = a;
            b.b3();
        }
        bf() {
            return new HighDensityScatterSeriesView(this);
        }
        iv(a) {
            super.iv(a);
            this.l5 = a;
        }
        an(a) {
            if (a != null && a == this.l8 && this.mf != null) {
                return new AxisRange(this.mf.minimum, this.mf.maximum);
            }
            if (a != null && a == this.ma && this.mh != null) {
                return new AxisRange(this.mh.minimum, this.mh.maximum);
            }
            return null;
        }
        jt(a, b) {
            if (this.bs != null) {
                let c = this.getEffectiveViewport1(this.bi);
                this.mj = !c.isEmpty;
            }
            this.je(false);
        }
        ju(a, b) {
            this.je(false);
        }
        fp(a) {
            if (!this.mk || this._itemIndexes == null || this.bs == null || this.bz == null || this._itemIndexes.length != (this.nl * this.nk)) {
                return null;
            }
            let b = this.bs.mr;
            let c = (a.x - b.left) / b.width;
            let d = (a.y - b.top) / b.height;
            let e = truncate(Math.round(this.lz.left + (this.lz.width * c)));
            let f = truncate(Math.round(this.lz.top + (this.lz.height * d)));
            let g = this.nu(e, f);
            if (g < 0 || g > this._itemIndexes.length - 1) {
                return null;
            }
            let h = this._itemIndexes[g] - 1;
            if (h < 0 || h > this.bz.count) {
                return null;
            }
            return this.bz.item(h);
        }
        nu(a, b) {
            let c = (this.nl * b) + a;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            let d = 1;
            c = (this.nl * (b - d)) + a;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.nl * (b + d)) + a;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.nl * (b)) + a - 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.nl * (b)) + a + 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.nl * (b - d)) + a - 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.nl * (b + d)) + a + 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.nl * (b - d)) + a + 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            c = (this.nl * (b + d)) + a - 1;
            if (c > 0 && c < this._itemIndexes.length && this._itemIndexes[c] > 0) {
                return c;
            }
            return 0;
        }
        on(a, b, c) {
            this.l3 = a;
            this.nl = b;
            this.nk = c;
        }
        get_dq() {
            return true;
        }
        set_dq(a) {
            super.set_dq(a);
        }
        hw(a, b) {
            super.hw(a, b);
            this.l5.b4();
            if (this.bh != null) {
                this.bh.b4();
            }
            this.il();
        }
        jg(a, b) {
            super.jg(a, b);
            if (!this.dl) {
                this.bi.az(b);
                return;
            }
            this.bi.az(b);
            if (this.cc(this.bh)) {
                return;
            }
            let c = typeCast(HighDensityScatterSeriesView.$, this.bh);
            let d = new ScatterFrame();
            this.of(false, c);
            this.dl = false;
        }
        jd(a, b, c, d, e) {
            super.jd(a, b, c, d, e);
            let f = this.a0.a$h.item(d);
            let g = f;
            f.ay(c);
            if (this.cc(g)) {
                return;
            }
            if (this.md == null) {
                this.md = new ScatterFrame();
            }
            this.of(false, f);
        }
        hu() {
            super.hu();
            this.l8 = null;
            this.ma = null;
        }
    }
    HighDensityScatterSeries.$t = /*@__PURE__*/ markType(HighDensityScatterSeries, 'HighDensityScatterSeries', Series.$);
    HighDensityScatterSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, HighDensityScatterSeries, 'raisePropertyChanged', ['HeatMaximumColor:o0:op', [Color.$, null], 'HeatMaximum:nf:oq', [1, 50], 'HeatMinimumColor:o1:or', [Color.$, null], 'HeatMinimum:ng:os', [1, 0], 'PointExtent:ns:ot', [1, 1], 'ProgressiveLoad:mn:ou', [0, true], 'UseBruteForce:mo:ov', [0, false], 'XAxis:l8:ow', [NumericXAxis.$, null], 'XMemberPath:n4:ox', [2, null], 'YAxis:ma:oy', [NumericYAxis.$, null], 'YMemberPath:n8:oz', [2, null]]);
    return HighDensityScatterSeries;
})();
/**
 * @hidden
 */
export let HighDensityScatterSeriesView = /*@__PURE__*/ (() => {
    class HighDensityScatterSeriesView extends SeriesView {
        constructor(a) {
            super(a);
            this.bw = null;
            this.bu = null;
            this.b2 = 0;
            this.b1 = 0;
            this.bz = null;
            this.b0 = null;
            this.bx = null;
            this.bw = a;
        }
        ap() {
            super.ap();
            if (!this.n) {
                this.e.eu = 4;
                this.bw.o1 = Color.u(255, 0, 0, 0);
                this.bw.o0 = Color.u(255, 255, 0, 0);
            }
        }
        b7() {
            this.bw.on(this.bu, this.b2, this.b1);
        }
        b3() {
            if (this.bz == null) {
                this.bz = this.e.e4.createElement("canvas");
                let a = this.e.e4.get2DCanvasContext(this.bz);
                this.bx = new RenderingContext(new CanvasViewRenderer(), a);
            }
            let b;
            if (this.m) {
                b = this.br;
            }
            else {
                b = this.e.bs.mw();
            }
            let c = truncate(Math.round(b.left));
            let d = truncate(Math.round(b.top));
            let e = truncate(Math.round(b.width));
            let f = truncate(Math.round(b.height));
            let g = this.b2;
            let h = this.b1;
            this.b2 = e;
            this.b1 = f;
            if (g != this.b2 || h != this.b1 || this.bu == null) {
                this.bz.setAttribute("width", e.toString());
                this.bz.setAttribute("height", f.toString());
                this.b0 = this.bx.g().getImageData(0, 0, e, f);
                let imageDataArray_ = this.b0.data;
                this.bu = imageDataArray_;
            }
            this.bw.on(this.bu, this.b2, this.b1);
        }
        bv() {
            return this.bu;
        }
        b6() {
            let a = truncate(Math.round(this.br.left));
            let b = truncate(Math.round(this.br.left));
            let c = truncate(Math.round(this.br.width));
            let d = truncate(Math.round(this.br.height));
            this.bx.g().putImageData(this.b0, 0, 0);
            this.an();
        }
        b5(a) {
            if (this.e.e4 != null) {
                this.e.e4.setTimeout(a, 0);
            }
            else {
                window.setTimeout(a, 0);
            }
        }
        a3(a, b) {
            super.a3(a, b);
            if (b) {
                if (!this.bw.c7) {
                    return;
                }
                let c = new Rectangle();
                c.n = this.br.left;
                c.o = this.br.top;
                c.width = this.br.width;
                c.height = this.br.height;
                c._fill = this.bl();
                a.v(c);
                return;
            }
            if (this.bz == null) {
                return;
            }
            let d = truncate(Math.round(this.br.left));
            let e = truncate(Math.round(this.br.top));
            let f = truncate(Math.round(this.br.width));
            let g = truncate(Math.round(this.br.height));
            this.h.n(this.bz.getNativeElement(), this.e._opacity, d, e, f, g, d, e, f, g);
        }
        by(a, b) {
            return Color.e(toNullable(Color.$, a), toNullable(Color.$, null)) && Color.e(toNullable(Color.$, b), toNullable(Color.$, null));
        }
        b4() {
            if (this.bu != null) {
                for (let a = 0; a < this.bu.length; a++) {
                    this.bu[a] = 0;
                }
                this.b6();
            }
        }
        ai(a) {
            super.ai(a);
            if (this.bu == null) {
                this.e.a2.exportSeriesPixelsData(a, null, this.b2, this.b1);
                return;
            }
            let b = new Array(intDivide(this.bu.length, 4));
            let c;
            for (let d = 0; d < intDivide(this.bu.length, 4); d++) {
                c = d * 4;
                b[d] = this.bu[c + 3] << 24 | this.bu[c] << 16 | this.bu[c + 1] << 8 | this.bu[c + 2];
            }
            this.e.a2.exportSeriesPixelsData(a, b, this.b2, this.b1);
        }
    }
    HighDensityScatterSeriesView.$t = /*@__PURE__*/ markType(HighDensityScatterSeriesView, 'HighDensityScatterSeriesView', SeriesView.$);
    return HighDensityScatterSeriesView;
})();
//# sourceMappingURL=HighDensityScatterSeries_combined.js.map
